//----------------------------------------------------------------------------
//  System.Printing.dll: System.Printing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Printing
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Printing;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.ReachFramework,
  DDN.PresentationFramework,
  DDN.System.Windows.Xps,
  DDN.System.Windows.Xps.Packaging;

type

{ enums }

  //-------------namespace: System.Printing----------------
  ///<summary>Specifies attributes of print queues.</summary>
  [DNTypeName('System.Printing.EnumeratedPrintQueueTypes')]
  DNEnumeratedPrintQueueTypes = type Integer;
  DNEnumeratedPrintQueueTypesHelper = record helper for DNEnumeratedPrintQueueTypes
  public const
    ///<summary>A print queue that allows multiple print jobs in the queue.</summary>
    Queued = 1;
    ///<summary>A print queue that sends a print job directly to printing instead of spooling the job first.</summary>
    DirectPrinting = 2;
    ///<summary>A print queue that is shared.</summary>
    Shared = 8;
    ///<summary>A print queue that is connected to the specified print server.</summary>
    Connections = 16;
    ///<summary>A print queue that is installed as a local print queue on the specified print server.</summary>
    Local = 64;
    ///<summary>A print queue that holds its print jobs when the document and printer configurations do not match.</summary>
    EnableDevQuery = 128;
    ///<summary>A print queue that keeps jobs in the queue after printing them.</summary>
    KeepPrintedJobs = 256;
    ///<summary>A print queue that can work offline.</summary>
    WorkOffline = 1024;
    ///<summary>A print queue for a printer that has bidirectional communication enabled.</summary>
    EnableBidi = 2048;
    ///<summary>A print queue that spools only raw data.</summary>
    RawOnly = 4096;
    ///<summary>A print queue that is visible in the directory of printers.</summary>
    PublishedInDirectoryServices = 8192;
    ///<summary>A print queue that services a fax machine.</summary>
    Fax = 16384;
    ///<summary>A print queue that is installed by the redirection feature in Terminal Services.</summary>
    TerminalServer = 32768;
    ///<summary>A print queue that was installed by using the Push Printer Connections user policy. See Remarks.</summary>
    PushedUserConnection = 131072;
    ///<summary>A print queue that was installed by using the Push Printer Connections computer policy. See Remarks.</summary>
    PushedMachineConnection = 262144;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the properties of a <see cref="T:System.Printing.LocalPrintServer" />
  ///  object that are initialized when it is constructed.</summary>
  [DNTypeName('System.Printing.LocalPrintServerIndexedProperty')]
  DNLocalPrintServerIndexedProperty = type Integer;
  DNLocalPrintServerIndexedPropertyHelper = record helper for DNLocalPrintServerIndexedProperty
  public const
    ///<summary>The property that specifies the path to the folder where spool jobs are located as temporary files.</summary>
    DefaultSpoolDirectory = 0;
    ///<summary>The property that specifies the priority of the thread that manages port I/O.</summary>
    PortThreadPriority = 1;
    ///<summary>The property that specifies the default priority for the thread that manages port I/0.</summary>
    DefaultPortThreadPriority = 2;
    ///<summary>The property that specifies the priority of the scheduler.</summary>
    SchedulerPriority = 3;
    ///<summary>The property that specifies the default priority for the scheduler.</summary>
    DefaultSchedulerPriority = 4;
    ///<summary>The property that specifies whether a printer error causes the local print server to beep.</summary>
    BeepEnabled = 5;
    ///<summary>The property that specifies whether the client computer or the print server receives notifications that a job is finished.</summary>
    NetPopup = 6;
    ///<summary>The property that specifies the kind of event logging that is provided by the local print server.</summary>
    EventLog = 7;
    ///<summary>The property that specifies the major version of the operating system.</summary>
    MajorVersion = 8;
    ///<summary>The property that specifies the minor version of the operating system.</summary>
    MinorVersion = 9;
    ///<summary>The property that specifies the wait time before jobs can be restarted when printer pooling is being used.</summary>
    RestartJobOnPoolTimeout = 10;
    ///<summary>The property that specifies whether users can restart jobs when printer pooling is being used.</summary>
    RestartJobOnPoolEnabled = 11;
    ///<summary>The property that specifies the default print queue for the local print server.</summary>
    DefaultPrintQueue = 12;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies a non-numerical priority for a print job relative to other print jobs in the print queue. </summary>
  [DNTypeName('System.Printing.PrintJobPriority')]
  DNPrintJobPriority = type Integer;
  DNPrintJobPriorityHelper = record helper for DNPrintJobPriority
  public const
    ///<summary>A job that has no non-numerical priority.</summary>
    None = 0;
    ///<summary>A job that has the lowest priority.</summary>
    Minimum = 1;
    ///<summary>A job that has the <see cref="P:System.Printing.PrintQueue.DefaultPriority" />
    ///  for the <see cref="T:System.Printing.PrintQueueStream" />
    ///  .</summary>
    Default_ = 1;
    ///<summary>A job that has the highest priority.</summary>
    Maximum = 99;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the current status of a print job in a print queue.</summary>
  [DNTypeName('System.Printing.PrintJobStatus')]
  DNPrintJobStatus = type Integer;
  DNPrintJobStatusHelper = record helper for DNPrintJobStatus
  public const
    ///<summary>The print job has no specified state.</summary>
    None = 0;
    ///<summary>The print job is paused.</summary>
    Paused = 1;
    ///<summary>The print job is in an error state.</summary>
    Error = 2;
    ///<summary>The print job is in the process of being deleted.</summary>
    Deleting = 4;
    ///<summary>The print job is spooling.</summary>
    Spooling = 8;
    ///<summary>The print job is now printing.</summary>
    Printing = 16;
    ///<summary>The printer is offline.</summary>
    Offline = 32;
    ///<summary>The printer is out of the required paper size.</summary>
    PaperOut = 64;
    ///<summary>The print job printed. </summary>
    Printed = 128;
    ///<summary>The print job was deleted from the queue, typically after printing.</summary>
    Deleted = 256;
    ///<summary>An error condition, possibly on a print job that precedes this one in the queue, blocked the print job.</summary>
    Blocked = 512;
    ///<summary>The printer requires user action to fix an error condition.  </summary>
    UserIntervention = 1024;
    ///<summary>The print job was blocked but has restarted.</summary>
    Restarted = 2048;
    ///<summary>The print job is complete, including any post-printing processing. </summary>
    Completed = 4096;
    ///<summary>The print job is retained in the print queue after printing.</summary>
    Retained = 8192;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether the print job uses XML Paper Specification (XPS). </summary>
  [DNTypeName('System.Printing.PrintJobType')]
  DNPrintJobType = type Integer;
  DNPrintJobTypeHelper = record helper for DNPrintJobType
  public const
    ///<summary>Not specified whether the print job is XPS.</summary>
    None = 0;
    ///<summary>An XPS print job. </summary>
    Xps = 1;
    ///<summary>A non-XPS print job.</summary>
    Legacy = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the attributes of a print queue and its printer.</summary>
  [DNTypeName('System.Printing.PrintQueueAttributes')]
  DNPrintQueueAttributes = type Integer;
  DNPrintQueueAttributesHelper = record helper for DNPrintQueueAttributes
  public const
    ///<summary>No print queue attribute is specified.</summary>
    None = 0;
    ///<summary>The print queue can hold more than one print job at a time.</summary>
    Queued = 1;
    ///<summary>The print queue sends print jobs immediately to the printer instead of spooling jobs first.</summary>
    Direct = 2;
    ///<summary>The print queue is shared.</summary>
    Shared = 8;
    ///<summary>The print queue is not visible in the application UI.</summary>
    Hidden = 32;
    ///<summary>The queue holds its jobs when the document and printer configurations do not match.</summary>
    EnableDevQuery = 128;
    ///<summary>The printer language file is not deleted after the file prints.</summary>
    KeepPrintedJobs = 256;
    ///<summary>The queue prints a fully spooled job before it prints higher priority jobs that are still spooling.</summary>
    ScheduleCompletedJobsFirst = 512;
    ///<summary>The printer's bidirectional communication is enabled.</summary>
    EnableBidi = 2048;
    ///<summary>The print queue cannot use enhanced metafile (EMF) printing.</summary>
    RawOnly = 4096;
    ///<summary>The print queue is visible to other network users.</summary>
    Published_ = 8192;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the properties that are initialized when a <see cref="T:System.Printing.PrintQueue" />
  ///  object is constructed.</summary>
  [DNTypeName('System.Printing.PrintQueueIndexedProperty')]
  DNPrintQueueIndexedProperty = type Integer;
  DNPrintQueueIndexedPropertyHelper = record helper for DNPrintQueueIndexedProperty
  public const
    ///<summary>The name of the print queue.</summary>
    Name = 0;
    ///<summary>The share name of the queue.</summary>
    ShareName = 1;
    ///<summary>A comment specific to the print queue.</summary>
    Comment = 2;
    ///<summary>The location of the physical printer.</summary>
    Location = 3;
    ///<summary>The description of the queue.</summary>
    Description = 4;
    ///<summary>The priority of the print queue relative to other print queues serving the same printer.</summary>
    Priority = 5;
    ///<summary>The default priority. </summary>
    DefaultPriority = 6;
    ///<summary>The time of day that the queue begins printing its jobs.</summary>
    StartTimeOfDay = 7;
    ///<summary>The time of day that the queue stops printing jobs.</summary>
    UntilTimeOfDay = 8;
    ///<summary>The speed of the print queue.</summary>
    AveragePagesPerMinute = 9;
    ///<summary>The number of jobs in the print queue.</summary>
    NumberOfJobs = 10;
    ///<summary>The attributes of the print queue.</summary>
    QueueAttributes = 11;
    ///<summary>The printer driver for the queue.</summary>
    QueueDriver = 12;
    ///<summary>The printer port used by the print queue.</summary>
    QueuePort = 13;
    ///<summary>The print processor for the print queue.</summary>
    QueuePrintProcessor = 14;
    ///<summary>The host print server.</summary>
    HostingPrintServer = 15;
    ///<summary>The current status of the queue.</summary>
    QueueStatus = 16;
    ///<summary>The path to the separator file.</summary>
    SeparatorFile = 17;
    ///<summary>The print ticket for the user.</summary>
    UserPrintTicket = 18;
    ///<summary>The default print ticket object.</summary>
    DefaultPrintTicket = 19;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the status of a print queue or its printer. </summary>
  [DNTypeName('System.Printing.PrintQueueStatus')]
  DNPrintQueueStatus = type Integer;
  DNPrintQueueStatusHelper = record helper for DNPrintQueueStatus
  public const
    ///<summary>Status is not specified.</summary>
    None = 0;
    ///<summary>The print queue is paused.</summary>
    Paused = 1;
    ///<summary>The printer cannot print due to an error condition.</summary>
    Error = 2;
    ///<summary>The print queue is deleting a print job.</summary>
    PendingDeletion = 4;
    ///<summary>The paper in the printer is jammed.</summary>
    PaperJam = 8;
    ///<summary>The printer does not have, or is out of, the type of paper needed for the current print job.</summary>
    PaperOut = 16;
    ///<summary>The printer is waiting for a user to place print media in the manual feed bin.</summary>
    ManualFeed = 32;
    ///<summary>The paper in the printer is causing an unspecified error condition.</summary>
    PaperProblem = 64;
    ///<summary>The printer is offline.</summary>
    Offline = 128;
    ///<summary>The printer is exchanging data with the print server.</summary>
    IOActive = 256;
    ///<summary>The printer is busy.</summary>
    Busy = 512;
    ///<summary>The device is printing. </summary>
    Printing = 1024;
    ///<summary>The printer's output bin is full.</summary>
    OutputBinFull = 2048;
    ///<summary>Status information is unavailable.</summary>
    NotAvailable = 4096;
    ///<summary>The printer is waiting for a print job.</summary>
    Waiting = 8192;
    ///<summary>The device is doing some kind of work, which need not be printing if the device is a combination printer, fax machine, and scanner.</summary>
    Processing = 16384;
    ///<summary>The printer is initializing.</summary>
    Initializing = 32768;
    ///<summary>The printer is warming up.</summary>
    WarmingUp = 65536;
    ///<summary>Only a small amount of toner remains in the printer.</summary>
    TonerLow = 131072;
    ///<summary>The printer is out of toner.</summary>
    NoToner = 262144;
    ///<summary>The printer is unable to print the current page.</summary>
    PagePunt = 524288;
    ///<summary>The printer requires user action to correct an error condition.</summary>
    UserIntervention = 1048576;
    ///<summary>The printer has no available memory.</summary>
    OutOfMemory = 2097152;
    ///<summary>A door on the printer is open.</summary>
    DoorOpen = 4194304;
    ///<summary>The printer is in an error state.</summary>
    ServerUnknown = 8388608;
    ///<summary>The printer is in power save mode.</summary>
    PowerSave = 16777216;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the intended meaning of a <see cref="T:System.Printing.PrintQueueStringProperty" />
  ///  .</summary>
  [DNTypeName('System.Printing.PrintQueueStringPropertyType')]
  DNPrintQueueStringPropertyType = type Integer;
  DNPrintQueueStringPropertyTypeHelper = record helper for DNPrintQueueStringPropertyType
  public const
    ///<summary>The location of the physical printer.</summary>
    Location = 0;
    ///<summary>A comment about the print queue.</summary>
    Comment = 1;
    ///<summary>The share name of the print queue.</summary>
    ShareName = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the types of events that can be logged by a <see cref="T:System.Printing.PrintServer" />
  ///  .</summary>
  [DNTypeName('System.Printing.PrintServerEventLoggingTypes')]
  DNPrintServerEventLoggingTypes = type Integer;
  DNPrintServerEventLoggingTypesHelper = record helper for DNPrintServerEventLoggingTypes
  public const
    ///<summary>No events.</summary>
    None = 0;
    ///<summary>Successful printing events.</summary>
    LogPrintingSuccessEvents = 1;
    ///<summary>Error events for printing.</summary>
    LogPrintingErrorEvents = 2;
    ///<summary>Warning events.</summary>
    LogPrintingWarningEvents = 3;
    ///<summary>Information events for printing.</summary>
    LogPrintingInformationEvents = 4;
    ///<summary>All printing events.</summary>
    LogAllPrintingEvents = 5;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the properties of a <see cref="T:System.Printing.PrintServer" />
  ///  object that are initialized when it is constructed.</summary>
  [DNTypeName('System.Printing.PrintServerIndexedProperty')]
  DNPrintServerIndexedProperty = type Integer;
  DNPrintServerIndexedPropertyHelper = record helper for DNPrintServerIndexedProperty
  public const
    ///<summary>The property that specifies the path to the folder where spool jobs are located as temporary files.</summary>
    DefaultSpoolDirectory = 0;
    ///<summary>The property that specifies the priority of the thread that manages port I/O.</summary>
    PortThreadPriority = 1;
    ///<summary>The property that specifies the default priority for the thread that manages port I/0.</summary>
    DefaultPortThreadPriority = 2;
    ///<summary>The property that specifies the priority of the scheduler.</summary>
    SchedulerPriority = 3;
    ///<summary>The property that specifies the default thread priority for the scheduling of print jobs.</summary>
    DefaultSchedulerPriority = 4;
    ///<summary>The property that specifies whether a printer error causes the print server to beep.</summary>
    BeepEnabled = 5;
    ///<summary>The property that specifies whether the client computer or the print server receives notifications that a job is finished.</summary>
    NetPopup = 6;
    ///<summary>The property that specifies the kind of event logging that is provided by the print server.</summary>
    EventLog = 7;
    ///<summary>The property that specifies the major version of the operating system.</summary>
    MajorVersion = 8;
    ///<summary>The property that specifies the minor version of the operating system.</summary>
    MinorVersion = 9;
    ///<summary>The property that specifies how long to wait before restarting a print job when printer pooling is being used.</summary>
    RestartJobOnPoolTimeout = 10;
    ///<summary>The property that specifies whether users can restart print jobs when printer pooling is being used.</summary>
    RestartJobOnPoolEnabled = 11;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the different access rights (or levels of access) for printing objects.</summary>
  [DNTypeName('System.Printing.PrintSystemDesiredAccess')]
  DNPrintSystemDesiredAccess = type Integer;
  DNPrintSystemDesiredAccessHelper = record helper for DNPrintSystemDesiredAccess
  public const
    ///<summary>No access.</summary>
    None = 0;
    ///<summary>The right to list the queues on the print server.</summary>
    EnumerateServer = 131074;
    ///<summary>The right to add print jobs to the queue and to delete and enumerate one's own jobs.</summary>
    UsePrinter = 131080;
    ///<summary>The right to perform all administrative tasks for the print server. This access level does not include <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministratePrinter" />
    ///  rights for the print queues hosted by the server.</summary>
    AdministrateServer = 983041;
    ///<summary>The right to perform all administrative tasks for the print queue, including the right to pause and resume any print job; and the right to delete all jobs from the queue. This access level also includes all rights under <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</summary>
    AdministratePrinter = 983052;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether the properties of an object are initialized when the object loads.</summary>
  [DNTypeName('System.Printing.PrintSystemObjectLoadMode')]
  DNPrintSystemObjectLoadMode = type Integer;
  DNPrintSystemObjectLoadModeHelper = record helper for DNPrintSystemObjectLoadMode
  public const
    ///<summary>Not specified whether the properties are initialized. </summary>
    None = 0;
    ///<summary>The properties are not initialized during loading.</summary>
    LoadUninitialized = 1;
    ///<summary>The properties are initialized during loading.</summary>
    LoadInitialized = 2;
  end;




type


{ declares }

  DNPrintPropertyDictionary = interface; // type: System.Printing.IndexedProperties.PrintPropertyDictionary, namespace: System.Printing.IndexedProperties
  DNPrintSystemObjectPropertiesChangedEventArgs = interface; // type: System.Printing.PrintSystemObjectPropertiesChangedEventArgs, namespace: System.Printing
  DNPrintSystemObjectPropertyChangedEventArgs = interface; // type: System.Printing.PrintSystemObjectPropertyChangedEventArgs, namespace: System.Printing
  DNPrintQueueStream = interface; // type: System.Printing.PrintQueueStream, namespace: System.Printing
  DNPrintProperty = interface; // type: System.Printing.IndexedProperties.PrintProperty, namespace: System.Printing.IndexedProperties
  DNPrintBooleanProperty = interface; // type: System.Printing.IndexedProperties.PrintBooleanProperty, namespace: System.Printing.IndexedProperties
  DNPrintByteArrayProperty = interface; // type: System.Printing.IndexedProperties.PrintByteArrayProperty, namespace: System.Printing.IndexedProperties
  DNPrintDateTimeProperty = interface; // type: System.Printing.IndexedProperties.PrintDateTimeProperty, namespace: System.Printing.IndexedProperties
  DNPrintDriverProperty = interface; // type: System.Printing.IndexedProperties.PrintDriverProperty, namespace: System.Printing.IndexedProperties
  DNPrintInt32Property = interface; // type: System.Printing.IndexedProperties.PrintInt32Property, namespace: System.Printing.IndexedProperties
  DNPrintJobPriorityProperty = interface; // type: System.Printing.IndexedProperties.PrintJobPriorityProperty, namespace: System.Printing.IndexedProperties
  DNPrintJobStatusProperty = interface; // type: System.Printing.IndexedProperties.PrintJobStatusProperty, namespace: System.Printing.IndexedProperties
  DNPrintPortProperty = interface; // type: System.Printing.IndexedProperties.PrintPortProperty, namespace: System.Printing.IndexedProperties
  DNPrintProcessorProperty = interface; // type: System.Printing.IndexedProperties.PrintProcessorProperty, namespace: System.Printing.IndexedProperties
  DNPrintQueueAttributeProperty = interface; // type: System.Printing.IndexedProperties.PrintQueueAttributeProperty, namespace: System.Printing.IndexedProperties
  DNPrintQueueProperty = interface; // type: System.Printing.IndexedProperties.PrintQueueProperty, namespace: System.Printing.IndexedProperties
  DNPrintQueueStatusProperty = interface; // type: System.Printing.IndexedProperties.PrintQueueStatusProperty, namespace: System.Printing.IndexedProperties
  DNPrintServerLoggingProperty = interface; // type: System.Printing.IndexedProperties.PrintServerLoggingProperty, namespace: System.Printing.IndexedProperties
  DNPrintServerProperty = interface; // type: System.Printing.IndexedProperties.PrintServerProperty, namespace: System.Printing.IndexedProperties
  DNPrintStreamProperty = interface; // type: System.Printing.IndexedProperties.PrintStreamProperty, namespace: System.Printing.IndexedProperties
  DNPrintStringProperty = interface; // type: System.Printing.IndexedProperties.PrintStringProperty, namespace: System.Printing.IndexedProperties
  DNPrintSystemTypeProperty = interface; // type: System.Printing.IndexedProperties.PrintSystemTypeProperty, namespace: System.Printing.IndexedProperties
  DNPrintThreadPriorityProperty = interface; // type: System.Printing.IndexedProperties.PrintThreadPriorityProperty, namespace: System.Printing.IndexedProperties
  DNPrintTicketProperty = interface; // type: System.Printing.IndexedProperties.PrintTicketProperty, namespace: System.Printing.IndexedProperties
  DNPrintDocumentImageableArea = interface; // type: System.Printing.PrintDocumentImageableArea, namespace: System.Printing
  DNPrintJobSettings = interface; // type: System.Printing.PrintJobSettings, namespace: System.Printing
  DNPrintQueueStringProperty = interface; // type: System.Printing.PrintQueueStringProperty, namespace: System.Printing
  DNPrintSystemObject = interface; // type: System.Printing.PrintSystemObject, namespace: System.Printing
  DNPrintFilter = interface; // type: System.Printing.PrintFilter, namespace: System.Printing
  DNPrintDriver = interface; // type: System.Printing.PrintDriver, namespace: System.Printing
  DNPrintProcessor = interface; // type: System.Printing.PrintProcessor, namespace: System.Printing
  DNPrintPort = interface; // type: System.Printing.PrintPort, namespace: System.Printing
  DNPrintQueue = interface; // type: System.Printing.PrintQueue, namespace: System.Printing
  DNPrintServer = interface; // type: System.Printing.PrintServer, namespace: System.Printing
  DNLocalPrintServer = interface; // type: System.Printing.LocalPrintServer, namespace: System.Printing
  DNPrintSystemJobInfo = interface; // type: System.Printing.PrintSystemJobInfo, namespace: System.Printing
  DNPrintSystemObjects = interface; // type: System.Printing.PrintSystemObjects, namespace: System.Printing
  DNPrintJobInfoCollection = interface; // type: System.Printing.PrintJobInfoCollection, namespace: System.Printing
  DNPrintQueueCollection = interface; // type: System.Printing.PrintQueueCollection, namespace: System.Printing


{ objects }

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintPropertyDictionaryClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{C8321301-CD28-5D2C-90FE-9759DA988651}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  class. </summary>
    {class} function init: DNPrintPropertyDictionary;

  end;

  ///<summary>Represents a collection of properties and values that are associated with an object in the <see cref="N:System.Printing" />
  ///  namespace.</summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintPropertyDictionary')]
  DNPrintPropertyDictionary = interface(DDN.mscorlib.DNHashtable)
  ['{35D0C565-A93C-3961-9AE8-A3A16C051876}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    ///<summary>Adds the specified object (of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  ) into the dictionary.</summary>
    ///  <param name="attributeValue">An object (of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  ) that represents a property of a printing system hardware or software component.</param>
    procedure Add(attributeValue: DNPrintProperty); overload;
    ///<summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  with the data that is needed to serialize the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  .</summary>
    ///  <param name="info">Stores all the data that is used to serialize the object.</param>
    ///  <param name="context">Describes the context of the serialized stream, including the source and the destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>Gets the object (of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  ) that represents the specified property.</summary>
    ///  <param name="attribName">The name of the property that is represented by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  .</param>
    ///<returns>An object of a class that is derived from the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  .</returns>
    function GetProperty(attribName: string): DNPrintProperty;
    ///<summary>Sets the value of the specified attribute to an object of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  .</summary>
    ///  <param name="attribName">The name of the attribute.</param>
    ///  <param name="attribValue">An object of a type that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="attribName" />
    ///  is already in the dictionary and it already has the value <paramref name="attribValue" />
    ///  .</exception>
    procedure SetProperty(attribName: string; attribValue: DNPrintProperty);
    ///<summary>Releases all the resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  . </summary>
    procedure Dispose;
    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    procedure Clear;
    function Clone: DDN.mscorlib.DNObject;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNPrintPropertyDictionary = class(TDNGenericImport<DNPrintPropertyDictionaryClass, DNPrintPropertyDictionary>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemObjectPropertiesChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B9B1D768-C687-521F-94FD-F887A36D4730}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObjectPropertiesChangedEventArgs" />
    ///  class.</summary>
    ///  <param name="events">A collection of strings, each of which identifies a changed property.</param>
    {class} function init(events: DDN.System.DNStringCollection): DNPrintSystemObjectPropertiesChangedEventArgs;

  end;

  ///<summary>Provides data for a PropertiesChanged event, which you must create.</summary>
  [DNTypeName('System.Printing.PrintSystemObjectPropertiesChangedEventArgs')]
  DNPrintSystemObjectPropertiesChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A190E5AB-D048-3873-A91A-F56718BE248E}']
  { getters & setters } 

    function get_PropertiesNames: DDN.System.DNStringCollection;

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjectPropertiesChangedEventArgs" />
    ///  object.</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of the names of the changed properties.</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  of property names.</returns>
    property PropertiesNames: DDN.System.DNStringCollection read get_PropertiesNames;
  end;

  TDNPrintSystemObjectPropertiesChangedEventArgs = class(TDNGenericImport<DNPrintSystemObjectPropertiesChangedEventArgsClass, DNPrintSystemObjectPropertiesChangedEventArgs>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemObjectPropertyChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{C25C35E3-1A7A-501E-8EAB-1607C91A2866}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObjectPropertyChangedEventArgs" />
    ///  class.</summary>
    ///  <param name="eventName">The name of the property that changed.</param>
    {class} function init(eventName: string): DNPrintSystemObjectPropertyChangedEventArgs;

  end;

  ///<summary>Provides data for a PropertyChanged event, which you must create.</summary>
  [DNTypeName('System.Printing.PrintSystemObjectPropertyChangedEventArgs')]
  DNPrintSystemObjectPropertyChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{88DF1A0B-45D9-37D4-B0D0-3DBB96F956D9}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjectPropertyChangedEventArgs" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property that changed.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that holds the property name.</returns>
    property PropertyName: string read get_PropertyName;
  end;

  TDNPrintSystemObjectPropertyChangedEventArgs = class(TDNGenericImport<DNPrintSystemObjectPropertyChangedEventArgsClass, DNPrintSystemObjectPropertyChangedEventArgs>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{C4B32F22-7FBC-54B9-A991-6CCA2E49DB58}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStream" />
    ///  class for the specified print job that is hosted in the specified <see cref="T:System.Printing.PrintQueue" />
    ///  . </summary>
    ///  <param name="printQueue">The <see cref="T:System.Printing.PrintQueue" />
    ///  that hosts the print job that provides the content of the stream.</param>
    ///  <param name="printJobName">The name of the print job that provides the content of the stream.</param>
    {class} function init(printQueue: DNPrintQueue; printJobName: string): DNPrintQueueStream; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStream" />
    ///  class for the specified print job that is hosted in the specified <see cref="T:System.Printing.PrintQueue" />
    ///  , with an indication of whether data in the <see cref="T:System.Printing.PrintQueueStream" />
    ///  should be committed when the stream is closed. </summary>
    ///  <param name="printQueue">The <see cref="T:System.Printing.PrintQueue" />
    ///  that hosts the print job that provides the content of the stream.</param>
    ///  <param name="printJobName">The name of the print job that provides the content of the stream.</param>
    ///  <param name="commitDataOnClose"><see langword="true" />
    ///  to commit data in the <see cref="T:System.Printing.PrintQueueStream" />
    ///  when the <see cref="M:System.Printing.PrintQueueStream.Close" />
    ///  method is called; otherwise,<see langword=" false" />
    ///  .</param>
    {class} function init(printQueue: DNPrintQueue; printJobName: string; commitDataOnClose: Boolean): DNPrintQueueStream; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStream" />
    ///  class for the specified print job that is hosted in the specified <see cref="T:System.Printing.PrintQueue" />
    ///  , with the specified settings and an indication of whether data in the <see cref="T:System.Printing.PrintQueueStream" />
    ///  should be committed when the stream is closed.</summary>
    ///  <param name="printQueue">The <see cref="T:System.Printing.PrintQueue" />
    ///  that hosts the print job that provides the content of the stream.</param>
    ///  <param name="printJobName">The name of the print job that provides the content of the stream.</param>
    ///  <param name="commitDataOnClose"><see langword="true" />
    ///  to commit data in the <see cref="T:System.Printing.PrintQueueStream" />
    ///  when the <see cref="M:System.Printing.PrintQueueStream.Close" />
    ///  method is called; otherwise,<see langword=" false" />
    ///  .</param>
    ///  <param name="printTicket">The settings of the print job.</param>
    {class} function init(printQueue: DNPrintQueue; printJobName: string; commitDataOnClose: Boolean; printTicket: DDN.ReachFramework.DNPrintTicket): DNPrintQueueStream; overload;

  end;

  ///<summary>A stream that represents a spooled print job in a print queue.</summary>
  [DNTypeName('System.Printing.PrintQueueStream')]
  DNPrintQueueStream = interface(DDN.mscorlib.DNStream)
  ['{21C8E2F4-A074-3A09-BB57-74E34A0A4A97}']
  { getters & setters } 

    function get_JobIdentifier: Int32;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_Length: Int64;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_CanRead: Boolean;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>Reads a sequence of bytes from the stream and advances the read/write position in the stream by the number of bytes that were read.</summary>
    ///  <param name="buffer">An array of bytes. </param>
    ///  <param name="offset">The zero-based byte offset in the buffer where you want to begin storing the data that is read from the stream.</param>
    ///  <param name="count">The maximum number of bytes to be read from the stream.</param>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that holds the total number of bytes that are read into the buffer. </returns>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>Clears all the buffers for this stream and writes any buffered data to the underlying device.</summary>
    procedure Flush;
    ///<summary>Sets the read/write position within the stream.</summary>
    ///  <param name="offset">A byte offset that is relative to the origin parameter.</param>
    ///  <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" />
    ///  that indicates the reference point that is used to obtain the new position.</param>
    ///<returns>An <see cref="T:System.Int64" />
    ///  that represents the new read/write position.</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>Closes the stream and releases any resources, such as sockets and file handles, that are associated with it.</summary>
    procedure Close;
    ///<summary>Sets the length of the stream.</summary>
    ///  <param name="value">The needed length, in bytes, of the current stream.</param>
    procedure SetLength(value: Int64);
    ///<summary>Begins an asynchronous write operation. </summary>
    ///  <param name="buffer">The buffer from which to write data.</param>
    ///  <param name="offset">The byte offset in the buffer from which to begin writing.</param>
    ///  <param name="count">The maximum number of bytes to write.</param>
    ///  <param name="callback">An asynchronous callback, which is called when the writing operation is complete.</param>
    ///  <param name="state">A user-provided object that distinguishes this asynchronous writing request from other requests.</param>
    ///<returns>An <see cref="T:System.IAsyncResult" />
    ///  that represents the asynchronous write, which might still be pending.</returns>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>Ends an asynchronous write operation.</summary>
    ///  <param name="asyncResult">A reference to the pending asynchronous I/O request.</param>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>Writes a sequence of bytes to the stream and advances the read/write position in the stream by the number of bytes that are written.</summary>
    ///  <param name="buffer">An array of bytes from which to copy to the stream.</param>
    ///  <param name="offset">The zero-based byte offset in the <paramref name="buffer" />
    ///  where you want to begin copying bytes to the stream.</param>
    ///  <param name="count">The number of bytes to write to the stream.</param>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>Enables the <see cref="T:System.Printing.PrintQueueStream" />
    ///  to respond to the packaging progress by handling the <see cref="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent" />
    ///  . </summary>
    ///  <param name="sender">The source of the event.</param>
    ///  <param name="e">The event data.</param>
    procedure HandlePackagingProgressEvent(sender: DDN.mscorlib.DNObject; e: DDN.System.Windows.Xps.Packaging.DNPackagingProgressEventArgs);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the ID number of the print job.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that represents an ID number.</returns>
    property JobIdentifier: Int32 read get_JobIdentifier;
    ///<summary>Gets or sets the current read/write position in the stream.</summary>
    ///<returns>An <see cref="T:System.Int64" />
    ///  that represents the current position in the stream.</returns>
    property Position: Int64 read get_Position write set_Position;
    ///<summary>Gets the length of the stream in bytes.</summary>
    ///<returns>An <see cref="T:System.Int64" />
    ///  that represents the length of the stream in bytes.</returns>
    property Length: Int64 read get_Length;
    ///<summary>Gets a value that indicates whether the stream supports seeking, which is moving the read/write position to a new position in the stream.</summary>
    ///<returns><see langword="true" />
    ///  if seeking is supported; otherwise <see langword="false" />
    ///  .</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>Gets a value that indicates whether the stream supports writing.</summary>
    ///<returns><see langword="true" />
    ///  if writing is supported; otherwise <see langword="false" />
    ///  .</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>Gets a value that indicates whether the stream supports reading.</summary>
    ///<returns><see langword="true" />
    ///  if reading is supported; otherwise <see langword="false" />
    ///  .</returns>
    property CanRead: Boolean read get_CanRead;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNPrintQueueStream = class(TDNGenericImport<DNPrintQueueStreamClass, DNPrintQueueStream>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintPropertyClass = interface(DNObjectClass)
  ['{8F32D3AB-674B-5DFD-A992-9A5F5297AC16}']
  end;

  ///<summary>Represents a property (and the value of the property) of a printing system hardware or software component.</summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintProperty')]
  DNPrintProperty = interface(DDN.mscorlib.DNIDisposable)
  ['{6D8082E6-2DC0-3AE4-A6E2-BD72FB313BEC}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When overridden in a derived class, gets or sets the value of the property that the object represents. </summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintProperty = class(TDNGenericImport<DNPrintPropertyClass, DNPrintProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintBooleanPropertyClass = interface(DNPrintPropertyClass)
  ['{D1F96E5C-7A1A-5242-B7B1-C8AF78D8D4DF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />
    ///  class for the specified property that is using the specified value.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Boolean" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintBooleanProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />
    ///  class for the specified attribute.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Boolean" />
    ///  attribute that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintBooleanProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Boolean" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintBooleanProperty')]
  DNPrintBooleanProperty = interface(DNPrintProperty)
  ['{C5C69579-1C8D-3EEC-88C5-44D0835614DA}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Boolean" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintBooleanProperty = class(TDNGenericImport<DNPrintBooleanPropertyClass, DNPrintBooleanProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintByteArrayPropertyClass = interface(DNPrintPropertyClass)
  ['{C976F79B-B497-553B-B17B-9995EEC6EDE9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />
    ///  class that has the specified value for the specified attribute.</summary>
    ///  <param name="attributeName">The name of the property, which is an array of type <see cref="T:System.Byte" />
    ///  , that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintByteArrayProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />
    ///  class for the specified attribute.</summary>
    ///  <param name="attributeName">The name of the property, which is an array of type <see cref="T:System.Byte" />
    ///  , that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintByteArrayProperty; overload;

  end;

  ///<summary>Represents a property of a printing system hardware or software component whose value is an array of <see cref="T:System.Byte" />
  ///  values. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintByteArrayProperty')]
  DNPrintByteArrayProperty = interface(DNPrintProperty)
  ['{F01BDE99-17A7-33DD-BCC9-2EFAE91F5F91}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />
    ///  represents.</summary>
    ///<returns>A boxed array of <see cref="T:System.Byte" />
    ///  values.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintByteArrayProperty = class(TDNGenericImport<DNPrintByteArrayPropertyClass, DNPrintByteArrayProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintDateTimePropertyClass = interface(DNPrintPropertyClass)
  ['{31F2A3AA-98B6-5670-8EC4-EFBF044C3E11}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" />
    ///  class that has the specified value for the specified attribute.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.DateTime" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintDateTimeProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.DateTime" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintDateTimeProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.DateTime" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintDateTimeProperty')]
  DNPrintDateTimeProperty = interface(DNPrintProperty)
  ['{E7A1C45F-0145-3039-93FA-6D163D25E27A}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.DateTime" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintDateTimeProperty = class(TDNGenericImport<DNPrintDateTimePropertyClass, DNPrintDateTimeProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintDriverPropertyClass = interface(DNPrintPropertyClass)
  ['{820601AF-B282-5847-84F2-1D5A895E7B6C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />
    ///  class that has the specified value for the specified attribute. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintDriver" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintDriverProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintDriver" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintDriverProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintDriver" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintDriverProperty')]
  DNPrintDriverProperty = interface(DNPrintProperty)
  ['{A67A4F49-0B24-30FD-9CD2-636FD8DB105A}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />
    ///  represents. </summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to a <see cref="T:System.Printing.PrintDriver" />
    ///  . </returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintDriverProperty = class(TDNGenericImport<DNPrintDriverPropertyClass, DNPrintDriverProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintInt32PropertyClass = interface(DNPrintPropertyClass)
  ['{2CFDD4BD-CF4C-52A3-BC18-550A3D8132D8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />
    ///  class for the specified attribute and gives it the specified value.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Int32" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of <see cref="T:System.Object" />
    ///  the property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintInt32Property; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Int32" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintInt32Property; overload;

  end;

  ///<summary>Represents an <see cref="T:System.Int32" />
  ///  property (and the value of the property) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintInt32Property')]
  DNPrintInt32Property = interface(DNPrintProperty)
  ['{B6269A58-62AE-3FEA-950F-B507FAF084DE}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Int32" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">The property cannot be set to the value that the calling code provides.</exception>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintInt32Property = class(TDNGenericImport<DNPrintInt32PropertyClass, DNPrintInt32Property>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintJobPriorityPropertyClass = interface(DNPrintPropertyClass)
  ['{CED8CBD1-469C-5475-9187-43131457AB9B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />
    ///  class that has the specified value for the specified attribute. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobPriority" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintJobPriorityProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobPriority" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintJobPriorityProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintJobPriority" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintJobPriorityProperty')]
  DNPrintJobPriorityProperty = interface(DNPrintProperty)
  ['{A8A172E8-20A3-3918-94E7-502FBC7297CC}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Printing.PrintJobPriority" />
    ///  value.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintJobPriorityProperty = class(TDNGenericImport<DNPrintJobPriorityPropertyClass, DNPrintJobPriorityProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintJobStatusPropertyClass = interface(DNPrintPropertyClass)
  ['{E2FE5683-2D58-5AD1-BC48-B5D2406A66A8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobStatus" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintJobStatusProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobStatus" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintJobStatusProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintJobStatus" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintJobStatusProperty')]
  DNPrintJobStatusProperty = interface(DNPrintProperty)
  ['{A990B357-38E2-3909-B094-F8802E4F9603}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Printing.PrintJobStatus" />
    ///  value.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintJobStatusProperty = class(TDNGenericImport<DNPrintJobStatusPropertyClass, DNPrintJobStatusProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintPortPropertyClass = interface(DNPrintPropertyClass)
  ['{42BACE57-DFB5-52AD-9A6C-88CA25F4C47E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintPort" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintPortProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintPort" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintPortProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintPort" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintPortProperty')]
  DNPrintPortProperty = interface(DNPrintProperty)
  ['{CAFD843C-6453-390D-8C58-52CB7B2F821D}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  represents.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to a <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintPortProperty = class(TDNGenericImport<DNPrintPortPropertyClass, DNPrintPortProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintProcessorPropertyClass = interface(DNPrintPropertyClass)
  ['{EFAE7012-5758-57C9-A5EC-568D5B646A2D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintProcessor" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintProcessorProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />
    ///  that is converted.</param>
    {class} function init(attributeName: string): DNPrintProcessorProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintProcessor" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintProcessorProperty')]
  DNPrintProcessorProperty = interface(DNPrintProperty)
  ['{5044E74F-5C15-3D37-9546-ED6A557FFBFE}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />
    ///  represents.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to a <see cref="T:System.Printing.PrintProcessor" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintProcessorProperty = class(TDNGenericImport<DNPrintProcessorPropertyClass, DNPrintProcessorProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintQueueAttributePropertyClass = interface(DNPrintPropertyClass)
  ['{69BF687A-3AAE-581C-B1C2-8AD752C01A1D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueAttributes" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of <see cref="T:System.Object" />
    ///  the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintQueueAttributeProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueAttributes" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintQueueAttributeProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintQueueAttributes" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintQueueAttributeProperty')]
  DNPrintQueueAttributeProperty = interface(DNPrintProperty)
  ['{8BCDE6CF-93DC-3EEB-9B8E-794C22EFCD8B}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Printing.PrintQueueAttributes" />
    ///  value.</returns>
    ///<exception cref="T:System.InvalidOperationException">The property cannot be set by using the value that is provided by the calling code.</exception>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintQueueAttributeProperty = class(TDNGenericImport<DNPrintQueueAttributePropertyClass, DNPrintQueueAttributeProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintQueuePropertyClass = interface(DNPrintPropertyClass)
  ['{CFD9B131-42F7-5A65-806C-6788B880A20F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueue" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintQueueProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueue" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintQueueProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintQueue" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintQueueProperty')]
  DNPrintQueueProperty = interface(DNPrintProperty)
  ['{3D372BDA-A151-385E-82DE-FA81E96AB269}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />
    ///  represents.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to a <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintQueueProperty = class(TDNGenericImport<DNPrintQueuePropertyClass, DNPrintQueueProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintQueueStatusPropertyClass = interface(DNPrintPropertyClass)
  ['{A922C761-583E-5EB4-BC21-47EC01834D89}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueStatus" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintQueueStatusProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueStatus" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintQueueStatusProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintQueueStatus" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintQueueStatusProperty')]
  DNPrintQueueStatusProperty = interface(DNPrintProperty)
  ['{B9A67BD7-9892-3B3E-80FB-5B7E75D3A327}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Printing.PrintQueueStatus" />
    ///  . </returns>
    ///<exception cref="T:System.InvalidOperationException">The property cannot be set by using the value that is provided by the calling code.</exception>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintQueueStatusProperty = class(TDNGenericImport<DNPrintQueueStatusPropertyClass, DNPrintQueueStatusProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintServerLoggingPropertyClass = interface(DNPrintPropertyClass)
  ['{EB47DBFB-EDF3-5C8E-98D7-57D52EBB7E3C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServerEventLoggingTypes" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintServerLoggingProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServerEventLoggingTypes" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintServerLoggingProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintServerEventLoggingTypes" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintServerLoggingProperty')]
  DNPrintServerLoggingProperty = interface(DNPrintProperty)
  ['{FA5AAD09-F15A-3B80-8A76-064C526B2A70}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Printing.PrintServerEventLoggingTypes" />
    ///  value.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintServerLoggingProperty = class(TDNGenericImport<DNPrintServerLoggingPropertyClass, DNPrintServerLoggingProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintServerPropertyClass = interface(DNPrintPropertyClass)
  ['{025C86D1-63D6-54AE-A556-A8D7BD2B1B2F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />
    ///  class that has the specified value for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServer" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintServerProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServer" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintServerProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintServer" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintServerProperty')]
  DNPrintServerProperty = interface(DNPrintProperty)
  ['{2A752E70-1A17-3C64-833B-3319B6DA0DFE}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />
    ///  represents.</summary>
    ///<returns>A <see cref="T:System.Object" />
    ///  that can be cast as a <see cref="T:System.Printing.PrintServer" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">The property is not internally initialized.</exception>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintServerProperty = class(TDNGenericImport<DNPrintServerPropertyClass, DNPrintServerProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintStreamPropertyClass = interface(DNPrintPropertyClass)
  ['{1CB2BC27-3197-5A35-A43B-125E9BCE5EBD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.IO.Stream" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintStreamProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.IO.Stream" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintStreamProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.IO.Stream" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintStreamProperty')]
  DNPrintStreamProperty = interface(DNPrintProperty)
  ['{DCBFC541-263E-34F2-B9CC-CBDD43C0A4B6}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />
    ///  represents.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast as a <see cref="T:System.IO.Stream" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintStreamProperty = class(TDNGenericImport<DNPrintStreamPropertyClass, DNPrintStreamProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintStringPropertyClass = interface(DNPrintPropertyClass)
  ['{B2098F15-244F-59E4-8D64-9526738ED252}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />
    ///  class that has the specified value for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.String" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintStringProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.String" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintStringProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.String" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintStringProperty')]
  DNPrintStringProperty = interface(DNPrintProperty)
  ['{0DFA4FDB-E35C-394C-AD0A-ACDD909A9075}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.String" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintStringProperty = class(TDNGenericImport<DNPrintStringPropertyClass, DNPrintStringProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintSystemTypePropertyClass = interface(DNPrintPropertyClass)
  ['{CD702CFB-C136-5789-9EB5-1E31B52EE88A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  class that has the specified property name and value.</summary>
    ///  <param name="attributeName">The name of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintSystemTypeProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  class that has the specified property name.</summary>
    ///  <param name="attributeName">The name of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintSystemTypeProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Type" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintSystemTypeProperty')]
  DNPrintSystemTypeProperty = interface(DNPrintProperty)
  ['{5F9132BC-CACA-3755-8A6A-85A37C987DF6}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  represents.</summary>
    ///<returns>The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />
    ///  represents.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintSystemTypeProperty = class(TDNGenericImport<DNPrintSystemTypePropertyClass, DNPrintSystemTypeProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintThreadPriorityPropertyClass = interface(DNPrintPropertyClass)
  ['{7CC87BAC-80CD-5770-9D04-63A761E3F520}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Threading.ThreadPriority" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintThreadPriorityProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Threading.ThreadPriority" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintThreadPriorityProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Threading.ThreadPriority" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintThreadPriorityProperty')]
  DNPrintThreadPriorityProperty = interface(DNPrintProperty)
  ['{71879EB8-41C8-3A23-904D-EC9FCECC543C}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />
    ///  represents.</summary>
    ///<returns>A boxed <see cref="T:System.Threading.ThreadPriority" />
    ///  value.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintThreadPriorityProperty = class(TDNGenericImport<DNPrintThreadPriorityPropertyClass, DNPrintThreadPriorityProperty>) end;

  //-------------namespace: System.Printing.IndexedProperties----------------
  DNPrintTicketPropertyClass = interface(DNPrintPropertyClass)
  ['{E23E93D6-D4EA-5C1C-A37C-6F8A3D41DED5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />
    ///  class that has the specified value for the specified property. </summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintTicket" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />
    ///  represents.</param>
    ///  <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string; attributeValue: DDN.mscorlib.DNObject): DNPrintTicketProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />
    ///  class for the specified property.</summary>
    ///  <param name="attributeName">The name of the <see cref="T:System.Printing.PrintTicket" />
    ///  property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />
    ///  represents.</param>
    {class} function init(attributeName: string): DNPrintTicketProperty; overload;

  end;

  ///<summary>Represents a <see cref="T:System.Printing.PrintTicket" />
  ///  property (and its value) of a printing system hardware or software component. </summary>
  [DNTypeName('System.Printing.IndexedProperties.PrintTicketProperty')]
  DNPrintTicketProperty = interface(DNPrintProperty)
  ['{759773B6-A939-3457-B837-BA1CB1BF70D4}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(objValue: DDN.mscorlib.DNObject);
    function get_Name: string;

  { methods } 

    ///<summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" />
    ///  interface and raises the deserialization event when the deserialization is complete.</summary>
    ///  <param name="sender">The source of the event. </param>
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    ///<summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />
    ///  represents.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to a <see cref="T:System.Printing.PrintTicket" />
    ///  .</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the property.</returns>
    property Name: string read get_Name;
  end;

  TDNPrintTicketProperty = class(TDNGenericImport<DNPrintTicketPropertyClass, DNPrintTicketProperty>) end;

  //-------------namespace: System.Printing----------------
  DNPrintDocumentImageableAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6317BE83-A6C1-51A3-A976-37CFA4A4E2D3}']
  end;

  ///<summary>Specifies the size of the paper (or other media), the size of the imageable area, and the location of the imageable area.</summary>
  [DNTypeName('System.Printing.PrintDocumentImageableArea')]
  DNPrintDocumentImageableArea = interface(DDN.mscorlib.DNObject)
  ['{CEEDE8BC-852C-3267-AC3E-E11E717A8150}']
  { getters & setters } 

    function get_MediaSizeHeight: Double;
    function get_MediaSizeWidth: Double;
    function get_ExtentHeight: Double;
    function get_ExtentWidth: Double;
    function get_OriginHeight: Double;
    function get_OriginWidth: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the height of the paper or media.</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance from the upper-left corner of the page to the lower-left corner.</returns>
    property MediaSizeHeight: Double read get_MediaSizeHeight;
    ///<summary>Gets the width of the paper or media.</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance from the upper-left corner of the page to the upper-right corner.</returns>
    property MediaSizeWidth: Double read get_MediaSizeWidth;
    ///<summary>Gets the height of the imageable area. </summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance from the origin.</returns>
    property ExtentHeight: Double read get_ExtentHeight;
    ///<summary>Gets the width of the imageable area. </summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance from the origin.</returns>
    property ExtentWidth: Double read get_ExtentWidth;
    ///<summary>Gets the distance from the upper-left corner of the imageable area (also called the 'origin' of the imageable area) to the nearest point on the top edge of the page.</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance (in pixels - 1/96 of an inch) from the upper-left corner of the imageable area (also called the 'origin' of the imageable area) to the nearest point on the top edge of the page.</returns>
    property OriginHeight: Double read get_OriginHeight;
    ///<summary>Gets the origin width, which is the distance from the left edge of the page to the upper-left corner of the imageable area (also called the "origin" of the imageable area).</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the origin width (in pixels - 1/96 of an inch), which is the distance from the left edge of the page to the upper-left corner of the imageable area (also called the "origin" of the imageable area).</returns>
    property OriginWidth: Double read get_OriginWidth;
  end;

  TDNPrintDocumentImageableArea = class(TDNGenericImport<DNPrintDocumentImageableAreaClass, DNPrintDocumentImageableArea>) end;

  //-------------namespace: System.Printing----------------
  DNPrintJobSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54298164-3898-5585-8A04-ECA48BE5A862}']
  end;

  ///<summary>Describes a print job. </summary>
  [DNTypeName('System.Printing.PrintJobSettings')]
  DNPrintJobSettings = interface(DDN.mscorlib.DNObject)
  ['{38A85713-FED5-3C22-9366-C13CF3C20464}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(description: string);
    function get_CurrentPrintTicket: DDN.ReachFramework.DNPrintTicket;
    procedure set_CurrentPrintTicket(printTicket: DDN.ReachFramework.DNPrintTicket);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a description of a print job. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that describes the print job, for example, "Quarterly Report." </returns>
    property Description: string read get_Description write set_Description;
    ///<summary>Gets or sets a <see cref="T:System.Printing.PrintTicket" />
    ///  object that holds all the detailed settings for the print job.</summary>
    ///<returns>A <see cref="T:System.Printing.PrintTicket" />
    ///  object that holds all the details about the print job, such as the number of copies to print, and whether stapling or duplex printing is used. </returns>
    property CurrentPrintTicket: DDN.ReachFramework.DNPrintTicket read get_CurrentPrintTicket write set_CurrentPrintTicket;
  end;

  TDNPrintJobSettings = class(TDNGenericImport<DNPrintJobSettingsClass, DNPrintJobSettings>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueStringPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A379A27C-9D6F-51D8-8DEE-BAD9FC746B2B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStringProperty" />
    ///  class. </summary>
    {class} function init: DNPrintQueueStringProperty;

  end;

  ///<summary>Represents one, and only one, of three possible properties of a print queue: <see cref="P:System.Printing.PrintQueue.Location" />
  ///  , <see cref="P:System.Printing.PrintQueue.Comment" />
  ///  , or <see cref="P:System.Printing.PrintQueue.ShareName" />
  ///  . </summary>
  [DNTypeName('System.Printing.PrintQueueStringProperty')]
  DNPrintQueueStringProperty = interface(DDN.mscorlib.DNObject)
  ['{2931EAA1-2656-3D23-927D-D26C418C98B9}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(__set_formal: string);
    function get_Type: DNPrintQueueStringPropertyType;
    procedure set_Type(__set_formal: DNPrintQueueStringPropertyType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the print queue property that is represented. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  with the value of the property. </returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets a value that identifies which of the three possible properties of a print queue is being represented. </summary>
    ///<returns>A <see cref="T:System.Printing.PrintQueueStringPropertyType" />
    ///  that specifies the kind of print queue property that is being represented. </returns>
    property &Type: DNPrintQueueStringPropertyType read get_Type write set_Type;
  end;

  TDNPrintQueueStringProperty = class(TDNGenericImport<DNPrintQueueStringPropertyClass, DNPrintQueueStringProperty>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemObjectClass = interface(DNObjectClass)
  ['{C443CE8F-6948-543D-8450-3266BE1F3F2C}']
  end;

  ///<summary>Defines basic properties and methods that are common to the objects of the printing system. Classes that derive from this class represent such objects as print queues, print servers, and print jobs.</summary>
  [DNTypeName('System.Printing.PrintSystemObject')]
  DNPrintSystemObject = interface(DDN.mscorlib.DNIDisposable)
  ['{C217C8CC-2887-3BFD-9A60-B7476189F695}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />
    ///  . </summary>
    procedure Dispose;
    ///<summary>When overridden in a derived class, writes any changes that your program has made to the object's properties to the actual software or hardware component that the object represents. </summary>
    procedure Commit;
    ///<summary>When overridden in a derived class, updates the properties of an object of the derived class so that its values match the values of the actual software or hardware component that the object represents. </summary>
    procedure Refresh;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the parent of the object. </summary>
    ///<returns>Another <see cref="T:System.Printing.PrintSystemObject" />
    ///  .</returns>
    property Parent: DNPrintSystemObject read get_Parent;
    ///<summary>Gets the name of the object. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a collection of attribute and value pairs. </summary>
    ///<returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  that contains attribute and value pairs.</returns>
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintSystemObject = class(TDNGenericImport<DNPrintSystemObjectClass, DNPrintSystemObject>) end;

  //-------------namespace: System.Printing----------------
  DNPrintFilterClass = interface(DNPrintSystemObjectClass)
  ['{6335CBD9-48B1-5DED-842D-AF7DE92C25CA}']
  end;

  ///<summary>Defines disposal behavior that is common to both the <see cref="T:System.Printing.PrintDriver" />
  ///  and <see cref="T:System.Printing.PrintProcessor" />
  ///  classes. <see cref="T:System.Printing.PrintFilter" />
  ///  supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
  [DNTypeName('System.Printing.PrintFilter')]
  DNPrintFilter = interface(DNPrintSystemObject)
  ['{E36AD9F7-BA4B-3BB4-9BAD-85DD7163A2CF}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />
    ///  . </summary>
    procedure Dispose;
    ///<summary>When overridden in a derived class, writes any changes that your program has made to the object's properties to the actual software or hardware component that the object represents. </summary>
    procedure Commit;
    ///<summary>When overridden in a derived class, updates the properties of an object of the derived class so that its values match the values of the actual software or hardware component that the object represents. </summary>
    procedure Refresh;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the parent of the object. </summary>
    ///<returns>Another <see cref="T:System.Printing.PrintSystemObject" />
    ///  .</returns>
    property Parent: DNPrintSystemObject read get_Parent;
    ///<summary>Gets the name of the object. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a collection of attribute and value pairs. </summary>
    ///<returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  that contains attribute and value pairs.</returns>
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintFilter = class(TDNGenericImport<DNPrintFilterClass, DNPrintFilter>) end;

  //-------------namespace: System.Printing----------------
  DNPrintDriverClass = interface(DNPrintFilterClass)
  ['{B8B5EC5B-201C-53CD-BA08-E611704FAC41}']
  end;

  ///<summary>Represents a print driver.</summary>
  [DNTypeName('System.Printing.PrintDriver')]
  DNPrintDriver = interface(DNPrintFilter)
  ['{6BE07925-6009-3454-9BED-30439425E0B6}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Do not use.</summary>
    procedure Commit;
    ///<summary>Do not use.</summary>
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintDriver = class(TDNGenericImport<DNPrintDriverClass, DNPrintDriver>) end;

  //-------------namespace: System.Printing----------------
  DNPrintProcessorClass = interface(DNPrintFilterClass)
  ['{4889B664-09F9-59CC-A249-E5D6FF791425}']
  end;

  ///<summary>Represents a print processor on a print server.</summary>
  [DNTypeName('System.Printing.PrintProcessor')]
  DNPrintProcessor = interface(DNPrintFilter)
  ['{AD308001-EB8C-3FE6-B5F8-5B06D6D62CD8}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Do not use. </summary>
    procedure Commit;
    ///<summary>Do not use. </summary>
    procedure Refresh;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DNPrintSystemObject read get_Parent;
    property Name: string read get_Name;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintProcessor = class(TDNGenericImport<DNPrintProcessorClass, DNPrintProcessor>) end;

  //-------------namespace: System.Printing----------------
  DNPrintPortClass = interface(DNPrintSystemObjectClass)
  ['{DF1D94AA-5B3E-5E67-B5F4-4E789B9076F6}']
  end;

  ///<summary>Represents a printer port on a print server. Each print queue has a print port assigned to it.</summary>
  [DNTypeName('System.Printing.PrintPort')]
  DNPrintPort = interface(DNPrintSystemObject)
  ['{84D4A992-718E-3562-8E7A-2BB727A6DB07}']
  { getters & setters } 

    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Do not use. </summary>
    procedure Commit;
    ///<summary>Do not use. </summary>
    procedure Refresh;
    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the parent of the object. </summary>
    ///<returns>Another <see cref="T:System.Printing.PrintSystemObject" />
    ///  .</returns>
    property Parent: DNPrintSystemObject read get_Parent;
    ///<summary>Gets the name of the object. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a collection of attribute and value pairs. </summary>
    ///<returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  that contains attribute and value pairs.</returns>
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintPort = class(TDNGenericImport<DNPrintPortClass, DNPrintPort>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueClass = interface(DNPrintSystemObjectClass)
  ['{8F9AAD15-824E-572F-B686-D0D718CD8CF4}']
  { static getter & setter } 

    {class} function get_MaxPrintSchemaVersion: Int32;

  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class with the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, array of <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  values to initialize, and desired access. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="propertyFilter">An array of <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  values that specifies the properties to initialize.</param>
    ///  <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  values that specifies the type of access to the print queue that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" />
    ///  object, not a <see cref="T:System.Printing.PrintQueue" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />
    ///  .</exception>
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<DNPrintQueueIndexedProperty>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, property filter, and desired access. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="propertyFilter">An array of the names of properties to initialize.</param>
    ///  <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  values that specifies the type of access to the print queue that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" />
    ///  object, not a <see cref="T:System.Printing.PrintQueue" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />
    ///  .</exception>
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<string>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, print schema version, and desired access. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="printSchemaVersion">The version of the Print Schema to use.</param>
    ///  <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  values that specifies the type of access to the print queue that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" />
    ///  object, not a <see cref="T:System.Printing.PrintQueue" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />
    ///  .</exception>
    {class} function init(printServer: DNPrintServer; printQueueName: string; printSchemaVersion: Int32; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, and desired access. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  values that specifies the type of access to the print queue that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintQueueException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" />
    ///  object, not a <see cref="T:System.Printing.PrintQueue" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />
    ///  .</exception>
    {class} function init(printServer: DNPrintServer; printQueueName: string; desiredAccess: DNPrintSystemDesiredAccess): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, and array of <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  values to initialize. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="propertyFilter">An array of <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  values that specifies the property values to initialize.</param>
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<DNPrintQueueIndexedProperty>): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, and array of property names to initialize. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="propertyFilter">An array of the names of properties to initialize.</param>
    {class} function init(printServer: DNPrintServer; printQueueName: string; propertyFilter: TArray<string>): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  , queue name, and print schema version. </summary>
    ///  <param name="printServer">The print server that hosts the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="printSchemaVersion">The version of the Print Schema to use.</param>
    {class} function init(printServer: DNPrintServer; printQueueName: string; printSchemaVersion: Int32): DNPrintQueue; overload;
    ///<summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" />
    ///  class using the specified <see cref="T:System.Printing.PrintServer" />
    ///  and queue name. </summary>
    ///  <param name="printServer">The print server to host the print queue.</param>
    ///  <param name="printQueueName">The name of the print queue.</param>
    {class} function init(printServer: DNPrintServer; printQueueName: string): DNPrintQueue; overload;

  { static methods } 

    {class} function CreateXpsDocumentWriter(jobDescription: string; out documentImageableArea: DNPrintDocumentImageableArea; out pageRangeSelection: DDN.PresentationFramework.DNPageRangeSelection; out pageRange: DDN.PresentationFramework.DNPageRange): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(out documentImageableArea: DNPrintDocumentImageableArea): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(jobDescription: string; out documentImageableArea: DNPrintDocumentImageableArea): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(out documentImageableArea: DNPrintDocumentImageableArea; out pageRangeSelection: DDN.PresentationFramework.DNPageRangeSelection; out pageRange: DDN.PresentationFramework.DNPageRange): DNXpsDocumentWriter; overload;
    {class} function CreateXpsDocumentWriter(out width: Double; out height: Double): DNXpsDocumentWriter; overload;
    ///<summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
    ///  object and associates it with the specified print queue. </summary>
    ///  <param name="printQueue">A print queue to print the XPS document.</param>
    ///<returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
    ///  that writes to an XPS stream. </returns>
    {class} function CreateXpsDocumentWriter(printQueue: DNPrintQueue): DNXpsDocumentWriter; overload;

  { static propertys } 

    ///<summary>Gets the most recent possible version number of the Print Schema that the queue can use. </summary>
    ///<returns>The most recent version number of the Print Schema that the queue can use.</returns>
    {class} property MaxPrintSchemaVersion: Int32 read get_MaxPrintSchemaVersion;
  end;

  ///<summary>Manages printers and print jobs. </summary>
  [DNTypeName('System.Printing.PrintQueue')]
  DNPrintQueue = interface(DNPrintSystemObject)
  ['{C187B99F-1003-3809-A31A-FD19FB6FC45F}']
  { getters & setters } 

    function get_InPartialTrust: Boolean;
    procedure set_InPartialTrust(isPT: Boolean);
    function get_ClientPrintSchemaVersion: Int32;
    function get_IsXpsDevice: Boolean;
    function get_IsPublished: Boolean;
    function get_IsRawOnlyEnabled: Boolean;
    function get_IsBidiEnabled: Boolean;
    function get_ScheduleCompletedJobsFirst: Boolean;
    function get_KeepPrintedJobs: Boolean;
    function get_IsDevQueryEnabled: Boolean;
    function get_IsHidden: Boolean;
    function get_IsShared: Boolean;
    function get_IsDirect: Boolean;
    function get_IsQueued: Boolean;
    function get_IsPowerSaveOn: Boolean;
    function get_IsServerUnknown: Boolean;
    function get_IsDoorOpened: Boolean;
    function get_IsOutOfMemory: Boolean;
    function get_NeedUserIntervention: Boolean;
    function get_PagePunt: Boolean;
    function get_HasToner: Boolean;
    function get_IsTonerLow: Boolean;
    function get_IsWarmingUp: Boolean;
    function get_IsInitializing: Boolean;
    function get_IsProcessing: Boolean;
    function get_IsWaiting: Boolean;
    function get_IsNotAvailable: Boolean;
    function get_IsOutputBinFull: Boolean;
    function get_IsPrinting: Boolean;
    function get_IsBusy: Boolean;
    function get_IsIOActive: Boolean;
    function get_IsOffline: Boolean;
    function get_HasPaperProblem: Boolean;
    function get_IsManualFeedRequired: Boolean;
    function get_IsOutOfPaper: Boolean;
    function get_IsPaperJammed: Boolean;
    function get_IsPendingDeletion: Boolean;
    function get_IsInError: Boolean;
    function get_IsPaused: Boolean;
    function get_QueueAttributes: DNPrintQueueAttributes;
    function get_QueueStatus: DNPrintQueueStatus;
    function get_FullName: string;
    function get_HostingPrintServer: DNPrintServer;
    function get_QueuePrintProcessor: DNPrintProcessor;
    procedure set_QueuePrintProcessor(printProcessor: DNPrintProcessor);
    function get_QueuePort: DNPrintPort;
    procedure set_QueuePort(port: DNPrintPort);
    function get_QueueDriver: DNPrintDriver;
    procedure set_QueueDriver(driver: DNPrintDriver);
    function get_DefaultPrintTicket: DDN.ReachFramework.DNPrintTicket;
    procedure set_DefaultPrintTicket(newDefaultPrintTicket: DDN.ReachFramework.DNPrintTicket);
    function get_UserPrintTicket: DDN.ReachFramework.DNPrintTicket;
    procedure set_UserPrintTicket(newUserPrintTicket: DDN.ReachFramework.DNPrintTicket);
    function get_SeparatorFile: string;
    procedure set_SeparatorFile(inSeparatorFile: string);
    function get_Description: string;
    function get_Location: string;
    procedure set_Location(inLocation: string);
    function get_Comment: string;
    procedure set_Comment(inComment: string);
    function get_ShareName: string;
    procedure set_ShareName(inShareName: string);
    function get_NumberOfJobs: Int32;
    function get_AveragePagesPerMinute: Int32;
    function get_UntilTimeOfDay: Int32;
    procedure set_UntilTimeOfDay(inUntilTime: Int32);
    function get_StartTimeOfDay: Int32;
    procedure set_StartTimeOfDay(inStartTime: Int32);
    function get_DefaultPriority: Int32;
    procedure set_DefaultPriority(inDefaultPriority: Int32);
    function get_Name: string;
    procedure set_Name(objName: string);
    function get_Priority: Int32;
    procedure set_Priority(inPriority: Int32);
    function get_CurrentJobSettings: DNPrintJobSettings;
    function get_PrintingIsCancelled: Boolean;
    procedure set_PrintingIsCancelled(isCancelled: Boolean);
    function get_Parent: DNPrintSystemObject;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Pauses the print queue. It remains paused until <see cref="M:System.Printing.PrintQueue.Resume" />
    ///  is executed. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">The printer cannot be paused. </exception>
    procedure Pause;
    ///<summary>Restarts a print queue that was paused. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">The printer cannot resume. </exception>
    procedure Resume;
    ///<summary>Inserts a new print job for an XML Paper Specification (XPS) Document into the queue, gives it the specified name and settings, and specifies whether or not it should be validated.</summary>
    ///  <param name="jobName">The path and name of the document that is being printed.</param>
    ///  <param name="documentPath">The path and name of the document that is being printed.</param>
    ///  <param name="fastCopy"><see langword="true" />
    ///  to spool quickly without page-by-page progress feedback and without validating that the file is valid XPS; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="printTicket">The settings of the print job.</param>
    ///<returns>A <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that represents the print job and its status.</returns>
    function AddJob(jobName: string; documentPath: string; fastCopy: Boolean; printTicket: DDN.ReachFramework.DNPrintTicket): DNPrintSystemJobInfo; overload;
    ///<summary>Inserts a new print job for an XML Paper Specification (XPS) Document into the queue, gives it the specified name, and specifies whether or not it should be validated.</summary>
    ///  <param name="jobName">The name of the print job.</param>
    ///  <param name="documentPath">The path and name of the document that is being printed.</param>
    ///  <param name="fastCopy"><see langword="true" />
    ///  to spool quickly without page-by-page progress feedback and without validating that the file is valid XPS; otherwise, <see langword="false" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that represents the print job and its status.</returns>
    function AddJob(jobName: string; documentPath: string; fastCopy: Boolean): DNPrintSystemJobInfo; overload;
    ///<summary>Inserts a new print job for an XML Paper Specification (XPS) Document into the queue, and gives it the specified name and settings.</summary>
    ///  <param name="jobName">The path and name of the document that is being printed.</param>
    ///  <param name="printTicket">The settings of the print job.</param>
    ///<returns>A <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that represents the print job and its status. </returns>
    function AddJob(jobName: string; printTicket: DDN.ReachFramework.DNPrintTicket): DNPrintSystemJobInfo; overload;
    ///<summary>Inserts a new print job, whose content is a <see cref="T:System.Byte" />
    ///  array, into the queue. </summary>
    ///  <param name="jobName">The name of the print job.</param>
    ///<returns>A <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that represents the print job and its status.</returns>
    function AddJob(jobName: string): DNPrintSystemJobInfo; overload;
    ///<summary>Inserts a new (generically named) print job, whose content is a <see cref="T:System.Byte" />
    ///  array, into the queue. </summary>
    ///<returns>A <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that represents the print job and its status.</returns>
    function AddJob: DNPrintSystemJobInfo; overload;
    ///<summary>Gets the print job with the specified ID number. </summary>
    ///  <param name="jobId">The number of the job in the queue.</param>
    ///<returns>A <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that specifies the properties of the job and its status.</returns>
    function GetJob(jobId: Int32): DNPrintSystemJobInfo;
    ///<summary>Creates a collection that contains a <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  object for each job in the queue. </summary>
    ///<returns>Returns a <see cref="T:System.Printing.PrintJobInfoCollection" />
    ///  of <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  objects. There is one for each job in the queue.</returns>
    function GetPrintJobInfoCollection: DNPrintJobInfoCollection;
    ///<summary>Removes all the jobs in the print queue. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">Some print jobs could not be removed from the queue. </exception>
    procedure Purge;
    ///<summary>Updates the properties of the <see cref="T:System.Printing.PrintQueue" />
    ///  object with values from the printer and the print queue utility that runs on the computer. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">Some of the properties could not be refreshed. </exception>
    procedure Refresh;
    ///<summary>Gets a <see cref="T:System.Printing.PrintCapabilities" />
    ///  object that identifies the capabilities of the printer. </summary>
    ///<returns>A <see cref="T:System.Printing.PrintCapabilities" />
    ///  object that specifies what the printer can and cannot do, such as two-sided coping or automatic stapling. </returns>
    ///<exception cref="T:System.Printing.PrintQueueException">The <see cref="T:System.Printing.PrintCapabilities" />
    ///  object could not be retrieved.</exception>
    function GetPrintCapabilities: DDN.ReachFramework.DNPrintCapabilities; overload;
    ///<summary>Gets a <see cref="T:System.Printing.PrintCapabilities" />
    ///  object that identifies the capabilities of the printer. </summary>
    ///  <param name="printTicket">A print ticket that provides the basis on which the print capabilities are reported. </param>
    ///<returns>A <see cref="T:System.Printing.PrintCapabilities" />
    ///  object that specifies what the printer can and cannot do, such as two-sided coping or automatic stapling. </returns>
    ///<exception cref="T:System.Printing.PrintQueueException">The <see cref="T:System.Printing.PrintCapabilities" />
    ///  object could not be retrieved.</exception><exception cref="T:System.ArgumentException"><paramref name="printTicket" />
    ///  is not well-formed.</exception>
    function GetPrintCapabilities(printTicket: DDN.ReachFramework.DNPrintTicket): DDN.ReachFramework.DNPrintCapabilities; overload;
    ///<summary>Gets a <see cref="T:System.IO.MemoryStream" />
    ///  object that specifies the printer's capabilities as an XML stream that complies with the Print Schema. </summary>
    ///<returns>A <see cref="T:System.IO.MemoryStream" />
    ///  specifying the printer's capabilities by using the XML schema "PrintCapabilities," a part of the Print Schema system.</returns>
    ///<exception cref="T:System.Printing.PrintQueueException">The print capabilities could not be retrieved.</exception>
    function GetPrintCapabilitiesAsXml: DDN.mscorlib.DNMemoryStream; overload;
    ///<summary>Gets a <see cref="T:System.IO.MemoryStream" />
    ///  object that specifies the printer's capabilities in an XML format that complies with the Print Schema. </summary>
    ///  <param name="printTicket">A print ticket that provides the basis on which the print capabilities are reported. </param>
    ///<returns>A <see cref="T:System.IO.MemoryStream" />
    ///  specifying the printer's capabilities by using the XML schema "PrintCapabilities," a part of the Print Schema system.</returns>
    ///<exception cref="T:System.Printing.PrintQueueException">The print capabilities could not be retrieved.</exception><exception cref="T:System.ArgumentException"><paramref name="printTicket" />
    ///  is not well-formed.</exception>
    function GetPrintCapabilitiesAsXml(printTicket: DDN.ReachFramework.DNPrintTicket): DDN.mscorlib.DNMemoryStream; overload;
    ///<summary>Merges two <see cref="T:System.Printing.PrintTicket" />
    ///  s and guarantees that the resulting <see cref="T:System.Printing.PrintTicket" />
    ///  is valid, does not ask for any printing functionality that the printer does not support, and is limited to the specified scope. </summary>
    ///  <param name="basePrintTicket">The first print ticket. </param>
    ///  <param name="deltaPrintTicket">The second print ticket. This can be <see langword="null" />
    ///  . </param>
    ///  <param name="scope">A value indicating whether the scope of <paramref name="deltaPrintTicket" />
    ///  , and the scope of the print ticket returned in the <see cref="T:System.Printing.ValidationResult" />
    ///  , is a page, a document, or the whole job. </param>
    ///<returns>A <see cref="T:System.Printing.ValidationResult" />
    ///  that includes the merged <see cref="T:System.Printing.PrintTicket" />
    ///  and an indication of whether any of its settings had to be changed to guarantee viability.</returns>
    ///<exception cref="T:System.ArgumentException">At least one of the input print tickets is not valid. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="basePrintTicket" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="scope" />
    ///  parameter does not have a valid <see cref="T:System.Printing.PrintTicketScope" />
    ///  value.</exception><exception cref="T:System.Printing.PrintQueueException">The validation, merger, and viability checking operation failed.</exception>
    function MergeAndValidatePrintTicket(basePrintTicket: DDN.ReachFramework.DNPrintTicket; deltaPrintTicket: DDN.ReachFramework.DNPrintTicket; scope: DDN.ReachFramework.DNPrintTicketScope): DDN.ReachFramework.DNValidationResult; overload;
    ///<summary>Merges two <see cref="T:System.Printing.PrintTicket" />
    ///  s and guarantees that the resulting <see cref="T:System.Printing.PrintTicket" />
    ///  is valid and does not ask for any printing functionality that the printer does not support. </summary>
    ///  <param name="basePrintTicket">The first print ticket. </param>
    ///  <param name="deltaPrintTicket">The second print ticket. This can be <see langword="null" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Printing.ValidationResult" />
    ///  that includes the merged <see cref="T:System.Printing.PrintTicket" />
    ///  and an indication of whether any of its settings had to be changed to guarantee viability.</returns>
    ///<exception cref="T:System.ArgumentException">At least one of the input print tickets is not valid. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="basePrintTicket" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Printing.PrintQueueException">The validation, merger, and viability checking operation failed.</exception>
    function MergeAndValidatePrintTicket(basePrintTicket: DDN.ReachFramework.DNPrintTicket; deltaPrintTicket: DDN.ReachFramework.DNPrintTicket): DDN.ReachFramework.DNValidationResult; overload;
    ///<summary>Writes the current properties of the <see cref="T:System.Printing.PrintQueue" />
    ///  object to the actual print queue on the print server. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">Some of the properties could not be committed. </exception><exception cref="T:System.Printing.PrintCommitAttributesException">Some of the properties could not be committed. - or -The <see cref="T:System.Printing.PrintQueue" />
    ///  object was not created with sufficient rights.</exception>
    procedure Commit;
    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether the queue is operating in a partially trusted mode, a higher level of trust. </summary>
    ///<returns><see langword="true" />
    ///  if the queue is operating in a partially trusted mode; otherwise, <see langword="false" />
    ///  .</returns>
    property InPartialTrust: Boolean read get_InPartialTrust write set_InPartialTrust;
    ///<summary>Gets the version of the Print Schema. </summary>
    ///<returns>The version of the Print Schema in use.</returns>
    property ClientPrintSchemaVersion: Int32 read get_ClientPrintSchemaVersion;
    ///<summary>Gets a value that indicates whether the printer's driver is built on the Printing Overview so it uses XML Paper Specification (XPS) as its page description language.Â </summary>
    ///<returns><see langword="true" />
    ///  if the printer uses the Printing Overview; otherwise, <see langword="false" />
    ///  .</returns>
    property IsXpsDevice: Boolean read get_IsXpsDevice;
    ///<summary>Gets a value that indicates whether the printer is visible to other network users. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is visible to other network users; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPublished: Boolean read get_IsPublished;
    ///<summary>Gets a value that indicates whether the print queue can use EMF (Enhanced Meta File) that enables faster data flow from a printing application to the Windows spooler. </summary>
    ///<returns><see langword="true" />
    ///  if the printer cannot use EMF printing; otherwise, <see langword="false" />
    ///  .</returns>
    property IsRawOnlyEnabled: Boolean read get_IsRawOnlyEnabled;
    ///<summary>Gets a value that indicates whether bidirectional communication with the printer is enabled. </summary>
    ///<returns><see langword="true" />
    ///  if bidirectional communication with the printer is enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property IsBidiEnabled: Boolean read get_IsBidiEnabled;
    ///<summary>Gets a value that indicates whether the printer prints jobs that have completed the spooling process before jobs that have not fully spooled even if the latter entered the queue first or have a higher priority. </summary>
    ///<returns><see langword="true" />
    ///  if the printer prints jobs that have completed the spooling process before jobs that have not fully spooled; otherwise, <see langword="false" />
    ///  .</returns>
    property ScheduleCompletedJobsFirst: Boolean read get_ScheduleCompletedJobsFirst;
    ///<summary>Gets a value that indicates whether the queue is saving the printer language file instead of deleting it following printing. </summary>
    ///<returns><see langword="true" />
    ///  if the queue is saving the printer language file; otherwise, <see langword="false" />
    ///  .</returns>
    property KeepPrintedJobs: Boolean read get_KeepPrintedJobs;
    ///<summary>Gets a value that indicates whether the queue holds documents when document and printer configurations do not match. </summary>
    ///<returns><see langword="true" />
    ///  if the queue holds mismatched configurations; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDevQueryEnabled: Boolean read get_IsDevQueryEnabled;
    ///<summary>Gets a value that indicates whether the print queue is hidden in your application's user interface. </summary>
    ///<returns><see langword="true" />
    ///  if the print queue is hidden in the Windows user interface; otherwise, <see langword="false" />
    ///  .</returns>
    property IsHidden: Boolean read get_IsHidden;
    ///<summary>Gets a value that indicates whether the printer is available for use by other computers on the network. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is shared; otherwise, <see langword="false" />
    ///  .</returns>
    property IsShared: Boolean read get_IsShared;
    ///<summary>Gets a value that indicates whether the queue prints directly to the printer or spools documents first and then prints them. </summary>
    ///<returns><see langword="true" />
    ///  if the queue prints directly to the printer; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDirect: Boolean read get_IsDirect;
    ///<summary>Gets a value that indicates whether the printer can support a queue with more than one print job in it at a time. </summary>
    ///<returns><see langword="true" />
    ///  if the printer can support the queuing of multiple print jobs; otherwise, <see langword="false" />
    ///  .</returns>
    property IsQueued: Boolean read get_IsQueued;
    ///<summary>Gets a value that indicates whether the printer is in power save mode. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is in power save mode; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPowerSaveOn: Boolean read get_IsPowerSaveOn;
    ///<summary>Gets a value that indicates whether the printer is in an error state. </summary>
    ///<returns><see langword="true" />
    ///  if in the printer is in an error state; otherwise, <see langword="false" />
    ///  .</returns>
    property IsServerUnknown: Boolean read get_IsServerUnknown;
    ///<summary>Gets a value that indicates whether a door is open on the printer. </summary>
    ///<returns><see langword="true" />
    ///  if a door is open; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDoorOpened: Boolean read get_IsDoorOpened;
    ///<summary>Gets a value that indicates whether the printer is out of memory. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is out of memory; otherwise, <see langword="false" />
    ///  .</returns>
    property IsOutOfMemory: Boolean read get_IsOutOfMemory;
    ///<summary>Gets a value that indicates whether the printer needs the attention of a human being. </summary>
    ///<returns><see langword="true" />
    ///  if the printer needs human attention; otherwise, <see langword="false" />
    ///  .</returns>
    property NeedUserIntervention: Boolean read get_NeedUserIntervention;
    ///<summary>Gets a value that indicates whether the printer is unable to print the current page. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is unable to print the current page; otherwise, <see langword="false" />
    ///  .</returns>
    property PagePunt: Boolean read get_PagePunt;
    ///<summary>Gets a value that indicates if the printer has toner. </summary>
    ///<returns><see langword="true" />
    ///  if the current printer has toner; otherwise, <see langword="false" />
    ///  .</returns>
    property HasToner: Boolean read get_HasToner;
    ///<summary>Gets a value that indicates whether the printer is running short of toner. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is running short of toner; otherwise, <see langword="false" />
    ///  .</returns>
    property IsTonerLow: Boolean read get_IsTonerLow;
    ///<summary>Gets a value that indicates whether the printer is warming up. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is warming up; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWarmingUp: Boolean read get_IsWarmingUp;
    ///<summary>Gets a value that indicates whether the printer is initializing itself. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is initializing; otherwise, <see langword="false" />
    ///  .</returns>
    property IsInitializing: Boolean read get_IsInitializing;
    ///<summary>Gets a value that indicates whether the printer is processing a print job. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is processing a print job; otherwise, <see langword="false" />
    ///  .</returns>
    property IsProcessing: Boolean read get_IsProcessing;
    ///<summary>Gets a value that indicates whether the queue is waiting for a job to be added. </summary>
    ///<returns><see langword="true" />
    ///  if the queue is waiting for a job; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWaiting: Boolean read get_IsWaiting;
    ///<summary>Gets a value that indicates whether the printer is available. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is available; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNotAvailable: Boolean read get_IsNotAvailable;
    ///<summary>Gets a value that indicates whether the output area of the printer is in danger of overflowing. </summary>
    ///<returns><see langword="true" />
    ///  if the output area of the printer is full; otherwise, <see langword="false" />
    ///  .</returns>
    property IsOutputBinFull: Boolean read get_IsOutputBinFull;
    ///<summary>Gets a value that indicates whether a job is printing. </summary>
    ///<returns><see langword="true" />
    ///  if a job is printing; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPrinting: Boolean read get_IsPrinting;
    ///<summary>Gets a value that indicates whether the printing device is busy. </summary>
    ///<returns><see langword="true" />
    ///  if the device is busy; otherwise, <see langword="false" />
    ///  .</returns>
    property IsBusy: Boolean read get_IsBusy;
    ///<summary>Gets a value that indicates whether the printer is receiving or sending data or signals. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is receiving or sending; otherwise, <see langword="false" />
    ///  .</returns>
    property IsIOActive: Boolean read get_IsIOActive;
    ///<summary>Gets a value that indicates whether the printer is offline. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is offline; otherwise, <see langword="false" />
    ///  .</returns>
    property IsOffline: Boolean read get_IsOffline;
    ///<summary>Gets a value that indicates if the printer is having an unspecified paper problem. </summary>
    ///<returns><see langword="true" />
    ///  if there is an unspecified paper problem; otherwise, <see langword="false" />
    ///  .</returns>
    property HasPaperProblem: Boolean read get_HasPaperProblem;
    ///<summary>Gets a value that indicates whether the printer needs to be manually fed paper for the current print job. </summary>
    ///<returns><see langword="true" />
    ///  if the printer needs to be manually fed paper; otherwise, <see langword="false" />
    ///  .</returns>
    property IsManualFeedRequired: Boolean read get_IsManualFeedRequired;
    ///<summary>Gets a value that indicates whether the printer needs to be reloaded with paper of the size required for the current job. </summary>
    ///<returns><see langword="true" />
    ///  if the printer needs to be reloaded; otherwise, <see langword="false" />
    ///  .</returns>
    property IsOutOfPaper: Boolean read get_IsOutOfPaper;
    ///<summary>Gets a value that indicates whether the current sheet of paper is stuck in the printer. </summary>
    ///<returns><see langword="true" />
    ///  if the paper is stuck; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPaperJammed: Boolean read get_IsPaperJammed;
    ///<summary>Gets a value that indicates whether the printer is in the process of deleting a print job. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is deleting a job; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPendingDeletion: Boolean read get_IsPendingDeletion;
    ///<summary>Gets a value that indicates whether the printer or device is in an error condition. </summary>
    ///<returns><see langword="true" />
    ///  if the device is in an error condition; otherwise, <see langword="false" />
    ///  .</returns>
    property IsInError: Boolean read get_IsInError;
    ///<summary>Gets a value that indicates whether the print queue has been paused. </summary>
    ///<returns><see langword="true" />
    ///  if the print queue has been paused; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPaused: Boolean read get_IsPaused;
    ///<summary>Gets the properties of the print queue. </summary>
    ///<returns>A bitwise combination of the <see cref="T:System.Printing.PrintQueueAttributes" />
    ///  enumeration values. </returns>
    property QueueAttributes: DNPrintQueueAttributes read get_QueueAttributes;
    ///<summary>Gets a value that represents the status of the printer. These include "warming up," "initializing," "printing," and others. </summary>
    ///<returns>The current <see cref="T:System.Printing.PrintQueueStatus" />
    ///  value.</returns>
    property QueueStatus: DNPrintQueueStatus read get_QueueStatus;
    ///<summary>Gets the complete name of the queue. </summary>
    ///<returns>The complete name of the print queue.</returns>
    property FullName: string read get_FullName;
    ///<summary>Gets or sets (protected) the print server that controls the print queue. </summary>
    ///<returns>The name and other properties of the <see cref="T:System.Printing.PrintServer" />
    ///  that is hosting the print queue.</returns>
    property HostingPrintServer: DNPrintServer read get_HostingPrintServer;
    ///<summary>Gets or sets the print processor that the queue uses. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintProcessor" />
    ///  that the queue uses, such as WinPrint or ModiPrint. </returns>
    property QueuePrintProcessor: DNPrintProcessor read get_QueuePrintProcessor write set_QueuePrintProcessor;
    ///<summary>Gets or sets the port that the queue uses. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintPort" />
    ///  that is assigned to the print queue.</returns>
    property QueuePort: DNPrintPort read get_QueuePort write set_QueuePort;
    ///<summary>Gets or sets the printer driver for the queue. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintDriver" />
    ///  that the queue uses.</returns>
    property QueueDriver: DNPrintDriver read get_QueueDriver write set_QueueDriver;
    ///<summary>Gets or sets the default printer options associated with this <see cref="T:System.Printing.PrintQueue" />
    ///  .</summary>
    ///<returns>The default <see cref="T:System.Printing.PrintTicket" />
    ///  for the print queue; or <see langword="null" />
    ///  if an error has occurred in the print queue.</returns>
    property DefaultPrintTicket: DDN.ReachFramework.DNPrintTicket read get_DefaultPrintTicket write set_DefaultPrintTicket;
    ///<summary>Gets or sets the current user's default <see cref="T:System.Printing.PrintTicket" />
    ///  object which contains detailed information about the print job. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintTicket" />
    ///  for the current user, or <see langword="null" />
    ///  if a user <see cref="T:System.Printing.PrintTicket" />
    ///  has not been specified.</returns>
    property UserPrintTicket: DDN.ReachFramework.DNPrintTicket read get_UserPrintTicket write set_UserPrintTicket;
    ///<summary>Gets or sets the path and file name of a file that is inserted at the beginning of each print job. </summary>
    ///<returns>The path and file name of the separator file.</returns>
    property SeparatorFile: string read get_SeparatorFile write set_SeparatorFile;
    ///<summary>Gets a description of the print queue. </summary>
    ///<returns>A description of the print queue.</returns>
    property Description: string read get_Description;
    ///<summary>Gets or sets the printer's physical location. </summary>
    ///<returns>The printer's physical location.</returns>
    property Location: string read get_Location write set_Location;
    ///<summary>Gets or sets a comment about the printer. </summary>
    ///<returns>A comment about the printer.</returns>
    property Comment: string read get_Comment write set_Comment;
    ///<summary>Gets or sets a name for the printer that is seen by users on the network when it is shared. </summary>
    ///<returns>The public name of a shared printer.</returns>
    property ShareName: string read get_ShareName write set_ShareName;
    ///<summary>Gets the total number of jobs lined up in the print queue. </summary>
    ///<returns>The number of jobs in the queue.</returns>
    property NumberOfJobs: Int32 read get_NumberOfJobs;
    ///<summary>Gets the speed of the printer measured in pages per minute. </summary>
    ///<returns>The average pages printed per minute of the printer.</returns>
    property AveragePagesPerMinute: Int32 read get_AveragePagesPerMinute;
    ///<summary>Gets or sets the latest time, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the printer will print a job. </summary>
    ///<returns>The time of day that the printer is no longer available, expressed as the number of minutes after midnight (UTC). The maximum value is 1439. When a printer is first installed by using the Microsoft Windows Add Printer Wizard, the printer defaults to being available all the time, and this property returnsÂ 0 in all time zones. </returns>
    property UntilTimeOfDay: Int32 read get_UntilTimeOfDay write set_UntilTimeOfDay;
    ///<summary>Gets or sets the earliest time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the printer will print a job. </summary>
    ///<returns>The time of day that the printer first becomes available, expressed as the number of minutes after midnight (UTC). The maximum value is 1439. When a printer is first installed by using the Microsoft Windows Add Printer Wizard, the printer defaults to being available all the time, and this property returns 0 in all time zones.</returns>
    property StartTimeOfDay: Int32 read get_StartTimeOfDay write set_StartTimeOfDay;
    ///<summary>Gets or sets the default priority that is given to each new print job added to the queue. </summary>
    ///<returns>The default priority for print jobs added to the queue. Possible values range from 1 through 99. The default is 1. </returns>
    property DefaultPriority: Int32 read get_DefaultPriority write set_DefaultPriority;
    ///<summary>Gets or sets the print queue's name. </summary>
    ///<returns>The name of the print queue.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the priority of the print queue relative to other print queues that are hosted by the same print server and that use the same physical printer. </summary>
    ///<returns>The priority for the print queue. Possible values are from 1 through 99. The default is 1.</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    ///<summary>Gets an object that contains the configuration settings for the current print job. </summary>
    ///<returns>A <see cref="T:System.Printing.PrintJobSettings" />
    ///  value that holds the settings of the currently printing job. These settings include a description of the job and a reference to the job's <see cref="T:System.Printing.PrintTicket" />
    ///  . </returns>
    property CurrentJobSettings: DNPrintJobSettings read get_CurrentJobSettings;
    ///<summary>Gets or sets a value that indicates whether the current print job is being cancelled. </summary>
    ///<returns><see langword="true" />
    ///  if the print job is being cancelled; otherwise, <see langword="false" />
    ///  .</returns>
    property PrintingIsCancelled: Boolean read get_PrintingIsCancelled write set_PrintingIsCancelled;
    ///<summary>Gets the parent of the object. </summary>
    ///<returns>Another <see cref="T:System.Printing.PrintSystemObject" />
    ///  .</returns>
    property Parent: DNPrintSystemObject read get_Parent;
    ///<summary>Gets a collection of attribute and value pairs. </summary>
    ///<returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  that contains attribute and value pairs.</returns>
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintQueue = class(TDNGenericImport<DNPrintQueueClass, DNPrintQueue>) end;

  //-------------namespace: System.Printing----------------
  DNPrintServerClass = interface(DNPrintSystemObjectClass)
  ['{0D52BA78-FF3D-59D6-9242-C6ABCDB15BC1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class that has the specified path, properties filter, and the needed access. </summary>
    ///  <param name="path">The name and complete path of the print server.</param>
    ///  <param name="propertiesFilter">An array of the names of properties that the constructor initializes.</param>
    ///  <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(path: string; propertiesFilter: TArray<string>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class and provides the specified path, the <see cref="T:System.Printing.PrintServerIndexedProperty" />
    ///  array, and the needed access. </summary>
    ///  <param name="path">The complete path and name of the print server</param>
    ///  <param name="propertiesFilter">The properties that the constructor initializes.</param>
    ///  <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(path: string; propertiesFilter: TArray<DNPrintServerIndexedProperty>; desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class that has the specified path and the needed access. </summary>
    ///  <param name="path">The name and complete path of the print server.</param>
    ///  <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(path: string; desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class that represents the local print server and assigns it the specified <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  . </summary>
    ///  <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(desiredAccess: DNPrintSystemDesiredAccess): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class that has the specified path and properties filter. </summary>
    ///  <param name="path">The name and complete path of the print server.</param>
    ///  <param name="propertiesFilter">An array of the names of properties that the constructor initializes.</param>
    {class} function init(path: string; propertiesFilter: TArray<string>): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class by using the specified <see cref="T:System.Printing.PrintServerIndexedProperty" />
    ///  array to determine which properties will be initialized. </summary>
    ///  <param name="path">The complete path and name of the print server</param>
    ///  <param name="propertiesFilter">The properties that the constructor initializes.</param>
    {class} function init(path: string; propertiesFilter: TArray<DNPrintServerIndexedProperty>): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class that has the specified path. </summary>
    ///  <param name="path">The name and complete path of the print server.</param>
    {class} function init(path: string): DNPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" />
    ///  class. </summary>
    {class} function init: DNPrintServer; overload;

  { static methods } 

    ///<summary>Removes the specified <see cref="T:System.Printing.PrintQueue" />
    ///  from the print server. </summary>
    ///  <param name="printQueue">The queue that is deleted.</param>
    ///<returns><see langword="true" />
    ///  if the queue is successfully deleted; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function DeletePrintQueue(printQueue: DNPrintQueue): Boolean; overload;
    ///<summary>Removes the print queue with the specified name from the print server. </summary>
    ///  <param name="printQueueName">The name of the queue that is deleted.</param>
    ///<returns><see langword="true" />
    ///  if the queue is successfully deleted; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function DeletePrintQueue(printQueueName: string): Boolean; overload;

  end;

  ///<summary>Manages the print queues on a print server, which is usually a computer, but can be a dedicated hardware print server appliance. </summary>
  [DNTypeName('System.Printing.PrintServer')]
  DNPrintServer = interface(DNPrintSystemObject)
  ['{8B4C09E2-3D6D-3892-AB39-F38E3B771EFF}']
  { getters & setters } 

    function get_Name: string;
    function get_SubSystemVersion: Byte;
    function get_RestartJobOnPoolEnabled: Boolean;
    procedure set_RestartJobOnPoolEnabled(value: Boolean);
    function get_RestartJobOnPoolTimeout: Int32;
    procedure set_RestartJobOnPoolTimeout(value: Int32);
    function get_MinorVersion: Int32;
    function get_MajorVersion: Int32;
    function get_EventLog: DNPrintServerEventLoggingTypes;
    procedure set_EventLog(value: DNPrintServerEventLoggingTypes);
    function get_NetPopup: Boolean;
    procedure set_NetPopup(value: Boolean);
    function get_BeepEnabled: Boolean;
    procedure set_BeepEnabled(value: Boolean);
    function get_DefaultSchedulerPriority: DDN.mscorlib.DNThreadPriority;
    function get_SchedulerPriority: DDN.mscorlib.DNThreadPriority;
    procedure set_SchedulerPriority(value: DDN.mscorlib.DNThreadPriority);
    function get_DefaultPortThreadPriority: DDN.mscorlib.DNThreadPriority;
    function get_PortThreadPriority: DDN.mscorlib.DNThreadPriority;
    procedure set_PortThreadPriority(value: DDN.mscorlib.DNThreadPriority);
    function get_DefaultSpoolDirectory: string;
    procedure set_DefaultSpoolDirectory(value: string);
    function get_Parent: DNPrintSystemObject;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Installs a print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="initialParameters">The parameters that are initialized.</param>
    ///<returns>The new <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; initialParameters: DNPrintPropertyDictionary): DNPrintQueue; overload;
    ///<summary>Installs a shared, prioritized print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    ///  <param name="printQueueShareName">The share name of the new queue.</param>
    ///  <param name="printQueueComment">A comment about the queue that is visible to users in the Microsoft WindowsÂ UI.</param>
    ///  <param name="printQueueLocation">The location of the new queue.</param>
    ///  <param name="printQueueSeparatorFile">The path of a file that is inserted at the beginning of each print job.</param>
    ///  <param name="printQueuePriority">A value from 1 through 99 that specifies the priority of the queue relative to other queues that are hosted by the print server.</param>
    ///  <param name="printQueueDefaultPriority">A value from 1 through 99 that specifies the default priority of new print jobs that are sent to the queue.</param>
    ///<returns>The newly created <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes; printQueueShareName: string; printQueueComment: string; printQueueLocation: string; printQueueSeparatorFile: string; printQueuePriority: Int32; printQueueDefaultPriority: Int32): DNPrintQueue; overload;
    ///<summary>Installs a prioritized print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    ///  <param name="printQueueProperty">The comment, location, or share name of the new queue.</param>
    ///  <param name="printQueuePriority">A value from 1 through 99 that specifies the priority of this print queue relative to other queues that are hosted by the print server.</param>
    ///  <param name="printQueueDefaultPriority">A value from 1 to 99 that specifies the default priority of print jobs that are sent to the queue.</param>
    ///<returns>The newly created <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes; printQueueProperty: DNPrintQueueStringProperty; printQueuePriority: Int32; printQueueDefaultPriority: Int32): DNPrintQueue; overload;
    ///<summary>Installs a print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    ///<returns>The newly created <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes): DNPrintQueue; overload;
    ///<summary>Gets a specified print queue from the print server. </summary>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="propertiesFilter">The names of the properties that are initialized in the returned queue.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueue" />
    ///  with the specified name from the print server.</returns>
    function GetPrintQueue(printQueueName: string; propertiesFilter: TArray<string>): DNPrintQueue; overload;
    ///<summary>Obtains a reference to the named print queue from the print server. </summary>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueue" />
    ///  with the specified name from the print server.</returns>
    function GetPrintQueue(printQueueName: string): DNPrintQueue; overload;
    ///<summary>Gets the collection of print queues, which are of the specified <see cref="T:System.Printing.EnumeratedPrintQueueTypes" />
    ///  and are initialized only in the specified properties.  </summary>
    ///  <param name="propertiesFilter">The names of the queue properties that are initialized.</param>
    ///  <param name="enumerationFlag">An array of values that represent the types of print queues that are returned in the collection.</param>
    ///<returns>A <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues of the specified types; each print queue has only the specified properties initialized. </returns>
    function GetPrintQueues(propertiesFilter: TArray<string>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Gets a collection of print queues of the specified types. These print queues are only initialized in the properties that are specified in the <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  array. </summary>
    ///  <param name="propertiesFilter">The properties that the constructor initializes.</param>
    ///  <param name="enumerationFlag">An array of values that represent the types of print queues in the collection.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of the print server.</returns>
    function GetPrintQueues(propertiesFilter: TArray<DNPrintQueueIndexedProperty>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Gets the collection of print queues of the specified types that are named in <see cref="T:System.Printing.EnumeratedPrintQueueTypes" />
    ///  and hosted by the print server. </summary>
    ///  <param name="enumerationFlag">An array of values that represent the types of print queues that are in the collection.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues, of the specified types, on the print server.</returns>
    function GetPrintQueues(enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Gets a collection of print queues that are hosted by the print server and that are initialized only in the specified properties. </summary>
    ///  <param name="propertiesFilter">The names of the queue properties that are initialized.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues on the print server; each print queue is initialized only in the properties that are specified in <paramref name="propertiesFilter" />
    ///  .</returns>
    function GetPrintQueues(propertiesFilter: TArray<string>): DNPrintQueueCollection; overload;
    ///<summary>Gets a collection of print queues that are hosted by the print server and initialized only in the properties that are specified in the <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  array. </summary>
    ///  <param name="propertiesFilter">The properties that the constructor initializes.</param>
    ///<returns>A <see cref="T:System.Printing.PrintQueueCollection" />
    ///  whose members are initialized only in the properties specified by <paramref name="propertiesFilter" />
    ///  .</returns>
    function GetPrintQueues(propertiesFilter: TArray<DNPrintQueueIndexedProperty>): DNPrintQueueCollection; overload;
    ///<summary>Gets the collection of print queues that the print server hosts. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues on the print server.</returns>
    function GetPrintQueues: DNPrintQueueCollection; overload;
    ///<summary>Commits any changes that your program made to the properties of the print server object by writing them to the print server that the object represents. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">Some of the properties are not committed. </exception><exception cref="T:System.Printing.PrintCommitAttributesException">Some of the properties could not be committed. - or -The <see cref="T:System.Printing.PrintServer" />
    ///  object was not created with sufficient rights. See Remarks.</exception>
    procedure Commit;
    ///<summary>Updates the properties of the <see cref="T:System.Printing.PrintServer" />
    ///  object so that each property value matches the corresponding attribute value of the print server that the object represents. </summary>
    ///<exception cref="T:System.Printing.PrintSystemException">Some of the properties cannot be refreshed. </exception>
    procedure Refresh;
    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the print server. </summary>
    ///<returns>The name of the print server.</returns>
    ///<exception cref="T:System.Printing.PrintSystemException">The property is not initialized.</exception>
    property Name: string read get_Name;
    ///<summary>Gets the version of the print spooler system. </summary>
    ///<returns>A <see cref="T:System.Byte" />
    ///  that identifies the version of the print spooler system.</returns>
    property SubSystemVersion: Byte read get_SubSystemVersion;
    ///<summary>Gets or sets a value that indicates whether users can restart jobs after an error occurs if printer pooling is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if jobs can be restarted when printer pooling is enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property RestartJobOnPoolEnabled: Boolean read get_RestartJobOnPoolEnabled write set_RestartJobOnPoolEnabled;
    ///<summary>Gets or sets a value that indicates the wait time before a job can be restarted, if an error occurs when printer pooling is also enabled.</summary>
    ///<returns>The wait time, in minutes, before a job restarts.  </returns>
    property RestartJobOnPoolTimeout: Int32 read get_RestartJobOnPoolTimeout write set_RestartJobOnPoolTimeout;
    ///<summary>Gets the minor version within the major version of the operating system. </summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the minor version of the operating system.</returns>
    property MinorVersion: Int32 read get_MinorVersion;
    ///<summary>Gets the major version of the operating system. </summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the major version of the operating system.</returns>
    property MajorVersion: Int32 read get_MajorVersion;
    ///<summary>Gets or sets the type of events that the print server logs. </summary>
    ///<returns>A value of <see cref="T:System.Printing.PrintServerEventLoggingTypes" />
    ///  that identifies the type of event logging that is provided by the print server. The default is <see cref="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingErrorEvents" />
    ///  .</returns>
    property EventLog: DNPrintServerEventLoggingTypes read get_EventLog write set_EventLog;
    ///<summary>Gets or sets a value that indicates whether notifications that a print job has finished are sent to either the print server or the client computer. </summary>
    ///<returns><see langword="true" />
    ///  if notifications are sent to the client computer; <see langword="false" />
    ///  if notifications are sent to the print server.</returns>
    property NetPopup: Boolean read get_NetPopup write set_NetPopup;
    ///<summary>Gets or sets a value that indicates whether the print server beeps in response to an error condition in the printer. </summary>
    ///<returns><see cref="T:System.Boolean" />
    ///<see langword="true" />
    ///  if the print server beeps in response to an error; otherwise, <see langword="false" />
    ///  .</returns>
    property BeepEnabled: Boolean read get_BeepEnabled write set_BeepEnabled;
    ///<summary>Do not use.</summary>
    ///<returns>The default scheduler thread priority.</returns>
    property DefaultSchedulerPriority: DDN.mscorlib.DNThreadPriority read get_DefaultSchedulerPriority;
    ///<summary>Gets or sets the thread priority for the process that routes print jobs from applications to print queues. </summary>
    ///<returns>A <see cref="T:System.Threading.ThreadPriority" />
    ///  enumeration value that identifies the thread priority for the print server scheduling process. The default is <see cref="F:System.Threading.ThreadPriority.Normal" />
    ///  .</returns>
    property SchedulerPriority: DDN.mscorlib.DNThreadPriority read get_SchedulerPriority write set_SchedulerPriority;
    ///<summary>Do not use.</summary>
    ///<returns>The thread priority.</returns>
    property DefaultPortThreadPriority: DDN.mscorlib.DNThreadPriority read get_DefaultPortThreadPriority;
    ///<summary>Gets or sets the thread priority for the process that manages I/O through the printer ports. </summary>
    ///<returns>A <see cref="T:System.Threading.ThreadPriority" />
    ///  enumeration value that identifies the thread priority for the process that manages the printer ports. The default is <see cref="F:System.Threading.ThreadPriority.Normal" />
    ///  .</returns>
    property PortThreadPriority: DDN.mscorlib.DNThreadPriority read get_PortThreadPriority write set_PortThreadPriority;
    ///<summary>Gets or sets the path where the print server's spool files are located. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that identifies the complete path of the folder for the spool files.</returns>
    property DefaultSpoolDirectory: string read get_DefaultSpoolDirectory write set_DefaultSpoolDirectory;
    ///<summary>Gets the parent of the object. </summary>
    ///<returns>Another <see cref="T:System.Printing.PrintSystemObject" />
    ///  .</returns>
    property Parent: DNPrintSystemObject read get_Parent;
    ///<summary>Gets a collection of attribute and value pairs. </summary>
    ///<returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  that contains attribute and value pairs.</returns>
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintServer = class(TDNGenericImport<DNPrintServerClass, DNPrintServer>) end;

  //-------------namespace: System.Printing----------------
  DNLocalPrintServerClass = interface(DNPrintServerClass)
  ['{FAA50997-9999-5CCC-8160-8F200AE3074F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  class that has the specified properties and <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  . </summary>
    ///  <param name="propertiesFilter">An array of the property names that the constructor initializes.</param>
    ///  <param name="desiredAccess">A value specifying the type of access to the print server that your application needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(propertiesFilter: TArray<string>; desiredAccess: DNPrintSystemDesiredAccess): DNLocalPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  class that has the specified <see cref="T:System.Printing.LocalPrintServerIndexedProperty" />
    ///  array and the specified <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  . </summary>
    ///  <param name="propertiesFilter">An array of properties that the constructor initializes.</param>
    ///  <param name="desiredAccess">A value specifying the type of access to the print server that your program needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(propertiesFilter: TArray<DNLocalPrintServerIndexedProperty>; desiredAccess: DNPrintSystemDesiredAccess): DNLocalPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  class that has the specified <see cref="T:System.Printing.PrintSystemDesiredAccess" />
    ///  . </summary>
    ///  <param name="desiredAccess">A value specifying the type of access to the print server that your application needs.</param>
    ///<exception cref="T:System.Printing.PrintServerException"><paramref name="desiredAccess" />
    ///  is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" />
    ///  object, not a <see cref="T:System.Printing.LocalPrintServer" />
    ///  object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />
    ///  .</exception>
    {class} function init(desiredAccess: DNPrintSystemDesiredAccess): DNLocalPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  class that has the specified properties.</summary>
    ///  <param name="propertiesFilter">An array of the property names that the constructor initializes.</param>
    {class} function init(propertiesFilter: TArray<string>): DNLocalPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  class that has the specified <see cref="T:System.Printing.LocalPrintServerIndexedProperty" />
    ///  array. </summary>
    ///  <param name="propertiesFilter">An array of properties that the constructor initializes.</param>
    {class} function init(propertiesFilter: TArray<DNLocalPrintServerIndexedProperty>): DNLocalPrintServer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  class. </summary>
    {class} function init: DNLocalPrintServer; overload;

  { static methods } 

    ///<summary>Returns a reference to the default print queue of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  . </summary>
    ///<returns>The default <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    {class} function GetDefaultPrintQueue: DNPrintQueue;

  end;

  ///<summary>Represents the local print server (the computer on which your application is running) and enables management of its print queues.</summary>
  [DNTypeName('System.Printing.LocalPrintServer')]
  DNLocalPrintServer = interface(DNPrintServer)
  ['{7822A26F-5EE1-3533-99C7-A054F018CFBB}']
  { getters & setters } 

    function get_DefaultPrintQueue: DNPrintQueue;
    procedure set_DefaultPrintQueue(printQueue: DNPrintQueue);
    function get_Name: string;
    function get_SubSystemVersion: Byte;
    function get_RestartJobOnPoolEnabled: Boolean;
    procedure set_RestartJobOnPoolEnabled(value: Boolean);
    function get_RestartJobOnPoolTimeout: Int32;
    procedure set_RestartJobOnPoolTimeout(value: Int32);
    function get_MinorVersion: Int32;
    function get_MajorVersion: Int32;
    function get_EventLog: DNPrintServerEventLoggingTypes;
    procedure set_EventLog(value: DNPrintServerEventLoggingTypes);
    function get_NetPopup: Boolean;
    procedure set_NetPopup(value: Boolean);
    function get_BeepEnabled: Boolean;
    procedure set_BeepEnabled(value: Boolean);
    function get_DefaultSchedulerPriority: DDN.mscorlib.DNThreadPriority;
    function get_SchedulerPriority: DDN.mscorlib.DNThreadPriority;
    procedure set_SchedulerPriority(value: DDN.mscorlib.DNThreadPriority);
    function get_DefaultPortThreadPriority: DDN.mscorlib.DNThreadPriority;
    function get_PortThreadPriority: DDN.mscorlib.DNThreadPriority;
    procedure set_PortThreadPriority(value: DDN.mscorlib.DNThreadPriority);
    function get_DefaultSpoolDirectory: string;
    procedure set_DefaultSpoolDirectory(value: string);
    function get_Parent: DNPrintSystemObject;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Connects to the print queue that is specified by using the <see cref="T:System.String" />
    ///  . </summary>
    ///  <param name="printQueuePath">The full path of the print queue that is being connected.</param>
    ///<returns><see langword="true" />
    ///  if the connection is made; otherwise <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Printing.PrintServerException">A print queue with the specified path is not found.</exception>
    function ConnectToPrintQueue(printQueuePath: string): Boolean; overload;
    ///<summary>Connects the local print server to the specified <see cref="T:System.Printing.PrintQueue" />
    ///  . </summary>
    ///  <param name="printer">The print queue to connect.</param>
    ///<returns><see langword="true" />
    ///  if the connection is made; otherwise <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Printing.PrintServerException">A print queue that matches the <see cref="P:System.Printing.PrintQueue.FullName" />
    ///  property of the <paramref name="printer" />
    ///  is not found.</exception>
    function ConnectToPrintQueue(printer: DNPrintQueue): Boolean; overload;
    ///<summary>Disconnects the local print server from the specified <see cref="T:System.Printing.PrintQueue" />
    ///  . </summary>
    ///  <param name="printer">The print queue that is being disconnected.</param>
    ///<returns><see langword="true" />
    ///  if the disconnection is successful; otherwise <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Printing.PrintServerException">A print queue matching the <see cref="P:System.Printing.PrintQueue.FullName" />
    ///  property of the <paramref name="printer" />
    ///  is not found.</exception>
    function DisconnectFromPrintQueue(printer: DNPrintQueue): Boolean; overload;
    ///<summary>Disconnects from the print queue that is specified in the <see cref="T:System.String" />
    ///  . </summary>
    ///  <param name="printQueuePath">The full path to the print queue that is disconnected.</param>
    ///<returns><see langword="true" />
    ///  if the disconnection is successful; otherwise <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Printing.PrintServerException">A print queue with the specified path is not found.</exception>
    function DisconnectFromPrintQueue(printQueuePath: string): Boolean; overload;
    ///<summary>Writes any changes that your application made to the properties of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  to the actual print server that the object represents. </summary>
    ///<exception cref="T:System.Printing.PrintServerException">Some properties are not committed.</exception><exception cref="T:System.Printing.PrintCommitAttributesException">Some of the properties could not be committed. - or -The <see cref="T:System.Printing.LocalPrintServer" />
    ///  object was not created with sufficient rights. See Remarks.</exception>
    procedure Commit;
    ///<summary>Updates the properties of the <see cref="T:System.Printing.LocalPrintServer" />
    ///  object so that their values match the values of the print server that the object represents. </summary>
    ///<exception cref="T:System.Printing.PrintServerException">Some properties did not update.</exception>
    procedure Refresh;
    ///<summary>Installs a print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="initialParameters">The parameters that are initialized.</param>
    ///<returns>The new <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; initialParameters: DNPrintPropertyDictionary): DNPrintQueue; overload;
    ///<summary>Installs a shared, prioritized print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    ///  <param name="printQueueShareName">The share name of the new queue.</param>
    ///  <param name="printQueueComment">A comment about the queue that is visible to users in the Microsoft WindowsÂ UI.</param>
    ///  <param name="printQueueLocation">The location of the new queue.</param>
    ///  <param name="printQueueSeparatorFile">The path of a file that is inserted at the beginning of each print job.</param>
    ///  <param name="printQueuePriority">A value from 1 through 99 that specifies the priority of the queue relative to other queues that are hosted by the print server.</param>
    ///  <param name="printQueueDefaultPriority">A value from 1 through 99 that specifies the default priority of new print jobs that are sent to the queue.</param>
    ///<returns>The newly created <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes; printQueueShareName: string; printQueueComment: string; printQueueLocation: string; printQueueSeparatorFile: string; printQueuePriority: Int32; printQueueDefaultPriority: Int32): DNPrintQueue; overload;
    ///<summary>Installs a prioritized print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    ///  <param name="printQueueProperty">The comment, location, or share name of the new queue.</param>
    ///  <param name="printQueuePriority">A value from 1 through 99 that specifies the priority of this print queue relative to other queues that are hosted by the print server.</param>
    ///  <param name="printQueueDefaultPriority">A value from 1 to 99 that specifies the default priority of print jobs that are sent to the queue.</param>
    ///<returns>The newly created <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes; printQueueProperty: DNPrintQueueStringProperty; printQueuePriority: Int32; printQueueDefaultPriority: Int32): DNPrintQueue; overload;
    ///<summary>Installs a print queue, and associated printer driver, on the print server. </summary>
    ///  <param name="printQueueName">The name of the new queue.</param>
    ///  <param name="driverName">The path and name of the printer driver.</param>
    ///  <param name="portNames">The IDs of the ports that the new queue uses.</param>
    ///  <param name="printProcessorName">The name of the print processor.</param>
    ///  <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    ///<returns>The newly created <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    function InstallPrintQueue(printQueueName: string; driverName: string; portNames: TArray<string>; printProcessorName: string; printQueueAttributes: DNPrintQueueAttributes): DNPrintQueue; overload;
    ///<summary>Gets a specified print queue from the print server. </summary>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///  <param name="propertiesFilter">The names of the properties that are initialized in the returned queue.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueue" />
    ///  with the specified name from the print server.</returns>
    function GetPrintQueue(printQueueName: string; propertiesFilter: TArray<string>): DNPrintQueue; overload;
    ///<summary>Obtains a reference to the named print queue from the print server. </summary>
    ///  <param name="printQueueName">The name of the print queue.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueue" />
    ///  with the specified name from the print server.</returns>
    function GetPrintQueue(printQueueName: string): DNPrintQueue; overload;
    ///<summary>Gets the collection of print queues, which are of the specified <see cref="T:System.Printing.EnumeratedPrintQueueTypes" />
    ///  and are initialized only in the specified properties.  </summary>
    ///  <param name="propertiesFilter">The names of the queue properties that are initialized.</param>
    ///  <param name="enumerationFlag">An array of values that represent the types of print queues that are returned in the collection.</param>
    ///<returns>A <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues of the specified types; each print queue has only the specified properties initialized. </returns>
    function GetPrintQueues(propertiesFilter: TArray<string>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Gets a collection of print queues of the specified types. These print queues are only initialized in the properties that are specified in the <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  array. </summary>
    ///  <param name="propertiesFilter">The properties that the constructor initializes.</param>
    ///  <param name="enumerationFlag">An array of values that represent the types of print queues in the collection.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of the print server.</returns>
    function GetPrintQueues(propertiesFilter: TArray<DNPrintQueueIndexedProperty>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Gets the collection of print queues of the specified types that are named in <see cref="T:System.Printing.EnumeratedPrintQueueTypes" />
    ///  and hosted by the print server. </summary>
    ///  <param name="enumerationFlag">An array of values that represent the types of print queues that are in the collection.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues, of the specified types, on the print server.</returns>
    function GetPrintQueues(enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Gets a collection of print queues that are hosted by the print server and that are initialized only in the specified properties. </summary>
    ///  <param name="propertiesFilter">The names of the queue properties that are initialized.</param>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues on the print server; each print queue is initialized only in the properties that are specified in <paramref name="propertiesFilter" />
    ///  .</returns>
    function GetPrintQueues(propertiesFilter: TArray<string>): DNPrintQueueCollection; overload;
    ///<summary>Gets a collection of print queues that are hosted by the print server and initialized only in the properties that are specified in the <see cref="T:System.Printing.PrintQueueIndexedProperty" />
    ///  array. </summary>
    ///  <param name="propertiesFilter">The properties that the constructor initializes.</param>
    ///<returns>A <see cref="T:System.Printing.PrintQueueCollection" />
    ///  whose members are initialized only in the properties specified by <paramref name="propertiesFilter" />
    ///  .</returns>
    function GetPrintQueues(propertiesFilter: TArray<DNPrintQueueIndexedProperty>): DNPrintQueueCollection; overload;
    ///<summary>Gets the collection of print queues that the print server hosts. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintQueueCollection" />
    ///  of print queues on the print server.</returns>
    function GetPrintQueues: DNPrintQueueCollection; overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the default print queue. </summary>
    ///<returns>The <see cref="T:System.Printing.PrintQueue" />
    ///  that is designated as the default queue for the local computer.</returns>
    property DefaultPrintQueue: DNPrintQueue read get_DefaultPrintQueue write set_DefaultPrintQueue;
    ///<summary>Gets the name of the print server. </summary>
    ///<returns>The name of the print server.</returns>
    ///<exception cref="T:System.Printing.PrintSystemException">The property is not initialized.</exception>
    property Name: string read get_Name;
    ///<summary>Gets the version of the print spooler system. </summary>
    ///<returns>A <see cref="T:System.Byte" />
    ///  that identifies the version of the print spooler system.</returns>
    property SubSystemVersion: Byte read get_SubSystemVersion;
    ///<summary>Gets or sets a value that indicates whether users can restart jobs after an error occurs if printer pooling is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if jobs can be restarted when printer pooling is enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property RestartJobOnPoolEnabled: Boolean read get_RestartJobOnPoolEnabled write set_RestartJobOnPoolEnabled;
    ///<summary>Gets or sets a value that indicates the wait time before a job can be restarted, if an error occurs when printer pooling is also enabled.</summary>
    ///<returns>The wait time, in minutes, before a job restarts.  </returns>
    property RestartJobOnPoolTimeout: Int32 read get_RestartJobOnPoolTimeout write set_RestartJobOnPoolTimeout;
    ///<summary>Gets the minor version within the major version of the operating system. </summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the minor version of the operating system.</returns>
    property MinorVersion: Int32 read get_MinorVersion;
    ///<summary>Gets the major version of the operating system. </summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the major version of the operating system.</returns>
    property MajorVersion: Int32 read get_MajorVersion;
    ///<summary>Gets or sets the type of events that the print server logs. </summary>
    ///<returns>A value of <see cref="T:System.Printing.PrintServerEventLoggingTypes" />
    ///  that identifies the type of event logging that is provided by the print server. The default is <see cref="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingErrorEvents" />
    ///  .</returns>
    property EventLog: DNPrintServerEventLoggingTypes read get_EventLog write set_EventLog;
    ///<summary>Gets or sets a value that indicates whether notifications that a print job has finished are sent to either the print server or the client computer. </summary>
    ///<returns><see langword="true" />
    ///  if notifications are sent to the client computer; <see langword="false" />
    ///  if notifications are sent to the print server.</returns>
    property NetPopup: Boolean read get_NetPopup write set_NetPopup;
    ///<summary>Gets or sets a value that indicates whether the print server beeps in response to an error condition in the printer. </summary>
    ///<returns><see cref="T:System.Boolean" />
    ///<see langword="true" />
    ///  if the print server beeps in response to an error; otherwise, <see langword="false" />
    ///  .</returns>
    property BeepEnabled: Boolean read get_BeepEnabled write set_BeepEnabled;
    ///<summary>Do not use.</summary>
    ///<returns>The default scheduler thread priority.</returns>
    property DefaultSchedulerPriority: DDN.mscorlib.DNThreadPriority read get_DefaultSchedulerPriority;
    ///<summary>Gets or sets the thread priority for the process that routes print jobs from applications to print queues. </summary>
    ///<returns>A <see cref="T:System.Threading.ThreadPriority" />
    ///  enumeration value that identifies the thread priority for the print server scheduling process. The default is <see cref="F:System.Threading.ThreadPriority.Normal" />
    ///  .</returns>
    property SchedulerPriority: DDN.mscorlib.DNThreadPriority read get_SchedulerPriority write set_SchedulerPriority;
    ///<summary>Do not use.</summary>
    ///<returns>The thread priority.</returns>
    property DefaultPortThreadPriority: DDN.mscorlib.DNThreadPriority read get_DefaultPortThreadPriority;
    ///<summary>Gets or sets the thread priority for the process that manages I/O through the printer ports. </summary>
    ///<returns>A <see cref="T:System.Threading.ThreadPriority" />
    ///  enumeration value that identifies the thread priority for the process that manages the printer ports. The default is <see cref="F:System.Threading.ThreadPriority.Normal" />
    ///  .</returns>
    property PortThreadPriority: DDN.mscorlib.DNThreadPriority read get_PortThreadPriority write set_PortThreadPriority;
    ///<summary>Gets or sets the path where the print server's spool files are located. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that identifies the complete path of the folder for the spool files.</returns>
    property DefaultSpoolDirectory: string read get_DefaultSpoolDirectory write set_DefaultSpoolDirectory;
    property Parent: DNPrintSystemObject read get_Parent;
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNLocalPrintServer = class(TDNGenericImport<DNLocalPrintServerClass, DNLocalPrintServer>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemJobInfoClass = interface(DNPrintSystemObjectClass)
  ['{7A8A1CE6-1206-539E-A570-1F4C5FB18C20}']
  { static methods } 

    ///<summary>Gets the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  for the specified job in the specified <see cref="T:System.Printing.PrintQueue" />
    ///  .</summary>
    ///  <param name="printQueue">The print queue hosting the print job.</param>
    ///  <param name="jobIdentifier">A numerical ID for the print job.</param>
    ///<returns>The <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  that corresponds to the <paramref name="jobIdentifier" />
    ///  .</returns>
    {class} function Get(printQueue: DNPrintQueue; jobIdentifier: Int32): DNPrintSystemJobInfo;

  end;

  ///<summary>Defines a print job in detail.</summary>
  [DNTypeName('System.Printing.PrintSystemJobInfo')]
  DNPrintSystemJobInfo = interface(DNPrintSystemObject)
  ['{A28863F8-FA1F-3DFA-8450-858EFE8692CC}']
  { getters & setters } 

    function get_HostingPrintServer: DNPrintServer;
    function get_HostingPrintQueue: DNPrintQueue;
    function get_JobName: string;
    procedure set_JobName(newJobName: string);
    function get_IsRetained: Boolean;
    function get_IsUserInterventionRequired: Boolean;
    function get_IsBlocked: Boolean;
    function get_IsDeleted: Boolean;
    function get_IsPaperOut: Boolean;
    function get_IsOffline: Boolean;
    function get_IsPrinting: Boolean;
    function get_IsInError: Boolean;
    function get_IsSpooling: Boolean;
    function get_IsRestarted: Boolean;
    function get_IsPrinted: Boolean;
    function get_IsPaused: Boolean;
    function get_IsDeleting: Boolean;
    function get_IsCompleted: Boolean;
    function get_JobStatus: DNPrintJobStatus;
    function get_TimeSinceStartedPrinting: Int32;
    function get_TimeJobSubmitted: DDN.mscorlib.DNDateTime;
    function get_JobSize: Int32;
    function get_NumberOfPagesPrinted: Int32;
    function get_NumberOfPages: Int32;
    function get_UntilTimeOfDay: Int32;
    function get_StartTimeOfDay: Int32;
    function get_PositionInPrintQueue: Int32;
    function get_Priority: DNPrintJobPriority;
    function get_Submitter: string;
    function get_JobIdentifier: Int32;
    function get_JobStream: DDN.mscorlib.DNStream;
    function get_Parent: DNPrintSystemObject;
    function get_Name: string;
    function get_PropertiesCollection: DNPrintPropertyDictionary;

  { methods } 

    ///<summary>Writes any changes to the properties of the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  object to the actual print job that the object represents.</summary>
    procedure Commit;
    ///<summary>Halts printing of the job until <see cref="M:System.Printing.PrintSystemJobInfo.Resume" />
    ///  runs. </summary>
    procedure Pause;
    ///<summary>Resumes the printing of a paused print job.</summary>
    procedure Resume;
    ///<summary>Cancels the print job. </summary>
    procedure Cancel;
    ///<summary>Restarts a print job from the beginning. </summary>
    procedure Restart;
    ///<summary>Updates the properties of the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  object so that their values match the values of the actual print job that the object represents.</summary>
    procedure Refresh;
    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />
    ///  . </summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the print server that is hosting the print queue for the print job.</summary>
    ///<returns>A <see cref="T:System.Printing.PrintServer" />
    ///  value that represents the hosting print server (usually a computer) for the <see cref="T:System.Printing.PrintQueue" />
    ///  that owns the print job. </returns>
    property HostingPrintServer: DNPrintServer read get_HostingPrintServer;
    ///<summary>Gets the print queue that is hosting the print job.</summary>
    ///<returns>A <see cref="T:System.Printing.PrintQueue" />
    ///  value that represents the print queue that owns the print job.</returns>
    property HostingPrintQueue: DNPrintQueue read get_HostingPrintQueue;
    ///<summary>Gets or sets a name for the print job.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  name for the print job.</returns>
    property JobName: string read get_JobName write set_JobName;
    ///<summary>Gets a value that indicates whether the print job was saved in the queue after it printed. </summary>
    ///<returns><see langword="true" />
    ///  if the print job was saved; otherwise <see langword="false" />
    ///  .</returns>
    property IsRetained: Boolean read get_IsRetained;
    ///<summary>Gets a value that indicates whether the printer needs user intervention.</summary>
    ///<returns><see langword="true" />
    ///  if user intervention is needed; otherwise <see langword="false" />
    ///  .</returns>
    property IsUserInterventionRequired: Boolean read get_IsUserInterventionRequired;
    ///<summary>Gets a value that indicates whether the print job is blocked and therefore, not printing. </summary>
    ///<returns><see langword="true" />
    ///  if the print job is blocked; otherwise, <see langword="false" />
    ///  .</returns>
    property IsBlocked: Boolean read get_IsBlocked;
    ///<summary>Gets a value that indicates whether the print job, which is represented by the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  object, was deleted from the print queue. </summary>
    ///<returns><see langword="true" />
    ///  if the print job was deleted; otherwise <see langword="false" />
    ///  .</returns>
    property IsDeleted: Boolean read get_IsDeleted;
    ///<summary>Gets a value that indicates whether the printer has run out of the paper size and type that the print job requires. </summary>
    ///<returns><see langword="true" />
    ///  if the printer has run out of the required paper; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPaperOut: Boolean read get_IsPaperOut;
    ///<summary>Gets a value that indicates whether the printer is offline. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is offline; otherwise <see langword="false" />
    ///  .</returns>
    property IsOffline: Boolean read get_IsOffline;
    ///<summary>Gets a value that indicates whether the print job is being printed.</summary>
    ///<returns><see langword="true" />
    ///  if the printer is printing; otherwise <see langword="false" />
    ///  .</returns>
    property IsPrinting: Boolean read get_IsPrinting;
    ///<summary>Gets a value that indicates whether an error condition is associated with the print job.</summary>
    ///<returns><see langword="true" />
    ///  if an error condition is associated with the print job; otherwise <see langword="false" />
    ///  .</returns>
    property IsInError: Boolean read get_IsInError;
    ///<summary>Gets a value that indicates whether the print job is being spooled.</summary>
    ///<returns><see langword="true" />
    ///  if the print job is being spooled; otherwise <see langword="false" />
    ///  .</returns>
    property IsSpooling: Boolean read get_IsSpooling;
    ///<summary>Gets a value that indicates whether the print job has been restarted. </summary>
    ///<returns><see langword="true" />
    ///  if the printer is printing; otherwise <see langword="false" />
    ///  .</returns>
    property IsRestarted: Boolean read get_IsRestarted;
    ///<summary>Gets a value that indicates whether the print job printed.</summary>
    ///<returns><see langword="true" />
    ///  if the print job has printed; otherwise <see langword="false" />
    ///  .</returns>
    property IsPrinted: Boolean read get_IsPrinted;
    ///<summary>Gets a value that indicates whether the print job is paused.</summary>
    ///<returns><see langword="true" />
    ///  if the print job is paused; otherwise <see langword="false" />
    ///  .</returns>
    property IsPaused: Boolean read get_IsPaused;
    ///<summary>Gets a value that indicates whether the print job is being deleted from the print queue. </summary>
    ///<returns><see langword="true" />
    ///  if the print job is being deleted; otherwise <see langword="false" />
    ///  .</returns>
    property IsDeleting: Boolean read get_IsDeleting;
    ///<summary>Gets a value that indicates whether the print job is finished.</summary>
    ///<returns><see langword="true" />
    ///  if the print job is finished; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCompleted: Boolean read get_IsCompleted;
    ///<summary>Gets the current status of the print job. </summary>
    ///<returns>A <see cref="T:System.Printing.PrintJobStatus" />
    ///  value.</returns>
    property JobStatus: DNPrintJobStatus read get_JobStatus;
    ///<summary>Gets the time, in milliseconds, since the print job started printing.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that represents the time, in milliseconds, since the print job started.</returns>
    property TimeSinceStartedPrinting: Int32 read get_TimeSinceStartedPrinting;
    ///<summary>Gets the date and time that the print job is submitted.</summary>
    ///<returns>A <see cref="T:System.DateTime" />
    ///  object containing the date and time that the print job is submitted.</returns>
    property TimeJobSubmitted: DDN.mscorlib.DNDateTime read get_TimeJobSubmitted;
    ///<summary>Get the size, in bytes, of the print job.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that states the size, in bytes, of the print job.</returns>
    property JobSize: Int32 read get_JobSize;
    ///<summary>Gets the number of pages that have already printed.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that states the number of pages that have already printed.</returns>
    property NumberOfPagesPrinted: Int32 read get_NumberOfPagesPrinted;
    ///<summary>Gets the number of pages in the print job.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that states the number of pages in the print job.</returns>
    property NumberOfPages: Int32 read get_NumberOfPages;
    ///<summary>Gets the last time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the print job can begin printing.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that specifies the last time that the job can print, expressed as the number of minutes after midnight (UTC). The maximum value is 1439.</returns>
    property UntilTimeOfDay: Int32 read get_UntilTimeOfDay;
    ///<summary>Gets the earliest time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the print job can begin printing.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  specifying the earliest possible start time for the print job, expressed as the number of minutes after midnight (UTC). The maximum value is 1439.</returns>
    property StartTimeOfDay: Int32 read get_StartTimeOfDay;
    ///<summary>Gets the print job's place in the print queue. </summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that states the print job's place in the queue.</returns>
    property PositionInPrintQueue: Int32 read get_PositionInPrintQueue;
    ///<summary>Gets a non-numerical expression that represents the priority of the print job relative to other jobs in the print queue.</summary>
    ///<returns>A <see cref="T:System.Printing.PrintJobPriority" />
    ///  that represents the priority of the print job as <see cref="F:System.Printing.PrintJobPriority.Maximum" />
    ///  , <see cref="F:System.Printing.PrintJobPriority.Minimum" />
    ///  , <see cref="F:System.Printing.PrintJobPriority.Default" />
    ///  , or <see cref="F:System.Printing.PrintJobPriority.None" />
    ///  .</returns>
    property Priority: DNPrintJobPriority read get_Priority;
    ///<summary>Gets the name of the user who submitted the print job.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that identifies the user who submitted the print job.</returns>
    property Submitter: string read get_Submitter;
    ///<summary>Gets the identification number for the print job.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the print job.</returns>
    property JobIdentifier: Int32 read get_JobIdentifier;
    ///<summary>Gets a reference to the <see cref="T:System.IO.Stream" />
    ///  of the print job.</summary>
    ///<returns>A <see cref="T:System.IO.Stream" />
    ///  that contains the print job.</returns>
    property JobStream: DDN.mscorlib.DNStream read get_JobStream;
    ///<summary>Gets the parent of the object. </summary>
    ///<returns>Another <see cref="T:System.Printing.PrintSystemObject" />
    ///  .</returns>
    property Parent: DNPrintSystemObject read get_Parent;
    ///<summary>Gets the name of the object. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of the object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a collection of attribute and value pairs. </summary>
    ///<returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
    ///  that contains attribute and value pairs.</returns>
    property PropertiesCollection: DNPrintPropertyDictionary read get_PropertiesCollection;
  end;

  TDNPrintSystemJobInfo = class(TDNGenericImport<DNPrintSystemJobInfoClass, DNPrintSystemJobInfo>) end;

  //-------------namespace: System.Printing----------------
  DNPrintSystemObjectsClass = interface(DNObjectClass)
  ['{F171EE2C-DEA5-59DA-B326-AD0083BC0075}']
  end;

  ///<summary>Represents a collection of print system objects. </summary>
  [DNTypeName('System.Printing.PrintSystemObjects')]
  DNPrintSystemObjects = interface(DDN.mscorlib.DNIDisposable)
  ['{91B37FBF-B9FD-3196-B6C0-913E4197E91D}']
  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjects" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintSystemObjects = class(TDNGenericImport<DNPrintSystemObjectsClass, DNPrintSystemObjects>) end;

  //-------------namespace: System.Printing----------------
  DNPrintJobInfoCollectionClass = interface(DNPrintSystemObjectsClass)
  ['{EC38D05B-7535-527D-842E-A8B208E18031}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobInfoCollection" />
    ///  class that contains the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  objects for every job that is in the specified <see cref="T:System.Printing.PrintQueue" />
    ///  and that initializes those objects only in the properties that are listed in the specified property filter. </summary>
    ///  <param name="printQueue">The print queue whose print jobs will populate the collection. </param>
    ///  <param name="propertyFilter">A list of a subset of the properties of a <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  object. </param>
    {class} function init(printQueue: DNPrintQueue; propertyFilter: TArray<string>): DNPrintJobInfoCollection;

  end;

  ///<summary>Represents one or more <see cref="T:System.Printing.PrintSystemJobInfo" />
  ///  objects. </summary>
  [DNTypeName('System.Printing.PrintJobInfoCollection')]
  DNPrintJobInfoCollection = interface(DNPrintSystemObjects)
  ['{E770F674-237E-3104-910A-955E6DFC96AD}']
  { methods } 

    ///<summary>Gets an object that implements the non-generic <see cref="T:System.Collections.IEnumerator" />
    ///  interface. </summary>
    ///<returns>An object that implements the non-generic <see cref="T:System.Collections.IEnumerator" />
    ///  interface and that can iterate through the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  objects that the <see cref="T:System.Printing.PrintJobInfoCollection" />
    ///  contains.</returns>
    function GetNonGenericEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Gets an object that implements the generic <see cref="T:System.Collections.IEnumerator" />
    ///  interface that is closed with <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  .</summary>
    ///<returns>An object that implements the generic <see cref="T:System.Collections.IEnumerator" />
    ///  interface and that can iterate through the <see cref="T:System.Printing.PrintSystemJobInfo" />
    ///  objects that the <see cref="T:System.Printing.PrintJobInfoCollection" />
    ///  contains.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPrintSystemJobInfo>;
    ///<summary>Adds a member to the <see cref="T:System.Printing.PrintJobInfoCollection" />
    ///  . </summary>
    ///  <param name="printObject">The object that is added.</param>
    procedure Add(printObject: DNPrintSystemJobInfo);
    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjects" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintJobInfoCollection = class(TDNGenericImport<DNPrintJobInfoCollectionClass, DNPrintJobInfoCollection>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueCollectionClass = interface(DNPrintSystemObjectsClass)
  ['{613638B1-198A-5E4E-9AB6-AAE6974F3585}']
  { static getter & setter } 

    {class} function get_SyncRoot: DDN.mscorlib.DNObject;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueCollection" />
    ///  class for the specified <see cref="T:System.Printing.PrintServer" />
    ///  . </summary>
    ///  <param name="printServer">The print server that hosts the collection.</param>
    ///  <param name="propertyFilter">The properties of the collection members that are initialized. </param>
    {class} function init(printServer: DNPrintServer; propertyFilter: TArray<string>): DNPrintQueueCollection; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueCollection" />
    ///  class for the specified <see cref="T:System.Printing.PrintServer" />
    ///  , containing only the print server's queues of the specified <see cref="T:System.Printing.EnumeratedPrintQueueTypes" />
    ///  . </summary>
    ///  <param name="printServer">The print server that hosts the collection.</param>
    ///  <param name="propertyFilter">The properties of the collection members that are initialized. </param>
    ///  <param name="enumerationFlag">An array that specifies the types of print queues that are included in the collection. </param>
    {class} function init(printServer: DNPrintServer; propertyFilter: TArray<string>; enumerationFlag: TArray<DNEnumeratedPrintQueueTypes>): DNPrintQueueCollection; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueCollection" />
    ///  class. </summary>
    {class} function init: DNPrintQueueCollection; overload;

  { static propertys } 

    ///<summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Printing.PrintQueueCollection" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Object" />
    ///  that can be used to synchronize access to the collection.</returns>
    {class} property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  ///<summary>Represents a collection of <see cref="T:System.Printing.PrintQueue" />
  ///  objects. </summary>
  [DNTypeName('System.Printing.PrintQueueCollection')]
  DNPrintQueueCollection = interface(DNPrintSystemObjects)
  ['{7B152755-3B52-3782-9942-86C71A3ACB91}']
  { methods } 

    ///<summary>Gets an object that implements the non-generic <see cref="T:System.Collections.IEnumerator" />
    ///  interface. </summary>
    ///<returns>An object that implements the non-generic <see cref="T:System.Collections.IEnumerator" />
    ///  and that can iterate through the <see cref="T:System.Printing.PrintQueue" />
    ///  objects that the <see cref="T:System.Printing.PrintQueueCollection" />
    ///  contains.</returns>
    function GetNonGenericEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Returns an object that implements the generic <see cref="T:System.Collections.IEnumerator" />
    ///  interface that has been closed with <see cref="T:System.Printing.PrintQueue" />
    ///  . </summary>
    ///<returns>An object that implements the generic <see cref="T:System.Collections.IEnumerator" />
    ///  and that can iterate through the <see cref="T:System.Printing.PrintQueue" />
    ///  objects that the <see cref="T:System.Printing.PrintQueueCollection" />
    ///  contains.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPrintQueue>;
    ///<summary>Adds a <see cref="T:System.Printing.PrintQueue" />
    ///  to the collection.</summary>
    ///  <param name="printObject">The print queue that is added.</param>
    procedure Add(printObject: DNPrintQueue);
    ///<summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjects" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintQueueCollection = class(TDNGenericImport<DNPrintQueueCollectionClass, DNPrintQueueCollection>) end;


implementation


initialization
  LoadAssemblyModule('WPF\System.Printing.dll', True);

finalization

end.
