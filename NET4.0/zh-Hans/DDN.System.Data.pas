//----------------------------------------------------------------------------
//  System.Data.dll: System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Data
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Data;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml,
  DDN.System.Core,
  DDN.System.Transactions,
  DDN.System.EnterpriseServices,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: Microsoft.SqlServer.Server----------------
  ///<summary>
  ///  描述为用户定义的方法或函数访问用户数据的类型。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.DataAccessKind')]
  DNDataAccessKind = type Integer;
  DNDataAccessKindHelper = record helper for DNDataAccessKind
  public const
    ///<summary>
    ///  该方法或函数不访问用户数据。
    ///</summary>
    None = 0;
    ///<summary>
    ///  该方法或函数读取用户数据。
    ///</summary>
    Read = 1;
  end;


  //-------------namespace: Microsoft.SqlServer.Server----------------
  ///<summary>
  ///  使用 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" />
  ///  和 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" />
  ///  以指示用户定义类型 (UDT) 或聚合的序列化格式。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.Format')]
  DNFormat = type Integer;
  DNFormatHelper = record helper for DNFormat
  public const
    ///<summary>
    ///  序列化格式是未知的。
    ///</summary>
    Unknown = 0;
    ///<summary><see langword="Native" />
    ///  序列化格式使用一种非常简单的算法，使 SQL Server 用户定义的类型的有效表示存储在磁盘上。
    ///  类型标记为 <see langword="Native" />
    ///  序列化只能具有值类型 （结构在 Microsoft Visual C#） 和 Microsoft Visual Basic.NET 中的结构作为成员。
    ///  引用的成员类型 （例如类 Visual C# 和 Visual Basic 中），该框架中存在或用户定义的其中任何一个 (如 <see cref="T:System.String" />
    ///  )，不受支持。
    ///</summary>
    Native = 1;
    ///<summary><see langword="UserDefined" />
    ///  开发人员完全控制通过二进制格式的序列化格式提供 <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" />
    ///<see langword=".Write" />
    ///  和 <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" />
    ///<see langword=".Read" />
    ///  方法。
    ///</summary>
    UserDefined = 2;
  end;


  //-------------namespace: Microsoft.SqlServer.Server----------------
  ///<summary>
  ///  描述对系统数据访问的用户定义的方法或函数的类型。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SystemDataAccessKind')]
  DNSystemDataAccessKind = type Integer;
  DNSystemDataAccessKindHelper = record helper for DNSystemDataAccessKind
  public const
    ///<summary>
    ///  该方法或函数不访问系统数据。
    ///</summary>
    None = 0;
    ///<summary>
    ///  该方法或函数读取系统数据。
    ///</summary>
    Read = 1;
  end;


  //-------------namespace: Microsoft.SqlServer.Server----------------
  ///<summary><see cref="T:Microsoft.SqlServer.Server.TriggerAction" />
  ///  枚举由 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />
  ///  类，以指示激发触发器的操作。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.TriggerAction')]
  DNTriggerAction = type Integer;
  DNTriggerActionHelper = record helper for DNTriggerAction
  public const
    ///<summary>
    ///  无效的触发器操作，该操作不会公开给用户，发生。
    ///</summary>
    Invalid = 0;
    ///<summary>
    ///  插入 TRANSACT-SQL 语句已执行。
    ///</summary>
    Insert = 1;
    ///<summary>
    ///  在执行更新 TRANSACT-SQL 语句。
    ///</summary>
    Update = 2;
    ///<summary>
    ///  在执行删除 TRANSACT-SQL 语句。
    ///</summary>
    Delete = 3;
    ///<summary>
    ///  在执行 CREATE TABLE Transact SQL 语句。
    ///</summary>
    CreateTable = 21;
    ///<summary>
    ///  在执行 ALTER TABLE TRANSACT-SQL 语句。
    ///</summary>
    AlterTable = 22;
    ///<summary>
    ///  执行了 DROP TABLE TRANSACT-SQL 语句。
    ///</summary>
    DropTable = 23;
    ///<summary>
    ///  在执行 CREATE INDEX TRANSACT-SQL 语句。
    ///</summary>
    CreateIndex = 24;
    ///<summary>
    ///  在执行 ALTER INDEX TRANSACT-SQL 语句。
    ///</summary>
    AlterIndex = 25;
    ///<summary>
    ///  执行了删除索引 TRANSACT-SQL 语句。
    ///</summary>
    DropIndex = 26;
    ///<summary>
    ///  不可用。
    ///</summary>
    CreateSecurityExpression = 31;
    ///<summary>
    ///  不可用。
    ///</summary>
    DropSecurityExpression = 33;
    ///<summary>
    ///  创建同义词 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateSynonym = 34;
    ///<summary>
    ///  删除同义词 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropSynonym = 36;
    ///<summary>
    ///  执行了 CREATE 视图 TRANSACT-SQL 语句。
    ///</summary>
    CreateView = 41;
    ///<summary>
    ///  在执行 ALTER VIEW TRANSACT-SQL 语句。
    ///</summary>
    AlterView = 42;
    ///<summary>
    ///  执行了 DROP 查看 Transact SQL 语句。
    ///</summary>
    DropView = 43;
    ///<summary>
    ///  在执行 CREATE 过程 TRANSACT-SQL 语句。
    ///</summary>
    CreateProcedure = 51;
    ///<summary>
    ///  在执行 ALTER PROCEDURE TRANSACT-SQL 语句。
    ///</summary>
    AlterProcedure = 52;
    ///<summary>
    ///  执行了 DROP PROCEDURE TRANSACT-SQL 语句。
    ///</summary>
    DropProcedure = 53;
    ///<summary>
    ///  CREATE 函数 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateFunction = 61;
    ///<summary>
    ///  在执行 ALTER 函数 TRANSACT-SQL 语句。
    ///</summary>
    AlterFunction = 62;
    ///<summary>
    ///  执行了 DROP 函数 TRANSACT-SQL 语句。
    ///</summary>
    DropFunction = 63;
    ///<summary>
    ///  创建触发器的 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateTrigger = 71;
    ///<summary>
    ///  在执行 ALTER 触发器 TRANSACT-SQL 语句。
    ///</summary>
    AlterTrigger = 72;
    ///<summary>
    ///  删除触发器的 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropTrigger = 73;
    ///<summary>
    ///  创建事件通知 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateEventNotification = 74;
    ///<summary>
    ///  删除事件通知 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropEventNotification = 76;
    ///<summary>
    ///  在执行 CREATE 类型 TRANSACT-SQL 语句。
    ///</summary>
    CreateType = 91;
    ///<summary>
    ///  在执行 DROP TYPE TRANSACT-SQL 语句。
    ///</summary>
    DropType = 93;
    ///<summary>
    ///  在执行 CREATE ASSEMBLY TRANSACT-SQL 语句。
    ///</summary>
    CreateAssembly = 101;
    ///<summary>
    ///  在执行 ALTER ASSEMBLY TRANSACT-SQL 语句。
    ///</summary>
    AlterAssembly = 102;
    ///<summary>
    ///  执行了 DROP ASSEMBLY TRANSACT-SQL 语句。
    ///</summary>
    DropAssembly = 103;
    ///<summary>
    ///  在执行 CREATE USER Transact SQL 语句。
    ///</summary>
    CreateUser = 131;
    ///<summary>
    ///  在执行 ALTER USER TRANSACT-SQL 语句。
    ///</summary>
    AlterUser = 132;
    ///<summary>
    ///  执行了 DROP USER TRANSACT-SQL 语句。
    ///</summary>
    DropUser = 133;
    ///<summary>
    ///  在执行 CREATE 角色 TRANSACT-SQL 语句。
    ///</summary>
    CreateRole = 134;
    ///<summary>
    ///  在执行 ALTER 角色 TRANSACT-SQL 语句。
    ///</summary>
    AlterRole = 135;
    ///<summary>
    ///  执行了 DROP 角色 TRANSACT-SQL 语句。
    ///</summary>
    DropRole = 136;
    ///<summary>
    ///  创建应用程序角色 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateAppRole = 137;
    ///<summary>
    ///  在执行 ALTER 应用程序角色 TRANSACT-SQL 语句。
    ///</summary>
    AlterAppRole = 138;
    ///<summary>
    ///  执行了删除应用程序角色 TRANSACT-SQL 语句。
    ///</summary>
    DropAppRole = 139;
    ///<summary>
    ///  在执行 CREATE 架构 TRANSACT-SQL 语句。
    ///</summary>
    CreateSchema = 141;
    ///<summary>
    ///  在执行 ALTER 架构 TRANSACT-SQL 语句。
    ///</summary>
    AlterSchema = 142;
    ///<summary>
    ///  删除架构的 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropSchema = 143;
    ///<summary>
    ///  创建登录名 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateLogin = 144;
    ///<summary>
    ///  在执行 ALTER LOGIN TRANSACT-SQL 语句。
    ///</summary>
    AlterLogin = 145;
    ///<summary>
    ///  执行了 DROP LOGIN TRANSACT-SQL 语句。
    ///</summary>
    DropLogin = 146;
    ///<summary>
    ///  创建消息类型 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateMsgType = 151;
    ///<summary>
    ///  删除消息类型 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropMsgType = 153;
    ///<summary>
    ///  在执行 CREATE 协定 TRANSACT-SQL 语句。
    ///</summary>
    CreateContract = 154;
    ///<summary>
    ///  执行了 DROP 协定 TRANSACT-SQL 语句。
    ///</summary>
    DropContract = 156;
    ///<summary>
    ///  创建队列 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreateQueue = 157;
    ///<summary>
    ///  在执行 ALTER 队列 TRANSACT-SQL 语句。
    ///</summary>
    AlterQueue = 158;
    ///<summary>
    ///  删除队列 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropQueue = 159;
    ///<summary>
    ///  在执行 CREATE SERVICE TRANSACT-SQL 语句。
    ///</summary>
    CreateService = 161;
    ///<summary>
    ///  在执行 ALTER SERVICE Transact SQL 语句。
    ///</summary>
    AlterService = 162;
    ///<summary>
    ///  执行了 DROP SERVICE Transact SQL 语句。
    ///</summary>
    DropService = 163;
    ///<summary>
    ///  执行了创建路由 TRANSACT-SQL 语句。
    ///</summary>
    CreateRoute = 164;
    ///<summary>
    ///  在执行 ALTER ROUTE TRANSACT-SQL 语句。
    ///</summary>
    AlterRoute = 165;
    ///<summary>
    ///  执行了 DROP ROUTE TRANSACT-SQL 语句。
    ///</summary>
    DropRoute = 166;
    ///<summary>
    ///  执行了授予 TRANSACT-SQL 语句。
    ///</summary>
    GrantStatement = 167;
    ///<summary>
    ///  执行了拒绝 TRANSACT-SQL 语句。
    ///</summary>
    DenyStatement = 168;
    ///<summary>
    ///  执行了吊销 TRANSACT-SQL 语句。
    ///</summary>
    RevokeStatement = 169;
    ///<summary>
    ///  执行了授予对象 TRANSACT-SQL 语句。
    ///</summary>
    GrantObject = 170;
    ///<summary>
    ///  DENY 对象权限 TRANSACT-SQL 语句已执行。
    ///</summary>
    DenyObject = 171;
    ///<summary>
    ///  执行了吊销对象 TRANSACT-SQL 语句。
    ///</summary>
    RevokeObject = 172;
    ///<summary>
    ///  在数据库或服务器实例上创建的事件通知时指定 CREATE_REMOTE_SERVICE_BINDING 事件类型。
    ///</summary>
    CreateBinding = 174;
    ///<summary>
    ///  在数据库或服务器实例上创建的事件通知时指定了 ALTER_REMOTE_SERVICE_BINDING 事件类型。
    ///</summary>
    AlterBinding = 175;
    ///<summary>
    ///  在数据库或服务器实例上创建的事件通知时指定 DROP_REMOTE_SERVICE_BINDING 事件类型。
    ///</summary>
    DropBinding = 176;
    ///<summary>
    ///  创建分区函数的 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreatePartitionFunction = 191;
    ///<summary>
    ///  在执行 ALTER 分区函数 TRANSACT-SQL 语句。
    ///</summary>
    AlterPartitionFunction = 192;
    ///<summary>
    ///  删除分区函数的 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropPartitionFunction = 193;
    ///<summary>
    ///  创建分区方案 TRANSACT-SQL 语句已执行。
    ///</summary>
    CreatePartitionScheme = 194;
    ///<summary>
    ///  在执行 ALTER 分区方案 TRANSACT-SQL 语句。
    ///</summary>
    AlterPartitionScheme = 195;
    ///<summary>
    ///  删除分区方案 TRANSACT-SQL 语句已执行。
    ///</summary>
    DropPartitionScheme = 196;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  确定所发生的操作时 <see cref="M:System.Data.DataSet.AcceptChanges" />
  ///  或 <see cref="M:System.Data.DataTable.RejectChanges" />
  ///  上调用方法 <see cref="T:System.Data.DataTable" />
  ///  与 <see cref="T:System.Data.ForeignKeyConstraint" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.AcceptRejectRule')]
  DNAcceptRejectRule = type Integer;
  DNAcceptRejectRuleHelper = record helper for DNAcceptRejectRule
  public const
    ///<summary>
    ///  不发生操作 （默认值）。
    ///</summary>
    None = 0;
    ///<summary>
    ///  跨关系中级联更改。
    ///</summary>
    Cascade = 1;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  提供查询结果及其对数据库的影响的说明。
  ///</summary>
  [DNTypeName('System.Data.CommandBehavior')]
  DNCommandBehavior = type Integer;
  DNCommandBehaviorHelper = record helper for DNCommandBehavior
  public const
    ///<summary>
    ///  此查询可能返回多个结果集。
    ///  执行的查询可能会影响数据库状态。
    ///<see langword="Default" />
    ///  不设置 <see cref="T:System.Data.CommandBehavior" />
    ///  标志，因此调用 <see langword="ExecuteReader(CommandBehavior.Default)" />
    ///  在功能上等效于调用 <see langword="ExecuteReader()" />
    ///  。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  查询会返回单个结果集。
    ///</summary>
    SingleResult = 1;
    ///<summary>
    ///  该查询仅返回列信息。
    ///  当使用 <see cref="F:System.Data.CommandBehavior.SchemaOnly" />
    ///  , ，SQL Server.NET Framework 数据提供程序之前使用 SET FMTONLY ON 正在执行的语句。
    ///</summary>
    SchemaOnly = 2;
    ///<summary>
    ///  查询返回列和主键信息。
    ///</summary>
    KeyInfo = 4;
    ///<summary>
    ///  查询应返回单个行的第一个结果集。
    ///  执行的查询可能会影响数据库状态。
    ///  某些.NET Framework 数据访问接口可能，但不是需要，使用此信息来优化性能的命令。
    ///  当您指定 <see cref="F:System.Data.CommandBehavior.SingleRow" />
    ///  与 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" />
    ///  方法 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象，用于 OLE DB 的.NET Framework 数据提供程序执行绑定使用 OLE DB <see langword="IRow" />
    ///  接口是否可用。
    ///  否则，它使用 <see langword="IRowset" />
    ///  接口。
    ///  如果您的 SQL 语句将返回单个行，则指定 <see cref="F:System.Data.CommandBehavior.SingleRow" />
    ///  还可提高应用程序的性能。
    ///  可以指定 <see langword="SingleRow" />
    ///  时执行查询，都应该返回多个结果集。
    ///  在这种情况下，其中同时多结果集的 SQL 查询，指定单个行，则返回的结果将包含仅第一个结果集的第一行。
    ///  不会返回其他结果集的查询。
    ///</summary>
    SingleRow = 8;
    ///<summary>
    ///  为提供一种 <see langword="DataReader" />
    ///  处理包含大型二进制值的列的行。
    ///  而不是加载整行， <see langword="SequentialAccess" />
    ///  使 <see langword="DataReader" />
    ///  加载流形式的数据。
    ///  然后，可以使用 <see langword="GetBytes" />
    ///  或 <see langword="GetChars" />
    ///  方法，以指定要开始读取的操作和所返回的数据的有限的缓冲区大小的字节位置。
    ///</summary>
    SequentialAccess = 16;
    ///<summary>
    ///  执行命令时，关联 <see langword="Connection" />
    ///  对象已关闭时关联 <see langword="DataReader" />
    ///  对象已关闭。
    ///</summary>
    CloseConnection = 32;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何解释命令字符串。
  ///</summary>
  [DNTypeName('System.Data.CommandType')]
  DNCommandType = type Integer;
  DNCommandTypeHelper = record helper for DNCommandType
  public const
    ///<summary>
    ///  SQL 文本命令。
    ///  （默认值）。
    ///</summary>
    Text = 1;
    ///<summary>
    ///  存储过程的名称。
    ///</summary>
    StoredProcedure = 4;
    ///<summary>
    ///  表的名称。
    ///</summary>
    TableDirect = 512;
  end;


  //-------------namespace: System.Data.Common----------------
  ///<summary>
  ///  指示文本命令中的限定的表名中的目录名称的位置。
  ///</summary>
  [DNTypeName('System.Data.Common.CatalogLocation')]
  DNCatalogLocation = type Integer;
  DNCatalogLocationHelper = record helper for DNCatalogLocation
  public const
    ///<summary>
    ///  指示在文本命令中的完全限定的表名的架构部分之前发生的位置的目录名称。
    ///</summary>
    Start = 1;
    ///<summary>
    ///  指示目录名称的位置中的文本命令中的完全限定的表名的架构部分后发生。
    ///</summary>
    End_ = 2;
  end;


  //-------------namespace: System.Data.Common----------------
  ///<summary>
  ///  在 SELECT 语句的选择列表中指定 GROUP BY 子句中的列和非聚合列之间的关系。
  ///</summary>
  [DNTypeName('System.Data.Common.GroupByBehavior')]
  DNGroupByBehavior = type Integer;
  DNGroupByBehaviorHelper = record helper for DNGroupByBehavior
  public const
    ///<summary>
    ///  GROUP BY 子句的支持是未知的。
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  不支持 GROUP BY 子句。
    ///</summary>
    NotSupported = 1;
    ///<summary>
    ///  GROUP BY 子句中的列和选择列表中的非聚合的列之间没有关系。
    ///  可以按任何列进行分组。
    ///</summary>
    Unrelated = 2;
    ///<summary>
    ///  GROUP BY 子句必须包含在选择列表中，所有非聚集的列，并且可以包含不在列表中选择其他列。
    ///</summary>
    MustContainAll = 3;
    ///<summary>
    ///  GROUP BY 子句必须包含在选择列表中，所有非聚集的列，并且不能包含不在列表中选择其他列。
    ///</summary>
    ExactMatch = 4;
  end;


  //-------------namespace: System.Data.Common----------------
  ///<summary>
  ///  指定标识符时如何对待通过数据源来搜索系统目录。
  ///</summary>
  [DNTypeName('System.Data.Common.IdentifierCase')]
  DNIdentifierCase = type Integer;
  DNIdentifierCaseHelper = record helper for DNIdentifierCase
  public const
    ///<summary>
    ///  数据源的标识符大小写规则不明确，无法识别此信息。
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  搜索系统目录时，数据源将忽略标识符的大小写。
    ///  将匹配的标识符"ab"和"AB"。
    ///</summary>
    Insensitive = 1;
    ///<summary>
    ///  搜索系统目录时，数据源会将标识符的大小写区分开来。
    ///  将不匹配的标识符"ab"和"AB"。
    ///</summary>
    Sensitive = 2;
  end;


  //-------------namespace: System.Data.Common----------------
  ///<summary>
  ///  指定哪些类型的 Transact SQL join 语句支持的数据源。
  ///</summary>
  [DNTypeName('System.Data.Common.SupportedJoinOperators')]
  DNSupportedJoinOperators = type Integer;
  DNSupportedJoinOperatorsHelper = record helper for DNSupportedJoinOperators
  public const
    ///<summary>
    ///  数据源不支持联接查询。
    ///</summary>
    None = 0;
    ///<summary>
    ///  数据源支持内部联接。
    ///</summary>
    Inner = 1;
    ///<summary>
    ///  数据源支持左外部联接。
    ///</summary>
    LeftOuter = 2;
    ///<summary>
    ///  数据源支持右外部联接。
    ///</summary>
    RightOuter = 4;
    ///<summary>
    ///  数据源支持完全外部联接。
    ///</summary>
    FullOuter = 8;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何相互冲突的更改的数据检测和解决源。
  ///</summary>
  [DNTypeName('System.Data.ConflictOption')]
  DNConflictOption = type Integer;
  DNConflictOptionHelper = record helper for DNConflictOption
  public const
    ///<summary>
    ///  Update 和 delete 语句的 WHERE 子句中将包括所有可搜索表中的列。
    ///  这相当于同时指定 <see langword="CompareAllValuesUpdate" />
    ///  | <see langword="CompareAllValuesDelete" />
    ///  。
    ///</summary>
    CompareAllSearchableValues = 1;
    ///<summary>
    ///  如果表中存在的任何时间戳列，它们用于 WHERE 子句中的所有生成的 update 语句。
    ///  这相当于同时指定 <see langword="CompareRowVersionUpdate" />
    ///  | <see langword="CompareRowVersionDelete" />
    ///  。
    ///</summary>
    CompareRowVersion = 2;
    ///<summary>
    ///  所有 update 和 delete 语句只能包含 <see cref="P:System.Data.DataTable.PrimaryKey" />
    ///  WHERE 子句中的列。
    ///  如果没有 <see cref="P:System.Data.DataTable.PrimaryKey" />
    ///  是定义，所有可搜索的列都包含 WHERE 子句中。
    ///  这相当于 <see langword="OverwriteChangesUpdate" />
    ///  | <see langword="OverwriteChangesDelete" />
    ///  。
    ///</summary>
    OverwriteChanges = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  描述与数据源连接的当前状态。
  ///</summary>
  [DNTypeName('System.Data.ConnectionState')]
  DNConnectionState = type Integer;
  DNConnectionStateHelper = record helper for DNConnectionState
  public const
    ///<summary>
    ///  连接已关闭。
    ///</summary>
    Closed = 0;
    ///<summary>
    ///  连接处于打开状态。
    ///</summary>
    Open = 1;
    ///<summary>
    ///  连接对象连接到数据源。
    ///</summary>
    Connecting = 2;
    ///<summary>
    ///  连接对象执行命令。
    ///  （此值保留供该产品的未来版本中）。
    ///</summary>
    Executing = 4;
    ///<summary>
    ///  连接对象正在检索数据。
    ///  （此值保留供该产品的未来版本中）。
    ///</summary>
    Fetching = 8;
    ///<summary>
    ///  与数据源的连接已断开。
    ///  只有在打开连接后，才发生这种。
    ///  处于此状态的连接可能关闭并重新打开。
    ///  （此值保留供该产品的未来版本中）。
    ///</summary>
    Broken = 16;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  描述对执行的操作 <see cref="T:System.Data.DataRow" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRowAction')]
  DNDataRowAction = type Integer;
  DNDataRowActionHelper = record helper for DNDataRowAction
  public const
    ///<summary>
    ///  未更改行。
    ///</summary>
    Nothing = 0;
    ///<summary>
    ///  从表中已删除行。
    ///</summary>
    Delete = 1;
    ///<summary>
    ///  行已更改。
    ///</summary>
    Change = 2;
    ///<summary>
    ///  已回滚到的行的最新更改。
    ///</summary>
    Rollback = 4;
    ///<summary>
    ///  对行的更改已提交。
    ///</summary>
    Commit = 8;
    ///<summary>
    ///  行已添加到表。
    ///</summary>
    Add = 16;
    ///<summary>
    ///  已更改行的原始版本。
    ///</summary>
    ChangeOriginal = 32;
    ///<summary>
    ///  原始和行的当前版本已更改。
    ///</summary>
    ChangeCurrentAndOriginal = 64;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  获取状态 <see cref="T:System.Data.DataRow" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Data.DataRowState')]
  DNDataRowState = type Integer;
  DNDataRowStateHelper = record helper for DNDataRowState
  public const
    ///<summary>
    ///  行已创建，但不属于任何 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  处于此状态，已创建后和之前添加到一个集合，或者如果已从集合中删除它。
    ///</summary>
    Detached = 1;
    ///<summary>
    ///  以来未更改行 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    Unchanged = 2;
    ///<summary>
    ///  行已添加到 <see cref="T:System.Data.DataRowCollection" />
    ///  , ，和 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  尚未调用。
    ///</summary>
    Added = 4;
    ///<summary>
    ///  使用已删除该行 <see cref="M:System.Data.DataRow.Delete" />
    ///  方法 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    Deleted = 8;
    ///<summary>
    ///  被修改的行和 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  尚未调用。
    ///</summary>
    Modified = 16;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  介绍 <see cref="T:System.Data.DataRow" />
  ///  的版本。
  ///</summary>
  [DNTypeName('System.Data.DataRowVersion')]
  DNDataRowVersion = type Integer;
  DNDataRowVersionHelper = record helper for DNDataRowVersion
  public const
    ///<summary>
    ///  包含其原始值的行。
    ///</summary>
    Original = 256;
    ///<summary>
    ///  包含其当前值的行。
    ///</summary>
    Current = 512;
    ///<summary>
    ///  包含建议值的行。
    ///</summary>
    Proposed = 1024;
    ///<summary><see cref="T:System.Data.DataRowState" />
    ///  的默认版本。
    ///  对于 <see langword="Added" />
    ///  、<see langword="Modified" />
    ///  或 <see langword="Deleted" />
    ///  的 <see langword="DataRowState" />
    ///  值，默认的版本是 <see langword="Current" />
    ///  。
    ///  对于 <see langword="Detached" />
    ///  的 <see cref="T:System.Data.DataRowState" />
    ///  值，版本是 <see langword="Proposed" />
    ///  。
    ///</summary>
    Default_ = 1536;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  介绍用于序列化格式 <see cref="T:System.DateTime" />
  ///  中的列 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataSetDateTime')]
  DNDataSetDateTime = type Integer;
  DNDataSetDateTimeHelper = record helper for DNDataSetDateTime
  public const
    ///<summary><see langword="DateTime" />
    ///  始终在本地存储。
    ///  如果 <see cref="F:System.Data.DataSetDateTime.Utc" />
    ///  或 <see cref="F:System.Data.DataSetDateTime.Unspecified" />
    ///  分配给此模式中的列，则首先要将其转换为本地。
    ///  在此模式下的序列化始终在本地执行。
    ///  在序列化期间没有偏移量。
    ///</summary>
    Local = 1;
    ///<summary><see langword="DateTime" />
    ///  始终会存储在未指定。
    ///  如果 <see cref="F:System.Data.DataSetDateTime.Local" />
    ///  或 <see cref="F:System.Data.DataSetDateTime.Utc" />
    ///  分配给此模式中的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" />
    ///  。
    ///  在此模式下的序列化不会导致某一偏移量。
    ///</summary>
    Unspecified = 2;
    ///<summary><see langword="DateTime" />
    ///  存储在未指定。
    ///  如果 <see cref="F:System.Data.DataSetDateTime.Local" />
    ///  或 <see cref="F:System.Data.DataSetDateTime.Utc" />
    ///  分配给此模式中的列，则首先要将其转换为 <see cref="F:System.Data.DataSetDateTime.Unspecified" />
    ///  。
    ///  在此模式下的序列化会导致偏移量。
    ///  这是默认行为，可以向后兼容。
    ///  此选项应被认为是在存储中未指定，但应用的偏移量，类似于 <see cref="F:System.Data.DataSetDateTime.Local" />
    ///  在序列化过程。
    ///</summary>
    UnspecifiedLocal = 3;
    ///<summary><see langword="DateTime" />
    ///  以协调世界时 (UTC) 存储。
    ///  如果 <see cref="F:System.Data.DataSetDateTime.Local" />
    ///  或 <see cref="F:System.Data.DataSetDateTime.Unspecified" />
    ///  分配给此模式中的列，则首先要将其转换为 <see langword="Utc" />
    ///  格式。
    ///  始终在中执行这种模式中的序列化 <see langword="Utc" />
    ///  。
    ///  在序列化期间没有偏移量。
    ///</summary>
    Utc = 4;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  描述中的数据的版本 <see cref="T:System.Data.DataRow" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataViewRowState')]
  DNDataViewRowState = type Integer;
  DNDataViewRowStateHelper = record helper for DNDataViewRowState
  public const
    ///<summary>
    ///  无。
    ///</summary>
    None = 0;
    ///<summary>
    ///  未更改的行。
    ///</summary>
    Unchanged = 2;
    ///<summary>
    ///  新行。
    ///</summary>
    Added = 4;
    ///<summary>
    ///  已删除的行。
    ///</summary>
    Deleted = 8;
    ///<summary>
    ///  已修改的原始数据的当前版本 (请参阅 <see langword="ModifiedOriginal" />
    ///  )。
    ///</summary>
    ModifiedCurrent = 16;
    ///<summary>
    ///  当前行包括保持不变，新的、 行和已修改的行。
    ///  默认情况下， <see cref="T:System.Data.DataViewRowState" />
    ///  设置为当前行。
    ///</summary>
    CurrentRows = 22;
    ///<summary>
    ///  已修改数据的原始版本。
    ///  (尽管数据已被修改，则可以用作 <see langword="ModifiedCurrent" />
    ///  )。
    ///</summary>
    ModifiedOriginal = 32;
    ///<summary>
    ///  原始行包括不变，且已删除的行。
    ///</summary>
    OriginalRows = 42;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定的字段、 属性的数据类型或 <see langword="Parameter" />
  ///  .NET Framework 数据提供程序的对象。
  ///</summary>
  [DNTypeName('System.Data.DbType')]
  DNDbType = type Integer;
  DNDbTypeHelper = record helper for DNDbType
  public const
    ///<summary>
    ///  范围在 1 到 8000 个字符之间的非 Unicode 字符长度可变的流。
    ///</summary>
    AnsiString = 0;
    ///<summary>
    ///  范围在 1 到 8000 个字节之间的二进制数据长度可变的流。
    ///</summary>
    Binary = 1;
    ///<summary>
    ///  取值范围为从 0 到 255 之间的值的 8 位无符号的整数。
    ///</summary>
    Byte = 2;
    ///<summary>
    ///  简单类型，表示布尔值的 <see langword="true" />
    ///  或 <see langword="false" />
    ///  。
    ///</summary>
    Boolean = 3;
    ///<summary>
    ///  货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 -1 （或 + 922337203685，477.5807），精确到货币单位的万分之一。
    ///</summary>
    Currency = 4;
    ///<summary>
    ///  表示日期值的类型。
    ///</summary>
    Date = 5;
    ///<summary>
    ///  表示日期和时间值的类型。
    ///</summary>
    DateTime = 6;
    ///<summary>
    ///  简单类型，表示值范围从 1.0 x 10 -28 大约 7.9 x 10 28 具有 28-29 个有效数字。
    ///</summary>
    Decimal = 7;
    ///<summary>
    ///  浮点类型，表示从大约 5.0 x 10 范围内的值 -324 1.7 x 10 308 15 到 16 位的精度。
    ///</summary>
    Double = 8;
    ///<summary>
    ///  全局唯一标识符 （或 GUID） 中。
    ///</summary>
    Guid = 9;
    ///<summary>
    ///  整型，表示有符号 16 位整数的值介于-32768 到 32767 之间。
    ///</summary>
    Int16 = 10;
    ///<summary>
    ///  整型，表示有符号 32 位整数的值介于-2147483648 和 2147483647 之间。
    ///</summary>
    Int32 = 11;
    ///<summary>
    ///  整型，表示有符号 64 位整数的值介于-9223372036854775808 到 9223372036854775807 之间。
    ///</summary>
    Int64 = 12;
    ///<summary>
    ///  常规类型，表示由另一个未明确表示任何引用或值类型 <see langword="DbType" />
    ///  值。
    ///</summary>
    Object_ = 13;
    ///<summary>
    ///  整型，表示有符号值介于-128 和 127 之间的 8 位整数。
    ///</summary>
    SByte = 14;
    ///<summary>
    ///  浮点类型，表示从大约 1.5 x 10 范围内的值 -45 3.4 x 10 38 且精度为 7 位数字。
    ///</summary>
    Single = 15;
    ///<summary>
    ///  表示 Unicode 字符串的类型。
    ///</summary>
    String_ = 16;
    ///<summary>
    ///  表示 SQL Server 的类型 <see langword="DateTime" />
    ///  值。
    ///  如果你想要使用 SQL Server <see langword="time" />
    ///  值，请使用 <see cref="F:System.Data.SqlDbType.Time" />
    ///  。
    ///</summary>
    Time = 17;
    ///<summary>
    ///  整数类型表示无符号的 16 位整数，其值介于 0 和 65535 之间。
    ///</summary>
    UInt16 = 18;
    ///<summary>
    ///  整数类型表示其值介于 0 和 4294967295 之间的无符号的 32 位整数。
    ///</summary>
    UInt32 = 19;
    ///<summary>
    ///  整数类型表示无符号的 64 位整数的值介于 0 到 18446744073709551615 之间。
    ///</summary>
    UInt64 = 20;
    ///<summary>
    ///  可变长度的数字值。
    ///</summary>
    VarNumeric = 21;
    ///<summary>
    ///  非 Unicode 字符固定长度流。
    ///</summary>
    AnsiStringFixedLength = 22;
    ///<summary>
    ///  一个固定长度的字符串的 Unicode 字符。
    ///</summary>
    StringFixedLength = 23;
    ///<summary>
    ///  已分析的 XML 文档或片断的表示形式。
    ///</summary>
    Xml = 25;
    ///<summary>
    ///  日期和时间数据。
    ///  日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
    ///  时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
    ///</summary>
    DateTime2 = 26;
    ///<summary>
    ///  时区的日期和时间数据。
    ///  日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
    ///  时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
    ///  时区值范围是-14:00 至 + 14:00。
    ///</summary>
    DateTimeOffset = 27;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定连接的事务锁定行为。
  ///</summary>
  [DNTypeName('System.Data.IsolationLevel')]
  DNIsolationLevel = type Integer;
  DNIsolationLevelHelper = record helper for DNIsolationLevel
  public const
    ///<summary>
    ///  无法覆盖从更高隔离级别的事务挂起的更改。
    ///</summary>
    Chaos = 16;
    ///<summary>
    ///  脏读，则意味着发布任何共享的锁，然后利用任何排他锁将生效。
    ///</summary>
    ReadUncommitted = 256;
    ///<summary>
    ///  正在读取数据以避免脏读，但在该事务，从而导致不可重复读取或幻像数据末尾之前可以更改数据时，将保持共享的锁。
    ///</summary>
    ReadCommitted = 4096;
    ///<summary>
    ///  在查询中，阻止其他用户更新的数据使用的所有数据上放置锁。
    ///  防止非可重复读取，但幻像行仍有可能。
    ///</summary>
    RepeatableRead = 65536;
    ///<summary>
    ///  范围锁放置在 <see cref="T:System.Data.DataSet" />
    ///  , ，阻止其他用户更新或将行插入到数据集，直到事务完成。
    ///</summary>
    Serializable = 1048576;
    ///<summary>
    ///  减少阻止通过存储数据的一个应用程序可以读取另一个修改相同的数据的同时版本。
    ///  指示，从一个事务无法查看其他事务中所做的更改即便重新查询。
    ///</summary>
    Snapshot = 16777216;
    ///<summary>
    ///  正在使用比指定不同的隔离级别，但不能确定其级别。
    ///</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  标识连接字符串参数标识的一组 <see langword="KeyRestrictions" />
  ///  允许或不允许使用的属性。
  ///</summary>
  [DNTypeName('System.Data.KeyRestrictionBehavior')]
  DNKeyRestrictionBehavior = type Integer;
  DNKeyRestrictionBehaviorHelper = record helper for DNKeyRestrictionBehavior
  public const
    ///<summary>
    ///  默认。
    ///  标识允许的唯一附加连接字符串参数。
    ///</summary>
    AllowOnly = 0;
    ///<summary>
    ///  标识不允许使用的其他连接字符串参数。
    ///</summary>
    PreventUsage = 1;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  控制如何从数据源的值将应用于现有行时使用 <see cref="Overload:System.Data.DataTable.Load" />
  ///  或 <see cref="Overload:System.Data.DataSet.Load" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.LoadOption')]
  DNLoadOption = type Integer;
  DNLoadOptionHelper = record helper for DNLoadOption
  public const
    ///<summary>
    ///  此行的传入值将为每个列数据的版本写入到当前值和原始值。
    ///</summary>
    OverwriteChanges = 1;
    ///<summary>
    ///  此行的传入值将写入每一列的原始值版本。
    ///  每个列中的数据的当前版本将不会更改。
    ///  这是默认设置。
    ///</summary>
    PreserveChanges = 2;
    ///<summary>
    ///  此行的传入值将写入每一列的当前版本。
    ///  每个列的数据的原始版本将不会更改。
    ///</summary>
    Upsert = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何 <see cref="T:System.Data.DataColumn" />
  ///  映射。
  ///</summary>
  [DNTypeName('System.Data.MappingType')]
  DNMappingType = type Integer;
  DNMappingTypeHelper = record helper for DNMappingType
  public const
    ///<summary>
    ///  将列映射到 XML 元素。
    ///</summary>
    Element = 1;
    ///<summary>
    ///  列映射到一个 XML 属性。
    ///</summary>
    Attribute = 2;
    ///<summary>
    ///  列映射到 <see cref="T:System.Xml.XmlText" />
    ///  节点。
    ///</summary>
    SimpleContent = 3;
    ///<summary>
    ///  列映射到的内部结构。
    ///</summary>
    Hidden = 4;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  确定当映射处于源表或源列中缺少时发生的操作。
  ///</summary>
  [DNTypeName('System.Data.MissingMappingAction')]
  DNMissingMappingAction = type Integer;
  DNMissingMappingActionHelper = record helper for DNMissingMappingAction
  public const
    ///<summary>
    ///  创建并添加到源表的源列 <see cref="T:System.Data.DataSet" />
    ///  使用其原始名称。
    ///</summary>
    Passthrough = 1;
    ///<summary>
    ///  将忽略的列或表不具有映射。
    ///  返回 <see langword="null" />
    ///  。
    ///</summary>
    Ignore = 2;
    ///<summary><see cref="T:System.InvalidOperationException" />
    ///  缺少指定的列映射时生成。
    ///</summary>
    Error = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定的操作时将数据添加到要执行 <see cref="T:System.Data.DataSet" />
  ///  以及所需 <see cref="T:System.Data.DataTable" />
  ///  或 <see cref="T:System.Data.DataColumn" />
  ///  缺少。
  ///</summary>
  [DNTypeName('System.Data.MissingSchemaAction')]
  DNMissingSchemaAction = type Integer;
  DNMissingSchemaActionHelper = record helper for DNMissingSchemaAction
  public const
    ///<summary>
    ///  添加必需的列以完成架构。
    ///</summary>
    Add = 1;
    ///<summary>
    ///  将忽略额外的列。
    ///</summary>
    Ignore = 2;
    ///<summary><see cref="T:System.InvalidOperationException" />
    ///  缺少指定的列映射时生成。
    ///</summary>
    Error = 3;
    ///<summary>
    ///  添加必要的列和主键信息以完成架构。
    ///  有关如何主键信息的详细信息添加到 <see cref="T:System.Data.DataTable" />
    ///  , ，请参阅 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
    ///  。才能正常运行.NET Framework 数据提供程序与用于 OLE DB <see langword="AddWithKey" />
    ///  需要本机 OLE DB 访问接口通过设置 DBPROP_UNIQUEROWS 属性来获取必要的主键信息，然后确定哪些列是通过检查在 IColumnsRowset DBCOLUMN_KEYCOLUMN 主键列。
    ///  作为替代方法，用户可以显式设置每个主键约束 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  这可确保与现有记录匹配的传入记录进行更新，而不是追加。
    ///  当使用 <see langword="AddWithKey" />
    ///  , ，SQL Server.NET Framework 数据提供程序将 FOR BROWSE 子句附加到正在执行的语句。
    ///  用户应注意的潜在负面影响，例如 SET FMTONLY ON 语句使用的干扰。
    ///  有关详细信息，请参阅 SQL Server 联机丛书。
    ///</summary>
    AddWithKey = 4;
  end;


  //-------------namespace: System.Data.Odbc----------------
  ///<summary>
  ///  指定的字段、 属性，以便在中使用的数据类型 <see cref="T:System.Data.Odbc.OdbcParameter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcType')]
  DNOdbcType = type Integer;
  DNOdbcTypeHelper = record helper for DNOdbcType
  public const
    ///<summary>
    ///  确切数值，其精度为 19 （如果已签名） 或 20 （如果无符号），小数位数为 0 (签名:-2 [63] &lt; = n &lt; = 2 [63] – 1，未签名︰ 0 &lt; = n &lt; = 2 [64] – 1) (SQL_BIGINT)。
    ///  此方法映射到 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    BigInt = 1;
    ///<summary>
    ///  二进制数据 (SQL_BINARY) 的流。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    Binary = 2;
    ///<summary>
    ///  单个位的二进制数据 (SQL_BIT)。
    ///  此方法映射到 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    Bit = 3;
    ///<summary>
    ///  固定长度的字符字符串 (SQL_CHAR)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    Char = 4;
    ///<summary>
    ///  日期格式 yyyymmddhhmmss (SQL_TYPE_TIMESTAMP) 中的数据。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    DateTime = 5;
    ///<summary>
    ///  有符号，精确数值精度为至少为 p 和小数位数 s，其中 1 &lt; = p &lt; = 15 和 s &lt; = p。
    ///  星期四
    ///  e 最大精度是特定于驱动程序 (SQL_DECIMAL)。
    ///  此方法映射到 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    Decimal = 6;
    ///<summary>
    ///  有符号，精确数值精度 p 和小数位数 s，其中 1 &lt; = p &lt; = 15 和 s &lt; = p (SQL_NUMERIC)。
    ///  此方法映射到 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    Numeric = 7;
    ///<summary>
    ///  已签名，其二进制精度为 53 的近似的数字值 （零个或绝对值 10 [–308] 到 10[308]) (SQL_DOUBLE)。
    ///  此方法映射到 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    Double = 8;
    ///<summary>
    ///  可变长度二进制数据。
    ///  最大长度为数据源而定 (SQL_LONGVARBINARY)。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    Image = 9;
    ///<summary>
    ///  确切数值，其精度为 10，小数位数为 0 (签名:-2 [31] &lt; = n &lt; = 2 [31] – 1，未签名︰ 0 &lt; = n &lt; = 2 [32] – 1) (SQL_INTEGER)。
    ///  此方法映射到 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    Int = 10;
    ///<summary>
    ///  Unicode 字符的固定的字符串的长度 (SQL_WCHAR) 的字符串。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    NChar = 11;
    ///<summary>
    ///  长度可变的字符的 Unicode 数据。
    ///  最大长度为数据源而定。
    ///  (SQL_WLONGVARCHAR)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    NText = 12;
    ///<summary>
    ///  Unicode 字符 (SQL_WVARCHAR) 长度可变的流。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    NVarChar = 13;
    ///<summary>
    ///  已签名，其二进制精度为 24 的近似的数字值 （零个或绝对值 10 [–38] 到 10[38])。(SQL_REAL)。
    ///  此方法映射到 <see cref="T:System.Single" />
    ///  。
    ///</summary>
    Real = 14;
    ///<summary>
    ///  方法是固定长度的 GUID (SQL_GUID)。
    ///  此方法映射到 <see cref="T:System.Guid" />
    ///  。
    ///</summary>
    UniqueIdentifier = 15;
    ///<summary>
    ///  数据和时间格式 yyyymmddhhmmss (SQL_TYPE_TIMESTAMP) 中的数据。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    SmallDateTime = 16;
    ///<summary>
    ///  确切数值，其精度为 5，小数位数为 0 (签名:-32768 &lt; = n &lt; = 32767，未签名︰ 0 &lt; = n &lt; = 65535) (SQL_SMALLINT)。
    ///  此方法映射到 <see cref="T:System.Int16" />
    ///  。
    ///</summary>
    SmallInt = 17;
    ///<summary>
    ///  可变长度字符数据。
    ///  最大长度为数据源而定 (SQL_LONGVARCHAR)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    Text = 18;
    ///<summary>
    ///  二进制数据 (SQL_BINARY) 的流。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    Timestamp = 19;
    ///<summary>
    ///  确切数值，其精度为 3，小数位数为 0 (签名:-128 &lt; = n &lt; = 127，未签名︰ 0 &lt; = n &lt; = 255)(SQL_TINYINT)。
    ///  此方法映射到 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    TinyInt = 20;
    ///<summary>
    ///  可变长度二进制。
    ///  最大值由用户 (SQL_VARBINARY) 设置。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    VarBinary = 21;
    ///<summary>
    ///  可变长度流，字符字符串 (SQL_CHAR)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    VarChar = 22;
    ///<summary>
    ///  日期格式 yyyymmdd (SQL_TYPE_DATE) 中的数据。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    Date = 23;
    ///<summary>
    ///  日期格式 hhmmss (SQL_TYPE_TIMES) 中的数据。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    Time = 24;
  end;


  //-------------namespace: System.Data.OleDb----------------
  ///<summary>
  ///  返回有关在文本命令、 数据值和数据库对象中使用的文本信息。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbLiteral')]
  DNOleDbLiteral = type Integer;
  DNOleDbLiteralHelper = record helper for DNOleDbLiteral
  public const
    ///<summary>
    ///  值无效。
    ///  映射到 DBLITERAL_INVALID。
    ///</summary>
    Invalid = 0;
    ///<summary>
    ///  中的二进制文本的文本命令中。
    ///  映射到 DBLITERAL_BINARY_LITERAL。
    ///</summary>
    Binary_Literal = 1;
    ///<summary>
    ///  中的文本命令中的目录名称。
    ///  映射到 DBLITERAL_CATALOG_NAME。
    ///</summary>
    Catalog_Name = 2;
    ///<summary>
    ///  从文本命令中标识符的其余部分分隔的目录名称的字符。
    ///  映射到 DBLITERAL_CATALOG_SEPARATOR。
    ///</summary>
    Catalog_Separator = 3;
    ///<summary>
    ///  中的字符文本的文本命令中。
    ///  映射到 DBLITERAL_CHAR_LITERAL。
    ///</summary>
    Char_Literal = 4;
    ///<summary>
    ///  中的文本命令中的列别名。
    ///  映射到 DBLITERAL_COLUMN_ALIAS。
    ///</summary>
    Column_Alias = 5;
    ///<summary>
    ///  列名称，或在数据定义接口中的文本命令中使用。
    ///  映射到 DBLITERAL_COLUMN_NAME。
    ///</summary>
    Column_Name = 6;
    ///<summary>
    ///  中的文本命令中的相关名称 （表别名）。
    ///  映射到 DBLITERAL_CORRELATION_NAME。
    ///</summary>
    Correlation_Name = 7;
    ///<summary>
    ///  中的文本命令中的游标名称。
    ///  映射到 DBLITERAL_CURSOR_NAME。
    ///</summary>
    Cursor_Name = 8;
    ///<summary>
    ///  在 LIKE 子句用于为 DBLITERAL_LIKE_PERCENT 文本返回对字符进行转义的字符。
    ///  例如，如果百分号 （%） 用于匹配零个或更多的字符，这是反斜杠 (\)，字符"abc\%%"与匹配所有以"abc %"开头的字符值。
    ///  某些 SQL 语句支持可用于重写此值的子句 （转义子句）。
    ///  映射到 DBLITERAL_ESCAPE_PERCENT_PREFIX。
    ///</summary>
    Escape_Percent_Prefix = 9;
    ///<summary>
    ///  在 LIKE 子句用于为 DBLITERAL_LIKE_UNDERSCORE 文本返回对字符进行转义的字符。
    ///  例如，如果下划线 (_) 被用来匹配一个字符，这是反斜杠 (\) 字符"abc\_ _"与匹配五个字符长并且以"abc_"开头的所有字符值。
    ///  某些 SQL 语句支持可用于重写此值的子句 （转义子句）。
    ///  映射到 DBLITERAL_ESCAPE_UNDERSCORE_PREFIX。
    ///</summary>
    Escape_Underscore_Prefix = 10;
    ///<summary>
    ///  用于文本命令中或数据定义接口的索引名称。
    ///  映射到 DBLITERAL_INDEX_NAME。
    ///</summary>
    Index_Name = 11;
    ///<summary>
    ///  LIKE 子句中用来匹配零个或多个字符的字符。
    ///  例如，如果这是百分号 （%），字符"abc %"将匹配所有以"abc"开头的字符值。
    ///  映射到 DBLITERAL_LIKE_PERCENT。
    ///</summary>
    Like_Percent = 12;
    ///<summary>
    ///  LIKE 子句中用于匹配一个字符的字符。
    ///  例如，如果这是下划线 (_)，字符"abc_"与匹配四个字符长并且以"abc"开头的所有字符值。
    ///  映射到 DBLITERAL_LIKE_UNDERSCORE。
    ///</summary>
    Like_Underscore = 13;
    ///<summary>
    ///  中的文本命令中的过程名。
    ///  映射到 DBLITERAL_PROCEDURE_NAME。
    ///</summary>
    Procedure_Name = 14;
    ///<summary>
    ///  用文本命令中作为左引号包含特殊字符的标识符引起来的字符。
    ///  映射到 DBLITERAL_QUOTE_PREFIX。
    ///</summary>
    Quote_Prefix = 15;
    ///<summary>
    ///  中的文本命令中的架构名。
    ///  映射到 DBLITERAL_SCHEMA_NAME。
    ///</summary>
    Schema_Name = 16;
    ///<summary>
    ///  表名称，或在数据定义接口中的文本命令中使用。
    ///  映射到 DBLITERAL_TABLE_NAME。
    ///</summary>
    Table_Name = 17;
    ///<summary>
    ///  文本命令，如 SQL 语句。
    ///  映射到 DBLITERAL_TEXT_COMMAND。
    ///</summary>
    Text_Command = 18;
    ///<summary>
    ///  中的文本命令中的用户名。
    ///  映射到 DBLITERAL_USER_NAME。
    ///</summary>
    User_Name = 19;
    ///<summary>
    ///  中的文本命令中的视图名称。
    ///  映射到 DBLITERAL_VIEW_NAME。
    ///</summary>
    View_Name = 20;
    ///<summary>
    ///  架构 （或如果该提供程序不支持架构的目录） 中的多维数据集的名称。
    ///</summary>
    Cube_Name = 21;
    ///<summary>
    ///  维度的名称。
    ///  如果维度是多个多维数据集的一部分，则为每个多维数据集/维度组合的一行。
    ///</summary>
    Dimension_Name = 22;
    ///<summary>
    ///  层次结构的名称。
    ///  如果该维度不包含层次结构，或者只有一个层次结构，当前列将包含 null 值。
    ///</summary>
    Hierarchy_Name = 23;
    ///<summary>
    ///  当前级别所属的多维数据集的名称。
    ///</summary>
    Level_Name = 24;
    ///<summary>
    ///  成员名。
    ///</summary>
    Member_Name = 25;
    ///<summary>
    ///  属性的名称。
    ///</summary>
    Property_Name = 26;
    ///<summary>
    ///  从文本命令中标识符的其余部分分开的架构名称的字符。
    ///  映射到 DBLITERAL_SCHEMA_SEPARATOR。
    ///</summary>
    Schema_Separator = 27;
    ///<summary>
    ///  用文本命令中用作右引号，包含特殊字符的标识符引起来的字符。
    ///  使用相同的字符作为前缀和后缀的 1.x 提供程序可能不会返回此文本值，并可以将 DBLITERAL 结构中的成员设置为 DBLITERAL_INVALID 如果请求。
    ///  映射到 DBLITERAL_QUOTE_SUFFIX。
    ///</summary>
    Quote_Suffix = 28;
    ///<summary>
    ///  转义符，如果有的话，用于后缀为 DBLITERAL_LIKE_PERCENT 文字返回的字符。
    ///  例如，如果百分号 （%） 用于匹配零个或更多的字符和百分比符号括在左括号和右方括号进行转义，DBLITERAL_ESCAPE_PERCENT_PREFIX 是"["，DBLITERAL_ESCAPE_PERCENT_SUFFIX 是"]"，并且字符"abc [%] %"匹配所有以"abc %"开头的字符值。
    ///  不使用后缀字符 DBLITERAL_ESCAPE_PERCENT 字符进行转义的提供程序不返回此文本值，可以将 DBLITERAL 结构的 lt 成员设置为 DBLITERAL_INVALID 如果请求。
    ///  映射到 DBLITERAL_ESCAPE_PERCENT_SUFFIX。
    ///</summary>
    Escape_Percent_Suffix = 29;
    ///<summary>
    ///  在 LIKE 子句用于为 DBLITERAL_LIKE_UNDERSCORE 文本返回对字符进行转义的字符。
    ///  例如，如果下划线 (_) 被用来匹配一个字符，这是反斜杠 (\) 字符"abc\_ _"与匹配五个字符长并且以"abc_"开头的所有字符值。
    ///  某些 SQL 语句支持可用于重写此值的子句 （转义子句）。
    ///  映射到 DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX。
    ///</summary>
    Escape_Underscore_Suffix = 30;
  end;


  //-------------namespace: System.Data.OleDb----------------
  ///<summary>
  ///  指定的字段、 属性，以便在中使用的数据类型 <see cref="T:System.Data.OleDb.OleDbParameter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbType')]
  DNOleDbType = type Integer;
  DNOleDbTypeHelper = record helper for DNOleDbType
  public const
    ///<summary>
    ///  没有值 (DBTYPE_EMPTY)。
    ///</summary>
    Empty = 0;
    ///<summary>
    ///  (DBTYPE_I2) 一个 16 位有符号的整数。
    ///  此方法映射到 <see cref="T:System.Int16" />
    ///  。
    ///</summary>
    SmallInt = 2;
    ///<summary>
    ///  (DBTYPE_I4) 32 位有符号的整数。
    ///  此方法映射到 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    Integer = 3;
    ///<summary>
    ///  浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间 (DBTYPE_R4)。
    ///  此方法映射到 <see cref="T:System.Single" />
    ///  。
    ///</summary>
    Single = 4;
    ///<summary>
    ///  浮点数，范围在-1.79 e + 308 到 1.79 e + 308 (DBTYPE_R8)。
    ///  此方法映射到 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    Double = 5;
    ///<summary>
    ///  货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 精度为千分之十个货币单位 (DBTYPE_CY)-1 （或 + 922337203685，477.5807）。
    ///  此方法映射到 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    Currency = 6;
    ///<summary>
    ///  日期数据，存储为一个双精度值 (DBTYPE_DATE)。
    ///  整数部分是自 1899 年 12 月 30 日以来的天数和小数部分是一天中的一小部分。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    Date = 7;
    ///<summary>
    ///  Null 终止字符的字符串的 Unicode 字符 (DBTYPE_BSTR)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    BSTR = 8;
    ///<summary>
    ///  一个指向 <see langword="IDispatch" />
    ///  接口 (DBTYPE_IDISPATCH)。
    ///  此方法映射到 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    IDispatch = 9;
    ///<summary>
    ///  32 位错误代码 (DBTYPE_ERROR)。
    ///  此方法映射到 <see cref="T:System.Exception" />
    ///  。
    ///</summary>
    Error = 10;
    ///<summary>
    ///  一个布尔值 (DBTYPE_BOOL)。
    ///  此方法映射到 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    Boolean = 11;
    ///<summary>
    ///  可以包含数字、 字符串、 二进制文件中，或日期数据以及这两个特殊的特殊数据类型值 Empty 和 Null (DBTYPE_VARIANT)。
    ///  如果未指定任何其他，则认为此类型。
    ///  此方法映射到 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    Variant = 12;
    ///<summary>
    ///  一个指向 <see langword="IUnknown" />
    ///  接口 (DBTYPE_UNKNOWN)。
    ///  此方法映射到 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    IUnknown = 13;
    ///<summary>
    ///  固定的精度和小数位数之间的数值范围为-10 38 -1 和 10 38 -1 (DBTYPE_DECIMAL)。
    ///  此方法映射到 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    Decimal = 14;
    ///<summary>
    ///  (DBTYPE_I1) 8 位有符号的整数。
    ///  此方法映射到 <see cref="T:System.SByte" />
    ///  。
    ///</summary>
    TinyInt = 16;
    ///<summary>
    ///  (DBTYPE_UI1) 一个 8 位无符号的整数。
    ///  此方法映射到 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    UnsignedTinyInt = 17;
    ///<summary>
    ///  (DBTYPE_UI2) 一个 16 位无符号的整数。
    ///  此方法映射到 <see cref="T:System.UInt16" />
    ///  。
    ///</summary>
    UnsignedSmallInt = 18;
    ///<summary>
    ///  (DBTYPE_UI4) 32 位无符号的整数。
    ///  此方法映射到 <see cref="T:System.UInt32" />
    ///  。
    ///</summary>
    UnsignedInt = 19;
    ///<summary>
    ///  (DBTYPE_I8) 64 位有符号的整数。
    ///  此方法映射到 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    BigInt = 20;
    ///<summary>
    ///  (DBTYPE_UI8) 64 位无符号的整数。
    ///  此方法映射到 <see cref="T:System.UInt64" />
    ///  。
    ///</summary>
    UnsignedBigInt = 21;
    ///<summary>
    ///  从 (DBTYPE_FILETIME) 1601 年 1 月 1 日表示的 100 毫微秒隔数的 64 位无符号的整数。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    Filetime = 64;
    ///<summary>
    ///  全局唯一标识符 （或 GUID） (DBTYPE_GUID)。
    ///  此方法映射到 <see cref="T:System.Guid" />
    ///  。
    ///</summary>
    Guid = 72;
    ///<summary>
    ///  二进制数据 (DBTYPE_BYTES) 的流。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    Binary = 128;
    ///<summary>
    ///  字符串 (DBTYPE_STR)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    Char = 129;
    ///<summary>
    ///  Null 终止的 Unicode 字符 (DBTYPE_WSTR) 流。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    WChar = 130;
    ///<summary>
    ///  具有固定的精度和小数位数 (DBTYPE_NUMERIC) 精确数值。
    ///  此方法映射到 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    Numeric = 131;
    ///<summary>
    ///  日期格式的数据 yyyymmdd (DBTYPE_DBDATE)。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    DBDate = 133;
    ///<summary>
    ///  时间格式的数据 hhmmss (DBTYPE_DBTIME)。
    ///  此方法映射到 <see cref="T:System.TimeSpan" />
    ///  。
    ///</summary>
    DBTime = 134;
    ///<summary>
    ///  数据和时间格式的数据 yyyymmddhhmmss (DBTYPE_DBTIMESTAMP)。
    ///  此方法映射到 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    DBTimeStamp = 135;
    ///<summary>
    ///  自动化 PROPVARIANT (DBTYPE_PROP_VARIANT)。
    ///  此方法映射到 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    PropVariant = 138;
    ///<summary>
    ///  长度可变的数值 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    VarNumeric = 139;
    ///<summary>
    ///  非 Unicode 字符的长度可变的流 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    VarChar = 200;
    ///<summary>
    ///  长字符串值 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    LongVarChar = 201;
    ///<summary>
    ///  长度可变的、 以 null 结尾的 Unicode 字符流 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    VarWChar = 202;
    ///<summary>
    ///  一个长时间的以 null 结尾的 Unicode 字符串值 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    LongVarWChar = 203;
    ///<summary>
    ///  二进制数据的长度可变的流 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    VarBinary = 204;
    ///<summary>
    ///  长二进制值 (<see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  仅)。
    ///  此方法映射到 <see cref="T:System.Array" />
    ///  类型的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    LongVarBinary = 205;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定相对于查询内使用的参数类型 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.ParameterDirection')]
  DNParameterDirection = type Integer;
  DNParameterDirectionHelper = record helper for DNParameterDirection
  public const
    ///<summary>
    ///  该参数为输入参数。
    ///</summary>
    Input = 1;
    ///<summary>
    ///  该参数为输出参数。
    ///</summary>
    Output = 2;
    ///<summary>
    ///  该参数是支持的输入和输出。
    ///</summary>
    InputOutput = 3;
    ///<summary>
    ///  该参数表示从某操作（如存储过程、内置函数或用户定义的函数）返回的值。
    ///</summary>
    ReturnValue = 6;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定属性的特性。
  ///</summary>
  [DNTypeName('System.Data.PropertyAttributes')]
  DNPropertyAttributes = type Integer;
  DNPropertyAttributesHelper = record helper for DNPropertyAttributes
  public const
    ///<summary>
    ///  该属性不受提供程序。
    ///</summary>
    NotSupported = 0;
    ///<summary>
    ///  初始化数据源之前，用户必须指定此属性的值。
    ///</summary>
    Required = 1;
    ///<summary>
    ///  用户不必初始化数据源之前指定此属性的值。
    ///</summary>
    Optional = 2;
    ///<summary>
    ///  用户可以读取该属性。
    ///</summary>
    Read = 512;
    ///<summary>
    ///  用户可以写入该属性。
    ///</summary>
    Write = 1024;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指示所发生的操作时 <see cref="T:System.Data.ForeignKeyConstraint" />
  ///  强制执行。
  ///</summary>
  [DNTypeName('System.Data.Rule')]
  DNRule = type Integer;
  DNRuleHelper = record helper for DNRule
  public const
    ///<summary>
    ///  对相关行执行任何操作。
    ///</summary>
    None = 0;
    ///<summary>
    ///  删除或更新相关的行。
    ///  这是默认设置。
    ///</summary>
    Cascade = 1;
    ///<summary>
    ///  对相关行中设置值 <see langword="DBNull" />
    ///  。
    ///</summary>
    SetNull = 2;
    ///<summary>
    ///  中包含的值的相关行中设置值 <see cref="P:System.Data.DataColumn.DefaultValue" />
    ///  属性。
    ///</summary>
    SetDefault = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示类型化的架构的序列化模式 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SchemaSerializationMode')]
  DNSchemaSerializationMode = type Integer;
  DNSchemaSerializationModeHelper = record helper for DNSchemaSerializationMode
  public const
    ///<summary>
    ///  包括架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  默认值。
    ///</summary>
    IncludeSchema = 1;
    ///<summary>
    ///  将跳过架构对于类型化的序列化 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ExcludeSchema = 2;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何处理现有的架构映射，在执行时 <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
  ///  操作。
  ///</summary>
  [DNTypeName('System.Data.SchemaType')]
  DNSchemaType = type Integer;
  DNSchemaTypeHelper = record helper for DNSchemaType
  public const
    ///<summary>
    ///  忽略任何 DataAdapter 上的一个表映射。
    ///  配置 <see cref="T:System.Data.DataSet" />
    ///  使用传入的架构，而不应用任何转换。
    ///</summary>
    Source = 1;
    ///<summary>
    ///  将任何现有的表映射应用于传入的架构。
    ///  配置 <see cref="T:System.Data.DataSet" />
    ///  用转换的架构。
    ///</summary>
    Mapped = 2;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  确定的序列化格式 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SerializationFormat')]
  DNSerializationFormat = type Integer;
  DNSerializationFormatHelper = record helper for DNSerializationFormat
  public const
    ///<summary>
    ///  将序列化为 XML 内容。
    ///  默认值。
    ///</summary>
    Xml = 0;
    ///<summary>
    ///  将序列化为二进制内容。
    ///  在仅 ADO.NET 2.0 中可用。
    ///</summary>
    Binary = 1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  指定 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent" />
  ///  的值。
  ///  可能的值为 <see langword="ReadWrite" />
  ///  和 <see langword="ReadOnly" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.ApplicationIntent')]
  DNApplicationIntent = type Integer;
  DNApplicationIntentHelper = record helper for DNApplicationIntent
  public const
    ///<summary>
    ///  连接到服务器时的应用程序工作负荷类型是可读写的。
    ///</summary>
    ReadWrite = 0;
    ///<summary>
    ///  连接到服务器时的应用程序工作负荷类型是只读的。
    ///</summary>
    ReadOnly = 1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  指定 PoolBlockingPeriod 属性 的值。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.PoolBlockingPeriod')]
  DNPoolBlockingPeriod = type Integer;
  DNPoolBlockingPeriodHelper = record helper for DNPoolBlockingPeriod
  public const
    ///<summary>
    ///  对 Azure SQL 服务器禁用暂停时段，但对所有其他 SQL 服务器启用。
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  对所有 SQL 服务器（包括 Azure SQL 服务器）启用暂停时段。
    ///</summary>
    AlwaysBlock = 1;
    ///<summary>
    ///  对所有 SQL 服务器（包括 Azure SQL 服务器）禁用暂停时段。
    ///</summary>
    NeverBlock = 2;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  指定的数据行的排序方式。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SortOrder')]
  DNSortOrder = type Integer;
  DNSortOrderHelper = record helper for DNSortOrder
  public const
    ///<summary>
    ///  行按升序排序。
    ///</summary>
    Ascending = 0;
    ///<summary>
    ///  行按降序排序。
    ///</summary>
    Descending = 1;
    ///<summary>
    ///  默认值。
    ///  不指定任何排序顺序。
    ///</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  介绍可供连接到 Azure SQL 数据库的客户端使用的不同 SQL 身份验证方法。
  ///  有关详细信息，请参阅 Connecting to SQL Database By Using Azure Active Directory Authentication。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlAuthenticationMethod')]
  DNSqlAuthenticationMethod = type Integer;
  DNSqlAuthenticationMethodHelper = record helper for DNSqlAuthenticationMethod
  public const
    ///<summary>
    ///  未指定身份验证方法。
    ///</summary>
    NotSpecified = 0;
    ///<summary>
    ///  身份验证方法为 SQL 密码。
    ///</summary>
    SqlPassword = 1;
    ///<summary>
    ///  身份验证方法使用 Active Directory 密码。
    ///  使用 Active Directory 密码连接到使用 Azure AD 主体名称和密码的 SQL 数据库。
    ///</summary>
    ActiveDirectoryPassword = 2;
    ///<summary>
    ///  身份验证方法使用 Active Directory Integrated。
    ///  使用 Active Directory Integrated 连接到使用集成 Windows 身份验证的 SQL 数据库。
    ///</summary>
    ActiveDirectoryIntegrated = 3;
    ActiveDirectoryInteractive = 4;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  按位标志，指定要与 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
  ///  的实例一起使用的一个或多个选项。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlBulkCopyOptions')]
  DNSqlBulkCopyOptions = type Integer;
  DNSqlBulkCopyOptionsHelper = record helper for DNSqlBulkCopyOptions
  public const
    ///<summary>
    ///  使用所有选项的默认值。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  保留源标识值。
    ///  未指定标识值时，该值由目标指派。
    ///</summary>
    KeepIdentity = 1;
    ///<summary>
    ///  插入数据时检查约束。
    ///  默认情况下，不检查约束。
    ///</summary>
    CheckConstraints = 2;
    ///<summary>
    ///  获取批量复制操作持续时间的批量更新锁定。
    ///  如果未指定，则使用行锁定。
    ///</summary>
    TableLock = 4;
    ///<summary>
    ///  在目标表中保留 null 值，而不考虑默认值的设置。
    ///  如果未指定，由默认值替换 null 值（适用时）。
    ///</summary>
    KeepNulls = 8;
    ///<summary>
    ///  如果指定，则使服务器激发插入触发器，从而使行插入数据库。
    ///</summary>
    FireTriggers = 16;
    ///<summary>
    ///  如果指定，批量复制操作的每一批都将在事务内发生。
    ///  如果指示该选项，并且还向构造函数提供 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  对象，则发生 <see cref="T:System.ArgumentException" />
    ///  。
    ///</summary>
    UseInternalTransaction = 32;
    ///<summary>
    ///  如果指定，AllowEncryptedValueModifications 将启用表或数据库之间加密数据的大容量复制，而且无需对数据解密。
    ///  通常情况下，应用程序会从一个表的加密列中选择数据并且不对数据解密（该应用程序会连接到列加密设置关键字设置为已禁用的数据库），然后使用此选项大容量插入数据（仍然为加密状态）。
    ///  有关详细信息，请参阅 Always Encrypted。
    ///  指定 AllowEncryptedValueModifications 时要格外小心，因为这可能导致数据库损坏，原因是驱动程序不会检查数据是否确实已加密，或者是否使用与目标列相同的加密类型、算法和密钥进行了正确加密。
    ///</summary>
    AllowEncryptedValueModifications = 64;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  指定读取和写入加密列时将如何发送及接收数据。
  ///  根据特定的查询，正当使用非加密列时跳过 Always Encrypted 驱动程序的处理可能会降低性能影响。
  ///  请注意这些设置不能用于绕过加密以及获取纯文本数据的访问权限。
  ///  有关详细信息，请参阅 Always Encrypted (Database Engine)
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlCommandColumnEncryptionSetting')]
  DNSqlCommandColumnEncryptionSetting = type Integer;
  DNSqlCommandColumnEncryptionSettingHelper = record helper for DNSqlCommandColumnEncryptionSetting
  public const
    ///<summary>
    ///  指定该命令应默认为连接字符串中的 Always Encrypted 设置。
    ///</summary>
    UseConnectionSetting = 0;
    ///<summary>
    ///  为查询启用 Always Encrypted。
    ///</summary>
    Enabled = 1;
    ///<summary>
    ///  指定驱动程序中 Always Encrypted 例程应只能处理命令的结果。
    ///  当命令不具有需要加密的任何参数时使用此值。
    ///</summary>
    ResultSetOnly = 2;
    ///<summary>
    ///  对查询禁用 Always Encrypted。
    ///</summary>
    Disabled = 3;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  指定在连接中启用“始终加密”功能。
  ///  请注意这些设置不能用于绕过加密以及获取纯文本数据的访问权限。
  ///  有关详细信息，请参阅 Always Encrypted (Database Engine)。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlConnectionColumnEncryptionSetting')]
  DNSqlConnectionColumnEncryptionSetting = type Integer;
  DNSqlConnectionColumnEncryptionSettingHelper = record helper for DNSqlConnectionColumnEncryptionSetting
  public const
    ///<summary>
    ///  指定连接不使用“始终加密”功能。
    ///  如果未通过该连接发送访问加密列的查询，则应使用此设置。
    ///</summary>
    Disabled = 0;
    ///<summary>
    ///  启用连接的“始终加密”功能。
    ///  将以透明方式加密与加密列对应的查询参数和加密列的查询结果。
    ///</summary>
    Enabled = 1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  此枚举提供有关依赖项事件处理程序都可以接收的不同通知的其他信息。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlNotificationInfo')]
  DNSqlNotificationInfo = type Integer;
  DNSqlNotificationInfoHelper = record helper for DNSqlNotificationInfo
  public const
    ///<summary>
    ///  一个或多个表已截断。
    ///</summary>
    Truncate = 0;
    ///<summary>
    ///  数据已更改的 INSERT 语句。
    ///</summary>
    Insert = 1;
    ///<summary>
    ///  数据已更改由 UPDATE 语句。
    ///</summary>
    Update = 2;
    ///<summary>
    ///  数据已更改的 DELETE 语句。
    ///</summary>
    Delete = 3;
    ///<summary>
    ///  与查询相关的基础对象而被丢弃。
    ///</summary>
    Drop = 4;
    ///<summary>
    ///  已修改的查询相关的基础服务器对象。
    ///</summary>
    Alter = 5;
    ///<summary>
    ///  重新启动服务器 （通知发送期间重启。）。
    ///</summary>
    Restart = 6;
    ///<summary>
    ///  发生了内部服务器错误。
    ///</summary>
    Error = 7;
    ///<summary>
    ///  SELECT 语句无法向其通报或已提供的说明。
    ///</summary>
    Query = 8;
    ///<summary>
    ///  所提供不能被通知 （例如，UPDATE 语句） 的一条语句。
    ///</summary>
    Invalid = 9;
    ///<summary>
    ///  在订阅时没有适当地设置的 SET 选项。
    ///</summary>
    Options = 10;
    ///<summary>
    ///  不是有效的隔离模式下执行该语句时 （例如，快照）。
    ///</summary>
    Isolation = 11;
    ///<summary><see langword="SqlDependency" />
    ///  对象已过期。
    ///</summary>
    Expired = 12;
    ///<summary>
    ///  由于服务器资源不足而激发。
    ///</summary>
    Resource = 13;
    ///<summary>
    ///  前一个语句导致在当前事务下激发了查询通知。
    ///</summary>
    PreviousFire = 14;
    ///<summary>
    ///  订阅查询导致其中一个超过最大容限的目标表上的模板数。
    ///</summary>
    TemplateLimit = 15;
    ///<summary>
    ///  用于区分触发查询通知的服务器端原因。
    ///</summary>
    Merge = 16;
    ///<summary><see langword="SqlDependency" />
    ///  对象已激发，并且不能向其中添加新的命令。
    ///</summary>
    AlreadyChanged = -2;
    ///<summary>
    ///  在信息选项由服务器发送无法识别客户端时使用。
    ///</summary>
    Unknown = -1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  指示依赖项事件处理程序收到的通知的源。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlNotificationSource')]
  DNSqlNotificationSource = type Integer;
  DNSqlNotificationSourceHelper = record helper for DNSqlNotificationSource
  public const
    ///<summary>
    ///  数据已更改;例如，插入、 更新、 删除或截断操作发生。
    ///</summary>
    Data = 0;
    ///<summary>
    ///  订阅超时已过期。
    ///</summary>
    Timeout = 1;
    ///<summary>
    ///  数据库对象没有改变。例如，基础对象的查询相关的已删除或修改。
    ///</summary>
    Object_ = 2;
    ///<summary>
    ///  数据库状态已更改;例如，数据库的查询相关的已删除或分离。
    ///</summary>
    Database = 3;
    ///<summary>
    ///  发生系统相关的事件。
    ///  例如，时发生内部错误、 重新启动服务器，或导致无效的资源压力。
    ///</summary>
    System = 4;
    ///<summary>
    ///  TRANSACT-SQL 语句不能用于通知;例如，在执行 SELECT 语句，不会通知或非 SELECT 语句。
    ///</summary>
    Statement = 5;
    ///<summary>
    ///  运行时环境不是与通知，则兼容例如，隔离级别设置为快照，或者一个或多个 SET 选项不兼容。
    ///</summary>
    Environment = 6;
    ///<summary>
    ///  执行期间出现运行时错误。
    ///</summary>
    Execution = 7;
    ///<summary>
    ///  仅限; 内部不应在代码中使用。
    ///</summary>
    Owner = 8;
    ///<summary>
    ///  将出现了客户端启动的通知，例如客户端超时或由于而尝试将命令添加到已激发的依赖项。
    ///</summary>
    Client = -2;
    ///<summary>
    ///  在源选项由服务器发送无法识别客户端时使用。
    ///</summary>
    Unknown = -1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  ///<summary>
  ///  介绍可由接收的不同通知类型 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" />
  ///  事件处理程序通过 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" />
  ///  参数。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlNotificationType')]
  DNSqlNotificationType = type Integer;
  DNSqlNotificationTypeHelper = record helper for DNSqlNotificationType
  public const
    ///<summary>
    ///  更改在被监视的服务器上的数据。
    ///  使用 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" />
    ///  项来确定更改的详细信息。
    ///</summary>
    Change = 0;
    ///<summary>
    ///  无法创建通知订阅。
    ///  使用 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" />
    ///  对象的 <see cref="T:System.Data.SqlClient.SqlNotificationInfo" />
    ///  项来确定失败的原因。
    ///</summary>
    Subscribe = 1;
    ///<summary>
    ///  在类型选项由服务器发送无法识别客户端时使用。
    ///</summary>
    Unknown = -1;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定 SQL Server 特定数据类型的字段、 属性，用于 <see cref="T:System.Data.SqlClient.SqlParameter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SqlDbType')]
  DNSqlDbType = type Integer;
  DNSqlDbTypeHelper = record helper for DNSqlDbType
  public const
    ///<summary><see cref="T:System.Int64" />
    ///  。
    ///  64 位带符号整数。
    ///</summary>
    BigInt = 0;
    ///<summary><see cref="T:System.Array" />
    ///  类型<see cref="T:System.Byte" />
    ///  。
    ///  固定长度流，范围在 1 到 8000 个字节之间的二进制数据。
    ///</summary>
    Binary = 1;
    ///<summary><see cref="T:System.Boolean" />
    ///  。
    ///  无符号的数字值，可为 0，1，或 <see langword="null" />
    ///  。
    ///</summary>
    Bit = 2;
    ///<summary><see cref="T:System.String" />
    ///  。
    ///  范围在 1 到 8000 个字符之间的非 Unicode 字符固定长度流。
    ///</summary>
    Char = 3;
    ///<summary><see cref="T:System.DateTime" />
    ///  。
    ///  日期和时间数据，值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒到 9999。
    ///</summary>
    DateTime = 4;
    ///<summary><see cref="T:System.Decimal" />
    ///  。
    ///  固定的精度和小数位数之间的数值范围为-10 38 -1 和 10 38 -1。
    ///</summary>
    Decimal = 5;
    ///<summary><see cref="T:System.Double" />
    ///  。
    ///  浮点数，范围在-1.79 e + 308 到 1.79 e + 308 之间。
    ///</summary>
    Float = 6;
    ///<summary><see cref="T:System.Array" />
    ///  类型<see cref="T:System.Byte" />
    ///  。
    ///  范围从 0 到 2 的二进制数据的长度可变的流 31 -1 （或者 2147483647） 字节。
    ///</summary>
    Image = 7;
    ///<summary><see cref="T:System.Int32" />
    ///  。
    ///  32 位带符号整数。
    ///</summary>
    Int = 8;
    ///<summary><see cref="T:System.Decimal" />
    ///  。
    ///  货币值，范围从-2 63 （即-9223372036854775808） 到 2 63 -1 （或 9223372036854775807），精确到货币单位的万分之一。
    ///</summary>
    Money = 9;
    ///<summary><see cref="T:System.String" />
    ///  。
    ///  范围在 1 到 4000 个字符之间的 Unicode 字符的固定长度流。
    ///</summary>
    NChar = 10;
    ///<summary><see cref="T:System.String" />
    ///  。
    ///  最大长度为 2 Unicode 数据的长度可变的流 30 -1 （或者 1073741823） 个字符。
    ///</summary>
    NText = 11;
    ///<summary><see cref="T:System.String" />
    ///  。
    ///  范围在 1 到 4000 个字符之间的 Unicode 字符长度可变的流。
    ///  如果字符串大于 4000 个字符，隐式转换将失败。
    ///  使用字符串长度超过 4000 个字符时，请显式设置对象。
    ///  使用 <see cref="F:System.Data.SqlDbType.NVarChar" />
    ///  数据库列时 <see langword="nvarchar(max)" />
    ///  。
    ///</summary>
    NVarChar = 12;
    ///<summary><see cref="T:System.Single" />
    ///  。
    ///  浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间。
    ///</summary>
    Real = 13;
    ///<summary><see cref="T:System.Guid" />
    ///  。
    ///  全局唯一标识符 （或 GUID） 中。
    ///</summary>
    UniqueIdentifier = 14;
    ///<summary><see cref="T:System.DateTime" />
    ///  。
    ///  数值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日精度为一分钟的日期和时间数据。
    ///</summary>
    SmallDateTime = 15;
    ///<summary><see cref="T:System.Int16" />
    ///  。
    ///  16 位带符号整数。
    ///</summary>
    SmallInt = 16;
    ///<summary><see cref="T:System.Decimal" />
    ///  。
    ///  一个范围从-214，748.3648 到 +214,748.3647，精确到货币单位的万分之一的货币值。
    ///</summary>
    SmallMoney = 17;
    ///<summary><see cref="T:System.String" />
    ///  。
    ///  最大长度为 2 的非 Unicode 数据的变量长度流 31 -1 （或者 2147483647） 个字符。
    ///</summary>
    Text = 18;
    ///<summary><see cref="T:System.Array" />
    ///  类型<see cref="T:System.Byte" />
    ///  。
    ///  自动生成二进制数字，保证在数据库中是唯一。
    ///<see langword="timestamp" />
    ///  通常用作为表行加版本戳的机制。
    ///  存储大小为 8 个字节。
    ///</summary>
    Timestamp = 19;
    ///<summary><see cref="T:System.Byte" />
    ///  。
    ///  8 位无符号整数。
    ///</summary>
    TinyInt = 20;
    ///<summary><see cref="T:System.Array" />
    ///  类型<see cref="T:System.Byte" />
    ///  。
    ///  范围在 1 到 8000 个字节之间的二进制数据长度可变的流。
    ///  如果字节数组大于 8000 个字节，隐式转换将失败。
    ///  在使用字节数组大于 8000 个字节时，请显式设置对象。
    ///</summary>
    VarBinary = 21;
    ///<summary><see cref="T:System.String" />
    ///  。
    ///  范围在 1 到 8000 个字符之间的非 Unicode 字符长度可变的流。
    ///  使用 <see cref="F:System.Data.SqlDbType.VarChar" />
    ///  数据库列时 <see langword="varchar(max)" />
    ///  。
    ///</summary>
    VarChar = 22;
    ///<summary><see cref="T:System.Object" />
    ///  。
    ///  可以包含数值的特殊数据类型，字符串、 二进制文件中，或日期数据，以及 SQL Server 值的空和 Null，这将假定如果没有其他声明类型。
    ///</summary>
    Variant = 23;
    ///<summary>
    ///  XML 值。
    ///  获取将 XML 作为字符串使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" />
    ///  方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" />
    ///  属性，或指定为 <see cref="T:System.Xml.XmlReader" />
    ///  通过调用 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" />
    ///  方法。
    ///</summary>
    Xml = 25;
    ///<summary>
    ///  一个 SQL Server 用户定义类型 (UDT)。
    ///</summary>
    Udt = 29;
    ///<summary>
    ///  用于指定包含在表值参数中的结构化的数据的特殊数据类型。
    ///</summary>
    Structured = 30;
    ///<summary>
    ///  日期数据，从 1 月的值范围为 1，1 AD 到公元 9999 年 12 月 31 日。
    ///</summary>
    Date = 31;
    ///<summary>
    ///  基于 24 小时制时间数据。
    ///  时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
    ///  对应于 SQL Server <see langword="time" />
    ///  值。
    ///</summary>
    Time = 32;
    ///<summary>
    ///  日期和时间数据。
    ///  日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
    ///  时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
    ///</summary>
    DateTime2 = 33;
    ///<summary>
    ///  时区的日期和时间数据。
    ///  日期值范围是从 1 月 1，1 AD 到公元 9999 年 12 月 31 日。
    ///  时间值范围是 00:00:00 到 23:59:59.9999999 100 纳秒精度。
    ///  时区值范围是-14:00 至 + 14:00。
    ///</summary>
    DateTimeOffset = 34;
  end;


  //-------------namespace: System.Data.SqlTypes----------------
  ///<summary>
  ///  指定的比较选项值 <see cref="T:System.Data.SqlTypes.SqlString" />
  ///  结构。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlCompareOptions')]
  DNSqlCompareOptions = type Integer;
  DNSqlCompareOptionsHelper = record helper for DNSqlCompareOptions
  public const
    ///<summary>
    ///  指定的默认选项设置 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较必须忽略大小写。
    ///</summary>
    IgnoreCase = 1;
    ///<summary>
    ///  指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较必须忽略非空格组合字符，如标注字符。
    ///  Unicode 标准定义为与基的字符，以生成新的字符组合的字符组合字符。
    ///  非空格组合字符不在呈现时本身使用字符空间。
    ///  有关非空格组合字符有关的详细信息，请参阅 http://www.unicode.org Unicode 标准。
    ///</summary>
    IgnoreNonSpace = 2;
    ///<summary>
    ///  指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较必须忽略假名类型。
    ///  假名类型是指表示日语中的语音的日语平假名和片假名字符。
    ///  平假名用于本机日语表达式和单词，而片假名用于从"计算机"或"Internet"等其他语言借用的词语。
    ///  拼音声音可以表示在平假名和片假名。
    ///  如果选择此值，则一种声音的平假名字符视为相等的同一个声音的片假名字符。
    ///</summary>
    IgnoreKanaType = 8;
    ///<summary>
    ///  指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较必须忽略字符宽度。
    ///  例如，日语的片假名字符可以写为全角或半角，并且如果选择此值，则片假名字符的全角形式被视为等同于编写的半角字符相同。
    ///</summary>
    IgnoreWidth = 16;
    ///<summary>
    ///  执行二进制排序。
    ///</summary>
    BinarySort2 = 16384;
    ///<summary>
    ///  指定的排序应基于字符的数字值而不是其字母数字值。
    ///</summary>
    BinarySort = 32768;
  end;


  //-------------namespace: System.Data.SqlTypes----------------
  ///<summary><see cref="T:System.Data.SqlTypes.StorageState" />
  ///  不应用作独立组件，而应用作其他类从中派生标准功能的枚举。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.StorageState')]
  DNStorageState = type Integer;
  DNStorageStateHelper = record helper for DNStorageState
  public const
    ///<summary>
    ///  缓冲区大小。
    ///</summary>
    Buffer = 0;
    ///<summary>
    ///  流。
    ///</summary>
    Stream = 1;
    ///<summary>
    ///  非托管的缓冲区。
    ///</summary>
    UnmanagedBuffer = 2;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定要使用的 SQL 查询的类型 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />
  ///  , ，<see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />
  ///  , ，<see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />
  ///  , ，或 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Data.StatementType')]
  DNStatementType = type Integer;
  DNStatementTypeHelper = record helper for DNStatementType
  public const
    ///<summary>
    ///  是由 SELECT 语句的 SQL 查询。
    ///</summary>
    Select = 0;
    ///<summary>
    ///  是一条 INSERT 语句的 SQL 查询。
    ///</summary>
    Insert = 1;
    ///<summary>
    ///  是一条 UPDATE 语句的 SQL 查询。
    ///</summary>
    Update = 2;
    ///<summary>
    ///  SQL 查询是 DELETE 语句。
    ///</summary>
    Delete = 3;
    ///<summary>
    ///  SQL 查询，批语句。
    ///</summary>
    Batch = 4;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何将查询命令结果应用于正在更新的行。
  ///</summary>
  [DNTypeName('System.Data.UpdateRowSource')]
  DNUpdateRowSource = type Integer;
  DNUpdateRowSourceHelper = record helper for DNUpdateRowSource
  public const
    ///<summary>
    ///  忽略任何返回的参数或行。
    ///</summary>
    None = 0;
    ///<summary>
    ///  输出参数映射到已更改的行中 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    OutputParameters = 1;
    ///<summary>
    ///  返回的第一行中的数据映射到已更改的行中 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    FirstReturnedRecord = 2;
    ///<summary>
    ///  输出参数和返回的第一行映射到已更改的行中 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    Both = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定有关当前和其余行期间要执行的操作 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.UpdateStatus')]
  DNUpdateStatus = type Integer;
  DNUpdateStatusHelper = record helper for DNUpdateStatus
  public const
    ///<summary><see cref="T:System.Data.Common.DataAdapter" />
    ///  可以继续处理的行。
    ///</summary>
    Continue_ = 0;
    ///<summary>
    ///  事件处理程序会报告更新应被视为错误。
    ///</summary>
    ErrorsOccurred = 1;
    ///<summary>
    ///  当前行并不是进行更新。
    ///</summary>
    SkipCurrentRow = 2;
    ///<summary>
    ///  当前行和所有剩余行将不会更新。
    ///</summary>
    SkipAllRemainingRows = 3;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何读取 XML 数据和关系架构读入 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.XmlReadMode')]
  DNXmlReadMode = type Integer;
  DNXmlReadModeHelper = record helper for DNXmlReadMode
  public const
    ///<summary>
    ///  默认。
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  读取内联架构并加载数据。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已经包含架构，新表可能会添加到架构，但是如果中已存在内联架构中的任何表，将引发异常 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ReadSchema = 1;
    ///<summary>
    ///  忽略任何内联架构并将数据读入现有的 <see cref="T:System.Data.DataSet" />
    ///  架构。
    ///  如果任何数据与现有架构不匹配，则会丢弃 (包括来自不同的命名空间为定义的数据 <see cref="T:System.Data.DataSet" />
    ///  )。
    ///  如果数据为 DiffGram， <see langword="IgnoreSchema" />
    ///  具有相同的功能 <see langword="DiffGram" />
    ///  。
    ///</summary>
    IgnoreSchema = 2;
    ///<summary>
    ///  忽略任何内联架构，推断的数据的架构并加载数据。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已包含架构，通过添加新表或向现有表添加列来扩展当前架构。
    ///  如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。
    ///</summary>
    InferSchema = 3;
    ///<summary>
    ///  读取 DiffGram，将更改应用到的 DiffGram 从 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  语义是相同的 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  操作。
    ///  与 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  操作， <see cref="P:System.Data.DataRow.RowState" />
    ///  会保留值。
    ///  输入到 <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
    ///  使用 Diffgram 应仅获取使用从输出 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
    ///  以 diffgram 形式。
    ///</summary>
    DiffGram = 4;
    ///<summary>
    ///  读取 XML 片段，例如那些通过执行针对 SQL Server 实例的 FOR XML 查询生成。
    ///  当 <see cref="T:System.Data.XmlReadMode" />
    ///  设置为 <see langword="Fragment" />
    ///  , ，默认命名空间将读取内联架构。
    ///</summary>
    Fragment = 5;
    ///<summary>
    ///  忽略任何内联架构、 推断强类型化的数据，从架构并加载数据。
    ///  如果从数据，不能推断出类型，它被解释为字符串数据。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已经包含一个架构已扩展当前架构，通过添加新表或通过将列添加到现有的表。
    ///  如果推断的表已经存在，但具有不同的命名空间，则引发异常，或者任何推断的列与现有列发生冲突。
    ///</summary>
    InferTypedSchema = 6;
  end;


  //-------------namespace: System.Data----------------
  ///<summary>
  ///  指定如何编写 XML 数据和从一个关系架构 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.XmlWriteMode')]
  DNXmlWriteMode = type Integer;
  DNXmlWriteModeHelper = record helper for DNXmlWriteMode
  public const
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataSet" />
    ///  以与关系结构作为内联 XSD 架构的 XML 数据形式。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  只有架构不包含数据，编写仅内联架构。
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  未没有当前的架构，则不写入任何内容。
    ///</summary>
    WriteSchema = 0;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataSet" />
    ///  作为 XML 数据，而无需 XSD 架构。
    ///  如果没有数据加载到 <see cref="T:System.Data.DataSet" />
    ///  , ，则写入任何内容。
    ///</summary>
    IgnoreSchema = 1;
    ///<summary>
    ///  以 DiffGram 形式编写整个 <see cref="T:System.Data.DataSet" />
    ///  ，包括原始值和当前值。
    ///  若要生成一个 DiffGram，它包含只会更改值，请调用 <see cref="M:System.Data.DataSet.GetChanges" />
    ///  , ，然后调用 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
    ///  对返回 DiffGram 形式 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    DiffGram = 2;
  end;




type


{ declares }

  DNIBinarySerialize = interface; // type: Microsoft.SqlServer.Server.IBinarySerialize, namespace: Microsoft.SqlServer.Server
  DNIColumnMappingCollection = interface; // type: System.Data.IColumnMappingCollection, namespace: System.Data
  DNIDataParameterCollection = interface; // type: System.Data.IDataParameterCollection, namespace: System.Data
  DNITableMappingCollection = interface; // type: System.Data.ITableMappingCollection, namespace: System.Data
  DNIDbColumnSchemaGenerator = interface; // type: System.Data.Common.IDbColumnSchemaGenerator, namespace: System.Data.Common
  DNIColumnMapping = interface; // type: System.Data.IColumnMapping, namespace: System.Data
  DNIDataAdapter = interface; // type: System.Data.IDataAdapter, namespace: System.Data
  DNIDbDataAdapter = interface; // type: System.Data.IDbDataAdapter, namespace: System.Data
  DNIDataParameter = interface; // type: System.Data.IDataParameter, namespace: System.Data
  DNIDbDataParameter = interface; // type: System.Data.IDbDataParameter, namespace: System.Data
  DNIDataRecord = interface; // type: System.Data.IDataRecord, namespace: System.Data
  DNITableMapping = interface; // type: System.Data.ITableMapping, namespace: System.Data
  DNINullable = interface; // type: System.Data.SqlTypes.INullable, namespace: System.Data.SqlTypes
  DNIDataReader = interface; // type: System.Data.IDataReader, namespace: System.Data
  DNIDbCommand = interface; // type: System.Data.IDbCommand, namespace: System.Data
  DNIDbConnection = interface; // type: System.Data.IDbConnection, namespace: System.Data
  DNIDbTransaction = interface; // type: System.Data.IDbTransaction, namespace: System.Data
  DNSqlContext = interface; // type: Microsoft.SqlServer.Server.SqlContext, namespace: Microsoft.SqlServer.Server
  DNSqlDataRecord = interface; // type: Microsoft.SqlServer.Server.SqlDataRecord, namespace: Microsoft.SqlServer.Server
  DNSqlMetaData = interface; // type: Microsoft.SqlServer.Server.SqlMetaData, namespace: Microsoft.SqlServer.Server
  DNSqlPipe = interface; // type: Microsoft.SqlServer.Server.SqlPipe, namespace: Microsoft.SqlServer.Server
  DNSqlTriggerContext = interface; // type: Microsoft.SqlServer.Server.SqlTriggerContext, namespace: Microsoft.SqlServer.Server
  DNSqlFacetAttribute = interface; // type: Microsoft.SqlServer.Server.SqlFacetAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlFunctionAttribute = interface; // type: Microsoft.SqlServer.Server.SqlFunctionAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlMethodAttribute = interface; // type: Microsoft.SqlServer.Server.SqlMethodAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlProcedureAttribute = interface; // type: Microsoft.SqlServer.Server.SqlProcedureAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlTriggerAttribute = interface; // type: Microsoft.SqlServer.Server.SqlTriggerAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlUserDefinedAggregateAttribute = interface; // type: Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlUserDefinedTypeAttribute = interface; // type: Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute, namespace: Microsoft.SqlServer.Server
  DNDataSysDescriptionAttribute = interface; // type: System.Data.DataSysDescriptionAttribute, namespace: System.Data
  DNDbProviderSpecificTypePropertyAttribute = interface; // type: System.Data.Common.DbProviderSpecificTypePropertyAttribute, namespace: System.Data.Common
  DNDBDataPermissionAttribute = interface; // type: System.Data.Common.DBDataPermissionAttribute, namespace: System.Data.Common
  DNOdbcPermissionAttribute = interface; // type: System.Data.Odbc.OdbcPermissionAttribute, namespace: System.Data.Odbc
  DNOleDbPermissionAttribute = interface; // type: System.Data.OleDb.OleDbPermissionAttribute, namespace: System.Data.OleDb
  DNSqlClientPermissionAttribute = interface; // type: System.Data.SqlClient.SqlClientPermissionAttribute, namespace: System.Data.SqlClient
  DNSqlBulkCopyColumnMappingCollection = interface; // type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection, namespace: System.Data.SqlClient
  DNPropertyCollection = interface; // type: System.Data.PropertyCollection, namespace: System.Data
  DNDataColumn = interface; // type: System.Data.DataColumn, namespace: System.Data
  DNDataSet = interface; // type: System.Data.DataSet, namespace: System.Data
  DNDataTable = interface; // type: System.Data.DataTable, namespace: System.Data
  DNDataView = interface; // type: System.Data.DataView, namespace: System.Data
  DNDataViewManager = interface; // type: System.Data.DataViewManager, namespace: System.Data
  DNDbColumn = interface; // type: System.Data.Common.DbColumn, namespace: System.Data.Common
  DNDbConnectionStringBuilder = interface; // type: System.Data.Common.DbConnectionStringBuilder, namespace: System.Data.Common
  DNOdbcConnectionStringBuilder = interface; // type: System.Data.Odbc.OdbcConnectionStringBuilder, namespace: System.Data.Odbc
  DNOleDbConnectionStringBuilder = interface; // type: System.Data.OleDb.OleDbConnectionStringBuilder, namespace: System.Data.OleDb
  DNSqlConnectionStringBuilder = interface; // type: System.Data.SqlClient.SqlConnectionStringBuilder, namespace: System.Data.SqlClient
  DNDbDataReaderExtensions = interface; // type: System.Data.Common.DbDataReaderExtensions, namespace: System.Data.Common
  DNDbDataRecord = interface; // type: System.Data.Common.DbDataRecord, namespace: System.Data.Common
  DNDbDataSourceEnumerator = interface; // type: System.Data.Common.DbDataSourceEnumerator, namespace: System.Data.Common
  DNSqlDataSourceEnumerator = interface; // type: System.Data.Sql.SqlDataSourceEnumerator, namespace: System.Data.Sql
  DNDbEnumerator = interface; // type: System.Data.Common.DbEnumerator, namespace: System.Data.Common
  DNDbMetaDataCollectionNames = interface; // type: System.Data.Common.DbMetaDataCollectionNames, namespace: System.Data.Common
  DNDbMetaDataColumnNames = interface; // type: System.Data.Common.DbMetaDataColumnNames, namespace: System.Data.Common
  DNDbProviderConfigurationHandler = interface; // type: System.Data.Common.DbProviderConfigurationHandler, namespace: System.Data.Common
  DNDbProviderFactories = interface; // type: System.Data.Common.DbProviderFactories, namespace: System.Data.Common
  DNDbProviderFactoriesConfigurationHandler = interface; // type: System.Data.Common.DbProviderFactoriesConfigurationHandler, namespace: System.Data.Common
  DNDbProviderFactory = interface; // type: System.Data.Common.DbProviderFactory, namespace: System.Data.Common
  DNOdbcFactory = interface; // type: System.Data.Odbc.OdbcFactory, namespace: System.Data.Odbc
  DNOleDbFactory = interface; // type: System.Data.OleDb.OleDbFactory, namespace: System.Data.OleDb
  DNSqlClientFactory = interface; // type: System.Data.SqlClient.SqlClientFactory, namespace: System.Data.SqlClient
  DNSchemaTableColumn = interface; // type: System.Data.Common.SchemaTableColumn, namespace: System.Data.Common
  DNSchemaTableOptionalColumn = interface; // type: System.Data.Common.SchemaTableOptionalColumn, namespace: System.Data.Common
  DNConstraint = interface; // type: System.Data.Constraint, namespace: System.Data
  DNForeignKeyConstraint = interface; // type: System.Data.ForeignKeyConstraint, namespace: System.Data
  DNUniqueConstraint = interface; // type: System.Data.UniqueConstraint, namespace: System.Data
  DNDataRelation = interface; // type: System.Data.DataRelation, namespace: System.Data
  DNDataRow = interface; // type: System.Data.DataRow, namespace: System.Data
  DNDataRowBuilder = interface; // type: System.Data.DataRowBuilder, namespace: System.Data
  DNDataRowView = interface; // type: System.Data.DataRowView, namespace: System.Data
  DNDataViewSetting = interface; // type: System.Data.DataViewSetting, namespace: System.Data
  DNDataViewSettingCollection = interface; // type: System.Data.DataViewSettingCollection, namespace: System.Data
  DNInternalDataCollectionBase = interface; // type: System.Data.InternalDataCollectionBase, namespace: System.Data
  DNConstraintCollection = interface; // type: System.Data.ConstraintCollection, namespace: System.Data
  DNDataColumnCollection = interface; // type: System.Data.DataColumnCollection, namespace: System.Data
  DNDataRelationCollection = interface; // type: System.Data.DataRelationCollection, namespace: System.Data
  DNDataRowCollection = interface; // type: System.Data.DataRowCollection, namespace: System.Data
  DNDataTableCollection = interface; // type: System.Data.DataTableCollection, namespace: System.Data
  DNOdbcError = interface; // type: System.Data.Odbc.OdbcError, namespace: System.Data.Odbc
  DNOdbcErrorCollection = interface; // type: System.Data.Odbc.OdbcErrorCollection, namespace: System.Data.Odbc
  DNOdbcMetaDataCollectionNames = interface; // type: System.Data.Odbc.OdbcMetaDataCollectionNames, namespace: System.Data.Odbc
  DNOdbcMetaDataColumnNames = interface; // type: System.Data.Odbc.OdbcMetaDataColumnNames, namespace: System.Data.Odbc
  DNOleDbEnumerator = interface; // type: System.Data.OleDb.OleDbEnumerator, namespace: System.Data.OleDb
  DNOleDbError = interface; // type: System.Data.OleDb.OleDbError, namespace: System.Data.OleDb
  DNOleDbErrorCollection = interface; // type: System.Data.OleDb.OleDbErrorCollection, namespace: System.Data.OleDb
  DNOleDbMetaDataCollectionNames = interface; // type: System.Data.OleDb.OleDbMetaDataCollectionNames, namespace: System.Data.OleDb
  DNOleDbMetaDataColumnNames = interface; // type: System.Data.OleDb.OleDbMetaDataColumnNames, namespace: System.Data.OleDb
  DNOleDbSchemaGuid = interface; // type: System.Data.OleDb.OleDbSchemaGuid, namespace: System.Data.OleDb
  DNSqlNotificationRequest = interface; // type: System.Data.Sql.SqlNotificationRequest, namespace: System.Data.Sql
  DNSqlAuthenticationInitializer = interface; // type: System.Data.SqlClient.SqlAuthenticationInitializer, namespace: System.Data.SqlClient
  DNSqlAuthenticationParameters = interface; // type: System.Data.SqlClient.SqlAuthenticationParameters, namespace: System.Data.SqlClient
  DNSqlAuthenticationProvider = interface; // type: System.Data.SqlClient.SqlAuthenticationProvider, namespace: System.Data.SqlClient
  DNSqlAuthenticationToken = interface; // type: System.Data.SqlClient.SqlAuthenticationToken, namespace: System.Data.SqlClient
  DNSqlBulkCopy = interface; // type: System.Data.SqlClient.SqlBulkCopy, namespace: System.Data.SqlClient
  DNSqlBulkCopyColumnMapping = interface; // type: System.Data.SqlClient.SqlBulkCopyColumnMapping, namespace: System.Data.SqlClient
  DNSqlClientLogger = interface; // type: System.Data.SqlClient.SqlClientLogger, namespace: System.Data.SqlClient
  DNSqlClientMetaDataCollectionNames = interface; // type: System.Data.SqlClient.SqlClientMetaDataCollectionNames, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionEnclaveProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionEnclaveProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionKeyStoreProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionCertificateStoreProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionCngProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionCngProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionCspProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionCspProvider, namespace: System.Data.SqlClient
  DNSqlCredential = interface; // type: System.Data.SqlClient.SqlCredential, namespace: System.Data.SqlClient
  DNSQLDebugging = interface; // type: System.Data.SqlClient.SQLDebugging, namespace: System.Data.SqlClient
  DNSqlDependency = interface; // type: System.Data.SqlClient.SqlDependency, namespace: System.Data.SqlClient
  DNSqlEnclaveAttestationParameters = interface; // type: System.Data.SqlClient.SqlEnclaveAttestationParameters, namespace: System.Data.SqlClient
  DNSqlEnclaveSession = interface; // type: System.Data.SqlClient.SqlEnclaveSession, namespace: System.Data.SqlClient
  DNSqlError = interface; // type: System.Data.SqlClient.SqlError, namespace: System.Data.SqlClient
  DNSqlErrorCollection = interface; // type: System.Data.SqlClient.SqlErrorCollection, namespace: System.Data.SqlClient
  DNSqlBytes = interface; // type: System.Data.SqlTypes.SqlBytes, namespace: System.Data.SqlTypes
  DNSqlChars = interface; // type: System.Data.SqlTypes.SqlChars, namespace: System.Data.SqlTypes
  DNSqlXml = interface; // type: System.Data.SqlTypes.SqlXml, namespace: System.Data.SqlTypes
  DNTypedDataSetGenerator = interface; // type: System.Data.TypedDataSetGenerator, namespace: System.Data
  DNRowUpdatedEventArgs = interface; // type: System.Data.Common.RowUpdatedEventArgs, namespace: System.Data.Common
  DNOdbcRowUpdatedEventArgs = interface; // type: System.Data.Odbc.OdbcRowUpdatedEventArgs, namespace: System.Data.Odbc
  DNOleDbRowUpdatedEventArgs = interface; // type: System.Data.OleDb.OleDbRowUpdatedEventArgs, namespace: System.Data.OleDb
  DNSqlRowUpdatedEventArgs = interface; // type: System.Data.SqlClient.SqlRowUpdatedEventArgs, namespace: System.Data.SqlClient
  DNRowUpdatingEventArgs = interface; // type: System.Data.Common.RowUpdatingEventArgs, namespace: System.Data.Common
  DNOdbcRowUpdatingEventArgs = interface; // type: System.Data.Odbc.OdbcRowUpdatingEventArgs, namespace: System.Data.Odbc
  DNOleDbRowUpdatingEventArgs = interface; // type: System.Data.OleDb.OleDbRowUpdatingEventArgs, namespace: System.Data.OleDb
  DNSqlRowUpdatingEventArgs = interface; // type: System.Data.SqlClient.SqlRowUpdatingEventArgs, namespace: System.Data.SqlClient
  DNDataColumnChangeEventArgs = interface; // type: System.Data.DataColumnChangeEventArgs, namespace: System.Data
  DNDataRowChangeEventArgs = interface; // type: System.Data.DataRowChangeEventArgs, namespace: System.Data
  DNDataTableClearEventArgs = interface; // type: System.Data.DataTableClearEventArgs, namespace: System.Data
  DNDataTableNewRowEventArgs = interface; // type: System.Data.DataTableNewRowEventArgs, namespace: System.Data
  DNFillErrorEventArgs = interface; // type: System.Data.FillErrorEventArgs, namespace: System.Data
  DNMergeFailedEventArgs = interface; // type: System.Data.MergeFailedEventArgs, namespace: System.Data
  DNOdbcInfoMessageEventArgs = interface; // type: System.Data.Odbc.OdbcInfoMessageEventArgs, namespace: System.Data.Odbc
  DNOleDbInfoMessageEventArgs = interface; // type: System.Data.OleDb.OleDbInfoMessageEventArgs, namespace: System.Data.OleDb
  DNSqlInfoMessageEventArgs = interface; // type: System.Data.SqlClient.SqlInfoMessageEventArgs, namespace: System.Data.SqlClient
  DNSqlNotificationEventArgs = interface; // type: System.Data.SqlClient.SqlNotificationEventArgs, namespace: System.Data.SqlClient
  DNSqlRowsCopiedEventArgs = interface; // type: System.Data.SqlClient.SqlRowsCopiedEventArgs, namespace: System.Data.SqlClient
  DNStateChangeEventArgs = interface; // type: System.Data.StateChangeEventArgs, namespace: System.Data
  DNStatementCompletedEventArgs = interface; // type: System.Data.StatementCompletedEventArgs, namespace: System.Data
  DNInvalidUdtException = interface; // type: Microsoft.SqlServer.Server.InvalidUdtException, namespace: Microsoft.SqlServer.Server
  DNDataException = interface; // type: System.Data.DataException, namespace: System.Data
  DNConstraintException = interface; // type: System.Data.ConstraintException, namespace: System.Data
  DNDeletedRowInaccessibleException = interface; // type: System.Data.DeletedRowInaccessibleException, namespace: System.Data
  DNDuplicateNameException = interface; // type: System.Data.DuplicateNameException, namespace: System.Data
  DNInRowChangingEventException = interface; // type: System.Data.InRowChangingEventException, namespace: System.Data
  DNInvalidConstraintException = interface; // type: System.Data.InvalidConstraintException, namespace: System.Data
  DNInvalidExpressionException = interface; // type: System.Data.InvalidExpressionException, namespace: System.Data
  DNEvaluateException = interface; // type: System.Data.EvaluateException, namespace: System.Data
  DNSyntaxErrorException = interface; // type: System.Data.SyntaxErrorException, namespace: System.Data
  DNMissingPrimaryKeyException = interface; // type: System.Data.MissingPrimaryKeyException, namespace: System.Data
  DNNoNullAllowedException = interface; // type: System.Data.NoNullAllowedException, namespace: System.Data
  DNReadOnlyException = interface; // type: System.Data.ReadOnlyException, namespace: System.Data
  DNRowNotInTableException = interface; // type: System.Data.RowNotInTableException, namespace: System.Data
  DNStrongTypingException = interface; // type: System.Data.StrongTypingException, namespace: System.Data
  DNTypedDataSetGeneratorException = interface; // type: System.Data.TypedDataSetGeneratorException, namespace: System.Data
  DNVersionNotFoundException = interface; // type: System.Data.VersionNotFoundException, namespace: System.Data
  DNDBConcurrencyException = interface; // type: System.Data.DBConcurrencyException, namespace: System.Data
  DNOperationAbortedException = interface; // type: System.Data.OperationAbortedException, namespace: System.Data
  DNSqlTypeException = interface; // type: System.Data.SqlTypes.SqlTypeException, namespace: System.Data.SqlTypes
  DNSqlAlreadyFilledException = interface; // type: System.Data.SqlTypes.SqlAlreadyFilledException, namespace: System.Data.SqlTypes
  DNSqlNotFilledException = interface; // type: System.Data.SqlTypes.SqlNotFilledException, namespace: System.Data.SqlTypes
  DNSqlNullValueException = interface; // type: System.Data.SqlTypes.SqlNullValueException, namespace: System.Data.SqlTypes
  DNSqlTruncateException = interface; // type: System.Data.SqlTypes.SqlTruncateException, namespace: System.Data.SqlTypes
  DNDbException = interface; // type: System.Data.Common.DbException, namespace: System.Data.Common
  DNOdbcException = interface; // type: System.Data.Odbc.OdbcException, namespace: System.Data.Odbc
  DNOleDbException = interface; // type: System.Data.OleDb.OleDbException, namespace: System.Data.OleDb
  DNSqlException = interface; // type: System.Data.SqlClient.SqlException, namespace: System.Data.SqlClient
  DNDataAdapter = interface; // type: System.Data.Common.DataAdapter, namespace: System.Data.Common
  DNDbDataAdapter = interface; // type: System.Data.Common.DbDataAdapter, namespace: System.Data.Common
  DNOdbcDataAdapter = interface; // type: System.Data.Odbc.OdbcDataAdapter, namespace: System.Data.Odbc
  DNOleDbDataAdapter = interface; // type: System.Data.OleDb.OleDbDataAdapter, namespace: System.Data.OleDb
  DNSqlDataAdapter = interface; // type: System.Data.SqlClient.SqlDataAdapter, namespace: System.Data.SqlClient
  DNDbCommand = interface; // type: System.Data.Common.DbCommand, namespace: System.Data.Common
  DNOdbcCommand = interface; // type: System.Data.Odbc.OdbcCommand, namespace: System.Data.Odbc
  DNOleDbCommand = interface; // type: System.Data.OleDb.OleDbCommand, namespace: System.Data.OleDb
  DNSqlCommand = interface; // type: System.Data.SqlClient.SqlCommand, namespace: System.Data.SqlClient
  DNDbCommandBuilder = interface; // type: System.Data.Common.DbCommandBuilder, namespace: System.Data.Common
  DNOdbcCommandBuilder = interface; // type: System.Data.Odbc.OdbcCommandBuilder, namespace: System.Data.Odbc
  DNOleDbCommandBuilder = interface; // type: System.Data.OleDb.OleDbCommandBuilder, namespace: System.Data.OleDb
  DNSqlCommandBuilder = interface; // type: System.Data.SqlClient.SqlCommandBuilder, namespace: System.Data.SqlClient
  DNDbConnection = interface; // type: System.Data.Common.DbConnection, namespace: System.Data.Common
  DNOdbcConnection = interface; // type: System.Data.Odbc.OdbcConnection, namespace: System.Data.Odbc
  DNOleDbConnection = interface; // type: System.Data.OleDb.OleDbConnection, namespace: System.Data.OleDb
  DNSqlConnection = interface; // type: System.Data.SqlClient.SqlConnection, namespace: System.Data.SqlClient
  DNDataColumnMapping = interface; // type: System.Data.Common.DataColumnMapping, namespace: System.Data.Common
  DNDataColumnMappingCollection = interface; // type: System.Data.Common.DataColumnMappingCollection, namespace: System.Data.Common
  DNDataTableMapping = interface; // type: System.Data.Common.DataTableMapping, namespace: System.Data.Common
  DNDataTableMappingCollection = interface; // type: System.Data.Common.DataTableMappingCollection, namespace: System.Data.Common
  DNDbDataReader = interface; // type: System.Data.Common.DbDataReader, namespace: System.Data.Common
  DNDataTableReader = interface; // type: System.Data.DataTableReader, namespace: System.Data
  DNOdbcDataReader = interface; // type: System.Data.Odbc.OdbcDataReader, namespace: System.Data.Odbc
  DNOleDbDataReader = interface; // type: System.Data.OleDb.OleDbDataReader, namespace: System.Data.OleDb
  DNSqlDataReader = interface; // type: System.Data.SqlClient.SqlDataReader, namespace: System.Data.SqlClient
  DNDbParameter = interface; // type: System.Data.Common.DbParameter, namespace: System.Data.Common
  DNOdbcParameter = interface; // type: System.Data.Odbc.OdbcParameter, namespace: System.Data.Odbc
  DNOleDbParameter = interface; // type: System.Data.OleDb.OleDbParameter, namespace: System.Data.OleDb
  DNSqlParameter = interface; // type: System.Data.SqlClient.SqlParameter, namespace: System.Data.SqlClient
  DNDbParameterCollection = interface; // type: System.Data.Common.DbParameterCollection, namespace: System.Data.Common
  DNOdbcParameterCollection = interface; // type: System.Data.Odbc.OdbcParameterCollection, namespace: System.Data.Odbc
  DNOleDbParameterCollection = interface; // type: System.Data.OleDb.OleDbParameterCollection, namespace: System.Data.OleDb
  DNSqlParameterCollection = interface; // type: System.Data.SqlClient.SqlParameterCollection, namespace: System.Data.SqlClient
  DNDbTransaction = interface; // type: System.Data.Common.DbTransaction, namespace: System.Data.Common
  DNOdbcTransaction = interface; // type: System.Data.Odbc.OdbcTransaction, namespace: System.Data.Odbc
  DNOleDbTransaction = interface; // type: System.Data.OleDb.OleDbTransaction, namespace: System.Data.OleDb
  DNSqlTransaction = interface; // type: System.Data.SqlClient.SqlTransaction, namespace: System.Data.SqlClient
  DNSqlFileStream = interface; // type: System.Data.SqlTypes.SqlFileStream, namespace: System.Data.SqlTypes
  DNDBDataPermission = interface; // type: System.Data.Common.DBDataPermission, namespace: System.Data.Common
  DNOdbcPermission = interface; // type: System.Data.Odbc.OdbcPermission, namespace: System.Data.Odbc
  DNOleDbPermission = interface; // type: System.Data.OleDb.OleDbPermission, namespace: System.Data.OleDb
  DNSqlClientPermission = interface; // type: System.Data.SqlClient.SqlClientPermission, namespace: System.Data.SqlClient
  DNSqlBinary = interface; // type: System.Data.SqlTypes.SqlBinary, namespace: System.Data.SqlTypes
  DNSqlBoolean = interface; // type: System.Data.SqlTypes.SqlBoolean, namespace: System.Data.SqlTypes
  DNSqlByte = interface; // type: System.Data.SqlTypes.SqlByte, namespace: System.Data.SqlTypes
  DNSqlDateTime = interface; // type: System.Data.SqlTypes.SqlDateTime, namespace: System.Data.SqlTypes
  DNSqlDecimal = interface; // type: System.Data.SqlTypes.SqlDecimal, namespace: System.Data.SqlTypes
  DNSqlDouble = interface; // type: System.Data.SqlTypes.SqlDouble, namespace: System.Data.SqlTypes
  DNSqlGuid = interface; // type: System.Data.SqlTypes.SqlGuid, namespace: System.Data.SqlTypes
  DNSqlInt16 = interface; // type: System.Data.SqlTypes.SqlInt16, namespace: System.Data.SqlTypes
  DNSqlInt32 = interface; // type: System.Data.SqlTypes.SqlInt32, namespace: System.Data.SqlTypes
  DNSqlInt64 = interface; // type: System.Data.SqlTypes.SqlInt64, namespace: System.Data.SqlTypes
  DNSqlMoney = interface; // type: System.Data.SqlTypes.SqlMoney, namespace: System.Data.SqlTypes
  DNSqlSingle = interface; // type: System.Data.SqlTypes.SqlSingle, namespace: System.Data.SqlTypes
  DNSqlString = interface; // type: System.Data.SqlTypes.SqlString, namespace: System.Data.SqlTypes
  DNDataSetSchemaImporterExtension = interface; // type: System.Data.DataSetSchemaImporterExtension, namespace: System.Data
  DNSqlTypesSchemaImporterExtensionHelper = interface; // type: System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper, namespace: System.Data.SqlTypes
  DNTypeBigIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeBigIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeBinarySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeBinarySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeBitSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeBitSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeDateTimeSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeDecimalSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeDecimalSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeFloatSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeFloatSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeMoneySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeMoneySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNTextSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNTextSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNumericSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNumericSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNVarCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeRealSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeRealSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeSmallDateTimeSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeSmallIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeSmallMoneySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeTextSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeTextSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeTinyIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeUniqueIdentifierSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeVarBinarySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeVarCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeVarCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeVarImageSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeVarImageSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNXmlDataDocument = interface; // type: System.Xml.XmlDataDocument, namespace: System.Xml

{ delegates }

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.DataTable.ColumnChanging" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataColumnChangeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataColumnChangeEventHandler')]
  DNDataColumnChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataColumnChangeEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.DataTable.RowChanging" />
  ///  , ，<see cref="E:System.Data.DataTable.RowChanged" />
  ///  , ，<see cref="E:System.Data.DataTable.RowDeleting" />
  ///  , ，和 <see cref="E:System.Data.DataTable.RowDeleted" />
  ///  事件 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataRowChangeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataRowChangeEventHandler')]
  DNDataRowChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataRowChangeEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="M:System.Data.DataTable.Clear" />
  ///  方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataTableClearEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataTableClearEventHandler')]
  DNDataTableClearEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataTableClearEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="M:System.Data.DataTable.NewRow" />
  ///  方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.DataTableNewRowEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.DataTableNewRowEventHandler')]
  DNDataTableNewRowEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataTableNewRowEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.Common.DataAdapter.FillError" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.FillErrorEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.FillErrorEventHandler')]
  DNFillErrorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFillErrorEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.DataSet.MergeFailed" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件的数据。
  ///</param>
  [DNTypeName('System.Data.MergeFailedEventHandler')]
  DNMergeFailedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMergeFailedEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" />
  ///  事件 <see cref="T:System.Data.Odbc.OdbcConnection" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.Odbc.OdbcInfoMessageEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.Odbc.OdbcInfoMessageEventHandler')]
  DNOdbcInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOdbcInfoMessageEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated" />
  ///  事件 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.Odbc.OdbcRowUpdatedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.Odbc.OdbcRowUpdatedEventHandler')]
  DNOdbcRowUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOdbcRowUpdatedEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating" />
  ///  事件 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.Odbc.OdbcRowUpdatingEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.Odbc.OdbcRowUpdatingEventHandler')]
  DNOdbcRowUpdatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOdbcRowUpdatingEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
  ///  事件 <see cref="T:System.Data.OleDb.OleDbConnection" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.OleDb.OleDbInfoMessageEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.OleDb.OleDbInfoMessageEventHandler')]
  DNOleDbInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbInfoMessageEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" />
  ///  事件 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.OleDb.OleDbRowUpdatedEventHandler')]
  DNOleDbRowUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbRowUpdatedEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" />
  ///  事件 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.OleDb.OleDbRowUpdatingEventHandler')]
  DNOleDbRowUpdatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbRowUpdatingEventArgs) of object;

  ///<summary>
  ///  处理 <see cref="E:System.Data.SqlClient.SqlDependency.OnChange" />
  ///  时与关联的命令的任何收到通知，将触发的事件 <see cref="T:System.Data.SqlClient.SqlDependency" />
  ///  对象。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.SqlClient.OnChangeEventHandler')]
  DNOnChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlNotificationEventArgs) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
  ///  的 <see cref="T:System.Data.SqlClient.SqlConnection" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.SqlClient.SqlInfoMessageEventHandler')]
  DNSqlInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlInfoMessageEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
  ///  事件 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Data.SqlClient.SqlRowsCopiedEventHandler')]
  DNSqlRowsCopiedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlRowsCopiedEventArgs) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" />
  ///  的 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.SqlClient.SqlRowUpdatedEventHandler')]
  DNSqlRowUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlRowUpdatedEventArgs) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" />
  ///  的 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.SqlClient.SqlRowUpdatingEventHandler')]
  DNSqlRowUpdatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlRowUpdatingEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Data.Common.DbConnection.StateChange" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Data.StateChangeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Data.StateChangeEventHandler')]
  DNStateChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStateChangeEventArgs) of object;

  ///<summary>
  ///  事件处理程序委托类型 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
  ///  事件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件的数据。
  ///</param>
  [DNTypeName('System.Data.StatementCompletedEventHandler')]
  DNStatementCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStatementCompletedEventArgs) of object;




{ objects }

  //-------------namespace: Microsoft.SqlServer.Server----------------
  ///<summary>
  ///  提供自定义实现用户定义类型 (UDT) 和用户定义聚合的序列化和反序列化。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.IBinarySerialize')]
  DNIBinarySerialize = interface(DDN.mscorlib.DNObject)
  ['{EA2D75CA-B756-3302-8412-D2E681C6B978}']
  { methods } 

    ///<summary>
    ///  用户定义类型 (UDT) 或用户定义聚合生成的二进制格式。
    ///</summary>
    ///  <param name="r"><see cref="T:System.IO.BinaryReader" />
    ///  流式处理从其反序列化对象。
    ///</param>
    procedure Read(r: DDN.mscorlib.DNBinaryReader);
    ///<summary>
    ///  将用户定义类型 (UDT) 或用户定义聚合转换为其二进制格式，以便可以保持。
    ///</summary>
    ///  <param name="w"><see cref="T:System.IO.BinaryWriter" />
    ///  UDT 或用户定义聚合序列化到流。
    ///</param>
    procedure Write(w: DDN.mscorlib.DNBinaryWriter);

  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  包含 DataColumnMapping 对象的集合，由实现 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
  ///  , ，将使用该通用.NET Framework 数据提供程序。
  ///</summary>
  [DNTypeName('System.Data.IColumnMappingCollection')]
  DNIColumnMappingCollection = interface(DDN.mscorlib.DNIList)
  ['{FEC17537-6149-34F2-B91F-9FB3AF6B2546}']
  { getters & setters } 

    function get_Item(index: string): DDN.mscorlib.DNObject;
    procedure set_Item(index: string; value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  使用源列的列映射集合中添加列映射对象和 <see cref="T:System.Data.DataSet" />
    ///  列名称。
    ///</summary>
    ///  <param name="sourceColumnName">
    ///  区分大小写的源列的名称。
    ///</param>
    ///  <param name="dataSetColumnName">
    ///  名称 <see cref="T:System.Data.DataSet" />
    ///  列。
    ///</param>
    ///<returns>
    ///  ColumnMapping 对象，该对象添加到集合。
    ///</returns>
    function Add(sourceColumnName: string; dataSetColumnName: string): DNIColumnMapping;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  包含 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象具有指定的源列名称。
    ///</summary>
    ///  <param name="sourceColumnName">
    ///  区分大小写的源列的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  具有指定的源列名称的对象存在，否则 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(sourceColumnName: string): Boolean;
    ///<summary>
    ///  获取具有指定的列映射对象 <see cref="T:System.Data.DataSet" />
    ///  列名称。
    ///</summary>
    ///  <param name="dataSetColumnName">
    ///  名称 <see cref="T:System.Data.DataSet" />
    ///  列集合中的。
    ///</param>
    ///<returns>
    ///  使用指定的列映射对象 <see langword="DataSet" />
    ///  列名称。
    ///</returns>
    function GetByDataSetColumn(dataSetColumnName: string): DNIColumnMapping;
    ///<summary>
    ///  获取的位置 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象具有指定的源列名称。
    ///  名称是区分大小写。
    ///</summary>
    ///  <param name="sourceColumnName">
    ///  区分大小写的源列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的位置 <see langword="DataColumnMapping" />
    ///  对象具有指定的源列名称。
    ///</returns>
    function IndexOf(sourceColumnName: string): Int32;
    ///<summary>
    ///  删除 <see cref="T:System.Data.IColumnMapping" />
    ///  对象具有指定 <see cref="P:System.Data.IColumnMapping.SourceColumn" />
    ///  名称从集合。
    ///</summary>
    ///  <param name="sourceColumnName">
    ///  区分大小写 <see langword="SourceColumn" />
    ///  名称。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  一个 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象不存在具有指定 <see langword="SourceColumn" />
    ///  名称。
    ///</exception>
    procedure RemoveAt(sourceColumnName: string);

  { propertys } 

    property Item[index: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  收集与 Command 对象相关的所有参数以及这些参数到 <see cref="T:System.Data.DataSet" />
  ///  列的映射，并由访问数据源的 .NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDataParameterCollection')]
  DNIDataParameterCollection = interface(DDN.mscorlib.DNIList)
  ['{B490F13C-7E82-3A54-A31E-DFA010A1AFFE}']
  { getters & setters } 

    function get_Item(parameterName: string): DDN.mscorlib.DNObject;
    procedure set_Item(parameterName: string; value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示集合中的参数是否具有指定的名称。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///<returns>
    ///  如果集合包含该参数，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(parameterName: string): Boolean;
    ///<summary>
    ///  在集合中获取 <see cref="T:System.Data.IDataParameter" />
    ///  的位置。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///<returns>
    ///  集合中 <see cref="T:System.Data.IDataParameter" />
    ///  从零开始的位置。
    ///</returns>
    function IndexOf(parameterName: string): Int32;
    ///<summary>
    ///  从集合中移除 <see cref="T:System.Data.IDataParameter" />
    ///  。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    procedure RemoveAt(parameterName: string);

  { propertys } 

    property Item[parameterName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  包含 TableMapping 对象的集合，由实现 <see cref="T:System.Data.Common.DataTableMappingCollection" />
  ///  , ，将使用该通用.NET Framework 数据提供程序。
  ///</summary>
  [DNTypeName('System.Data.ITableMappingCollection')]
  DNITableMappingCollection = interface(DDN.mscorlib.DNIList)
  ['{F11B7EBC-377D-3EF7-B126-CC26D43C2ED8}']
  { getters & setters } 

    function get_Item(index: string): DDN.mscorlib.DNObject;
    procedure set_Item(index: string; value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  将表映射添加到集合。
    ///</summary>
    ///  <param name="sourceTableName">
    ///  区分大小写的源表的名称。
    ///</param>
    ///  <param name="dataSetTableName">
    ///  名称 <see cref="T:System.Data.DataSet" />
    ///  表。
    ///</param>
    ///<returns>
    ///  对新映射的引用 <see cref="T:System.Data.ITableMapping" />
    ///  对象。
    ///</returns>
    function Add(sourceTableName: string; dataSetTableName: string): DNITableMapping;
    ///<summary>
    ///  获取一个值，该值指示集合是否包含具有指定的源的表名称的表映射。
    ///</summary>
    ///  <param name="sourceTableName">
    ///  区分大小写的源表的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的源的表名称的表映射存在，否则 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(sourceTableName: string): Boolean;
    ///<summary>
    ///  获取具有指定的 TableMapping 对象 <see cref="T:System.Data.DataSet" />
    ///  表名。
    ///</summary>
    ///  <param name="dataSetTableName">
    ///  名称 <see langword="DataSet" />
    ///  在集合中的表。
    ///</param>
    ///<returns>
    ///  使用指定的 TableMapping 对象 <see langword="DataSet" />
    ///  表名。
    ///</returns>
    function GetByDataSetTable(dataSetTableName: string): DNITableMapping;
    ///<summary>
    ///  获取的位置 <see cref="T:System.Data.ITableMapping" />
    ///  在集合中的对象。
    ///</summary>
    ///  <param name="sourceTableName">
    ///  区分大小写的源表的名称。
    ///</param>
    ///<returns>
    ///  从零开始的位置 <see cref="T:System.Data.ITableMapping" />
    ///  在集合中的对象。
    ///</returns>
    function IndexOf(sourceTableName: string): Int32;
    ///<summary>
    ///  删除 <see cref="T:System.Data.ITableMapping" />
    ///  对象具有指定 <see cref="P:System.Data.ITableMapping.SourceTable" />
    ///  名称从集合。
    ///</summary>
    ///  <param name="sourceTableName">
    ///  区分大小写名称 <see langword="SourceTable" />
    ///  。
    ///</param>
    procedure RemoveAt(sourceTableName: string);

  { propertys } 

    property Item[index: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data.Common----------------
  ///<summary>
  ///  生成列架构。
  ///</summary>
  [DNTypeName('System.Data.Common.IDbColumnSchemaGenerator')]
  DNIDbColumnSchemaGenerator = interface(DDN.mscorlib.DNObject)
  ['{59AED2D8-A48C-3E29-AB58-F5400CDAF8F2}']
  { methods } 

    ///<summary>
    ///  获取列架构（<see cref="T:System.Data.Common.DbColumn" />
    ///  集合）。
    ///</summary>
    ///<returns>
    ///  列架构（<see cref="T:System.Data.Common.DbColumn" />
    ///  集合）。
    ///</returns>
    function GetColumnSchema: DDN.mscorlib.DNReadOnlyCollection<DNDbColumn>;

  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  将相关联的数据源列 <see cref="T:System.Data.DataSet" />
  ///  列中，并由实现 <see cref="T:System.Data.Common.DataColumnMapping" />
  ///  类，该类由.NET Framework 数据提供程序共同使用。
  ///</summary>
  [DNTypeName('System.Data.IColumnMapping')]
  DNIColumnMapping = interface(DDN.mscorlib.DNObject)
  ['{7701EF45-1147-36B5-B474-23C21843AFC0}']
  { getters & setters } 

    function get_DataSetColumn: string;
    procedure set_DataSetColumn(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);

  { propertys } 

    ///<summary>
    ///  获取或设置中的列名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</summary>
    ///<returns>
    ///  中的数据列的名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///  名称不区分大小写。
    ///</returns>
    property DataSetColumn: string read get_DataSetColumn write set_DataSetColumn;
    ///<summary>
    ///  获取或设置数据源从映射中的列的名称。
    ///  名称是区分大小写。
    ///</summary>
    ///<returns>
    ///  区分大小写的数据源中的列名称。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  允许对象实现 DataAdapter，并表示一组方法和映射与操作相关的属性，用于填充和更新 <see cref="T:System.Data.DataSet" />
  ///  和更新数据源。
  ///<see cref="T:System.Data.IDbDataAdapter" />
  ///  实例是在 （或类似于） 使用文本命令的关系数据库的数据源 (如 Transact-SQL)，而 <see cref="T:System.Data.IDataAdapter" />
  ///  实例可以使用任何类型的数据源。
  ///</summary>
  [DNTypeName('System.Data.IDataAdapter')]
  DNIDataAdapter = interface(DDN.mscorlib.DNObject)
  ['{8883ACAD-6616-3F54-AD75-0BB5F0D85070}']
  { getters & setters } 

    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_TableMappings: DNITableMappingCollection;

  { methods } 

    ///<summary>
    ///  将名为“Table”的 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  ，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要填充数据源中的架构。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataTable" />
    ///  从数据源中返回包含架构信息的对象。
    ///</returns>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>;
    ///<summary>
    ///  添加或更新中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  名称，然后创建 <see cref="T:System.Data.DataTable" />
    ///  名为"Table"。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataSet: DNDataSet): Int32;
    ///<summary>
    ///  获取在执行 SQL SELECT 语句时由用户设置的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.IDataParameter" />
    ///  由用户来设置包含的参数的对象。
    ///</returns>
    function GetFillParameters: TArray<DNIDataParameter>;
    ///<summary>
    ///  对于每个插入、 更新或删除了行中指定调用相应的 INSERT、 UPDATE 或 DELETE 语句 <see cref="T:System.Data.DataSet" />
    ///  从 <see cref="T:System.Data.DataTable" />
    ///  名为"Table"。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet): Int32;

  { propertys } 

    ///<summary>
    ///  指示或指定是否未映射的源的表或列传递与其源名一起以进行筛选，或者将引发错误。
    ///</summary>
    ///<returns><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///  默认值为 <see langword="Passthrough" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" />
    ///  值。
    ///</exception>
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    ///<summary>
    ///  指示或指定是否丢失的源表、 列和它们之间的关系添加到数据集架构，将被忽略，或者会导致错误被引发。
    ///</summary>
    ///<returns><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///  默认值为 <see langword="Add" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" />
    ///  值。
    ///</exception>
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    ///<summary>
    ///  指示如何将源表映射到数据集表。
    ///</summary>
    ///<returns>
    ///  一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  默认值为空集合。
    ///</returns>
    property TableMappings: DNITableMappingCollection read get_TableMappings;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示一组与命令相关的属性，用于填充 <see cref="T:System.Data.DataSet" />
  ///  和更新数据源，并由访问关系数据库的.NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDbDataAdapter')]
  DNIDbDataAdapter = interface(DNIDataAdapter)
  ['{FA46C6A3-7D70-3321-AAA3-148BDF7AB779}']
  { getters & setters } 

    function get_SelectCommand: DNIDbCommand;
    procedure set_SelectCommand(value: DNIDbCommand);
    function get_InsertCommand: DNIDbCommand;
    procedure set_InsertCommand(value: DNIDbCommand);
    function get_UpdateCommand: DNIDbCommand;
    procedure set_UpdateCommand(value: DNIDbCommand);
    function get_DeleteCommand: DNIDbCommand;
    procedure set_DeleteCommand(value: DNIDbCommand);

  { propertys } 

    ///<summary>
    ///  获取或设置用于在数据源中选择记录的 SQL 语句。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  从放入数据集中的数据源选择记录。
    ///</returns>
    property SelectCommand: DNIDbCommand read get_SelectCommand write set_SelectCommand;
    ///<summary>
    ///  获取或设置用于将新记录插入到数据源的 SQL 语句。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  以新行在数据集中的数据源中插入记录。
    ///</returns>
    property InsertCommand: DNIDbCommand read get_InsertCommand write set_InsertCommand;
    ///<summary>
    ///  获取或设置用于更新数据源中的记录的 SQL 语句。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  来更新数据集中的已修改行的数据源中的记录。
    ///</returns>
    property UpdateCommand: DNIDbCommand read get_UpdateCommand write set_UpdateCommand;
    ///<summary>
    ///  获取或设置用于从数据集中删除记录的 SQL 语句。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  来删除已删除行在数据集中的数据源中的记录。
    ///</returns>
    property DeleteCommand: DNIDbCommand read get_DeleteCommand write set_DeleteCommand;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示 Command 对象的参数，也可以表示其到 <see cref="T:System.Data.DataSet" />
  ///  列的映射；并由访问数据源的 .NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDataParameter')]
  DNIDataParameter = interface(DDN.mscorlib.DNObject)
  ['{DBAE8A91-BB4E-3E18-B45F-233C65FBDA2B}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { propertys } 

    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.DbType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DbType" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Data.DbType.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  该属性未设置为有效的 <see cref="T:System.Data.DbType" />
    ///  。
    ///</exception>
    property DbType: DNDbType read get_DbType write set_DbType;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///  默认值为 <see langword="Input" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</exception>
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    ///<summary>
    ///  获取一个值，该值指示参数是否接受 null 值。
    ///</summary>
    ///<returns>
    ///  如果接受 null 值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.IDataParameter" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDataParameter" />
    ///  的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property ParameterName: string read get_ParameterName write set_ParameterName;
    ///<summary>
    ///  获取或设置映射到 <see cref="T:System.Data.DataSet" />
    ///  并且用于加载或返回 <see cref="P:System.Data.IDataParameter.Value" />
    ///  的源列的名称。
    ///</summary>
    ///<returns>
    ///  映射到 <see cref="T:System.Data.DataSet" />
    ///  的源列的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    ///<summary>
    ///  获取或设置要在加载 <see cref="P:System.Data.IDataParameter.Value" />
    ///  时使用的 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  默认值为 <see langword="Current" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为 <see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</exception>
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
    ///<summary>
    ///  获取或设置参数的值。
    ///</summary>
    ///<returns>
    ///  充当参数值的 <see cref="T:System.Object" />
    ///  。
    ///  默认值为 null。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  由 Visual Basic.NET 数据设计器使用，用于表示命令对象的参数和（可选）该参数到 <see cref="T:System.Data.DataSet" />
  ///  列的映射。
  ///</summary>
  [DNTypeName('System.Data.IDbDataParameter')]
  DNIDbDataParameter = interface(DNIDataParameter)
  ['{391E486C-97BE-3FD1-A26F-BC953AF9EF2D}']
  { getters & setters } 

    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { propertys } 

    ///<summary>
    ///  指示数值参数的精度。
    ///</summary>
    ///<returns>
    ///  用于表示数据提供程序 Parameter 对象的 Value 属性的最大位数。
    ///  默认值为 0，指示数据提供程序将设置 Value 的精度。
    ///</returns>
    property Precision: Byte read get_Precision write set_Precision;
    ///<summary>
    ///  指示数值参数的比例。
    ///</summary>
    ///<returns>
    ///  所解析的 <see cref="T:System.Data.OleDb.OleDbParameter.Value" />
    ///  的小数位数。
    ///  默认值为 0。
    ///</returns>
    property Scale: Byte read get_Scale write set_Scale;
    ///<summary>
    ///  参数的大小。
    ///</summary>
    ///<returns>
    ///  列中的数据的最大大小（以字节为单位）。
    ///  默认值将根据参数值进行推断。
    ///</returns>
    property Size: Int32 read get_Size write set_Size;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  为 <see langword="DataReader" />
  ///  提供对每行中的列值的访问权限，并由访问关系数据库的.NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDataRecord')]
  DNIDataRecord = interface(DDN.mscorlib.DNObject)
  ['{6DAA5A9D-4EAC-3C24-B85C-794B4E65604D}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  获取指定字段的字符串值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的字符串值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetString(i: Int32): string;
    ///<summary>
    ///  返回指定字段是否设置为 null。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  如果指定的字段设置为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function IsDBNull(i: Int32): Boolean;
    ///<summary>
    ///  获取要查找的字段的名称。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  字段的名称，如果没有要返回的值，则为空字符串 ("")。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetName(i: Int32): string;
    ///<summary>
    ///  获取指定字段的数据类型信息。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的数据类型信息。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetDataTypeName(i: Int32): string;
    ///<summary>
    ///  获取对应于会从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />
    ///  返回的 <see cref="T:System.Object" />
    ///  类型的 <see cref="T:System.Type" />
    ///  信息。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  对应于会从 <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />
    ///  返回的 <see cref="T:System.Object" />
    ///  类型的 <see cref="T:System.Type" />
    ///  信息。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  返回指定字段的值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  返回时将包含字段值的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用当前记录的列值填充对象的数组。
    ///</summary>
    ///  <param name="values">
    ///  要将属性字段复制到其中的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  返回已命名字段的索引。
    ///</summary>
    ///  <param name="name">
    ///  要查找的字段的名称。
    ///</param>
    ///<returns>
    ///  已命名字段的索引。
    ///</returns>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetBoolean(i: Int32): Boolean;
    ///<summary>
    ///  获取指定列的 8 位无符号整数值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的 8 位无符号整数值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetByte(i: Int32): Byte;
    ///<summary>
    ///  将字节流从指定列偏移量读入到缓冲区中，将其作为从给定缓冲区偏移量开始的数组。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="fieldOffset">
    ///  字段中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要读入字节流的缓冲区。
    ///</param>
    ///  <param name="bufferoffset">
    ///  开始读取操作的 <paramref name="buffer" />
    ///  的索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的字节数。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetBytes(i: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferoffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  获取指定列的字符值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的字符值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetChar(i: Int32): Char;
    ///<summary>
    ///  将字符流从指定列偏移量读入到缓冲区中，将其作为从给定缓冲区偏移量开始的数组。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="fieldoffset">
    ///  行中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要读入字节流的缓冲区。
    ///</param>
    ///  <param name="bufferoffset">
    ///  开始读取操作的 <paramref name="buffer" />
    ///  的索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的字节数。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetChars(i: Int32; fieldoffset: Int64; buffer: TArray<Char>; bufferoffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  返回指定字段的 GUID 值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的 GUID 值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  获取指定字段的 16 位带符号整数值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的 16 位带符号整数值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetInt16(i: Int32): Int16;
    ///<summary>
    ///  获取指定字段的 32 位带符号整数值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的 32 位带符号整数值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetInt32(i: Int32): Int32;
    ///<summary>
    ///  获取指定字段的 64 位带符号整数值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的 64 位带符号整数值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetInt64(i: Int32): Int64;
    ///<summary>
    ///  获取指定字段的单精度浮点数。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的单精度浮点数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetFloat(i: Int32): Single;
    ///<summary>
    ///  获取指定字段的双精度浮点数。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的双精度浮点数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetDouble(i: Int32): Double;
    ///<summary>
    ///  获取指定字段的固定位置数值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的固定位置数值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  获取指定字段的日期和时间数据值。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的日期和时间数据值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  返回指定列序号的 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  要查找的字段的索引。
    ///</param>
    ///<returns>
    ///  指定列序号的 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetData(i: Int32): DNIDataReader;

  { propertys } 

    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未位于有效的记录集中，则为 0；否则为当前记录中的列数。
    ///  默认值为 -1。
    ///</returns>
    property FieldCount: Int32 read get_FieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  将源表中的表与相关联 <see cref="T:System.Data.DataSet" />
  ///  , ，并由实现 <see cref="T:System.Data.Common.DataTableMapping" />
  ///  类，该类由.NET Framework 数据提供程序共同使用。
  ///</summary>
  [DNTypeName('System.Data.ITableMapping')]
  DNITableMapping = interface(DDN.mscorlib.DNObject)
  ['{7D6C1151-07C6-3BAE-A4CA-2505E8B9F92F}']
  { getters & setters } 

    function get_ColumnMappings: DNIColumnMappingCollection;
    function get_DataSetTable: string;
    procedure set_DataSetTable(value: string);
    function get_SourceTable: string;
    procedure set_SourceTable(value: string);

  { propertys } 

    ///<summary>
    ///  获取派生 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  为 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  数据列映射的集合。
    ///</returns>
    property ColumnMappings: DNIColumnMappingCollection read get_ColumnMappings;
    ///<summary>
    ///  获取或设置表中的不区分大小写名称 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表中的不区分大小写名称 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DataSetTable: string read get_DataSetTable write set_DataSetTable;
    ///<summary>
    ///  获取或设置对源表的区分大小写的名称。
    ///</summary>
    ///<returns>
    ///  区分大小写的源表的名称。
    ///</returns>
    property SourceTable: string read get_SourceTable write set_SourceTable;
  end;

  //-------------namespace: System.Data.SqlTypes----------------
  ///<summary>
  ///  所有 <see cref="N:System.Data.SqlTypes" />
  ///  对象，而结构实现 <see langword="INullable" />
  ///  接口。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.INullable')]
  DNINullable = interface(DDN.mscorlib.DNObject)
  ['{E7B3191E-CB93-3820-AB88-949781697507}']
  { getters & setters } 

    function get_IsNull: Boolean;

  { propertys } 

    ///<summary>
    ///  指示结构是否为 null。
    ///  此属性是只读的。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///<see langword="true" />
    ///  如果此对象的值为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  提供一种读取结果集（通过对数据源执行命令获取）的一个或多个只进流的方法，并由访问关系数据库的.NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDataReader')]
  DNIDataReader = interface(DDN.mscorlib.DNIDisposable)
  ['{EEF6063A-B303-370C-A350-20E70194F0B0}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;

  { methods } 

    ///<summary>
    ///  关闭 <see cref="T:System.Data.IDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  让 <see cref="T:System.Data.IDataReader" />
    ///  前进到下一条记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.IDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  在读取一批 SQL 语句的结果时，使数据读取器前进到下一个结果。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  嵌套的级别。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取一个值，该值指示数据读取器是否已关闭。
    ///</summary>
    ///<returns>
    ///  如果数据读取器已关闭，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  已更改、插入或删除的行数；如果没有受影响的行或语句失败，则为 0；对于 SELECT 语句为 -1。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示连接到数据源时执行的 SQL 语句，并由访问关系数据库的 .NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDbCommand')]
  DNIDbCommand = interface(DDN.mscorlib.DNIDisposable)
  ['{E41AC658-7894-35BD-B768-0D4824CDD220}']
  { getters & setters } 

    function get_Connection: DNIDbConnection;
    procedure set_Connection(value: DNIDbConnection);
    function get_Transaction: DNIDbTransaction;
    procedure set_Transaction(value: DNIDbTransaction);
    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Parameters: DNIDataParameterCollection;
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);

  { methods } 

    ///<summary>
    ///  在数据源上创建准备就绪（或已编译）的命令版本。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  未设置 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  不为 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />
    ///  。
    ///</exception>
    procedure Prepare;
    ///<summary>
    ///  尝试取消执行 <see cref="T:System.Data.IDbCommand" />
    ///  。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  创建 <see cref="T:System.Data.IDbDataParameter" />
    ///  对象的新实例。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="IDbDataParameter" />
    ///  对象。
    ///</returns>
    function CreateParameter: DNIDbDataParameter;
    ///<summary>
    ///  对 .NET Framework 数据提供程序的 <see langword="Connection" />
    ///  对象执行 SQL 语句，并返回受影响的行数。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接不存在。
    ///  - 或 -
    ///  连接未打开。
    ///</exception>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  对 <see cref="P:System.Data.IDbCommand.Connection" />
    ///  执行 <see cref="P:System.Data.IDbCommand.CommandText" />
    ///  并生成 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.IDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader: DNIDataReader; overload;
    ///<summary>
    ///  对 <see cref="P:System.Data.IDbCommand.Connection" />
    ///  执行 <see cref="P:System.Data.IDbCommand.CommandText" />
    ///  ，并使用 <see cref="T:System.Data.CommandBehavior" />
    ///  值之一生成 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.IDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader(behavior: DNCommandBehavior): DNIDataReader; overload;
    ///<summary>
    ///  执行查询，并返回由查询返回的结果集中第一行的第一列。
    ///  忽略其他列或行。
    ///</summary>
    ///<returns>
    ///  结果集中第一行的第一列。
    ///</returns>
    function ExecuteScalar: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.IDbCommand" />
    ///  的此实例使用的 <see cref="T:System.Data.IDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与数据源的连接。
    ///</returns>
    property Connection: DNIDbConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置要在其中执行 .NET Framework 数据提供程序的 <see langword="Command" />
    ///  对象的事务。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序的 <see langword="Command" />
    ///  对象执行。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Transaction: DNIDbTransaction read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置对数据源运行的文本命令。
    ///</summary>
    ///<returns>
    ///  要执行的文本命令。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  等待命令执行所需的时间（以秒为单位）。
    ///  默认值为 30 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  分配的属性值小于 0。
    ///</exception>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  指示或指定解释 <see cref="P:System.Data.IDbCommand.CommandText" />
    ///  属性的方式。
    ///</summary>
    ///<returns><see cref="T:System.Data.CommandType" />
    ///  值之一。
    ///  默认值为 <see langword="Text" />
    ///  。
    ///</returns>
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    ///<summary>
    ///  获取 <see cref="T:System.Data.IDataParameterCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  SQL 语句或存储过程的参数。
    ///</returns>
    property Parameters: DNIDataParameterCollection read get_Parameters;
    ///<summary>
    ///  获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  的 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
    ///  方法使用时应用于 <see cref="T:System.Data.DataRow" />
    ///  的方式。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateRowSource" />
    ///  值之一。
    ///  除非自动生成该命令，否则默认值为 <see langword="Both" />
    ///  。
    ///  如果自动生成该命令，默认值为 <see langword="None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  输入的值不是 <see cref="T:System.Data.UpdateRowSource" />
    ///  值之一。
    ///</exception>
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示一个与数据源的开放连接，并由访问关系数据库的 .NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDbConnection')]
  DNIDbConnection = interface(DDN.mscorlib.DNIDisposable)
  ['{9BB226F4-2AF3-37E7-B91D-3BB936FC0A7E}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_State: DNConnectionState;

  { methods } 

    ///<summary>
    ///  开始一项数据库事务。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    function BeginTransaction: DNIDbTransaction; overload;
    ///<summary>
    ///  以指定的 <see cref="T:System.Data.IsolationLevel" />
    ///  值开始数据库事务。
    ///</summary>
    ///  <param name="il"><see cref="T:System.Data.IsolationLevel" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    function BeginTransaction(il: DNIsolationLevel): DNIDbTransaction; overload;
    ///<summary>
    ///  关闭与数据库之间的连接。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  更改已打开的 <see langword="Connection" />
    ///  对象的当前数据库。
    ///</summary>
    ///  <param name="databaseName">
    ///  要代替当前数据库使用的数据库名称。
    ///</param>
    procedure ChangeDatabase(databaseName: string);
    ///<summary>
    ///  创建并返回一个与连接关联的命令对象。
    ///</summary>
    ///<returns>
    ///  与连接关联的命令对象。
    ///</returns>
    function CreateCommand: DNIDbCommand;
    ///<summary>
    ///  打开具有指定设置（由特定于提供程序的 Connection 对象的 <see langword="ConnectionString" />
    ///  属性所指定）的数据库连接。
    ///</summary>
    procedure Open;

  { propertys } 

    ///<summary>
    ///  获取或设置用于打数据库的字符串。
    ///</summary>
    ///<returns>
    ///  包含连接设置的字符串。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。
    ///</summary>
    ///<returns>
    ///  等待连接打开所需的时间（以秒为单位）。
    ///  默认值为 15 秒。
    ///</returns>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    ///<summary>
    ///  获取当前数据库的名称或打开连接后要使用的数据库的名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称或打开连接后要使用的数据库的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取连接的当前状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</returns>
    property State: DNConnectionState read get_State;
  end;

  //-------------namespace: System.Data----------------
  ///<summary>
  ///  表示要在数据源上执行的事务，并由访问关系数据库的 .NET Framework 数据提供程序实现。
  ///</summary>
  [DNTypeName('System.Data.IDbTransaction')]
  DNIDbTransaction = interface(DDN.mscorlib.DNIDisposable)
  ['{62572DE3-DD0D-3763-9548-50665D013F6D}']
  { getters & setters } 

    function get_Connection: DNIDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback;

  { propertys } 

    ///<summary>
    ///  指定要与事务关联的 Connection 对象。
    ///</summary>
    ///<returns>
    ///  要与事务关联的 Connection 对象。
    ///</returns>
    property Connection: DNIDbConnection read get_Connection;
    ///<summary>
    ///  为该事务指定 <see cref="T:System.Data.IsolationLevel" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该事务的 <see cref="T:System.Data.IsolationLevel" />
    ///  。
    ///  默认值为 <see langword="ReadCommitted" />
    ///  。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F5151D93-8A81-5185-A0E6-94C7835798A6}']
  { static getter & setter } 

    {class} function get_IsAvailable: Boolean;
    {class} function get_Pipe: DNSqlPipe;
    {class} function get_TriggerContext: DNSqlTriggerContext;
    {class} function get_WindowsIdentity: DDN.mscorlib.DNWindowsIdentity;

  { static propertys } 

    ///<summary>
    ///  指定是否在 SQL Server 内运行调用代码，并可访问上下文连接。
    ///</summary>
    ///<returns><see langword="True" />
    ///  上下文连接是否可用，另一个 <see cref="T:Microsoft.SqlServer.Server.SqlContext" />
    ///  可以访问成员。
    ///</returns>
    {class} property IsAvailable: Boolean read get_IsAvailable;
    ///<summary>
    ///  获取允许调用方发送结果集、 消息以及向客户端的命令的执行结果的管道对象。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />
    ///  管道是否可用，或 <see langword="null" />
    ///  如果在上下文中调用管道不可用 （例如，在用户定义函数）。
    ///</returns>
    {class} property Pipe: DNSqlPipe read get_Pipe;
    ///<summary>
    ///  获取用于调用方提供了有关导致触发器激发，以及已更新的列的映射信息的触发器上下文。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />
    ///  触发器上下文是否可用，或 <see langword="null" />
    ///  如果触发器调用外部调用。
    ///</returns>
    {class} property TriggerContext: DNSqlTriggerContext read get_TriggerContext;
    ///<summary>
    ///  调用方的 Microsoft Windows 标识。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Security.Principal.WindowsIdentity" />
    ///  实例，它表示调用方的 Windows 标识或 <see langword="null" />
    ///  如果客户端进行身份验证使用 SQL Server 身份验证。
    ///</returns>
    {class} property WindowsIdentity: DDN.mscorlib.DNWindowsIdentity read get_WindowsIdentity;
  end;

  ///<summary>
  ///  表示调用方的上下文中，它提供对访问的抽象 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />
  ///  , ，<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />
  ///  , ，和 <see cref="T:System.Security.Principal.WindowsIdentity" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlContext')]
  DNSqlContext = interface(DDN.mscorlib.DNObject)
  ['{A9B3388F-A387-3F30-8443-3C83BE2525B1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlContext = class(TDNGenericImport<DNSqlContextClass, DNSqlContext>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlDataRecordClass = interface(DNObjectClass)
  ['{D37A48F4-F7DD-5320-8C97-FD83B0606727}']
  { constructors } 

    ///<summary>
    ///  使用基于作为参数传递的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  对象数组的架构初始化新的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  。
    ///</summary>
    ///  <param name="metaData">
    ///  一个 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  对象的数组，该对象描述 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  中的每一列。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="metaData" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(metaData: TArray<DNSqlMetaData>): DNSqlDataRecord;

  end;

  ///<summary>
  ///  表示单个行的数据和其元数据。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlDataRecord')]
  DNSqlDataRecord = interface(DNIDataRecord)
  ['{944E81B5-D1D9-34CE-9699-852F41DE654C}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  返回序号参数指定的列的名称。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个包含列名称的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetName(ordinal: Int32): string;
    ///<summary>
    ///  返回序号参数指定的列的数据类型名称。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  包含列的数据类型的 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetDataTypeName(ordinal: Int32): string;
    ///<summary>
    ///  返回一个 <see cref="T:System.Type" />
    ///  对象，该对象表示映射到 <paramref name="ordinal" />
    ///  参数指定的列的 SQL Server 类型的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  形式为 <see cref="T:System.Type" />
    ///  对象的列类型。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.TypeLoadException">
    ///  此列属于用户定义的类型，不可用于调用应用程序域。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  此列属于用户定义的类型，不可用于调用应用程序域。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  为顺序参数所指定的列，返回公共语言运行时 (CLR) 类型值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  顺序指定的列的 CLR 类型值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回记录中所有列的值，这些值在数组中表示为公共语言运行时 (CLR) 类型。
    ///</summary>
    ///  <param name="values">
    ///  要将值列值复制到其中的数组。
    ///</param>
    ///<returns>
    ///  指示复制的列数的 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="values" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  返回此列名指定的列序号。
    ///</summary>
    ///  <param name="name">
    ///  要查找的列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的整数列序号。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  无法找到此列名。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Boolean" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Byte" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  获取序号指定的列的值，其形式为 <see cref="T:System.Byte" />
    ///  对象数组。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="fieldOffset">
    ///  开始检索字节的字段值内的偏移量。
    ///</param>
    ///  <param name="buffer">
    ///  要将字节复制到的目标缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  要将字节开始复制到的缓冲区内的偏移量。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的字节数。
    ///</param>
    ///<returns>
    ///  已复制的字节数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetBytes(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Char" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Char" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  获取序号指定的列的值，其形式为 <see cref="T:System.Char" />
    ///  对象数组。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="fieldOffset">
    ///  开始检索字符的字段值偏移量。
    ///</param>
    ///  <param name="buffer">
    ///  要将字符复制到其中的目标缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  开始复制字符的缓冲区偏移量。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的字符数。
    ///</param>
    ///<returns>
    ///  复制的字符数。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetChars(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Guid" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Guid" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Int16" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Int16" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Int32" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Int64" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see langword="float" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="float" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Double" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.String" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Decimal" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.DateTime" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException"><paramref name="ordinal" />
    ///  指定的列为 null。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.DateTimeOffset" />
    ///  的形式返回指定列的数据。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以 <see cref="T:System.DateTimeOffset" />
    ///  的形式指定的列的值。
    ///</returns>
    function GetDateTimeOffset(ordinal: Int32): DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  以 <see cref="T:System.TimeSpan" />
    ///  的形式返回指定列的数据。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以 <see cref="T:System.TimeSpan" />
    ///  的形式指定的列的值。
    ///</returns>
    function GetTimeSpan(ordinal: Int32): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  如果列序号参数所指定的列为 null，则返回 true。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  如果该列为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  返回 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  对象，它描述由列序号指定的列的元数据。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列元数据作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlMetaData(ordinal: Int32): DNSqlMetaData;
    ///<summary>
    ///  返回 <see cref="T:System.Type" />
    ///  对象，该对象表示映射到 SQL Server 类型列的类型（作为 <see cref="N:System.Data.SqlTypes" />
    ///  中定义的 SQL Server 类型）。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  形式为 <see cref="T:System.Type" />
    ///  对象的列类型。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.TypeLoadException">
    ///  此列属于用户定义的类型，不可用于调用应用程序域。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  此列属于用户定义的类型，不可用于调用应用程序域。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  返回表示为 SQL Server 类型，由列序号指定的列中存储的数据值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为 SQL Server 类型的列的值，其形式为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回记录中所有列的值，这些值在数组中表示为 SQL Server 类型。
    ///</summary>
    ///  <param name="values">
    ///  要将值列值复制到其中的数组。
    ///</param>
    ///<returns>
    ///  指示复制的列数的 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="values" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlBinary(ordinal: Int32): DNSqlBinary;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlBytes(ordinal: Int32): DNSqlBytes;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlXml(ordinal: Int32): DNSqlXml;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlBoolean(ordinal: Int32): DNSqlBoolean;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlByte(ordinal: Int32): DNSqlByte;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlChars(ordinal: Int32): DNSqlChars;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlInt16(ordinal: Int32): DNSqlInt16;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlInt32(ordinal: Int32): DNSqlInt32;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlInt64(ordinal: Int32): DNSqlInt64;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlSingle(ordinal: Int32): DNSqlSingle;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlDouble(ordinal: Int32): DNSqlDouble;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlMoney(ordinal: Int32): DNSqlMoney;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlDateTime(ordinal: Int32): DNSqlDateTime;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlDecimal(ordinal: Int32): DNSqlDecimal;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlString(ordinal: Int32): DNSqlString;
    ///<summary>
    ///  获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  形式的列值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  类型不匹配。
    ///</exception>
    function GetSqlGuid(ordinal: Int32): DNSqlGuid;
    ///<summary>
    ///  设置 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  中所有列的新值。
    ///  这些值表示为公共语言运行时 (CLR) 类型。
    ///</summary>
    ///  <param name="values"><see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  实例的新值数组，其表示为装箱为 <see cref="T:System.Object" />
    ///  引用的 CLR 类型。
    ///</param>
    ///<returns>
    ///  列值数设置为整数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="values" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  值的大小与 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  实例中的列数不匹配。
    ///</exception>
    function SetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  为列序号指定的列设置新值，表示为公共语言运行时 (CLR) 类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  指定列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetValue(ordinal: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Boolean" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    procedure SetBoolean(ordinal: Int32; value: Boolean);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Byte" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetByte(ordinal: Int32; value: Byte);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Byte" />
    ///  值数组。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="fieldOffset">
    ///  字段值中的偏移量，从该位置开始复制字节。
    ///</param>
    ///  <param name="buffer">
    ///  要从其中复制字节的目标缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  缓冲区中的偏移量，从该位置开始复制字节。
    ///</param>
    ///  <param name="length">
    ///  要从缓冲区复制的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetBytes(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Char" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetChar(ordinal: Int32; value: Char);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Char" />
    ///  值数组。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="fieldOffset">
    ///  字段值中的偏移量，从该位置开始复制字符。
    ///</param>
    ///  <param name="buffer">
    ///  要从其中复制字符的目标缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  缓冲区中的偏移量，从该位置开始复制字符。
    ///</param>
    ///  <param name="length">
    ///  要从缓冲区复制的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetChars(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Int16" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetInt16(ordinal: Int32; value: Int16);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Int32" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetInt32(ordinal: Int32; value: Int32);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Int64" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetInt64(ordinal: Int32; value: Int64);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see langword="float" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetFloat(ordinal: Int32; value: Single);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Double" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetDouble(ordinal: Int32; value: Double);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.String" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetString(ordinal: Int32; value: string);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Decimal" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetDecimal(ordinal: Int32; value: DDN.mscorlib.DNDecimal);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetDateTime(ordinal: Int32; value: DDN.mscorlib.DNDateTime);
    ///<summary>
    ///  设置为 <see cref="T:System.TimeSpan" />
    ///  指定的列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  新的列值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传入的 <paramref name="ordinal" />
    ///  是负数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  传入的 <see cref="T:System.TimeSpan" />
    ///  值的长度大于 24 小时。
    ///</exception>
    procedure SetTimeSpan(ordinal: Int32; value: DDN.mscorlib.DNTimeSpan);
    ///<summary>
    ///  设置为 <see cref="T:System.DateTimeOffset" />
    ///  值指定的列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    procedure SetDateTimeOffset(ordinal: Int32; value: DDN.mscorlib.DNDateTimeOffset);
    ///<summary>
    ///  将指定列中的值设置为 <see cref="T:System.DBNull" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    procedure SetDBNull(ordinal: Int32);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Guid" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetGuid(ordinal: Int32; value: DDN.mscorlib.DNGuid);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlBoolean(ordinal: Int32; value: DNSqlBoolean);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlByte(ordinal: Int32; value: DNSqlByte);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlInt16(ordinal: Int32; value: DNSqlInt16);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlInt32(ordinal: Int32; value: DNSqlInt32);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlInt64(ordinal: Int32; value: DNSqlInt64);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlSingle(ordinal: Int32; value: DNSqlSingle);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlDouble(ordinal: Int32; value: DNSqlDouble);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlMoney(ordinal: Int32; value: DNSqlMoney);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlDateTime(ordinal: Int32; value: DNSqlDateTime);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlXml(ordinal: Int32; value: DNSqlXml);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlDecimal(ordinal: Int32; value: DNSqlDecimal);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlString(ordinal: Int32; value: DNSqlString);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlBinary(ordinal: Int32; value: DNSqlBinary);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlGuid(ordinal: Int32; value: DNSqlGuid);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlChars(ordinal: Int32; value: DNSqlChars);
    ///<summary>
    ///  将存储在列中的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="value">
    ///  列的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ordinal" />
    ///  小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />
    ///  ）。
    ///</exception>
    procedure SetSqlBytes(ordinal: Int32; value: DNSqlBytes);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取数据行的列数。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  数据行的列数，其形式为整数。
    ///</returns>
    property FieldCount: Int32 read get_FieldCount;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNSqlDataRecord = class(TDNGenericImport<DNSqlDataRecordClass, DNSqlDataRecord>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlMetaDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B737A9D2-6FFD-5BD8-94E0-A2D1A69D4541}']
  { static getter & setter } 

    {class} function get_Max: Int64;

  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  具有指定的列名称和类型的类。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  A<see langword="SqlDbType" />
    ///  不允许传递到构造函数、 作为<paramref name="dbType" />
    ///  。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类，该类具有指定的列名称和默认服务器。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定该排序列的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类指定的列名称、 类型和最大长度。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="maxLength">
    ///  指定类型的最大长度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  不允许 SqlDbType 传递到构造函数、 作为<paramref name="dbType" />
    ///  。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  使用指定的列名称、 类型、 最大长度和服务器默认值的类。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="maxLength">
    ///  指定类型的最大长度。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定该排序列的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类，具有指定的列名称、 类型和用户定义类型 (UDT)。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="userDefinedType">
    ///  一个 <see cref="T:System.Type" />
    ///  指向该 UDT 的实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  不允许传递给构造函数、 作为 <paramref name="dbType" />
    ///  , ，或 <paramref name="userDefinedType" />
    ///  指向不具有一个类型 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" />
    ///  声明。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType; userDefinedType: DDN.mscorlib.DNType): DNSqlMetaData; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  用指定的列名称、 用户定义类型 (UDT) 和 sql Server 类型。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="userDefinedType">
    ///  一个 <see cref="T:System.Type" />
    ///  指向该 UDT 的实例。
    ///</param>
    ///  <param name="serverTypeName">
    ///  SQL Server 类型名称 <paramref name="userDefinedType" />
    ///  。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; userDefinedType: DDN.mscorlib.DNType; serverTypeName: string): DNSqlMetaData; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类，具有指定的列名称、 类型、 用户定义类型、 SQL Server 类型和服务器默认值。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序的列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="userDefinedType">
    ///  一个 <see cref="T:System.Type" />
    ///  指向该 UDT 的实例。
    ///</param>
    ///  <param name="serverTypeName">
    ///  SQL Server 类型名称 <paramref name="userDefinedType" />
    ///  。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定列排序的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; userDefinedType: DDN.mscorlib.DNType; serverTypeName: string; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类具有指定的列名称、 类型、 精度和小数位数。
    ///</summary>
    ///  <param name="name">
    ///  参数或列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="precision">
    ///  参数或列的精度。
    ///</param>
    ///  <param name="scale">
    ///  参数或列的小数位数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  A<see langword="SqlDbType" />
    ///  不允许传递到构造函数、 作为<paramref name="dbType" />
    ///  ，或<paramref name="scale" />
    ///  大于<paramref name="precision" />
    ///  。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType; precision: Byte; scale: Byte): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类指定的列名称、 类型、 精度、 小数位数和服务器默认值。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="precision">
    ///  参数或列的精度。
    ///</param>
    ///  <param name="scale">
    ///  参数或列的小数位数。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定该排序列的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; precision: Byte; scale: Byte; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类使用指定的列名称、 类型、 最大长度、 区域设置，并比较选项。
    ///</summary>
    ///  <param name="name">
    ///  参数或列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="maxLength">
    ///  指定类型的最大长度。
    ///</param>
    ///  <param name="locale">
    ///  参数或列的区域设置 ID。
    ///</param>
    ///  <param name="compareOptions">
    ///  参数或列的比较规则。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  不允许 SqlDbType 传递到构造函数、 作为<paramref name="dbType" />
    ///  。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; locale: Int64; compareOptions: DNSqlCompareOptions): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  使用指定的列名称、 类型、 最大长度、 区域设置、 比较选项和服务器默认值的类。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="maxLength">
    ///  指定类型的最大长度。
    ///</param>
    ///  <param name="locale">
    ///  参数或列的区域设置 ID。
    ///</param>
    ///  <param name="compareOptions">
    ///  参数或列的比较规则。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定该排序列的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; locale: Int64; compareOptions: DNSqlCompareOptions; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类指定的列名称、 数据库名称、 所属架构、 对象名称和默认服务器。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="database">
    ///  XML 架构集合的类型化的 XML 实例的数据库名称。
    ///</param>
    ///  <param name="owningSchema">
    ///  XML 架构集合的类型化的 XML 实例的关系架构名称。
    ///</param>
    ///  <param name="objectName">
    ///  XML 架构集合的类型化的 XML 实例的名称。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定该排序列的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; database: string; owningSchema: string; objectName: string; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类指定的列名称、 类型、 最大长度、 精度、 小数位数，区域设置 ID 比较选项和用户定义类型 (UDT)。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="maxLength">
    ///  指定类型的最大长度。
    ///</param>
    ///  <param name="precision">
    ///  参数或列的精度。
    ///</param>
    ///  <param name="scale">
    ///  参数或列的小数位数。
    ///</param>
    ///  <param name="locale">
    ///  参数或列的区域设置 ID。
    ///</param>
    ///  <param name="compareOptions">
    ///  参数或列的比较规则。
    ///</param>
    ///  <param name="userDefinedType">
    ///  A<see cref="T:System.Type" />
    ///  指向用户定义的类型的实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  A<see langword="SqlDbType" />
    ///  不允许传递到构造函数、 作为<paramref name="dbType" />
    ///  ，或<paramref name="userDefinedType" />
    ///  指向不具有一个类型<see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" />
    ///  声明。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; precision: Byte; scale: Byte; locale: Int64; compareOptions: DNSqlCompareOptions; userDefinedType: DDN.mscorlib.DNType): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类指定的列名称、 类型、 最大长度、 精度、 小数位数，区域设置 ID 比较选项和用户定义类型 (UDT)。
    ///  这种形式的构造函数，它允许你指定的列是否在表值参数、 列和排序列的序号的排序顺序中是唯一支持表值参数。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="maxLength">
    ///  指定类型的最大长度。
    ///</param>
    ///  <param name="precision">
    ///  参数或列的精度。
    ///</param>
    ///  <param name="scale">
    ///  参数或列的小数位数。
    ///</param>
    ///  <param name="localeId">
    ///  参数或列的区域设置 ID。
    ///</param>
    ///  <param name="compareOptions">
    ///  参数或列的比较规则。
    ///</param>
    ///  <param name="userDefinedType">
    ///  A<see cref="T:System.Type" />
    ///  指向用户定义的类型的实例。
    ///</param>
    ///  <param name="useServerDefault">
    ///  指定此列是否应使用默认服务器值。
    ///</param>
    ///  <param name="isUniqueKey">
    ///  指定表值参数中的列是否唯一。
    ///</param>
    ///  <param name="columnSortOrder">
    ///  指定列的排序顺序。
    ///</param>
    ///  <param name="sortOrdinal">
    ///  指定该排序列的序号。
    ///</param>
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; precision: Byte; scale: Byte; localeId: Int64; compareOptions: DNSqlCompareOptions; userDefinedType: DDN.mscorlib.DNType; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  使用指定的列名称、 类型、 数据库名称、 所属架构和对象名称的类。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///  <param name="dbType">
    ///  参数或列的 SQL Server 类型。
    ///</param>
    ///  <param name="database">
    ///  XML 架构集合的类型化的 XML 实例的数据库名称。
    ///</param>
    ///  <param name="owningSchema">
    ///  XML 架构集合的类型化的 XML 实例的关系架构名称。
    ///</param>
    ///  <param name="objectName">
    ///  XML 架构集合的类型化的 XML 实例的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  的<paramref name="Name" />
    ///  是<see langword="null" />
    ///  ，或<paramref name="objectName" />
    ///  是<see langword="null" />
    ///  时<paramref name="database" />
    ///  和<paramref name="owningSchema" />
    ///  是非<see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  不允许 SqlDbType 传递到构造函数、 作为<paramref name="dbType" />
    ///  。
    ///</exception>
    {class} function init(name: string; dbType: DNSqlDbType; database: string; owningSchema: string; objectName: string): DNSqlMetaData; overload;

  { static methods } 

    ///<summary>
    ///  推断从指定对象的元数据并将其作为返回<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</summary>
    ///  <param name="value">
    ///  从中推断元数据用于的对象。
    ///</param>
    ///  <param name="name">
    ///  分配给返回的名称<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  推断的元数据作为<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  v<paramref name="alue" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function InferFromValue(value: DDN.mscorlib.DNObject; name: string): DNSqlMetaData;

  { static propertys } 

    ///<summary>
    ///  获取的长度<see langword="text" />
    ///  ， <see langword="ntext" />
    ///  ，和<see langword="image" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  长度<see langword="text" />
    ///  ， <see langword="ntext" />
    ///  ，和<see langword="image" />
    ///  数据类型。
    ///</returns>
    {class} property Max: Int64 read get_Max;
  end;

  ///<summary>
  ///  指定并从参数和列中检索元数据信息<see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlMetaData')]
  DNSqlMetaData = interface(DDN.mscorlib.DNObject)
  ['{93BB05EB-6510-36A9-B10B-801D513F1524}']
  { getters & setters } 

    function get_CompareOptions: DNSqlCompareOptions;
    function get_DbType: DNDbType;
    function get_IsUniqueKey: Boolean;
    function get_LocaleId: Int64;
    function get_MaxLength: Int64;
    function get_Name: string;
    function get_Precision: Byte;
    function get_Scale: Byte;
    function get_SortOrder: DNSortOrder;
    function get_SortOrdinal: Int32;
    function get_SqlDbType: DNSqlDbType;
    function get_Type: DDN.mscorlib.DNType;
    function get_TypeName: string;
    function get_UseServerDefault: Boolean;
    function get_XmlSchemaCollectionDatabase: string;
    function get_XmlSchemaCollectionName: string;
    function get_XmlSchemaCollectionOwningSchema: string;

  { methods } 

    ///<summary>
    ///  验证指定<see cref="T:System.Int16" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Int16" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Int16): Int16; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Int32" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Int32): Int32; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Int64" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Int64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Int64): Int64; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Single" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Single" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Single): Single; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Double" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Double" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Double): Double; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.String" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: string): string; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.DateTime" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DDN.mscorlib.DNDateTime): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Guid" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Guid" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DDN.mscorlib.DNGuid): DDN.mscorlib.DNGuid; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlBoolean): DNSqlBoolean; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlByte): DNSqlByte; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlInt16): DNSqlInt16; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlInt32): DNSqlInt32; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlInt64): DNSqlInt64; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlSingle): DNSqlSingle; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlDouble): DNSqlDouble; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlDateTime): DNSqlDateTime; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlString" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlString): DNSqlString; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlGuid): DNSqlGuid; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlXml): DNSqlXml; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.TimeSpan" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值为一个数组<see cref="T:System.TimeSpan" />
    ///  值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DDN.mscorlib.DNTimeSpan): DDN.mscorlib.DNTimeSpan; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.DateTimeOffset" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值为一个数组<see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DDN.mscorlib.DNDateTimeOffset): DDN.mscorlib.DNDateTimeOffset; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Boolean" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Boolean): Boolean; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Byte" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Byte" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Byte): Byte; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Char" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Char" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: Char): Char; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Decimal" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Decimal" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DDN.mscorlib.DNDecimal): DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlMoney): DNSqlMoney; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlDecimal): DNSqlDecimal; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlBinary): DNSqlBinary; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlChars): DNSqlChars; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DNSqlBytes): DNSqlBytes; overload;
    ///<summary>
    ///  验证指定<see cref="T:System.Object" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值作为<see cref="T:System.Object" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  验证指定的数组<see cref="T:System.Byte" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值为一个数组<see cref="T:System.Byte" />
    ///  值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: TArray<Byte>): TArray<Byte>; overload;
    ///<summary>
    ///  验证指定的数组<see cref="T:System.Char" />
    ///  值根据元数据，并在必要时调整该值。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  调整后的值为一个数组<see cref="T:System.Char" />
    ///  值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="Value" />
    ///  不匹配<see cref="T:Microsoft.SqlServer.Server.SqlMetaData" />
    ///  类型，或<paramref name="value" />
    ///  不进行调整。
    ///</exception>
    function Adjust(value: TArray<Char>): TArray<Char>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于列或参数的比较规则。
    ///</summary>
    ///<returns>
    ///  用于列或参数的比较规则<see cref="T:System.Data.SqlTypes.SqlCompareOptions" />
    ///  。
    ///</returns>
    property CompareOptions: DNSqlCompareOptions read get_CompareOptions;
    ///<summary>
    ///  获取列或参数的数据类型。
    ///</summary>
    ///<returns>
    ///  数据类型的列或参数作为 <see cref="T:System.Data.DbType" />
    ///  。
    ///</returns>
    property DbType: DNDbType read get_DbType;
    ///<summary>
    ///  指示表值参数中的列是否唯一。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="Boolean" />
    ///  值。
    ///</returns>
    property IsUniqueKey: Boolean read get_IsUniqueKey;
    ///<summary>
    ///  获取列或参数的区域设置 ID。
    ///</summary>
    ///<returns>
    ///  区域设置 ID 的列或参数作为<see cref="T:System.Int64" />
    ///  。
    ///</returns>
    property LocaleId: Int64 read get_LocaleId;
    ///<summary>
    ///  获取列或参数的最大长度。
    ///</summary>
    ///<returns>
    ///  列或参数的最大长度<see cref="T:System.Int64" />
    ///  。
    ///</returns>
    property MaxLength: Int64 read get_MaxLength;
    ///<summary>
    ///  获取列或参数的名称。
    ///</summary>
    ///<returns>
    ///  名称的列或参数作为<see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="Name" />
    ///  中指定构造函数的长度超过 128 个字符。
    ///</exception>
    property Name: string read get_Name;
    ///<summary>
    ///  获取列或参数的精度。
    ///</summary>
    ///<returns>
    ///  列或参数作为精度<see cref="T:System.Byte" />
    ///  。
    ///</returns>
    property Precision: Byte read get_Precision;
    ///<summary>
    ///  获取列或参数的小数位数。
    ///</summary>
    ///<returns>
    ///  列或参数小数位数。
    ///</returns>
    property Scale: Byte read get_Scale;
    ///<summary>
    ///  返回列的排序顺序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SortOrder" />
    ///  对象。
    ///</returns>
    property SortOrder: DNSortOrder read get_SortOrder;
    ///<summary>
    ///  返回该排序列的序号。
    ///</summary>
    ///<returns>
    ///  列排序的序号。
    ///</returns>
    property SortOrdinal: Int32 read get_SortOrdinal;
    ///<summary>
    ///  获取列或参数的数据类型。
    ///</summary>
    ///<returns>
    ///  列或参数的数据类型<see cref="T:System.Data.DbType" />
    ///  。
    ///</returns>
    property SqlDbType: DNSqlDbType read get_SqlDbType;
    ///<summary>
    ///  获取用户定义类型 (UDT) 的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  作为用户定义的类型的 CLR 类型名称 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>
    ///  获取用户定义类型 (UDT) 或实例所表示的 SQL Server 类型的由三部分名称。
    ///</summary>
    ///<returns>
    ///  UDT 或 SQL Server 类型的名称<see cref="T:System.String" />
    ///  。
    ///</returns>
    property TypeName: string read get_TypeName;
    ///<summary>
    ///  报告此列是否应使用默认服务器值。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="Boolean" />
    ///  值。
    ///</returns>
    property UseServerDefault: Boolean read get_UseServerDefault;
    ///<summary>
    ///  获取此 XML 实例的架构集合所在的数据库的名称。
    ///</summary>
    ///<returns>
    ///  此 XML 实例的架构集合所在的位置作为数据库的名称<see cref="T:System.String" />
    ///  。
    ///</returns>
    property XmlSchemaCollectionDatabase: string read get_XmlSchemaCollectionDatabase;
    ///<summary>
    ///  获取此 XML 实例的架构集合的名称。
    ///</summary>
    ///<returns>
    ///  作为此 XML 实例的架构集合名称<see cref="T:System.String" />
    ///  。
    ///</returns>
    property XmlSchemaCollectionName: string read get_XmlSchemaCollectionName;
    ///<summary>
    ///  获取此 XML 实例的架构集合所在的所属关系架构。
    ///</summary>
    ///<returns>
    ///  此 XML 实例的架构集合所在的位置作为的所属关系架构<see cref="T:System.String" />
    ///  。
    ///</returns>
    property XmlSchemaCollectionOwningSchema: string read get_XmlSchemaCollectionOwningSchema;
  end;

  TDNSqlMetaData = class(TDNGenericImport<DNSqlMetaDataClass, DNSqlMetaData>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlPipeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AF188E4D-18E8-50E7-AE95-68B49677CF01}']
  end;

  ///<summary>
  ///  允许在 SQL Server 数据库来将结果返回到调用方上的托管存储的过程正在运行进程。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlPipe')]
  DNSqlPipe = interface(DDN.mscorlib.DNObject)
  ['{6F724A5D-98E1-3E92-B08A-4E37785768CD}']
  { getters & setters } 

    function get_IsSendingResults: Boolean;

  { methods } 

    ///<summary>
    ///  标记结果集的末尾，并返回 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />
    ///  回初始状态的实例。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
    ///  以前没有调用方法。
    ///</exception>
    procedure SendResultsEnd;
    ///<summary>
    ///  执行命令作为参数传递，并将结果发送到客户端。
    ///</summary>
    ///  <param name="command"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  要执行对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="command" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此方法不支持绑定到进程外连接的命令。
    ///</exception>
    procedure ExecuteAndSend(command: DNSqlCommand);
    ///<summary>
    ///  直接向客户端或当前输出使用者发送一条字符串消息。
    ///</summary>
    ///  <param name="message">
    ///  要发送到客户端的消息字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="message" />
    ///  大于 4000 个字符。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="message" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Send(message: string); overload;
    ///<summary>
    ///  将发送的多行结果集直接向客户端或当前输出使用者。
    ///</summary>
    ///  <param name="reader">
    ///  多行结果集发送到客户端︰ <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Send(reader: DNSqlDataReader); overload;
    ///<summary>
    ///  将发送的单行结果集直接向客户端或当前输出使用者。
    ///</summary>
    ///  <param name="record">
    ///  发送到客户端的单行结果集︰ <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="record" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Send(&record: DNSqlDataRecord); overload;
    ///<summary>
    ///  标记开始某一结果集发送回客户端，并使用记录的参数来构造描述结果集的元数据。
    ///</summary>
    ///  <param name="record">
    ///  一个 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  对象从其提取和用来描述结果集元数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="record" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="record" />
    ///  没有列或尚未初始化。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  以外的其他方法 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
    ///  或 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
    ///  之后调用 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
    ///  方法。
    ///</exception>
    procedure SendResultsStart(&record: DNSqlDataRecord);
    ///<summary>
    ///  将一行数据发送回客户端。
    ///</summary>
    ///  <param name="record">
    ///  一个 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  对象发送到客户端的行的列的值。
    ///  记录的架构的架构必须匹配的元数据描述的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />
    ///  传递给 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
    ///  方法。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="record" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
    ///  以前没有调用方法。
    ///</exception>
    procedure SendResultsRow(&record: DNSqlDataRecord);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />
    ///  中将单个结果集发送回客户端的模式。
    ///  此属性是只读的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
    ///  调用方法和 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />
    ///  处于的模式将单个结果集发送回客户端; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSendingResults: Boolean read get_IsSendingResults;
  end;

  TDNSqlPipe = class(TDNGenericImport<DNSqlPipeClass, DNSqlPipe>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlTriggerContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3083F524-CEBE-5A76-B4C9-AD7F7D41EEDB}']
  end;

  ///<summary>
  ///  提供有关已激发该触发器的上下文信息。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlTriggerContext')]
  DNSqlTriggerContext = interface(DDN.mscorlib.DNObject)
  ['{02C97B74-F42B-3EA2-956A-1D01A773F21A}']
  { getters & setters } 

    function get_ColumnCount: Int32;
    function get_EventData: DNSqlXml;
    function get_TriggerAction: DNTriggerAction;

  { methods } 

    ///<summary>
    ///  返回 <see langword="true" />
    ///  如果某一列产生影响的 INSERT 或 UPDATE 语句。
    ///</summary>
    ///  <param name="columnOrdinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果列已插入或更新操作的影响。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在触发器的上下文中调用其中的值 <see cref="P:Microsoft.SqlServer.Server.SqlTriggerContext.TriggerAction" />
    ///  属性不是 <see langword="Insert" />
    ///  或 <see langword="Update" />
    ///  。
    ///</exception>
    function IsUpdatedColumn(columnOrdinal: Int32): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取绑定到触发器数据表中所含列数。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  绑定到该触发器，数值类型为整数数据表中所含列数。
    ///</returns>
    property ColumnCount: Int32 read get_ColumnCount;
    ///<summary>
    ///  获取事件数据特定于激发触发器的操作。
    ///</summary>
    ///<returns>
    ///  特定于激发的触发器的操作的事件数据 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  的详细信息是否可用，则 <see langword="null" />
    ///  否则为。
    ///</returns>
    property EventData: DNSqlXml read get_EventData;
    ///<summary>
    ///  指示激发触发器的操作。
    ///</summary>
    ///<returns>
    ///  激发的触发器的操作 <see cref="T:Microsoft.SqlServer.Server.TriggerAction" />
    ///  。
    ///</returns>
    property TriggerAction: DNTriggerAction read get_TriggerAction;
  end;

  TDNSqlTriggerContext = class(TDNGenericImport<DNSqlTriggerContextClass, DNSqlTriggerContext>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlFacetAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E465348B-C8B9-5F0A-95BF-45B83AE919E7}']
  { constructors } 

    ///<summary>
    ///  一个用户定义类型 (UDT) 的可选属性的返回类型，用于批注与可以在 TRANSACT-SQL 中使用的其他信息返回的结果。
    ///</summary>
    {class} function init: DNSqlFacetAttribute;

  end;

  ///<summary>
  ///  批注所返回的用户定义的类型 (UDT) 的可以在 TRANSACT-SQL 中使用的其他信息的结果。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlFacetAttribute')]
  DNSqlFacetAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CCF90767-1E51-33CD-9616-9C98FA0C1692}']
  { getters & setters } 

    function get_IsFixedLength: Boolean;
    procedure set_IsFixedLength(value: Boolean);
    function get_MaxSize: Int32;
    procedure set_MaxSize(value: Int32);
    function get_Precision: Int32;
    procedure set_Precision(value: Int32);
    function get_Scale: Int32;
    procedure set_Scale(value: Int32);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示用户定义类型的返回类型是否为固定长度。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果返回类型是固定的长度。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedLength: Boolean read get_IsFixedLength write set_IsFixedLength;
    ///<summary>
    ///  使用逻辑单位，用户定义类型的基础的字段类型的最大大小。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  表示的最大大小的基础的字段类型的逻辑单元。
    ///</returns>
    property MaxSize: Int32 read get_MaxSize write set_MaxSize;
    ///<summary>
    ///  用户定义类型的返回类型的精度。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  表示返回类型的精度。
    ///</returns>
    property Precision: Int32 read get_Precision write set_Precision;
    ///<summary>
    ///  用户定义类型的返回类型的小数位数。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  表示返回类型的小数位数。
    ///</returns>
    property Scale: Int32 read get_Scale write set_Scale;
    ///<summary>
    ///  指示是否可以为用户定义类型的返回类型 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果用户定义类型的返回类型可以为 <see langword="null" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlFacetAttribute = class(TDNGenericImport<DNSqlFacetAttributeClass, DNSqlFacetAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlFunctionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{464EB31E-B1AD-59E4-BB87-C319E722AAE5}']
  { constructors } 

    ///<summary>
    ///  用户定义的聚合，一个可选属性用于指示应作为函数的 SQL Server 中注册该方法。
    ///  也用来设置 <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.DataAccess" />
    ///  , ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.FillRowMethodName" />
    ///  , ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsDeterministic" />
    ///  , ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.IsPrecise" />
    ///  , ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.Name" />
    ///  , ，<see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.SystemDataAccess" />
    ///  , ，和 <see cref="P:Microsoft.SqlServer.Server.SqlFunctionAttribute.TableDefinition" />
    ///  函数属性的属性。
    ///</summary>
    {class} function init: DNSqlFunctionAttribute;

  end;

  ///<summary>
  ///  用来标记用户定义聚合的 SQL Server 中用作函数的方法定义。
  ///  在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlFunctionAttribute')]
  DNSqlFunctionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D1590D04-441A-37E9-983D-71C132ED9F6B}']
  { getters & setters } 

    function get_IsDeterministic: Boolean;
    procedure set_IsDeterministic(value: Boolean);
    function get_DataAccess: DNDataAccessKind;
    procedure set_DataAccess(value: DNDataAccessKind);
    function get_SystemDataAccess: DNSystemDataAccessKind;
    procedure set_SystemDataAccess(value: DNSystemDataAccessKind);
    function get_IsPrecise: Boolean;
    procedure set_IsPrecise(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TableDefinition: string;
    procedure set_TableDefinition(value: string);
    function get_FillRowMethodName: string;
    procedure set_FillRowMethodName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示用户定义函数是否具有确定性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该函数具有确定性。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDeterministic: Boolean read get_IsDeterministic write set_IsDeterministic;
    ///<summary>
    ///  指示函数是否涉及 SQL Server 的本地实例中存储的用户数据访问权限。
    ///</summary>
    ///<returns><see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="None" />
    ///  ︰ 不访问数据。
    ///<see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="Read" />
    ///  ︰ 只是读取用户数据。
    ///</returns>
    property DataAccess: DNDataAccessKind read get_DataAccess write set_DataAccess;
    ///<summary>
    ///  指示函数是否需要对存储在系统目录或 SQL Server 的虚拟系统表中的数据的访问。
    ///</summary>
    ///<returns><see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="None" />
    ///  ︰ 不会访问系统数据。
    ///<see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="Read" />
    ///  ︰ 仅读取系统数据。
    ///</returns>
    property SystemDataAccess: DNSystemDataAccessKind read get_SystemDataAccess write set_SystemDataAccess;
    ///<summary>
    ///  指示函数是否涉及不精确的计算，如浮点运算。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果函数涉及精确的计算;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPrecise: Boolean read get_IsPrecise write set_IsPrecise;
    ///<summary>
    ///  在 SQL Server 中应在其下注册该函数的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示应在其下注册的函数的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  一个字符串，表示表定义的结果时，如果该方法用作表值函数 (TVF)。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示表定义的结果。
    ///</returns>
    property TableDefinition: string read get_TableDefinition write set_TableDefinition;
    ///<summary>
    ///  TVF 约定所使用的表值函数 (TVF) 位于同一类中的方法的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示 TVF 约定所使用的方法的名称。
    ///</returns>
    property FillRowMethodName: string read get_FillRowMethodName write set_FillRowMethodName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlFunctionAttribute = class(TDNGenericImport<DNSqlFunctionAttributeClass, DNSqlFunctionAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlMethodAttributeClass = interface(DNSqlFunctionAttributeClass)
  ['{7DFDB86E-0B8B-5D09-9157-7FB0EDF3F8FB}']
  { constructors } 

    ///<summary>
    ///  用于指示一种方法的确定性和数据访问属性或 udt 属性对用户定义类型 (UDT) 属性。
    ///</summary>
    {class} function init: DNSqlMethodAttribute;

  end;

  ///<summary>
  ///  表示一种方法的确定性和数据访问属性或用户定义类型 (UDT) 的属性。
  ///  在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlMethodAttribute')]
  DNSqlMethodAttribute = interface(DNSqlFunctionAttribute)
  ['{A2B70C4B-E9BE-3A29-BA7E-5C74FFF1D43A}']
  { getters & setters } 

    function get_OnNullCall: Boolean;
    procedure set_OnNullCall(value: Boolean);
    function get_IsMutator: Boolean;
    procedure set_IsMutator(value: Boolean);
    function get_InvokeIfReceiverIsNull: Boolean;
    procedure set_InvokeIfReceiverIsNull(value: Boolean);
    function get_IsDeterministic: Boolean;
    procedure set_IsDeterministic(value: Boolean);
    function get_DataAccess: DNDataAccessKind;
    procedure set_DataAccess(value: DNDataAccessKind);
    function get_SystemDataAccess: DNSystemDataAccessKind;
    procedure set_SystemDataAccess(value: DNSystemDataAccessKind);
    function get_IsPrecise: Boolean;
    procedure set_IsPrecise(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TableDefinition: string;
    procedure set_TableDefinition(value: string);
    function get_FillRowMethodName: string;
    procedure set_FillRowMethodName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  在方法调用中使用 <see langword="null" />
    ///  输入参数时指示是否调用用户定义类型 (UDT) 上的方法。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="null" />
    ///  输入参数在方法调用中指定时，调用了该方法，则为 <see langword="true" />
    ///  ；如果任意输入参数为 <see langword="null" />
    ///  时，该方法返回了 <see langword="null" />
    ///  值，则为 <see langword="false" />
    ///  。
    ///  如果由于方法上的属性，不能调用该方法，则返回 SQL Server<see langword="DbNull" />
    ///  。
    ///</returns>
    property OnNullCall: Boolean read get_OnNullCall write set_OnNullCall;
    ///<summary>
    ///  指示用户定义类型 (UDT) 上的方法是否为赋值函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该方法是赋值函数。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsMutator: Boolean read get_IsMutator write set_IsMutator;
    ///<summary>
    ///  指示 SQL Server 是否应在 null 实例上调用此方法。
    ///</summary>
    ///<returns>
    ///  如果 SQL Server 应在 null 实例上调用此方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果由于方法上的属性，不能调用该方法，则返回 SQL Server<see langword="DbNull" />
    ///  。
    ///</returns>
    property InvokeIfReceiverIsNull: Boolean read get_InvokeIfReceiverIsNull write set_InvokeIfReceiverIsNull;
    ///<summary>
    ///  指示用户定义函数是否具有确定性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该函数具有确定性。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDeterministic: Boolean read get_IsDeterministic write set_IsDeterministic;
    ///<summary>
    ///  指示函数是否涉及 SQL Server 的本地实例中存储的用户数据访问权限。
    ///</summary>
    ///<returns><see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="None" />
    ///  ︰ 不访问数据。
    ///<see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="Read" />
    ///  ︰ 只是读取用户数据。
    ///</returns>
    property DataAccess: DNDataAccessKind read get_DataAccess write set_DataAccess;
    ///<summary>
    ///  指示函数是否需要对存储在系统目录或 SQL Server 的虚拟系统表中的数据的访问。
    ///</summary>
    ///<returns><see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="None" />
    ///  ︰ 不会访问系统数据。
    ///<see cref="T:Microsoft.SqlServer.Server.DataAccessKind" />
    ///  。<see langword="Read" />
    ///  ︰ 仅读取系统数据。
    ///</returns>
    property SystemDataAccess: DNSystemDataAccessKind read get_SystemDataAccess write set_SystemDataAccess;
    ///<summary>
    ///  指示函数是否涉及不精确的计算，如浮点运算。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果函数涉及精确的计算;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPrecise: Boolean read get_IsPrecise write set_IsPrecise;
    ///<summary>
    ///  在 SQL Server 中应在其下注册该函数的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示应在其下注册的函数的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  一个字符串，表示表定义的结果时，如果该方法用作表值函数 (TVF)。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示表定义的结果。
    ///</returns>
    property TableDefinition: string read get_TableDefinition write set_TableDefinition;
    ///<summary>
    ///  TVF 约定所使用的表值函数 (TVF) 位于同一类中的方法的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示 TVF 约定所使用的方法的名称。
    ///</returns>
    property FillRowMethodName: string read get_FillRowMethodName write set_FillRowMethodName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlMethodAttribute = class(TDNGenericImport<DNSqlMethodAttributeClass, DNSqlMethodAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlProcedureAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E8844317-AF72-5839-81BE-C75FB24EDB4A}']
  { constructors } 

    ///<summary>
    ///  在组件中，用来指示给定的方法应注册为 SQL Server 中的存储过程的方法定义属性。
    ///</summary>
    {class} function init: DNSqlProcedureAttribute;

  end;

  ///<summary>
  ///  用来标记程序集作为存储过程的方法定义。
  ///  在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlProcedureAttribute')]
  DNSqlProcedureAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{7A97767D-AB39-36B5-BA4F-4127F0830702}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  存储过程的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示存储过程的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlProcedureAttribute = class(TDNGenericImport<DNSqlProcedureAttributeClass, DNSqlProcedureAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlTriggerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{47FF2954-99E8-5FC1-B3E0-D2BCE1E23DB0}']
  { constructors } 

    ///<summary>
    ///  在组件中，用于将方法标记为 SQL Server 中的触发器的方法定义属性。
    ///</summary>
    {class} function init: DNSqlTriggerAttribute;

  end;

  ///<summary>
  ///  用来标记程序集作为 SQL Server 中的触发器的方法定义。
  ///  在特性上的属性反映在该类型注册到 SQL Server 时使用的物理属性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlTriggerAttribute')]
  DNSqlTriggerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5AE35DDC-D0F8-3AF2-8DFB-AA8AC7C77951}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Event: string;
    procedure set_Event(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  触发器的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示触发器的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  触发器适用的表。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示表名。
    ///</returns>
    property Target: string read get_Target write set_Target;
    ///<summary>
    ///  触发器及其数据操作语言 (DML) 操作激活触发器的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示触发器和数据操作语言 (DML) 操作激活触发器的类型。
    ///</returns>
    property Event: string read get_Event write set_Event;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlTriggerAttribute = class(TDNGenericImport<DNSqlTriggerAttributeClass, DNSqlTriggerAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlUserDefinedAggregateAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{AECAE990-BFE4-58F9-8B11-573CE4ADED60}']
  { constructors } 

    ///<summary>
    ///  用户定义的聚合，必需的特性用于指示给定的类型是用户定义聚合和用户定义聚合的存储格式。
    ///</summary>
    ///  <param name="format">
    ///  其中一个 <see cref="T:Microsoft.SqlServer.Server.Format" />
    ///  表示聚合的序列化格式的值。
    ///</param>
    {class} function init(format: DNFormat): DNSqlUserDefinedAggregateAttribute;

  end;

  ///<summary>
  ///  指示应将该类型注册为用户定义聚合。
  ///  在特性上的属性反映在该类型注册到 SQL Server 时使用的物理属性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute')]
  DNSqlUserDefinedAggregateAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1434262E-8B0D-3AE6-81A0-B5BBC35D40B8}']
  { getters & setters } 

    function get_MaxByteSize: Int32;
    procedure set_MaxByteSize(value: Int32);
    function get_IsInvariantToDuplicates: Boolean;
    procedure set_IsInvariantToDuplicates(value: Boolean);
    function get_IsInvariantToNulls: Boolean;
    procedure set_IsInvariantToNulls(value: Boolean);
    function get_IsInvariantToOrder: Boolean;
    procedure set_IsInvariantToOrder(value: Boolean);
    function get_IsNullIfEmpty: Boolean;
    procedure set_IsNullIfEmpty(value: Boolean);
    function get_Format: DNFormat;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  以字节为单位的聚合实例的最大大小。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  值，该值表示聚合实例的最大大小。
    ///</returns>
    property MaxByteSize: Int32 read get_MaxByteSize write set_MaxByteSize;
    ///<summary>
    ///  指示聚合是否与重复值无关。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果聚合与重复值无关;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInvariantToDuplicates: Boolean read get_IsInvariantToDuplicates write set_IsInvariantToDuplicates;
    ///<summary>
    ///  指示聚合是否对 null 值固定不变。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果聚合与空值无关;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInvariantToNulls: Boolean read get_IsInvariantToNulls write set_IsInvariantToNulls;
    ///<summary>
    ///  指示聚合是否与顺序无关。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果对顺序; 固定不变，则聚合处于否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInvariantToOrder: Boolean read get_IsInvariantToOrder write set_IsInvariantToOrder;
    ///<summary>
    ///  指示聚合是否返回 <see langword="null" />
    ///  如果积累了没有值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果聚合返回 <see langword="null" />
    ///  如果没有值已累计; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullIfEmpty: Boolean read get_IsNullIfEmpty write set_IsNullIfEmpty;
    ///<summary>
    ///  序列化格式为 <see cref="T:Microsoft.SqlServer.Server.Format" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.SqlServer.Server.Format" />
    ///  表示序列化格式。
    ///</returns>
    property Format: DNFormat read get_Format;
    ///<summary>
    ///  聚合的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示聚合的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlUserDefinedAggregateAttribute = class(TDNGenericImport<DNSqlUserDefinedAggregateAttributeClass, DNSqlUserDefinedAggregateAttribute>)
  public const
    ///<summary>
    ///  最大大小，以字节为单位，需要在计算过程中存储此聚合实例的状态。
    ///</summary>
   MaxByteSizeValue = 8000;
  end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlUserDefinedTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{976C3546-1D24-53FE-9538-B7B834AD3105}']
  { constructors } 

    ///<summary>
    ///  必需的属性对用户定义类型 (UDT)，用于确认给定的类型为 UDT 并指示 UDT 的存储格式。
    ///</summary>
    ///  <param name="format">
    ///  其中一个 <see cref="T:Microsoft.SqlServer.Server.Format" />
    ///  表示类型的序列化格式的值。
    ///</param>
    {class} function init(format: DNFormat): DNSqlUserDefinedTypeAttribute;

  end;

  ///<summary>
  ///  用于将标记为用户定义类型 (UDT) 在 SQL Server 中的程序集中的类型定义。
  ///  在特性上的属性反映在该类型注册到 SQL Server 时使用的物理特征。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute')]
  DNSqlUserDefinedTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5EDF6FF3-80BA-3BE8-B646-991927AFA757}']
  { getters & setters } 

    function get_MaxByteSize: Int32;
    procedure set_MaxByteSize(value: Int32);
    function get_IsFixedLength: Boolean;
    procedure set_IsFixedLength(value: Boolean);
    function get_IsByteOrdered: Boolean;
    procedure set_IsByteOrdered(value: Boolean);
    function get_Format: DNFormat;
    function get_ValidationMethodName: string;
    procedure set_ValidationMethodName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  实例，以字节为单位的最大大小。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  值，该值表示该实例的最大大小。
    ///</returns>
    property MaxByteSize: Int32 read get_MaxByteSize write set_MaxByteSize;
    ///<summary>
    ///  指示此用户定义类型的所有实例都是否具有相同的长度。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此类型的所有实例都都具有相同的长度;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedLength: Boolean read get_IsFixedLength write set_IsFixedLength;
    ///<summary>
    ///  指示用户定义类型是否为字节进行排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果用户定义类型是字节进行排序;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsByteOrdered: Boolean read get_IsByteOrdered write set_IsByteOrdered;
    ///<summary>
    ///  序列化格式为 <see cref="T:Microsoft.SqlServer.Server.Format" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.SqlServer.Server.Format" />
    ///  值，该值表示序列化格式。
    ///</returns>
    property Format: DNFormat read get_Format;
    ///<summary>
    ///  用来验证用户定义类型的实例的方法的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示用来验证用户定义类型的实例的方法的名称。
    ///</returns>
    property ValidationMethodName: string read get_ValidationMethodName write set_ValidationMethodName;
    ///<summary>
    ///  用户定义类型的 SQL Server 名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示用户定义类型的 SQL Server 名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlUserDefinedTypeAttribute = class(TDNGenericImport<DNSqlUserDefinedTypeAttributeClass, DNSqlUserDefinedTypeAttribute>) end;

  //-------------namespace: System.Data----------------
  DNDataSysDescriptionAttributeClass = interface(DNObjectClass)
  ['{5C08CCA1-4E56-596B-AF91-12164ABCA118}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataSysDescriptionAttribute" />
    ///  类使用指定的说明的字符串。
    ///</summary>
    ///  <param name="description">
    ///  描述字符串中。
    ///</param>
    {class} function init(description: string): DNDataSysDescriptionAttribute;

  end;

  ///<summary>
  ///  将标记属性、 事件或扩展程序的说明。
  ///  在引用该成员时，可视化设计器可以显示此说明。
  ///</summary>
  [DNTypeName('System.Data.DataSysDescriptionAttribute')]
  DNDataSysDescriptionAttribute = interface(DNObject)
  ['{A30B6C19-6EBB-3A35-9EA3-C1DEF99F2E86}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取说明的文本。
    ///</summary>
    ///<returns>
    ///  描述字符串中。
    ///</returns>
    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataSysDescriptionAttribute = class(TDNGenericImport<DNDataSysDescriptionAttributeClass, DNDataSysDescriptionAttribute>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderSpecificTypePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C588291B-3EFF-57CF-BFD0-0FCAAD4E120A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="isProviderSpecificTypeProperty">
    ///  指定此属性是一个提供程序特定的属性。
    ///</param>
    {class} function init(isProviderSpecificTypeProperty: Boolean): DNDbProviderSpecificTypePropertyAttribute;

  end;

  ///<summary>
  ///  标识设置特定于提供程序类型时要使用强类型化的参数类中的提供程序特定属性。
  ///</summary>
  [DNTypeName('System.Data.Common.DbProviderSpecificTypePropertyAttribute')]
  DNDbProviderSpecificTypePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B024F5CD-4554-31D0-8FBF-4876AD26D74E}']
  { getters & setters } 

    function get_IsProviderSpecificTypeProperty: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示特性化的属性是否是特定于提供程序类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此特性应用于该属性是特定于提供程序类型属性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsProviderSpecificTypeProperty: Boolean read get_IsProviderSpecificTypeProperty;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDbProviderSpecificTypePropertyAttribute = class(TDNGenericImport<DNDbProviderSpecificTypePropertyAttributeClass, DNDbProviderSpecificTypePropertyAttribute>) end;

  //-------------namespace: System.Data.Common----------------
  DNDBDataPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{9BF00A48-F299-50BA-9498-5186E5C17C70}']
  end;

  ///<summary>
  ///  将安全操作相关联的自定义安全特性。
  ///</summary>
  [DNTypeName('System.Data.Common.DBDataPermissionAttribute')]
  DNDBDataPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{A351BE8E-CE50-3768-B8CF-F8A32D69840C}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  标识是否该属性应序列化的连接字符串。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的连接字符串。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeConnectionString: Boolean;
    ///<summary>
    ///  标识是否特性应序列化键限制集合。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的一套键限制;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeKeyRestrictions: Boolean;
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否允许密码为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许使用空白密码;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    ///<summary>
    ///  获取或设置允许的连接字符串。
    ///</summary>
    ///<returns>
    ///  允许的连接字符串。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  标识是否由连接字符串参数的列表标识 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" />
    ///  属性是允许的唯一连接字符串参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  值之一。
    ///</returns>
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    ///<summary>
    ///  获取或设置允许或禁止使用的字符串参数的连接。
    ///</summary>
    ///<returns>
    ///  一个或多个连接字符串参数，允许或禁止使用。
    ///</returns>
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDBDataPermissionAttribute = class(TDNGenericImport<DNDBDataPermissionAttributeClass, DNDBDataPermissionAttribute>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcPermissionAttributeClass = interface(DNDBDataPermissionAttributeClass)
  ['{C2475C12-F70B-5AA6-B5DE-E9F61E0AB0FE}']
  { constructors } 

    ///<summary>
    ///  使用其中一个 <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值初始化 <see cref="T:System.Data.Odbc.OdbcPermissionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="action">
    ///  一个 <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值，其表示可使用声明性安全执行的操作。
    ///</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNOdbcPermissionAttribute;

  end;

  ///<summary>
  ///  将安全操作相关联的自定义安全特性。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcPermissionAttribute')]
  DNOdbcPermissionAttribute = interface(DNDBDataPermissionAttribute)
  ['{2034B089-68FA-3C53-8361-F3E51773C4F0}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Data.Odbc.OdbcPermission" />
    ///  特性属性根据配置的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcPermission" />
    ///  对象。
    ///</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  标识是否该属性应序列化的连接字符串。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的连接字符串。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeConnectionString: Boolean;
    ///<summary>
    ///  标识是否特性应序列化键限制集合。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的一套键限制;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeKeyRestrictions: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否允许密码为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许使用空白密码;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    ///<summary>
    ///  获取或设置允许的连接字符串。
    ///</summary>
    ///<returns>
    ///  允许的连接字符串。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  标识是否由连接字符串参数的列表标识 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" />
    ///  属性是允许的唯一连接字符串参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  值之一。
    ///</returns>
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    ///<summary>
    ///  获取或设置允许或禁止使用的字符串参数的连接。
    ///</summary>
    ///<returns>
    ///  一个或多个连接字符串参数，允许或禁止使用。
    ///</returns>
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNOdbcPermissionAttribute = class(TDNGenericImport<DNOdbcPermissionAttributeClass, DNOdbcPermissionAttribute>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbPermissionAttributeClass = interface(DNDBDataPermissionAttributeClass)
  ['{78D7DFE9-B896-5239-BE82-7959B99DE1E2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbPermissionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="action">
    ///  一个 <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值，其表示可使用声明性安全执行的操作。
    ///</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNOleDbPermissionAttribute;

  end;

  ///<summary>
  ///  将安全操作相关联的自定义安全特性。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbPermissionAttribute')]
  DNOleDbPermissionAttribute = interface(DNDBDataPermissionAttribute)
  ['{F0645373-794E-3DE7-9A90-4EE727727087}']
  { getters & setters } 

    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbPermission" />
    ///  特性属性根据配置的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbPermission" />
    ///  对象。
    ///</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  标识是否该属性应序列化的连接字符串。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的连接字符串。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeConnectionString: Boolean;
    ///<summary>
    ///  标识是否特性应序列化键限制集合。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的一套键限制;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeKeyRestrictions: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置由逗号分隔字符串，包含支持的提供程序的列表。
    ///</summary>
    ///<returns>
    ///  受安全策略允许的提供程序的以逗号分隔列表。
    ///</returns>
    property Provider: string read get_Provider write set_Provider;
    ///<summary>
    ///  获取或设置一个值，该值指示是否允许密码为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许使用空白密码;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    ///<summary>
    ///  获取或设置允许的连接字符串。
    ///</summary>
    ///<returns>
    ///  允许的连接字符串。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  标识是否由连接字符串参数的列表标识 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" />
    ///  属性是允许的唯一连接字符串参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  值之一。
    ///</returns>
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    ///<summary>
    ///  获取或设置允许或禁止使用的字符串参数的连接。
    ///</summary>
    ///<returns>
    ///  一个或多个连接字符串参数，允许或禁止使用。
    ///</returns>
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNOleDbPermissionAttribute = class(TDNGenericImport<DNOleDbPermissionAttributeClass, DNOleDbPermissionAttribute>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientPermissionAttributeClass = interface(DNDBDataPermissionAttributeClass)
  ['{143373F6-EEE6-5A92-9153-388BEEB3034C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlClientPermissionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="action">
    ///  一个 <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值，其表示可使用声明性安全执行的操作。
    ///</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNSqlClientPermissionAttribute;

  end;

  ///<summary>
  ///  将安全操作相关联的自定义安全特性。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlClientPermissionAttribute')]
  DNSqlClientPermissionAttribute = interface(DNDBDataPermissionAttribute)
  ['{EA46FFE4-6AC7-312C-BC36-92B31D31AC4C}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  特性属性根据配置的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  对象。
    ///</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  标识是否该属性应序列化的连接字符串。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的连接字符串。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeConnectionString: Boolean;
    ///<summary>
    ///  标识是否特性应序列化键限制集合。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性应序列化的一套键限制;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeKeyRestrictions: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否允许密码为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许使用空白密码;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    ///<summary>
    ///  获取或设置允许的连接字符串。
    ///</summary>
    ///<returns>
    ///  允许的连接字符串。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  标识是否由连接字符串参数的列表标识 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" />
    ///  属性是允许的唯一连接字符串参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  值之一。
    ///</returns>
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    ///<summary>
    ///  获取或设置允许或禁止使用的字符串参数的连接。
    ///</summary>
    ///<returns>
    ///  一个或多个连接字符串参数，允许或禁止使用。
    ///</returns>
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlClientPermissionAttribute = class(TDNGenericImport<DNSqlClientPermissionAttributeClass, DNSqlClientPermissionAttribute>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlBulkCopyColumnMappingCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{4D06D991-7B4A-51D1-BE5B-A8F9E71C7FB8}']
  end;

  ///<summary>
  ///  从 <see cref="T:System.Collections.CollectionBase" />
  ///  继承的 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlBulkCopyColumnMappingCollection')]
  DNSqlBulkCopyColumnMappingCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{E2CBD700-9031-344B-8934-6C37381F90FF}']
  { getters & setters } 

    function get_Item(index: Int32): DNSqlBulkCopyColumnMapping;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否指定 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  集合中存在的对象。
    ///</summary>
    ///  <param name="value">
    ///  一个有效 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的映射存在于集合;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNSqlBulkCopyColumnMapping): Boolean;
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />
    ///  指向数组 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  开头的特定索引处的项。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  数组，表示从复制的元素的目标 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />
    ///  。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNSqlBulkCopyColumnMapping>; index: Int32);
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  对象。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  要搜索的对象。
    ///</param>
    ///<returns>
    ///  列映射或如果在集合中找不到列映射为-1 的从零开始的索引。
    ///</returns>
    function IndexOf(value: DNSqlBulkCopyColumnMapping): Int32;
    ///<summary>
    ///  指定将映射添加到 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />
    ///  。
    ///</summary>
    ///  <param name="bulkCopyColumnMapping"><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  对象，描述要添加到集合的映射。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  对象。
    ///</returns>
    function Add(bulkCopyColumnMapping: DNSqlBulkCopyColumnMapping): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  并将其添加到集合中，使用列名称来指定源和目标列。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  数据源中的源列的名称。
    ///</param>
    ///  <param name="destinationColumn">
    ///  目标表中的目标列的名称。
    ///</param>
    ///<returns>
    ///  列映射。
    ///</returns>
    function Add(sourceColumn: string; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  并将其添加到集合中，使用源列和目标列的字符串的序号。
    ///</summary>
    ///  <param name="sourceColumnIndex">
    ///  数据源中的源列的序号位置。
    ///</param>
    ///  <param name="destinationColumn">
    ///  目标表中的目标列的名称。
    ///</param>
    ///<returns>
    ///  列映射。
    ///</returns>
    function Add(sourceColumnIndex: Int32; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建一个新<see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  并将其添加到集合中，使用一个列名称来描述源列和是执行序号指定的目标列。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  数据源中的源列的名称。
    ///</param>
    ///  <param name="destinationColumnIndex">
    ///  目标表中的目标列的序号位置。
    ///</param>
    ///<returns>
    ///  列映射。
    ///</returns>
    function Add(sourceColumn: string; destinationColumnIndex: Int32): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  并将其添加到集合中，使用序号指定源和目标列。
    ///</summary>
    ///  <param name="sourceColumnIndex">
    ///  数据源中的源列的序号位置。
    ///</param>
    ///  <param name="destinationColumnIndex">
    ///  目标表中的目标列的序号位置。
    ///</param>
    ///<returns>
    ///  列映射。
    ///</returns>
    function Add(sourceColumnIndex: Int32; destinationColumnIndex: Int32): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  清除集合的内容。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  插入一个新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  中的位置的整数值 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />
    ///  在此处插入新 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  。
    ///</param>
    ///  <param name="value"><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  若要插入到集合中的对象。
    ///</param>
    procedure Insert(index: Int32; value: DNSqlBulkCopyColumnMapping);
    ///<summary>
    ///  移除指定 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  元素从 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  若要从集合中移除的对象。
    ///</param>
    procedure Remove(value: DNSqlBulkCopyColumnMapping);
    ///<summary>
    ///  从集合中移除指定索引处的映射。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  要从集合中移除对象。
    ///</param>
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSqlBulkCopyColumnMapping read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSqlBulkCopyColumnMappingCollection = class(TDNGenericImport<DNSqlBulkCopyColumnMappingCollectionClass, DNSqlBulkCopyColumnMappingCollection>) end;

  //-------------namespace: System.Data----------------
  DNPropertyCollectionClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{C85F27D1-0548-568C-B2DE-C2FA42369C7F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.PropertyCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPropertyCollection;

  end;

  ///<summary>
  ///  表示可添加到的属性的集合 <see cref="T:System.Data.DataColumn" />
  ///  , ，<see cref="T:System.Data.DataSet" />
  ///  , ，或 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.PropertyCollection')]
  DNPropertyCollection = interface(DDN.mscorlib.DNHashtable)
  ['{AFC091BB-C65A-3D7B-B411-9FE3C18EFA6A}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.PropertyCollection" />
    ///  对象的浅表副本。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Object" />
    ///  , 的浅表副本 <see cref="T:System.Data.PropertyCollection" />
    ///  对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure Clear;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNPropertyCollection = class(TDNGenericImport<DNPropertyCollectionClass, DNPropertyCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnClass = interface(DNObjectClass)
  ['{AA653357-C952-55EF-A2AB-F65D2563C1D9}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类作为字符串类型。
    ///</summary>
    {class} function init: DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类作为类型为字符串，使用指定的列名称。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    {class} function init(columnName: string): DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类使用指定的列名称和数据类型。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    ///  <param name="dataType">
    ///  支持 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  否 <paramref name="dataType" />
    ///  指定。
    ///</exception>
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType): DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类使用指定的名称、 数据类型和表达式。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    ///  <param name="dataType">
    ///  支持 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</param>
    ///  <param name="expr">
    ///  用来创建此列的表达式。
    ///  有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" />
    ///  属性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  否 <paramref name="dataType" />
    ///  指定。
    ///</exception>
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType; expr: string): DNDataColumn; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataColumn" />
    ///  类使用指定的名称、 数据类型、 表达式和值，该值确定列是否是一个属性。
    ///</summary>
    ///  <param name="columnName">
    ///  一个表示要创建的列的名称的字符串。
    ///  如果设置为 <see langword="null" />
    ///  或空字符串 ("")，添加到列集合时，将指定一个默认名称。
    ///</param>
    ///  <param name="dataType">
    ///  支持 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</param>
    ///  <param name="expr">
    ///  用来创建此列的表达式。
    ///  有关更多信息，请参见 <see cref="P:System.Data.DataColumn.Expression" />
    ///  属性。
    ///</param>
    ///  <param name="type"><see cref="T:System.Data.MappingType" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  否 <paramref name="dataType" />
    ///  指定。
    ///</exception>
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType; expr: string; &type: DNMappingType): DNDataColumn; overload;

  end;

  ///<summary>
  ///  表示架构中的列 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataColumn')]
  DNDataColumn = interface(DNObject)
  ['{7AE16284-BC54-3D58-B276-B5B4D6D65157}']
  { getters & setters } 

    function get_AllowDBNull: Boolean;
    procedure set_AllowDBNull(value: Boolean);
    function get_AutoIncrement: Boolean;
    procedure set_AutoIncrement(value: Boolean);
    function get_AutoIncrementSeed: Int64;
    procedure set_AutoIncrementSeed(value: Int64);
    function get_AutoIncrementStep: Int64;
    procedure set_AutoIncrementStep(value: Int64);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_ColumnName: string;
    procedure set_ColumnName(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_DataType: DDN.mscorlib.DNType;
    procedure set_DataType(value: DDN.mscorlib.DNType);
    function get_DateTimeMode: DNDataSetDateTime;
    procedure set_DateTimeMode(value: DNDataSetDateTime);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Ordinal: Int32;
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Table: DNDataTable;
    function get_Unique: Boolean;
    procedure set_Unique(value: Boolean);
    function get_ColumnMapping: DNMappingType;
    procedure set_ColumnMapping(value: DNMappingType);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  更改序号或位置 <see cref="T:System.Data.DataColumn" />
    ///  到指定的序号或位置。
    ///</summary>
    ///  <param name="ordinal">
    ///  指定的序号。
    ///</param>
    procedure SetOrdinal(ordinal: Int32);
    ///<summary>
    ///  获取 <see cref="P:System.Data.DataColumn.Expression" />
    ///  列，如果存在。
    ///</summary>
    ///<returns><see cref="P:System.Data.DataColumn.Expression" />
    ///  值，此属性是否设置; 否则为 <see cref="P:System.Data.DataColumn.ColumnName" />
    ///  属性。
    ///</returns>
    function ToString: string;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否允许空值在本专栏中属于表的行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许 null 值的值;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AllowDBNull: Boolean read get_AllowDBNull write set_AllowDBNull;
    ///<summary>
    ///  获取或设置一个值，指示该列是否自动递增的新行添加到表中列的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果列的值递增自动保存功能。，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  列是计算所得的列。
    ///</exception>
    property AutoIncrement: Boolean read get_AutoIncrement write set_AutoIncrement;
    ///<summary>
    ///  获取或设置包含的列的起始值及其 <see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///  默认值为 0。
    ///</summary>
    ///<returns>
    ///  起始值为 <see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  特征。
    ///</returns>
    property AutoIncrementSeed: Int64 read get_AutoIncrementSeed write set_AutoIncrementSeed;
    ///<summary>
    ///  获取或设置某一列使用的增量其 <see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns>
    ///  列的值自动递增的编号。
    ///  默认值为 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值为零。
    ///</exception>
    property AutoIncrementStep: Int64 read get_AutoIncrementStep write set_AutoIncrementStep;
    ///<summary>
    ///  获取或设置列标题。
    ///</summary>
    ///<returns>
    ///  列的标题。
    ///  如果未设置，则返回 <see cref="P:System.Data.DataColumn.ColumnName" />
    ///  值。
    ///</returns>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  获取或设置中的列的名称 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  列的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为 <see langword="null" />
    ///  或为空字符串和列属于一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的列。
    ///  名称比较不区分大小写。
    ///</exception>
    property ColumnName: string read get_ColumnName write set_ColumnName;
    ///<summary>
    ///  获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 前缀 <see cref="T:System.Data.DataTable" />
    ///  命名空间。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置列中存储的数据类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  对象，表示列的数据类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  已在列存储的数据。
    ///</exception>
    property DataType: DDN.mscorlib.DNType read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置 <see langword="DateTimeMode" />
    ///  的列。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataSetDateTime" />
    ///  为指定的列。
    ///</returns>
    property DateTimeMode: DNDataSetDateTime read get_DateTimeMode write set_DateTimeMode;
    ///<summary>
    ///  获取或设置列的默认值，则在创建新行。
    ///</summary>
    ///<returns>
    ///  适合于列的值 <see cref="P:System.Data.DataColumn.DataType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  当添加行时，默认值不是列的数据类型的实例。
    ///</exception>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    ///<summary>
    ///  获取或设置用来筛选行、 计算列中的值或创建聚合列的表达式。
    ///</summary>
    ///<returns>
    ///  一个表达式来计算列的值或创建聚合列。
    ///  一个表达式，表达式的返回类型由 <see cref="P:System.Data.DataColumn.DataType" />
    ///  的列。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Data.DataColumn.AutoIncrement" />
    ///  或 <see cref="P:System.Data.DataColumn.Unique" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  当使用 CONVERT 函数时，表达式的计算结果为一个字符串，但该字符串不包含可以转换为类型参数中的表示形式。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  当使用 CONVERT 函数时，所请求的转换不可能。
    ///  请参阅下列部分获取有关可能的强制转换详细信息中的转换函数。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  当您使用 SUBSTRING 函数时，start 参数超出了范围。
    ///  - 或 -
    ///  当您使用 SUBSTRING 函数时，长度参数超出了范围。
    ///</exception><exception cref="T:System.Exception">
    ///  当您使用 LEN 函数或 TRIM 函数时，该表达式计算结果不为字符串。
    ///  这包括表达式的计算结果为 <see cref="T:System.Char" />
    ///  。
    ///</exception>
    property Expression: string read get_Expression write set_Expression;
    ///<summary>
    ///  获取与相关联的自定义用户信息的集合 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  的自定义信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    ///<summary>
    ///  获取或设置文本列的最大长度。
    ///</summary>
    ///<returns>
    ///  以字符为单位的列的最大长度。
    ///  如果该列具有没有最大长度，值为-1 （默认值）。
    ///</returns>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>
    ///  获取或设置的命名空间 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名空间 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  命名空间已有数据。
    ///</exception>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取 （从零开始） 中的列的位置 <see cref="T:System.Data.DataColumnCollection" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  列的位置。
    ///  如果列不是某个集合的成员，则获取-1。
    ///</returns>
    property Ordinal: Int32 read get_Ordinal;
    ///<summary>
    ///  获取或设置一个值，指示行已添加到表时，就立即列是否允许的更改。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果列只读的;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性设置为 <see langword="false" />
    ///  计算所得的列。
    ///</exception>
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  列属于对。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  ， <see cref="T:System.Data.DataColumn" />
    ///  属于。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  获取或设置一个值，该值指示是否必须唯一列的每个行中的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果值必须是唯一的。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  列是计算的列。
    ///</exception>
    property Unique: Boolean read get_Unique write set_Unique;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.MappingType" />
    ///  的列。
    ///</summary>
    ///<returns><see cref="T:System.Data.MappingType" />
    ///  值之一。
    ///</returns>
    property ColumnMapping: DNMappingType read get_ColumnMapping write set_ColumnMapping;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataColumn = class(TDNGenericImport<DNDataColumnClass, DNDataColumn>) end;

  //-------------namespace: System.Data----------------
  DNDataSetClass = interface(DNObjectClass)
  ['{5BB739BB-F730-568F-B238-22587AD46860}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataSet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataSet; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataSet" />
    ///  具有给定名称的类。
    ///</summary>
    ///  <param name="dataSetName"><see cref="T:System.Data.DataSet" />
    ///  的名称。
    ///</param>
    {class} function init(dataSetName: string): DNDataSet; overload;

  { static methods } 

    ///<summary>
    ///  获得一份 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  为数据集。
    ///</summary>
    ///  <param name="schemaSet">
    ///  指定的架构集中。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  的副本。
    ///</returns>
    {class} function GetDataSetSchema(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlSchemaComplexType;

  end;

  ///<summary>
  ///  表示数据在内存中的缓存。
  ///</summary>
  [DNTypeName('System.Data.DataSet')]
  DNDataSet = interface(DNObject)
  ['{6E3DF7A0-377F-3A21-BB7C-C4C37F17758D}']
  { getters & setters } 

    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_SchemaSerializationMode: DNSchemaSerializationMode;
    procedure set_SchemaSerializationMode(value: DNSchemaSerializationMode);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_DefaultViewManager: DNDataViewManager;
    function get_EnforceConstraints: Boolean;
    procedure set_EnforceConstraints(value: Boolean);
    function get_DataSetName: string;
    procedure set_DataSetName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_IsInitialized: Boolean;
    function get_Locale: DDN.mscorlib.DNCultureInfo;
    procedure set_Locale(value: DDN.mscorlib.DNCultureInfo);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Relations: DNDataRelationCollection;
    function get_Tables: DNDataTableCollection;
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_MergeFailed(value: DNMergeFailedEventHandler);
    procedure remove_MergeFailed(value: DNMergeFailedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存与 <see cref="T:System.Data.DataSet" />
    ///  关联的序列化数据。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含与 <see cref="T:System.Data.DataSet" />
    ///  关联的序列化流的源和目标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  对此所做的所有更改都提交 <see cref="T:System.Data.DataSet" />
    ///  加载以来或自上次以来 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure AcceptChanges;
    ///<summary>
    ///  开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  初始化发生在运行时。
    ///</summary>
    procedure BeginInit;
    ///<summary>
    ///  结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />
    ///  的初始化。
    ///  初始化发生在运行时。
    ///</summary>
    procedure EndInit;
    ///<summary>
    ///  清除 <see cref="T:System.Data.DataSet" />
    ///  的所有表中删除所有行的任何数据。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  将复制的结构 <see cref="T:System.Data.DataSet" />
    ///  , ，包括所有 <see cref="T:System.Data.DataTable" />
    ///  架构、 关系和约束。
    ///  不复制任何数据。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataSet" />
    ///  具有相同的架构与当前 <see cref="T:System.Data.DataSet" />
    ///  , ，但是不包含任何数据。
    ///</returns>
    function Clone: DNDataSet;
    ///<summary>
    ///  将结构和数据复制此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataSet" />
    ///  具有相同的结构 （表架构、 关系和约束） 和数据格式设置为这 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  如果已创建这些类的子类，该副本也将属于相同的子类。
    ///</returns>
    function Copy: DNDataSet;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataSet" />
    ///  包含自加载后，或自从对它所做的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    ///<returns>
    ///  一份从此更改 <see cref="T:System.Data.DataSet" />
    ///  ，可能会有合并回使用在其上及更高版本所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  。
    ///  如果找到任何更改的行，该方法返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetChanges: DNDataSet; overload;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataSet" />
    ///  包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />
    ///  。
    ///</summary>
    ///  <param name="rowStates"><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  筛选的副本 <see cref="T:System.Data.DataSet" />
    ///  ，可能会有合并回使用它，并随后所执行的操作 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  。
    ///  如果所需的任何行 <see cref="T:System.Data.DataRowState" />
    ///  找到，则此方法返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetChanges(rowStates: DNDataRowState): DNDataSet; overload;
    ///<summary>
    ///  返回的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，它表示形式中存储的数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    function GetXml: string;
    ///<summary>
    ///  返回的 XML 表示形式中存储的数据的 XML 架构 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串，它 XML 架构的 XML 表示形式中存储的数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    function GetXmlSchema: string;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" />
    ///  已经更改，包括新的、 已删除，或已修改的行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已更改; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasChanges: Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" />
    ///  已经更改，包括新的、 已删除，或已修改的行，通过筛选 <see cref="T:System.Data.DataRowState" />
    ///  。
    ///</summary>
    ///  <param name="rowStates"><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataSet" />
    ///  已更改; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasChanges(rowStates: DNDataRowState): Boolean; overload;
    ///<summary>
    ///  将 XML 架构应用从指定 <see cref="T:System.Xml.XmlReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XMLReader" />
    ///  从中读取该架构。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    procedure InferXmlSchema(reader: DDN.System.Xml.DNXmlReader; nsArray: TArray<string>); overload;
    ///<summary>
    ///  将 XML 架构应用从指定 <see cref="T:System.IO.Stream" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see langword="Stream" />
    ///  从中读取该架构。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    procedure InferXmlSchema(stream: DDN.mscorlib.DNStream; nsArray: TArray<string>); overload;
    ///<summary>
    ///  将 XML 架构应用从指定 <see cref="T:System.IO.TextReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="TextReader" />
    ///  从中读取该架构。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    procedure InferXmlSchema(reader: DDN.mscorlib.DNTextReader; nsArray: TArray<string>); overload;
    ///<summary>
    ///  将 XML 架构应用从指定文件 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  从中读取该架构 （包括路径） 的文件的名称。
    ///</param>
    ///  <param name="nsArray">
    ///  要从架构推断中排除的命名空间统一资源标识符 (URI) 字符串的数组。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    procedure InferXmlSchema(fileName: string; nsArray: TArray<string>); overload;
    ///<summary>
    ///  从指定读取的 XML 架构 <see cref="T:System.Xml.XmlReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取。
    ///</param>
    procedure ReadXmlSchema(reader: DDN.System.Xml.DNXmlReader); overload;
    ///<summary>
    ///  从指定读取的 XML 架构 <see cref="T:System.IO.Stream" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  从中进行读取。
    ///</param>
    procedure ReadXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  从指定读取的 XML 架构 <see cref="T:System.IO.TextReader" />
    ///  到 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  从中进行读取。
    ///</param>
    procedure ReadXmlSchema(reader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  从到指定的文件中读取 XML 架构 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 从中进行读取。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    procedure ReadXmlSchema(fileName: string); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Data.DataSet" />
    ///  作为一个 XML 架构写入指定的结构 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  用来写入到的文件对象。
    ///</param>
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Data.DataSet" />
    ///  作为一个 XML 架构写入文件的结构。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 向其写入。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
    ///  。
    ///</exception>
    procedure WriteXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(fileName: string; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    ///<summary>
    ///  将 <see cref="T:System.Data.DataSet" />
    ///  结构作为 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="writer">
    ///  要进行写入的 <see cref="T:System.IO.TextWriter" />
    ///  对象。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Data.DataSet" />
    ///  结构作为 XML 架构写入 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="writer">
    ///  要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter); overload;
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.System.Xml.DNXmlReader): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个对象，派生自 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(stream: DDN.mscorlib.DNStream): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="TextReader" />
    ///  从中进行读取的架构和数据。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.mscorlib.DNTextReader): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  从中进行读取文件名 （包括路径）。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  从中进行读取。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.System.Xml.DNXmlReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  从中进行读取。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(stream: DDN.mscorlib.DNStream; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  从中进行读取。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.mscorlib.DNTextReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />
    ///  使用指定的文件和 <see cref="T:System.Data.XmlReadMode" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  从中进行读取文件名 （包括路径）。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlReadMode" />
    ///  值之一。
    ///</param>
    ///<returns><see langword="XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />
    ///  。
    ///</exception>
    function ReadXml(fileName: string; mode: DNXmlReadMode): DNXmlReadMode; overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  用来写入到的文件对象。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  要写入的对象。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用其进行写。
    ///</param>
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter); overload;
    ///<summary>
    ///  当前数据写入 <see cref="T:System.Data.DataSet" />
    ///  写入指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 向其写入。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
    ///  。
    ///</exception>
    procedure WriteXml(fileName: string); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  用来写入到的文件对象。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  一个 <see cref="T:System.IO.TextWriter" />
    ///  用来写入的文档对象。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用其进行写。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataSet" />
    ///  写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  该文件的文件名 （包括路径） 向其写入。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException"><see cref="T:System.Security.Permissions.FileIOPermission" />
    ///  未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />
    ///  。
    ///</exception>
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataSet" />
    ///  到当前及其架构 <see langword="DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see langword="DataSet" />
    ///  将合并其数据和架构。
    ///</param>
    ///<exception cref="T:System.Data.ConstraintException">
    ///  不能启用一个或多个约束。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="dataSet" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(dataSet: DNDataSet); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataSet" />
    ///  到当前及其架构 <see langword="DataSet" />
    ///  , 、 保留或放弃这中的任何更改 <see langword="DataSet" />
    ///  根据给定的参数。
    ///</summary>
    ///  <param name="dataSet"><see langword="DataSet" />
    ///  将合并其数据和架构。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  若要保留在当前更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataSet" />
    ///  且其架构与当前 <see langword="DataSet" />
    ///  , 、 保留或放弃更改在当前 <see langword="DataSet" />
    ///  并处理根据给定的参数不兼容的架构。
    ///</summary>
    ///  <param name="dataSet"><see langword="DataSet" />
    ///  将合并其数据和架构。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  若要保留在当前更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dataSet" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  到当前及其架构 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  将合并其数据和架构。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="table" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(table: DNDataTable); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  到当前及其架构 <see langword="DataSet" />
    ///  , 、 保留或放弃更改 <see langword="DataSet" />
    ///  并处理根据给定的参数不兼容的架构。
    ///</summary>
    ///  <param name="table"><see langword="DataTable" />
    ///  将合并其数据和架构。
    ///</param>
    ///  <param name="preserveChanges"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///  <param name="missingSchemaAction"><see langword="true" />
    ///  若要保留中的更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dataSet" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  数组合并 <see cref="T:System.Data.DataRow" />
    ///  对象发送到当前 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="rows">
    ///  数组 <see langword="DataRow" />
    ///  对象合并到 <see langword="DataSet" />
    ///  。
    ///</param>
    procedure Merge(rows: TArray<DNDataRow>); overload;
    ///<summary>
    ///  数组合并 <see cref="T:System.Data.DataRow" />
    ///  对象发送到当前 <see cref="T:System.Data.DataSet" />
    ///  , 、 保留或放弃更改 <see langword="DataSet" />
    ///  并处理根据给定的参数不兼容的架构。
    ///</summary>
    ///  <param name="rows">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  对象合并到 <see langword="DataSet" />
    ///  。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  若要保留中的更改 <see langword="DataSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    procedure Merge(rows: TArray<DNDataRow>; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  回滚对所做的所有更改 <see cref="T:System.Data.DataSet" />
    ///  创建以来，它，或自从上次 <see cref="M:System.Data.DataSet.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure RejectChanges;
    ///<summary>
    ///  清除所有表并删除所有关系、 外部约束和表从 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  子类应重写 <see cref="M:System.Data.DataSet.Reset" />
    ///  还原 <see cref="T:System.Data.DataSet" />
    ///  到其原始状态。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataSet" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  , ，使用数组 <see cref="T:System.Data.DataTable" />
    ///  实例，以提供架构和命名空间的信息。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  实例内 <see cref="T:System.Data.DataSet" />
    ///  组合在一起共享相同的主键的传入行。
    ///</param>
    ///  <param name="errorHandler">
    ///  一个 <see cref="T:System.Data.FillErrorEventHandler" />
    ///  加载数据时出错时要调用委托。
    ///</param>
    ///  <param name="tables">
    ///  一个数组 <see cref="T:System.Data.DataTable" />
    ///  情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
    ///  方法检索名称和命名空间的信息。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler; tables: TArray<DNDataTable>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataSet" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  , ，使用数组 <see cref="T:System.Data.DataTable" />
    ///  实例，以提供架构和命名空间的信息。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  实例内 <see cref="T:System.Data.DataSet" />
    ///  组合在一起共享相同的主键的传入行。
    ///</param>
    ///  <param name="tables">
    ///  一个数组 <see cref="T:System.Data.DataTable" />
    ///  情况下的，从其 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
    ///  方法检索名称和命名空间的信息。
    ///  每个表必须是属于 <see cref="T:System.Data.DataTableCollection" />
    ///  包含由此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<DNDataTable>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataSet" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  , ，使用一个字符串数组提供中的表名称，从而 <see langword="DataSet" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  实例内 <see langword="DataSet" />
    ///  组合在一起共享相同的主键的传入行。
    ///</param>
    ///  <param name="tables">
    ///  一个字符串，从该数组 <see langword="Load" />
    ///  方法检索表名称信息。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<string>); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTableReader" />
    ///  带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />
    ///  , ，请在表中出现在相同序列 <see cref="P:System.Data.DataSet.Tables" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" />
    ///  源中包含的实例 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    function CreateDataReader: DNDataTableReader; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTableReader" />
    ///  带有每个设置的一个结果 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTables">
    ///  要在中返回 DataTables 提供结果的顺序的数组集 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个结果集，对应于 <see cref="T:System.Data.DataTable" />
    ///  源中包含的实例 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  返回的结果集是按指定顺序 <paramref name="dataTables" />
    ///  参数。
    ///</returns>
    function CreateDataReader(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SerializationFormat" />
    ///  为 <see cref="T:System.Data.DataSet" />
    ///  远程处理期间使用。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SerializationFormat" />
    ///  对象。
    ///</returns>
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SchemaSerializationMode" />
    ///  为 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  获取或设置 <see cref="T:System.Data.SchemaSerializationMode" />
    ///  为 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property SchemaSerializationMode: DNSchemaSerializationMode read get_SchemaSerializationMode write set_SchemaSerializationMode;
    ///<summary>
    ///  获取或设置一个值，该值指示是否中的字符串比较 <see cref="T:System.Data.DataTable" />
    ///  对象是区分大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果字符串比较是区分大小写。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  获取中包含的数据的自定义视图 <see cref="T:System.Data.DataSet" />
    ///  以允许筛选、 搜索和导航使用自定义 <see cref="T:System.Data.DataViewManager" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataViewManager" />
    ///  对象。
    ///</returns>
    property DefaultViewManager: DNDataViewManager read get_DefaultViewManager;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在尝试任何更新操作时遵循约束规则。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果强制执行规则;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.ConstraintException">
    ///  一个或多个约束不能强制实施。
    ///</exception>
    property EnforceConstraints: Boolean read get_EnforceConstraints write set_EnforceConstraints;
    ///<summary>
    ///  获取或设置的当前名称 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataSet" />
    ///  的名称。
    ///</returns>
    property DataSetName: string read get_DataSetName write set_DataSetName;
    ///<summary>
    ///  获取或设置的命名空间 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名空间 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  命名空间已有数据。
    ///</exception>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置 XML 前缀的命名空间别名 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 前缀 <see cref="T:System.Data.DataSet" />
    ///  命名空间。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取与相关联的自定义的用户信息的集合 <see langword="DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  与自定义用户的所有信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    ///<summary>
    ///  获取一个值，该值指示在任何中是否有错误 <see cref="T:System.Data.DataTable" />
    ///  对象在此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果任何表中包含错误，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasErrors: Boolean read get_HasErrors;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataSet" />
    ///  初始化。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示组件已完成初始化，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInitialized: Boolean read get_IsInitialized;
    ///<summary>
    ///  获取或设置用来比较字符串表中的区域设置信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，其中包含有关用户的计算机区域设置的数据。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Locale: DDN.mscorlib.DNCultureInfo read get_Locale write set_Locale;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.ComponentModel.ISite" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.ComponentModel.ISite" />
    ///  的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property Site: DDN.System.DNISite read get_Site write set_Site;
    ///<summary>
    ///  获取关系链接表，并允许导航从父表到子表的集合。
    ///</summary>
    ///<returns>
    ///  一个包含 <see cref="T:System.Data.DataRelationCollection" />
    ///  对象集合的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" />
    ///  存在的对象。
    ///</returns>
    property Relations: DNDataRelationCollection read get_Relations;
    ///<summary>
    ///  获取集合中包含的表 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTableCollection" />
    ///  包含由此 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataTable" />
    ///  存在的对象。
    ///</returns>
    property Tables: DNDataTableCollection read get_Tables;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataSet = class(TDNGenericImport<DNDataSetClass, DNDataSet>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClass = interface(DNObjectClass)
  ['{00EA467F-E9AF-5824-8F4E-345226A80AD5}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTable" />
    ///  不带任何参数的类。
    ///</summary>
    {class} function init: DNDataTable; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTable" />
    ///  初始化具有指定的表名称。
    ///</summary>
    ///  <param name="tableName">
    ///  要为表提供的名称。
    ///  如果 <paramref name="tableName" />
    ///  是 <see langword="null" />
    ///  也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />
    ///  。
    ///</param>
    {class} function init(tableName: string): DNDataTable; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTable" />
    ///  类使用指定的表名和命名空间。
    ///</summary>
    ///  <param name="tableName">
    ///  要为表提供的名称。
    ///  如果 <paramref name="tableName" />
    ///  是 <see langword="null" />
    ///  也不为空字符串，默认名称是在添加到 <see cref="T:System.Data.DataTableCollection" />
    ///  。
    ///</param>
    ///  <param name="tableNamespace">
    ///  XML 表示形式中存储的数据的命名空间 <see langword="DataTable" />
    ///  。
    ///</param>
    {class} function init(tableName: string; tableNamespace: string): DNDataTable; overload;

  { static methods } 

    ///<summary>
    ///  此方法返回 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  实例，包含 Web 服务描述语言 (WSDL) 描述 <see cref="T:System.Data.DataTable" />
    ///  为 Web 服务。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  实例。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  实例。
    ///</returns>
    {class} function GetDataTableSchema(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlSchemaComplexType;

  end;

  ///<summary>
  ///  表示内存中数据的一个表。
  ///</summary>
  [DNTypeName('System.Data.DataTable')]
  DNDataTable = interface(DNObject)
  ['{56839C77-582D-3A29-AEB5-7011A8335593}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_ChildRelations: DNDataRelationCollection;
    function get_Columns: DNDataColumnCollection;
    function get_Constraints: DNConstraintCollection;
    function get_DataSet: DNDataSet;
    function get_DefaultView: DNDataView;
    function get_DisplayExpression: string;
    procedure set_DisplayExpression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_Locale: DDN.mscorlib.DNCultureInfo;
    procedure set_Locale(value: DDN.mscorlib.DNCultureInfo);
    function get_MinimumCapacity: Int32;
    procedure set_MinimumCapacity(value: Int32);
    function get_ParentRelations: DNDataRelationCollection;
    function get_PrimaryKey: TArray<DNDataColumn>;
    procedure set_PrimaryKey(value: TArray<DNDataColumn>);
    function get_Rows: DNDataRowCollection;
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure add_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_RowChanged(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanged(value: DNDataRowChangeEventHandler);
    procedure add_RowChanging(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanging(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure add_TableClearing(value: DNDataTableClearEventHandler);
    procedure remove_TableClearing(value: DNDataTableClearEventHandler);
    procedure add_TableCleared(value: DNDataTableClearEventHandler);
    procedure remove_TableCleared(value: DNDataTableClearEventHandler);
    procedure add_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure remove_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  使用序列化所需的数据填充序列化信息对象 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象，其中包含与关联的序列化的数据 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象，其中包含的源和目标与相关联的序列化流 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  初始化发生在运行时。
    ///</summary>
    procedure BeginInit;
    ///<summary>
    ///  结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataTable" />
    ///  的初始化。
    ///  初始化发生在运行时。
    ///</summary>
    procedure EndInit;
    ///<summary>
    ///  提交自上次对此表所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure AcceptChanges;
    ///<summary>
    ///  克隆的结构 <see cref="T:System.Data.DataTable" />
    ///  , ，包括所有 <see cref="T:System.Data.DataTable" />
    ///  架构和约束。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  具有相同的架构与当前 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function Clone: DNDataTable;
    ///<summary>
    ///  将结构和数据复制此 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  具有相同的结构 （表架构和约束） 和数据格式设置为这 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  如果派生的类，该副本也将属于相同的派生类。
    ///<see cref="M:System.Data.DataTable.Copy" />
    ///  创建一个新 <see cref="T:System.Data.DataTable" />
    ///  具有相同的结构和数据作为原始 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  若要复制到新结构 <see cref="T:System.Data.DataTable" />
    ///  , ，但不是数据，使用 <see cref="M:System.Data.DataTable.Clone" />
    ///  。
    ///</returns>
    function Copy: DNDataTable;
    ///<summary>
    ///  清除 <see cref="T:System.Data.DataTable" />
    ///  的所有数据。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  计算传递的筛选条件的当前行上给定的表达式。
    ///</summary>
    ///  <param name="expression">
    ///  要计算的表达式。
    ///</param>
    ///  <param name="filter">
    ///  筛选器来限制在表达式中计算的行。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  , ，设置为计算的结果。
    ///  如果表达式的计算结果为 null，则返回值将 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</returns>
    function Compute(expression: string; filter: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataTable" />
    ///  包含自加载后对其进行的所有更改或 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    ///<returns>
    ///  一份从此更改 <see cref="T:System.Data.DataTable" />
    ///  , ，或 <see langword="null" />
    ///  如果找不到任何更改。
    ///</returns>
    function GetChanges: DNDataTable; overload;
    ///<summary>
    ///  获得一份 <see cref="T:System.Data.DataTable" />
    ///  包含自上次加载或自从对其进行的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  被调用，通过筛选出 <see cref="T:System.Data.DataRowState" />
    ///  。
    ///</summary>
    ///  <param name="rowStates"><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  筛选的副本 <see cref="T:System.Data.DataTable" />
    ///  ，可能会有合并回它，及更高版本所执行的操作 <see cref="T:System.Data.DataTable" />
    ///  使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
    ///  。
    ///  如果所需的任何行 <see cref="T:System.Data.DataRowState" />
    ///  找到，则此方法返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetChanges(rowStates: DNDataRowState): DNDataTable; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Data.DataRow" />
    ///  包含错误的对象。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  具有错误的对象。
    ///</returns>
    function GetErrors: TArray<DNDataRow>;
    ///<summary>
    ///  副本 <see cref="T:System.Data.DataRow" />
    ///  到 <see cref="T:System.Data.DataTable" />
    ///  , ，保留任何属性的设置，以及原始值和当前值。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  要导入。
    ///</param>
    procedure ImportRow(row: DNDataRow);
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.DataRow" />
    ///  具有与表相同的架构。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  相同的架构与 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function NewRow: DNDataRow;
    ///<summary>
    ///  回滚对表自加载后或从上次所做的所有更改 <see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  调用。
    ///</summary>
    procedure RejectChanges;
    ///<summary>
    ///  重置 <see cref="T:System.Data.DataTable" />
    ///  到其原始状态。
    ///  重置中删除所有数据、 索引、 关系和表的列。
    ///  如果数据集包含一个数据表，该表表重置之后仍可将数据集的一部分。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    function Select: TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  与筛选条件匹配的对象。
    ///</summary>
    ///  <param name="filterExpression">
    ///  要用于筛选的行的条件。
    ///  有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    function Select(filterExpression: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  相匹配的筛选条件，在指定的排序顺序中的对象。
    ///</summary>
    ///  <param name="filterExpression">
    ///  要用于筛选的行的条件。
    ///  有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
    ///</param>
    ///  <param name="sort">
    ///  一个字符串，指定的列和排序方向。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  匹配筛选器表达式的对象。
    ///</returns>
    function Select(filterExpression: string; sort: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取所有的数组 <see cref="T:System.Data.DataRow" />
    ///  排序顺序的筛选器匹配指定的状态相匹配的对象。
    ///</summary>
    ///  <param name="filterExpression">
    ///  要用于筛选的行的条件。
    ///  有关如何来筛选行的示例，请参阅 DataView RowFilter Syntax [C#]。
    ///</param>
    ///  <param name="sort">
    ///  一个字符串，指定的列和排序方向。
    ///</param>
    ///  <param name="recordStates"><see cref="T:System.Data.DataViewRowState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    function Select(filterExpression: string; sort: string; recordStates: DNDataViewRowState): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取 <see cref="P:System.Data.DataTable.TableName" />
    ///  和 <see cref="P:System.Data.DataTable.DisplayExpression" />
    ///  , ，如果有另一个用作的串联字符串。
    ///</summary>
    ///<returns>
    ///  组成的字符串 <see cref="P:System.Data.DataTable.TableName" />
    ///  和 <see cref="P:System.Data.DataTable.DisplayExpression" />
    ///  值。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  加载数据时关闭通知、 索引维护和约束。
    ///</summary>
    procedure BeginLoadData;
    ///<summary>
    ///  在加载数据后打开通知、 索引维护和约束。
    ///</summary>
    procedure EndLoadData;
    ///<summary>
    ///  查找并更新特定行。
    ///  如果未不找到任何匹配的行，使用给定的值创建一个新行。
    ///</summary>
    ///  <param name="values">
    ///  用于创建新行的值的数组。
    ///</param>
    ///  <param name="fAcceptChanges"><see langword="true" />
    ///  若要接受更改，则否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该数组将大于表中的列数。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  值不匹配其各自的列类型。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  添加行使约束无效。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  正在尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    function LoadDataRow(values: TArray<DDN.mscorlib.DNObject>; fAcceptChanges: Boolean): DNDataRow; overload;
    ///<summary>
    ///  查找并更新特定行。
    ///  如果未不找到任何匹配的行，使用给定的值创建一个新行。
    ///</summary>
    ///  <param name="values">
    ///  用于创建新行的值的数组。
    ///</param>
    ///  <param name="loadOption">
    ///  用于确定如何将数组值应用于现有行中的相应值。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</returns>
    function LoadDataRow(values: TArray<DDN.mscorlib.DNObject>; loadOption: DNLoadOption): DNDataRow; overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  与当前 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  要与当前合并 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    procedure Merge(table: DNDataTable); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  与当前 <see langword="DataTable" />
    ///  , ，，该值指示是否保留在当前更改 <see langword="DataTable" />
    ///  。
    ///</summary>
    ///  <param name="table"><see langword="DataTable" />
    ///  要与当前合并 <see langword="DataTable" />
    ///  。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  , 保留在当前更改 <see langword="DataTable" />
    ///  ; 否则为 <see langword="false" />
    ///  。<see langword="" />
    ///</param>
    procedure Merge(table: DNDataTable; preserveChanges: Boolean); overload;
    ///<summary>
    ///  合并指定 <see cref="T:System.Data.DataTable" />
    ///  与当前 <see langword="DataTable" />
    ///  , ，，该值指示是否保留更改，以及如何处理缺失的架构，在当前 <see langword="DataTable" />
    ///  。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  要与当前合并 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="preserveChanges"><see langword="true" />
    ///  , 保留在当前更改 <see cref="T:System.Data.DataTable" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataTable" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///  如果 <see cref="T:System.Data.DataTable" />
    ///  已经包含行，从数据源传入的数据将与现有行合并。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  提供结果集。
    ///</param>
    procedure Load(reader: DNIDataReader); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataTable" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  。
    ///  如果 <see langword="DataTable" />
    ///  已经包含行，与现有行的值根据合并来自数据源的传入数据 <paramref name="loadOption" />
    ///  参数。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Data.IDataReader" />
    ///  ，它提供一个或多个结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  与共享相同的主键的传入行组合在一起。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Data.DataTable" />
    ///  使用所提供的数据源中的值 <see cref="T:System.Data.IDataReader" />
    ///  使用错误处理委托。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.IDataReader" />
    ///  提供结果集。
    ///</param>
    ///  <param name="loadOption">
    ///  取值范围为 <see cref="T:System.Data.LoadOption" />
    ///  枚举，指示如何中的现有行 <see cref="T:System.Data.DataTable" />
    ///  与共享相同的主键的传入行组合在一起。
    ///</param>
    ///  <param name="errorHandler">
    ///  一个 <see cref="T:System.Data.FillErrorEventHandler" />
    ///  加载数据时出错时要调用委托。
    ///</param>
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTableReader" />
    ///  对应于在此数据 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个结果集，对应于源 <see cref="T:System.Data.DataTable" />
    ///  实例。
    ///</returns>
    function CreateDataReader: DNDataTableReader;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.IO.Stream" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  通过指定的 <see cref="T:System.IO.TextWriter" />
    ///  ，按 XML 形式编写 <see cref="T:System.Data.DataTable" />
    ///  的当前内容。
    ///</summary>
    ///  <param name="writer">
    ///  用于写入内容的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  通过指定的 <see cref="T:System.IO.TextWriter" />
    ///  ，按 XML 形式编写 <see cref="T:System.Data.DataTable" />
    ///  的当前内容。
    ///  若要保存的数据的表及其所有子代，设置<paramref name="writeHierarchy" />
    ///  参数<see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  用于写入内容的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果<see langword="true" />
    ///  ，写入当前表及其所有子代的内容。
    ///  如果<see langword="false" />
    ///  （默认值），将当前表的数据写入。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用来写入的内容。
    ///</param>
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的 XML <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用来写入的内容。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的文件的 XML。
    ///</summary>
    ///  <param name="fileName">
    ///  要向其写入的 XML 数据文件。
    ///</param>
    procedure WriteXml(fileName: string); overload;
    ///<summary>
    ///  当前的内容写入 <see cref="T:System.Data.DataTable" />
    ///  为使用指定的文件的 XML。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  要向其写入的 XML 数据文件。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(fileName: string; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  写入指定的文件使用指定 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  数据将写入的流。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  数据将写入的文件的名称。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    ///<summary>
    ///  将当前数据和 （可选） 此架构中，为写 <see cref="T:System.Data.DataTable" />
    ///  使用指定的文件和 <see cref="T:System.Data.XmlWriteMode" />
    ///  。
    ///  编写该架构，请设置的值为 <paramref name="mode" />
    ///  参数 <see langword="WriteSchema" />
    ///  。
    ///  若要保存对表及其所有子代的数据，设置 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  数据将写入的文件的名称。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Data.XmlWriteMode" />
    ///  值之一。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的内容。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的数据。
    ///</param>
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的流。
    ///</summary>
    ///  <param name="stream">
    ///  XML 架构将写入的流。
    ///</param>
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的流。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  XML 架构将写入的流。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用其进行写。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.IO.TextWriter" />
    ///  用其进行写。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要使用的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个使用指定的 XML 架构 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="writer"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入的文档。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  要使用的文件的名称。
    ///</param>
    procedure WriteXmlSchema(fileName: string); overload;
    ///<summary>
    ///  写入的当前数据结构 <see cref="T:System.Data.DataTable" />
    ///  作为一个 XML 架构写入指定的文件。
    ///  若要保存对表及其所有子代的架构，集 <paramref name="writeHierarchy" />
    ///  参数 <see langword="true" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  要使用的文件的名称。
    ///</param>
    ///  <param name="writeHierarchy">
    ///  如果 <see langword="true" />
    ///  , ，写入当前表及其所有子代的架构。
    ///  如果 <see langword="false" />
    ///  （默认值），写入当前表的架构。
    ///</param>
    procedure WriteXmlSchema(fileName: string; writeHierarchy: Boolean); overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  从派生的对象。 <see cref="T:System.IO.Stream" />
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(stream: DDN.mscorlib.DNStream): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  将用于读取数据。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.mscorlib.DNTextReader): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  从指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  从中读取数据文件的名称。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    ///<summary>
    ///  将 XML 架构和数据读入 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  将用于读取数据。
    ///</param>
    ///<returns><see cref="T:System.Data.XmlReadMode" />
    ///  用于读取数据。
    ///</returns>
    function ReadXml(reader: DDN.System.Xml.DNXmlReader): DNXmlReadMode; overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  使用指定的流。
    ///</summary>
    ///  <param name="stream">
    ///  用来读取该架构的流。
    ///</param>
    procedure ReadXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.IO.TextReader" />
    ///  用于读取架构信息。
    ///</param>
    procedure ReadXmlSchema(reader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  从指定的文件。
    ///</summary>
    ///  <param name="fileName">
    ///  从中进行读取架构信息文件的名称。
    ///</param>
    procedure ReadXmlSchema(fileName: string); overload;
    ///<summary>
    ///  读取 XML 架构到 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  用于读取架构信息。
    ///</param>
    procedure ReadXmlSchema(reader: DDN.System.Xml.DNXmlReader); overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示在表中的字符串比较是否区分大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该比较是区分大小写。否则为 <see langword="false" />
    ///  。
    ///  默认值设置为 parent <see cref="T:System.Data.DataSet" />
    ///  对象的 <see cref="P:System.Data.DataSet.CaseSensitive" />
    ///  属性，或 <see langword="false" />
    ///  如果 <see cref="T:System.Data.DataTable" />
    ///  独立于创建 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" />
    ///  初始化。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示组件已完成初始化，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInitialized: Boolean read get_IsInitialized;
    ///<summary>
    ///  获取或设置序列化格式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SerializationFormat" />
    ///  枚举指定 <see langword="Binary" />
    ///  或 <see langword="Xml" />
    ///  序列化。
    ///</returns>
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    ///<summary>
    ///  获取此子关系的集合 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRelationCollection" />
    ///  ，包含表的子关系。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" />
    ///  存在的对象。
    ///</returns>
    property ChildRelations: DNDataRelationCollection read get_ChildRelations;
    ///<summary>
    ///  获取属于此表的列的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumnCollection" />
    ///  包含集合的 <see cref="T:System.Data.DataColumn" />
    ///  表的对象。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataColumn" />
    ///  存在的对象。
    ///</returns>
    property Columns: DNDataColumnCollection read get_Columns;
    ///<summary>
    ///  获取此表是由约束的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.ConstraintCollection" />
    ///  包含集合的 <see cref="T:System.Data.Constraint" />
    ///  表的对象。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.Constraint" />
    ///  存在的对象。
    ///</returns>
    property Constraints: DNConstraintCollection read get_Constraints;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataSet" />
    ///  此表所属。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataSet" />
    ///  此表所属。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet;
    ///<summary>
    ///  获取可能包括已筛选的视图或光标位置的表的自定义的视图。
    ///</summary>
    ///<returns>
    ///  与 <see cref="T:System.Data.DataView" />
    ///  关联的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property DefaultView: DNDataView read get_DefaultView;
    ///<summary>
    ///  获取或设置返回用来表示此表在用户界面中的值的表达式。
    ///<see langword="DisplayExpression" />
    ///  属性，允许您在用户界面中显示此表的名称。
    ///</summary>
    ///<returns>
    ///  显示字符串。
    ///</returns>
    property DisplayExpression: string read get_DisplayExpression write set_DisplayExpression;
    ///<summary>
    ///  获取自定义的用户信息的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  ，包含自定义用户信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    ///<summary>
    ///  获取一个值，该值指示是否有任何任一的表中的行中的错误 <see cref="T:System.Data.DataSet" />
    ///  表属于。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果存在错误;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasErrors: Boolean read get_HasErrors;
    ///<summary>
    ///  获取或设置用来比较字符串表中的区域设置信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，其中包含有关用户的计算机区域设置的数据。
    ///  默认值是 <see cref="T:System.Data.DataSet" />
    ///  对象的 <see cref="T:System.Globalization.CultureInfo" />
    ///  (返回 <see cref="P:System.Data.DataSet.Locale" />
    ///  属性) 向其 <see cref="T:System.Data.DataTable" />
    ///  所属; 如果表不属于 <see cref="T:System.Data.DataSet" />
    ///  , ，默认值是当前系统 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</returns>
    property Locale: DDN.mscorlib.DNCultureInfo read get_Locale write set_Locale;
    ///<summary>
    ///  获取或设置此表的初始起始大小。
    ///</summary>
    ///<returns>
    ///  在此表的行中初始起始大小。
    ///  默认值为 50。
    ///</returns>
    property MinimumCapacity: Int32 read get_MinimumCapacity write set_MinimumCapacity;
    ///<summary>
    ///  获取为此父关系的集合 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRelationCollection" />
    ///  ，包含表的父关系。
    ///  如果不是返回一个空集合 <see cref="T:System.Data.DataRelation" />
    ///  存在的对象。
    ///</returns>
    property ParentRelations: DNDataRelationCollection read get_ParentRelations;
    ///<summary>
    ///  获取或设置列的数组该函数为数据表为主键。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象数组。
    ///</returns>
    ///<exception cref="T:System.Data.DataException">
    ///  该密钥是外键。
    ///</exception>
    property PrimaryKey: TArray<DNDataColumn> read get_PrimaryKey write set_PrimaryKey;
    ///<summary>
    ///  获取属于此表的行的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRowCollection" />
    ///  ，其中包含 <see cref="T:System.Data.DataRow" />
    ///  对象; 否则为空值如果没有 <see cref="T:System.Data.DataRow" />
    ///  存在的对象。
    ///</returns>
    property Rows: DNDataRowCollection read get_Rows;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see langword="null" />
    ///  或空字符串 ("") 中传递和此表所属的集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  此表所属的集合已具有相同名称的表。
    ///  （比较是区分大小写。）
    ///</exception>
    property TableName: string read get_TableName write set_TableName;
    ///<summary>
    ///  获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置的 XML 表示形式中存储的数据的命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  前缀 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataTable" />
    ///  的 <see cref="T:System.ComponentModel.ISite" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.ComponentModel.ISite" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataTable = class(TDNGenericImport<DNDataTableClass, DNDataTable>) end;

  //-------------namespace: System.Data----------------
  DNDataViewClass = interface(DNObjectClass)
  ['{6293E4A1-BAC8-5136-ACE2-021771D79AE2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataView" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataView; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Data.DataView" />
    ///  初始化 <see cref="T:System.Data.DataTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="table">
    ///  要添加到 <see cref="T:System.Data.DataView" />
    ///  中的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    {class} function init(table: DNDataTable): DNDataView; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Data.DataTable" />
    ///  、<see cref="P:System.Data.DataView.RowFilter" />
    ///  、<see cref="P:System.Data.DataView.Sort" />
    ///  和 <see cref="T:System.Data.DataViewRowState" />
    ///  初始化 <see cref="T:System.Data.DataView" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="table">
    ///  要添加到 <see cref="T:System.Data.DataView" />
    ///  中的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="RowFilter">
    ///  要应用于 <see cref="T:System.Data.DataView" />
    ///  的 <see cref="P:System.Data.DataView.RowFilter" />
    ///  。
    ///</param>
    ///  <param name="Sort">
    ///  要应用于 <see cref="T:System.Data.DataView" />
    ///  的 <see cref="P:System.Data.DataView.Sort" />
    ///  。
    ///</param>
    ///  <param name="RowState">
    ///  要应用于 <see cref="T:System.Data.DataView" />
    ///  的 <see cref="T:System.Data.DataViewRowState" />
    ///  。
    ///</param>
    {class} function init(table: DNDataTable; RowFilter: string; Sort: string; RowState: DNDataViewRowState): DNDataView; overload;

  end;

  ///<summary>
  ///  代表 <see cref="T:System.Data.DataTable" />
  ///  的可绑定数据的自定义视图，它用于排序、筛选、搜索、编辑和导航。
  ///<see cref="T:System.Data.DataView" />
  ///  不存储数据，而改为表示对应的 <see cref="T:System.Data.DataTable" />
  ///  的连接视图。
  ///  更改 <see cref="T:System.Data.DataView" />
  ///  的数据将影响 <see cref="T:System.Data.DataTable" />
  ///  。
  ///  更改 <see cref="T:System.Data.DataTable" />
  ///  的数据将影响与之关联的所有 <see cref="T:System.Data.DataView" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataView')]
  DNDataView = interface(DNObject)
  ['{954DCFBB-B6BF-3BAA-B683-D6ECDB9E8FD8}']
  { getters & setters } 

    function get_AllowDelete: Boolean;
    procedure set_AllowDelete(value: Boolean);
    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowNew: Boolean;
    procedure set_AllowNew(value: Boolean);
    function get_Count: Int32;
    function get_DataViewManager: DNDataViewManager;
    function get_IsInitialized: Boolean;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);
    function get_Table: DNDataTable;
    procedure set_Table(value: DNDataTable);
    function get_Item(recordIndex: Int32): DNDataRowView;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure remove_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />
    ///  。
    ///  此初始化在运行时发生。
    ///</summary>
    procedure BeginInit;
    ///<summary>
    ///  结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataView" />
    ///  的初始化。
    ///  此初始化在运行时发生。
    ///</summary>
    procedure EndInit;
    ///<summary>
    ///  删除指定索引处的行。
    ///</summary>
    ///  <param name="index">
    ///  要删除行的索引。
    ///</param>
    procedure Delete(index: Int32);
    ///<summary>
    ///  根据指定的排序键值在 <see cref="T:System.Data.DataView" />
    ///  中查找行。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的对象。
    ///</param>
    ///<returns>
    ///  包含指定排序关键字值的 <see cref="T:System.Data.DataView" />
    ///  中的行的索引；否则为 -1（如果不存在排序关键字值）。
    ///</returns>
    function Find(key: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  根据指定的排序键值在 <see cref="T:System.Data.DataView" />
    ///  中查找行。
    ///</summary>
    ///  <param name="key">
    ///  类型为 <see cref="T:System.Object" />
    ///  的值的数组。
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  中与指定的排序键值匹配的第一个行的位置索引；如果没有匹配的排序键值，则为 -1。
    ///</returns>
    function Find(key: TArray<DDN.mscorlib.DNObject>): Int32; overload;
    ///<summary>
    ///  返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" />
    ///  对象数组。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的列值数组，其类型为 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="DataRowView" />
    ///  对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" />
    ///  数组。
    ///</returns>
    function FindRows(key: TArray<DDN.mscorlib.DNObject>): TArray<DNDataRowView>; overload;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="distinct">
    ///  如果为 <see langword="true" />
    ///  ，则返回的 <see cref="T:System.Data.DataTable" />
    ///  包含具有与其所有列不同的值的行。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="columnNames">
    ///  一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" />
    ///  中。
    ///<see cref="T:System.Data.DataTable" />
    ///  包含指定的列，这些列按其在该数组中显示的顺序排列。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable(distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Data.DataView" />
    ///  实例是否可视为相等的实例。
    ///</summary>
    ///  <param name="view">
    ///  要比较的 <see cref="T:System.Data.DataView" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果这两个 <see cref="T:System.Data.DataView" />
    ///  实例相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(view: DNDataView): Boolean; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.DataView" />
    ///  中添加新行。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataRowView" />
    ///  对象。
    ///</returns>
    function AddNew: DNDataRowView;
    ///<summary>
    ///  将项复制到数组中。
    ///  仅适用于 Web 窗体界面。
    ///</summary>
    ///  <param name="array">
    ///  要复制到的数组。
    ///</param>
    ///  <param name="index">
    ///  从其开始的索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  返回其列与指定的排序键值匹配的 <see cref="T:System.Data.DataRowView" />
    ///  对象数组。
    ///</summary>
    ///  <param name="key">
    ///  要搜索的列值，为 <see cref="T:System.Object" />
    ///  类型。
    ///</param>
    ///<returns><see langword="DataRowView" />
    ///  对象数组，其列与指定的排序键值匹配；或者，如果任何行都不包含指定的排序键值，则为空的 <see langword="DataRowView" />
    ///  数组。
    ///</returns>
    function FindRows(key: DDN.mscorlib.DNObject): TArray<DNDataRowView>; overload;
    ///<summary>
    ///  获取此 <see cref="T:System.Data.DataView" />
    ///  的枚举器。
    ///</summary>
    ///<returns>
    ///  用于浏览列表的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable: DNDataTable; overload;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="tableName">
    ///  返回的 <see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable(tableName: string): DNDataTable; overload;
    ///<summary>
    ///  基于现有的 <see cref="T:System.Data.DataView" />
    ///  中的行，创建并返回一个新的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="tableName">
    ///  返回的 <see cref="T:System.Data.DataTable" />
    ///  的名称。
    ///</param>
    ///  <param name="distinct">
    ///  如果为 <see langword="true" />
    ///  ，则返回的 <see cref="T:System.Data.DataTable" />
    ///  包含具有与其所有列不同的值的行。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="columnNames">
    ///  一个字符串数组，其中的一个列名称列表将包括在返回的 <see cref="T:System.Data.DataTable" />
    ///  中。
    ///<see langword="DataTable" />
    ///  包含指定的列，这些列按其在该数组中显示的顺序排列。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.DataTable" />
    ///  实例，其中包含请求的行和列。
    ///</returns>
    function ToTable(tableName: string; distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  设置或获取一个值，该值指示是否允许删除。
    ///</summary>
    ///<returns>
    ///  如果允许删除，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowDelete: Boolean read get_AllowDelete write set_AllowDelete;
    ///<summary>
    ///  获取或设置一个值，该值指示是否使用默认排序。
    ///  默认排序是通过 <see cref="P:System.Data.DataTable.PrimaryKey" />
    ///  指定的所有主键进行排序（升序）。
    ///</summary>
    ///<returns>
    ///  如果使用默认排序，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    ///<summary>
    ///  获取或设置一个值，该值指示是否允许编辑。
    ///</summary>
    ///<returns>
    ///  如果允许编辑，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    ///<summary>
    ///  获取或设置一个值，该值指示是否可以通过使用 <see cref="M:System.Data.DataView.AddNew" />
    ///  方法添加新行。
    ///</summary>
    ///<returns>
    ///  如果可以添加新行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowNew: Boolean read get_AllowNew write set_AllowNew;
    ///<summary>
    ///  在应用 <see cref="P:System.Data.DataView.RowFilter" />
    ///  和 <see cref="P:System.Data.DataView.RowStateFilter" />
    ///  之后，获取 <see cref="T:System.Data.DataView" />
    ///  中的记录数。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  中的记录数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取与此视图关联的 <see cref="T:System.Data.DataViewManager" />
    ///  。
    ///</summary>
    ///<returns>
    ///  创建了此视图的 <see langword="DataViewManager" />
    ///  。
    ///  如果这是 <see cref="T:System.Data.DataTable" />
    ///  的默认 <see cref="T:System.Data.DataView" />
    ///  ，那么 <see langword="DataViewManager" />
    ///  属性将返回 <see langword="DataSet" />
    ///  的默认 <see langword="DataViewManager" />
    ///  。
    ///  否则，如果在没有 <see langword="DataViewManager" />
    ///  的情况下创建了 <see langword="DataView" />
    ///  ，那么此属性为 <see langword="null" />
    ///  。
    ///</returns>
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    ///<summary>
    ///  获取一个值，该值指示组件是否已初始化。
    ///</summary>
    ///<returns>
    ///  如果为 <see langword="true" />
    ///  ，说明组件已完成初始化；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInitialized: Boolean read get_IsInitialized;
    ///<summary>
    ///  获取或设置用于筛选在 <see cref="T:System.Data.DataView" />
    ///  中查看哪些行的表达式。
    ///</summary>
    ///<returns>
    ///  用于指定行的筛选方式的字符串。
    ///  有关详细信息，请参阅“备注”部分。
    ///</returns>
    property RowFilter: string read get_RowFilter write set_RowFilter;
    ///<summary>
    ///  获取或设置用于 <see cref="T:System.Data.DataView" />
    ///  中的行状态筛选器。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataViewRowState" />
    ///  值之一。
    ///</returns>
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataView" />
    ///  的一个或多个排序列和排序顺序。
    ///</summary>
    ///<returns>
    ///  一个字符串，该字符串包含后跟“ASC”（升序）或"DESC"（降序）的列名。
    ///  默认情况下，列按升序排序。
    ///  可以用逗号分隔多个列。
    ///</returns>
    property Sort: string read get_Sort write set_Sort;
    ///<summary>
    ///  获取或设置源 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  为此视图提供数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    property Table: DNDataTable read get_Table write set_Table;
    property Item[recordIndex: Int32]: DNDataRowView read get_Item; default;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataView = class(TDNGenericImport<DNDataViewClass, DNDataView>) end;

  //-------------namespace: System.Data----------------
  DNDataViewManagerClass = interface(DNObjectClass)
  ['{FEFEA83B-9600-5D1E-8BF2-8A841409B4EF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataViewManager" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataViewManager; overload;
    ///<summary>
    ///  为指定的 <see cref="T:System.Data.DataSet" />
    ///  初始化 <see cref="T:System.Data.DataViewManager" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataSet">
    ///  要使用的 <see cref="T:System.Data.DataSet" />
    ///  的名称。
    ///</param>
    {class} function init(dataSet: DNDataSet): DNDataViewManager; overload;

  end;

  ///<summary>
  ///  在 <see cref="T:System.Data.DataSet" />
  ///  中包含每个 <see cref="T:System.Data.DataTable" />
  ///  的默认 <see cref="T:System.Data.DataViewSettingCollection" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataViewManager')]
  DNDataViewManager = interface(DNObject)
  ['{720CC903-7243-397C-854C-1F8900F3F337}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    procedure set_DataSet(value: DNDataSet);
    function get_DataViewSettings: DNDataViewSettingCollection;
    function get_DataViewSettingCollectionString: string;
    procedure set_DataViewSettingCollectionString(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure remove_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  为指定的 <see cref="T:System.Data.DataTable" />
    ///  创建 <see cref="T:System.Data.DataView" />
    ///  。
    ///</summary>
    ///  <param name="table">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  用于 <see cref="T:System.Data.DataView" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataView" />
    ///  对象。
    ///</returns>
    function CreateDataView(table: DNDataTable): DNDataView;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataSet" />
    ///  用于 <see cref="T:System.Data.DataViewManager" />
    ///  。
    ///</summary>
    ///<returns>
    ///  要使用的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet write set_DataSet;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  为每个 <see cref="T:System.Data.DataTable" />
    ///  中 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  为每个 <see langword="DataTable" />
    ///  。
    ///</returns>
    property DataViewSettings: DNDataViewSettingCollection read get_DataViewSettings;
    ///<summary>
    ///  获取或设置一个值，用于代码持久性。
    ///</summary>
    ///<returns>
    ///  一个值，用于代码持久性。
    ///</returns>
    property DataViewSettingCollectionString: string read get_DataViewSettingCollectionString write set_DataViewSettingCollectionString;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataViewManager = class(TDNGenericImport<DNDataViewManagerClass, DNDataViewManager>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB6C5C4D-46F4-593C-8010-A3BAF6540872}']
  end;

  ///<summary>
  ///  表示数据源中的列。
  ///</summary>
  [DNTypeName('System.Data.Common.DbColumn')]
  DNDbColumn = interface(DDN.mscorlib.DNObject)
  ['{4742526D-9BC9-3BF6-9346-46EBB65DD1FF}']
  { getters & setters } 

    function get_AllowDBNull: DDN.mscorlib.DNNullable<Boolean>;
    function get_BaseCatalogName: string;
    function get_BaseColumnName: string;
    function get_BaseSchemaName: string;
    function get_BaseServerName: string;
    function get_BaseTableName: string;
    function get_ColumnName: string;
    function get_ColumnOrdinal: DDN.mscorlib.DNNullable<Int32>;
    function get_ColumnSize: DDN.mscorlib.DNNullable<Int32>;
    function get_IsAliased: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsAutoIncrement: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsExpression: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsHidden: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsIdentity: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsKey: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsLong: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsReadOnly: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsUnique: DDN.mscorlib.DNNullable<Boolean>;
    function get_NumericPrecision: DDN.mscorlib.DNNullable<Int32>;
    function get_NumericScale: DDN.mscorlib.DNNullable<Int32>;
    function get_UdtAssemblyQualifiedName: string;
    function get_DataType: DDN.mscorlib.DNType;
    function get_DataTypeName: string;
    function get_Item(&property: string): DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列中是否允许 <see langword="DBNull" />
    ///  值，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列中是否允许 <see langword="DBNull" />
    ///  值，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列中允许 <see langword="DBNull" />
    ///  值，则返回 <see langword="true" />
    ///  ，否则，返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property AllowDBNull: DDN.mscorlib.DNNullable<Boolean> read get_AllowDBNull;
    ///<summary>
    ///  获取与数据源关联的目录；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为目录名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与数据源关联的目录名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property BaseCatalogName: string read get_BaseCatalogName;
    ///<summary>
    ///  获取列名称；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为列名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  基列名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property BaseColumnName: string read get_BaseColumnName;
    ///<summary>
    ///  获取与数据源关联的架构；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为架构名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与数据源关联的架构名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property BaseSchemaName: string read get_BaseSchemaName;
    ///<summary>
    ///  获取与列关联的服务器名称；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为服务器名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与列关联的服务器名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property BaseServerName: string read get_BaseServerName;
    ///<summary>
    ///  获取架构中的表名称；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为表名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  架构中的表名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property BaseTableName: string read get_BaseTableName;
    ///<summary>
    ///  获取列的名称。
    ///  在派生类中重写时，可设置为列名称。
    ///</summary>
    ///<returns>
    ///  列的名称。
    ///</returns>
    property ColumnName: string read get_ColumnName;
    ///<summary>
    ///  获取数据源行中的列位置（序号）；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="int32" />
    ///  值（用于指定列位置）或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示列序号的 <see langword="int32" />
    ///  值；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property ColumnOrdinal: DDN.mscorlib.DNNullable<Int32> read get_ColumnOrdinal;
    ///<summary>
    ///  获取列大小；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="int32" />
    ///  值（用于指定列大小）或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示列大小的 <see langword="int32" />
    ///  值；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property ColumnSize: DDN.mscorlib.DNNullable<Int32> read get_ColumnSize;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否具有别名，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否具有别名，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列具有别名，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsAliased: DDN.mscorlib.DNNullable<Boolean> read get_IsAliased;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列中的值是否自动递增，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列中的值是否自动递增，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列中的值自动递增，则返回 <see langword="true" />
    ///  ，否则，返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsAutoIncrement: DDN.mscorlib.DNNullable<Boolean> read get_IsAutoIncrement;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否是表达式，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否是表达式，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列是表达式，将返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsExpression: DDN.mscorlib.DNNullable<Boolean> read get_IsExpression;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否被隐藏，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否被隐藏，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列被隐藏，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsHidden: DDN.mscorlib.DNNullable<Boolean> read get_IsHidden;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否是标识，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否是标识，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列是标识，将返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsIdentity: DDN.mscorlib.DNNullable<Boolean> read get_IsIdentity;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否是密钥，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否是密钥，也可以设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列是密钥，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsKey: DDN.mscorlib.DNNullable<Boolean> read get_IsKey;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否包含长数据，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否包含长数据，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列包含长数据，则返回 <see langword="true" />
    ///  ；否则，返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsLong: DDN.mscorlib.DNNullable<Boolean> read get_IsLong;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示此列是否是只读的，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示此列是否是只读的，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果此列为只读，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsReadOnly: DDN.mscorlib.DNNullable<Boolean> read get_IsReadOnly;
    ///<summary>
    ///  获取可为 null 的布尔值，该值指示唯一约束是否适用于此列，或者在未设置任何值时返回 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="true" />
    ///  或 <see langword="false" />
    ///  ，指示唯一约束是否适用于此列，也可设置为 <see langword="null" />
    ///  （在 Visual Studio 中为 <see langword="Nothing" />
    ///  ）。
    ///</summary>
    ///<returns>
    ///  如果唯一约束适用于此列，返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果未设置任何值，则返回空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property IsUnique: DDN.mscorlib.DNNullable<Boolean> read get_IsUnique;
    ///<summary>
    ///  获取列数据的数值精度，否则在未设置任何值时为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为 <see langword="int32" />
    ///  值（用于指定列数据的数值精度）或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果数据是数值，则为指定列数据精度的 <see langword="int32" />
    ///  值，否则在未设置任何值时为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property NumericPrecision: DDN.mscorlib.DNNullable<Int32> read get_NumericPrecision;
    ///<summary>
    ///  获取可为 null 的 <see langword="int32" />
    ///  值，该值将返回 <see langword="null" />
    ///  或列数据的数值范围。
    ///  在派生类中重写时，可设置为 <see langword="null" />
    ///  或 <see langword="int32" />
    ///  值（用于表示列数据的数值范围）。
    ///</summary>
    ///<returns>
    ///  如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）；否则，在数据是数值时，为指定列数据范围的 <see langword="int32" />
    ///  值。
    ///</returns>
    property NumericScale: DDN.mscorlib.DNNullable<Int32> read get_NumericScale;
    ///<summary>
    ///  获取表示列中数据类型的 <see cref="T:System.Type" />
    ///  对象的程序集限定名称，否则，在未设置任何值时为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为程序集限定名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示列中数据类型的 <see cref="T:System.Type" />
    ///  对象的程序集限定名称，否则，在未设置任何值时为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property UdtAssemblyQualifiedName: string read get_UdtAssemblyQualifiedName;
    ///<summary>
    ///  获取列中存储的数据的类型。
    ///  在派生类中重写时，可设置为表示列中数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  表示列中包含的数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</returns>
    property DataType: DDN.mscorlib.DNType read get_DataType;
    ///<summary>
    ///  获取数据类型的名称；否则，如果未设置任何值，则为 <see langword="null" />
    ///  。
    ///  在派生类中重写时，可设置为数据类型名称或 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  数据类型的名称；否则，如果未设置任何值，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property DataTypeName: string read get_DataTypeName;
    property Item[&property: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbColumn = class(TDNGenericImport<DNDbColumnClass, DNDbColumn>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbConnectionStringBuilderClass = interface(DNObjectClass)
  ['{CF7AA95D-C35E-5CD4-93A5-97C16324E230}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDbConnectionStringBuilder; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  类的新实例，可以选择使用 ODBC 规则来引用值。
    ///</summary>
    ///  <param name="useOdbcRules">
    ///  若为 <see langword="true" />
    ///  ，则使用 {} 分隔字段；若为 <see langword="false" />
    ///  ，则使用引号。
    ///</param>
    {class} function init(useOdbcRules: Boolean): DNDbConnectionStringBuilder; overload;

  { static methods } 

    ///<summary>
    ///  提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" />
    ///  对象中。
    ///</summary>
    ///  <param name="builder">
    ///  要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</param>
    ///  <param name="keyword">
    ///  要添加的键。
    ///</param>
    ///  <param name="value">
    ///  提供的键的值。
    ///</param>
    {class} procedure AppendKeyValuePair(builder: DDN.mscorlib.DNStringBuilder; keyword: string; value: string); overload;
    ///<summary>
    ///  提供了一种有效而安全的方法，用于将键和值附加到现有的 <see cref="T:System.Text.StringBuilder" />
    ///  对象中。
    ///</summary>
    ///  <param name="builder">
    ///  要向其中添加键/值对的 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</param>
    ///  <param name="keyword">
    ///  要添加的键。
    ///</param>
    ///  <param name="value">
    ///  提供的键的值。
    ///</param>
    ///  <param name="useOdbcRules">
    ///  若为 <see langword="true" />
    ///  ，则使用 {} 分隔字段，若为 <see langword="false" />
    ///  ，则使用引号。
    ///</param>
    {class} procedure AppendKeyValuePair(builder: DDN.mscorlib.DNStringBuilder; keyword: string; value: string; useOdbcRules: Boolean); overload;

  end;

  ///<summary>
  ///  提供强类型化连接字符串生成器的基类。
  ///</summary>
  [DNTypeName('System.Data.Common.DbConnectionStringBuilder')]
  DNDbConnectionStringBuilder = interface(DDN.mscorlib.DNIDictionary)
  ['{4C0C21B0-F263-3AED-A5DF-33B6E6F99D18}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    ///<summary>
    ///  将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中。
    ///</summary>
    ///  <param name="keyword">
    ///  要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  的键。
    ///</param>
    ///  <param name="value">
    ///  指定键的值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  为只读。
    ///  - 或 -
    ///<see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定的大小。
    ///</exception>
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  清除 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例的内容。
    ///</summary>
    ///<exception cref="T:System.NotSupportedException"><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  为只读。
    ///</exception>
    procedure Clear;
    ///<summary>
    ///  确定 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否包含特定键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  包含具有指定键的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    function ContainsKey(keyword: string): Boolean;
    ///<summary>
    ///  将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息与提供的对象中的连接信息进行比较。
    ///</summary>
    ///  <param name="connectionStringBuilder">
    ///  要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息生成等效的连接字符串，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例中移除具有指定的键的项。
    ///</summary>
    ///  <param name="keyword">
    ///  要从此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中的连接字符串移除的键/值对中的键。
    ///</param>
    ///<returns>
    ///  如果该键存在于连接字符串中并已被移除，则为 <see langword="true" />
    ///  ；如果该键不存在，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是只读，或 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定的大小。
    ///</exception>
    function Remove(keyword: string): Boolean;
    ///<summary>
    ///  指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例中是否存在指定的键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  包含具有指定键的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerialize(keyword: string): Boolean;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性是否在 Visual Studio 设计器中可见。
    ///</summary>
    ///<returns>
    ///  如果连接字符串在设计器中可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  相关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中包含的键/值对创建的当前连接字符串。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供的连接字符串参数无效。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  中包含的键的当前数目。
    ///</summary>
    ///<returns>
    ///  由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例维护的连接字符串中包含的键的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否具有固定大小。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定大小，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的键的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNDbConnectionStringBuilder = class(TDNGenericImport<DNDbConnectionStringBuilderClass, DNDbConnectionStringBuilder>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcConnectionStringBuilderClass = interface(DNDbConnectionStringBuilderClass)
  ['{0D832B2A-C83C-5AB8-9910-C850899F9179}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcConnectionStringBuilder; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  类的新实例。
    ///  所提供的连接字符串为实例的内部连接信息提供数据。
    ///</summary>
    ///  <param name="connectionString">
    ///  对象内部连接信息的基础。
    ///  分析为键/值对。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  连接字符串格式不正确 （可能缺少必需的"="中的键/值对）。
    ///</exception>
    {class} function init(connectionString: string): DNOdbcConnectionStringBuilder; overload;

  end;

  ///<summary>
  ///  为创建和管理由 <see cref="T:System.Data.Odbc.OdbcConnection" />
  ///  类使用的连接字符串的内容提供了一种简单方法。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcConnectionStringBuilder')]
  DNOdbcConnectionStringBuilder = interface(DNDbConnectionStringBuilder)
  ['{CB08F5D9-6D9E-352C-B3B2-24A4617FD060}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_Driver: string;
    procedure set_Driver(value: string);
    function get_Dsn: string;
    procedure set_Dsn(value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    ///<summary>
    ///  清除 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  实例的内容。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确定 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  是否包含特定键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  包含具有指定的元素键; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    function ContainsKey(keyword: string): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  实例中移除具有指定的键的项。
    ///</summary>
    ///  <param name="keyword">
    ///  要从此 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  中的连接字符串移除的键/值对中的键。
    ///</param>
    ///<returns>
    ///  如果该键存在于连接字符串中并已被移除，则为 <see langword="true" />
    ///  ；如果该键不存在，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    function Remove(keyword: string): Boolean;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中。
    ///</summary>
    ///  <param name="keyword">
    ///  要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  的键。
    ///</param>
    ///  <param name="value">
    ///  指定键的值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  为只读。
    ///  - 或 -
    ///<see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定的大小。
    ///</exception>
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息与提供的对象中的连接信息进行比较。
    ///</summary>
    ///  <param name="connectionStringBuilder">
    ///  要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息生成等效的连接字符串，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    ///<summary>
    ///  指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例中是否存在指定的键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  包含具有指定键的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerialize(keyword: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取或设置与连接关联的 ODBC 驱动程序的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.Odbc.OdbcConnectionStringBuilder.Driver" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property Driver: string read get_Driver write set_Driver;
    ///<summary>
    ///  获取或设置与连接关联的数据源名称 (DSN) 的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.Odbc.OdbcConnectionStringBuilder.Dsn" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property Dsn: string read get_Dsn write set_Dsn;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的键的 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Data.Odbc.OdbcConnectionStringBuilder" />
    ///  中的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性是否在 Visual Studio 设计器中可见。
    ///</summary>
    ///<returns>
    ///  如果连接字符串在设计器中可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  相关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中包含的键/值对创建的当前连接字符串。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供的连接字符串参数无效。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  中包含的键的当前数目。
    ///</summary>
    ///<returns>
    ///  由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例维护的连接字符串中包含的键的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否具有固定大小。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定大小，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNOdbcConnectionStringBuilder = class(TDNGenericImport<DNOdbcConnectionStringBuilderClass, DNOdbcConnectionStringBuilder>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbConnectionStringBuilderClass = interface(DNDbConnectionStringBuilderClass)
  ['{B62EF529-B460-5B73-A68A-EA6379F66658}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbConnectionStringBuilder; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  类的新实例。
    ///  所提供的连接字符串为实例的内部连接信息提供数据。
    ///</summary>
    ///  <param name="connectionString">
    ///  对象内部连接信息的基础。
    ///  分析为键/值对。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  连接字符串格式不正确 （可能缺少必需的"="中的键/值对）。
    ///</exception>
    {class} function init(connectionString: string): DNOleDbConnectionStringBuilder; overload;

  end;

  ///<summary>
  ///  为创建和管理由 <see cref="T:System.Data.OleDb.OleDbConnection" />
  ///  类使用的连接字符串的内容提供了一种简单方法。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbConnectionStringBuilder')]
  DNOleDbConnectionStringBuilder = interface(DNDbConnectionStringBuilder)
  ['{BD5C2F6C-8E32-36AC-A89B-A5C8C3342E21}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_OleDbServices: Int32;
    procedure set_OleDbServices(value: Int32);
    function get_PersistSecurityInfo: Boolean;
    procedure set_PersistSecurityInfo(value: Boolean);
    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    ///<summary>
    ///  清除 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  实例的内容。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确定 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  是否包含特定键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  true <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  包含具有指定的元素键; 否则为 false。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    function ContainsKey(keyword: string): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  实例中移除具有指定的键的项。
    ///</summary>
    ///  <param name="keyword">
    ///  要从此 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  中的连接字符串移除的键/值对中的键。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该键存在的连接字符串中并已被删除， <see langword="false" />
    ///  如果该键不存在。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    function Remove(keyword: string): Boolean;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中。
    ///</summary>
    ///  <param name="keyword">
    ///  要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  的键。
    ///</param>
    ///  <param name="value">
    ///  指定键的值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  为只读。
    ///  - 或 -
    ///<see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定的大小。
    ///</exception>
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息与提供的对象中的连接信息进行比较。
    ///</summary>
    ///  <param name="connectionStringBuilder">
    ///  要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息生成等效的连接字符串，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    ///<summary>
    ///  指示此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例中是否存在指定的键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  包含具有指定键的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerialize(keyword: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取或设置要连接到的数据源的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.DataSource" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property DataSource: string read get_DataSource write set_DataSource;
    ///<summary>
    ///  获取或设置用于连接到数据源的通用数据链接 (UDL) 文件的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.FileName" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property FileName: string read get_FileName write set_FileName;
    ///<summary>
    ///  获取或设置要传递的连接字符串中的 OLE DB 服务密钥的值。
    ///</summary>
    ///<returns>
    ///  返回与连接字符串内的 OLE DB 服务键对应的值。
    ///  默认情况下，值为-13。
    ///</returns>
    property OleDbServices: Int32 read get_OleDbServices write set_OleDbServices;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否安全敏感信息，如密码，返回作为连接的一部分中，是否连接是打开的或者一直处于打开状态。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="false" />
    ///  。
    ///</returns>
    property PersistSecurityInfo: Boolean read get_PersistSecurityInfo write set_PersistSecurityInfo;
    ///<summary>
    ///  获取或设置一个字符串，包含与内部连接字符串相关联的数据提供程序的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.OleDb.OleDbConnectionStringBuilder.Provider" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property Provider: string read get_Provider write set_Provider;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的键的 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Data.OleDb.OleDbConnectionStringBuilder" />
    ///  中的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性是否在 Visual Studio 设计器中可见。
    ///</summary>
    ///<returns>
    ///  如果连接字符串在设计器中可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  相关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中包含的键/值对创建的当前连接字符串。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供的连接字符串参数无效。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  中包含的键的当前数目。
    ///</summary>
    ///<returns>
    ///  由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例维护的连接字符串中包含的键的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否具有固定大小。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定大小，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的值的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNOleDbConnectionStringBuilder = class(TDNGenericImport<DNOleDbConnectionStringBuilderClass, DNOleDbConnectionStringBuilder>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlConnectionStringBuilderClass = interface(DNDbConnectionStringBuilderClass)
  ['{3F34A947-4EC9-5337-A384-5E33860966F9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlConnectionStringBuilder; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  类的新实例。
    ///  所提供的连接字符串为实例的内部连接信息提供数据。
    ///</summary>
    ///  <param name="connectionString">
    ///  对象内部连接信息的基础。
    ///  分析为名称/值对。
    ///  无效的键名会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Collections.Generic.KeyNotFoundException">
    ///  连接字符串中包含无效的键名。
    ///</exception><exception cref="T:System.FormatException">
    ///  连接字符串中包含无效的值（具体而言，需要使用布尔值或数值，但字符串中并未提供）。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  所提供的 <paramref name="connectionString" />
    ///  无效。
    ///</exception>
    {class} function init(connectionString: string): DNSqlConnectionStringBuilder; overload;

  end;

  ///<summary>
  ///  为创建和管理由 <see cref="T:System.Data.SqlClient.SqlConnection" />
  ///  类使用的连接字符串的内容提供了一种简单方法。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlConnectionStringBuilder')]
  DNSqlConnectionStringBuilder = interface(DNDbConnectionStringBuilder)
  ['{3A386B26-6DF0-3BDF-801E-6580EFABEC73}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_ApplicationIntent: DNApplicationIntent;
    procedure set_ApplicationIntent(value: DNApplicationIntent);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_AsynchronousProcessing: Boolean;
    procedure set_AsynchronousProcessing(value: Boolean);
    function get_AttachDBFilename: string;
    procedure set_AttachDBFilename(value: string);
    function get_PoolBlockingPeriod: DNPoolBlockingPeriod;
    procedure set_PoolBlockingPeriod(value: DNPoolBlockingPeriod);
    function get_ConnectionReset: Boolean;
    procedure set_ConnectionReset(value: Boolean);
    function get_ContextConnection: Boolean;
    procedure set_ContextConnection(value: Boolean);
    function get_ConnectTimeout: Int32;
    procedure set_ConnectTimeout(value: Int32);
    function get_CurrentLanguage: string;
    procedure set_CurrentLanguage(value: string);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_Encrypt: Boolean;
    procedure set_Encrypt(value: Boolean);
    function get_ColumnEncryptionSetting: DNSqlConnectionColumnEncryptionSetting;
    procedure set_ColumnEncryptionSetting(value: DNSqlConnectionColumnEncryptionSetting);
    function get_EnclaveAttestationUrl: string;
    procedure set_EnclaveAttestationUrl(value: string);
    function get_TrustServerCertificate: Boolean;
    procedure set_TrustServerCertificate(value: Boolean);
    function get_Enlist: Boolean;
    procedure set_Enlist(value: Boolean);
    function get_FailoverPartner: string;
    procedure set_FailoverPartner(value: string);
    function get_InitialCatalog: string;
    procedure set_InitialCatalog(value: string);
    function get_IntegratedSecurity: Boolean;
    procedure set_IntegratedSecurity(value: Boolean);
    function get_Authentication: DNSqlAuthenticationMethod;
    procedure set_Authentication(value: DNSqlAuthenticationMethod);
    function get_LoadBalanceTimeout: Int32;
    procedure set_LoadBalanceTimeout(value: Int32);
    function get_MaxPoolSize: Int32;
    procedure set_MaxPoolSize(value: Int32);
    function get_ConnectRetryCount: Int32;
    procedure set_ConnectRetryCount(value: Int32);
    function get_ConnectRetryInterval: Int32;
    procedure set_ConnectRetryInterval(value: Int32);
    function get_MinPoolSize: Int32;
    procedure set_MinPoolSize(value: Int32);
    function get_MultipleActiveResultSets: Boolean;
    procedure set_MultipleActiveResultSets(value: Boolean);
    function get_MultiSubnetFailover: Boolean;
    procedure set_MultiSubnetFailover(value: Boolean);
    function get_TransparentNetworkIPResolution: Boolean;
    procedure set_TransparentNetworkIPResolution(value: Boolean);
    function get_NetworkLibrary: string;
    procedure set_NetworkLibrary(value: string);
    function get_PacketSize: Int32;
    procedure set_PacketSize(value: Int32);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_PersistSecurityInfo: Boolean;
    procedure set_PersistSecurityInfo(value: Boolean);
    function get_Pooling: Boolean;
    procedure set_Pooling(value: Boolean);
    function get_Replication: Boolean;
    procedure set_Replication(value: Boolean);
    function get_TransactionBinding: string;
    procedure set_TransactionBinding(value: string);
    function get_TypeSystemVersion: string;
    procedure set_TypeSystemVersion(value: string);
    function get_UserID: string;
    procedure set_UserID(value: string);
    function get_UserInstance: Boolean;
    procedure set_UserInstance(value: Boolean);
    function get_WorkstationID: string;
    procedure set_WorkstationID(value: string);
    function get_IsFixedSize: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  清除 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  实例的内容。
    ///</summary>
    procedure Clear;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  是否包含特定键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  包含具有指定键的元素，则为 true；否则为 false。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception>
    function ContainsKey(keyword: string): Boolean;
    ///<summary>
    ///  从 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  实例中移除具有指定的键的项。
    ///</summary>
    ///  <param name="keyword">
    ///  要从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  中的连接字符串移除的键/值对中的键。
    ///</param>
    ///<returns>
    ///  如果该键存在于连接字符串中并已被移除，则为 <see langword="true" />
    ///  ；如果该键不存在，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为 Null（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception>
    function Remove(keyword: string): Boolean;
    ///<summary>
    ///  指示此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  实例中是否存在指定的键。
    ///</summary>
    ///  <param name="keyword">
    ///  要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  中定位的键。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  包含具有指定键的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerialize(keyword: string): Boolean;
    ///<summary>
    ///  将带有指定键和值的条目添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中。
    ///</summary>
    ///  <param name="keyword">
    ///  要添加到 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  的键。
    ///</param>
    ///  <param name="value">
    ///  指定键的值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="keyword" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  为只读。
    ///  - 或 -
    ///<see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  具有固定的大小。
    ///</exception>
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息与提供的对象中的连接信息进行比较。
    ///</summary>
    ///  <param name="connectionStringBuilder">
    ///  要与此 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象进行比较的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果两个 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  对象中的连接信息生成等效的连接字符串，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  连接到 SQL Server 可用性组中的数据库时声明应用程序工作负荷类型。
    ///  您可以使用 <see cref="T:System.Data.SqlClient.ApplicationIntent" />
    ///  设置此属性的值。
    ///  有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。
    ///</summary>
    ///<returns>
    ///  返回该属性的当前值（类型 <see cref="T:System.Data.SqlClient.ApplicationIntent" />
    ///  的值）。
    ///</returns>
    property ApplicationIntent: DNApplicationIntent read get_ApplicationIntent write set_ApplicationIntent;
    ///<summary>
    ///  获取或设置与连接字符串关联的应用程序的名称。
    ///</summary>
    ///<returns>
    ///  应用程序的名称；或者，如果未提供名称，则为“.NET SqlClient Data Provider”。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    ///<summary>
    ///  获取或设置一个布尔值，该值指定使用此连接字符串创建的连接是否允许异步处理。
    ///</summary>
    ///<returns>
    ///  将忽略此属性从 .NET Framework 4.5。
    ///  有关 SqlClient 支持异步编程的详细信息，请参阅 异步编程。
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="false" />
    ///  。
    ///</returns>
    property AsynchronousProcessing: Boolean read get_AsynchronousProcessing write set_AsynchronousProcessing;
    ///<summary>
    ///  获取或设置包含主数据文件名称的字符串。
    ///  该字符串包括可附加数据库的完整路径名。
    ///</summary>
    ///<returns>
    ///  为 <see langword="AttachDBFilename" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property AttachDBFilename: string read get_AttachDBFilename write set_AttachDBFilename;
    ///<summary>
    ///  连接池的暂停时段行为。
    ///</summary>
    ///<returns>
    ///  可用的暂停时段设置。
    ///</returns>
    property PoolBlockingPeriod: DNPoolBlockingPeriod read get_PoolBlockingPeriod write set_PoolBlockingPeriod;
    ///<summary>
    ///  已过时。
    ///  获取或设置一个布尔值，该值指示在从连接池中提取连接时是否重置连接。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset" />
    ///  属性的值；如果未提供任何值，则为 true。
    ///</returns>
    property ConnectionReset: Boolean read get_ConnectionReset write set_ConnectionReset;
    ///<summary>
    ///  获取或设置一个值，该值指示应建立与 SQL Server 的客户端/服务器连接还是进程内连接。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="False" />
    ///  。
    ///</returns>
    property ContextConnection: Boolean read get_ContextConnection write set_ContextConnection;
    ///<summary>
    ///  获取或设置在终止尝试并产生错误之前，等待与服务器连接的时间长度（以秒为单位）。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout" />
    ///  属性的值；如果未提供任何值，则为 15 秒。
    ///</returns>
    property ConnectTimeout: Int32 read get_ConnectTimeout write set_ConnectTimeout;
    ///<summary>
    ///  获取或设置 SQL Server 语言记录名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property CurrentLanguage: string read get_CurrentLanguage write set_CurrentLanguage;
    ///<summary>
    ///  获取或设置要连接到的 SQL Server 实例的名称或网络地址。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property DataSource: string read get_DataSource write set_DataSource;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示在服务器安装了证书的情况下，SQL Server 是否为客户端和服务器之间发送的所有数据使用 SSL 加密。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="false" />
    ///  。
    ///</returns>
    property Encrypt: Boolean read get_Encrypt write set_Encrypt;
    ///<summary>
    ///  获取和设置连接字符串生成器的列加密设置。
    ///</summary>
    ///<returns>
    ///  连接字符串生成器的列加密设置。
    ///</returns>
    property ColumnEncryptionSetting: DNSqlConnectionColumnEncryptionSetting read get_ColumnEncryptionSetting write set_ColumnEncryptionSetting;
    property EnclaveAttestationUrl: string read get_EnclaveAttestationUrl write set_EnclaveAttestationUrl;
    ///<summary>
    ///  获取或设置一个值，该值指示在跳过用于验证信任的证书链遍历时是否加密信道。
    ///</summary>
    ///<returns><see langword="Boolean" />
    ///  。
    ///  已识别的值为 <see langword="true" />
    ///  、<see langword="false" />
    ///  、<see langword="yes" />
    ///  和 <see langword="no" />
    ///  。
    ///</returns>
    property TrustServerCertificate: Boolean read get_TrustServerCertificate write set_TrustServerCertificate;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示 SQL Server 连接池程序是否在创建线程的当前事务上下文中自动登记连接。
    ///</summary>
    ///<returns>
    ///  为属性 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Enlist" />
    ///  的值，或者，如果未提供任何值，则为 <see langword="true " />
    ///  。
    ///</returns>
    property Enlist: Boolean read get_Enlist write set_Enlist;
    ///<summary>
    ///  获取或设置在主服务器停机时要连接到的伙伴服务器的名称或地址。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property FailoverPartner: string read get_FailoverPartner write set_FailoverPartner;
    ///<summary>
    ///  获取或设置与该连接关联的数据库的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property InitialCatalog: string read get_InitialCatalog write set_InitialCatalog;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码（值为 <see langword="false" />
    ///  时），或者是否使用当前的 Windows 帐户凭据进行身份验证（值为 <see langword="true" />
    ///  时）。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IntegratedSecurity: Boolean read get_IntegratedSecurity write set_IntegratedSecurity;
    ///<summary>
    ///  获取连接字符串的身份验证。
    ///</summary>
    ///<returns>
    ///  连接字符串的身份验证。
    ///</returns>
    property Authentication: DNSqlAuthenticationMethod read get_Authentication write set_Authentication;
    ///<summary>
    ///  获取或设置连接被销毁前在连接池中存活的最短时间（以秒为单位）。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout" />
    ///  属性的值，如果未提供任何值，则为 0。
    ///</returns>
    property LoadBalanceTimeout: Int32 read get_LoadBalanceTimeout write set_LoadBalanceTimeout;
    ///<summary>
    ///  获取或设置针对此特定连接字符串连接池中所允许的最大连接数。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize" />
    ///  属性的值；如果未提供任何值，则为 100。
    ///</returns>
    property MaxPoolSize: Int32 read get_MaxPoolSize write set_MaxPoolSize;
    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  在确定有一个空闲的连接失败之后尝试重新连接的次数。
    ///  该值必须是介于 0 和 255 之间的整数。
    ///  默认值为 1。
    ///  设置为 0 将禁止在空闲连接失败时重新连接。
    ///  如果设置的值超过允许的范围，则将引发 <see cref="T:System.ArgumentException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在确定有一个空闲的连接失败之后尝试重新连接的次数。
    ///</returns>
    property ConnectRetryCount: Int32 read get_ConnectRetryCount write set_ConnectRetryCount;
    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  标识空闲连接失败之后每次重新连接尝试之间的时间量（以秒为单位）。
    ///  此值必须是介于 1 和 60 之间的整数。
    ///  默认值为 10 秒。
    ///  如果设置的值超过允许的范围，则将引发 <see cref="T:System.ArgumentException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  标识空闲连接失败之后每次重新连接尝试之间的时间量（以秒为单位）。
    ///</returns>
    property ConnectRetryInterval: Int32 read get_ConnectRetryInterval write set_ConnectRetryInterval;
    ///<summary>
    ///  获取或设置针对此特定连接字符串连接池中所允许的最小连接数。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize" />
    ///  属性的值，如果未提供任何值，则为 0。
    ///</returns>
    property MinPoolSize: Int32 read get_MinPoolSize write set_MinPoolSize;
    ///<summary>
    ///  如果为 true，则应用程序可以维护多个活动结果集 (MARS)。
    ///  如果为 false，则应用程序必须先处理或取消某一批中的所有结果集，才可以在该连接上执行任何其他批次。
    ///  有关详细信息，请参阅多个活动结果集 (MARS)。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="false" />
    ///  。
    ///</returns>
    property MultipleActiveResultSets: Boolean read get_MultipleActiveResultSets write set_MultipleActiveResultSets;
    ///<summary>
    ///  如果您的应用程序要连接到不同子网上的 AlwaysOn 可用性组 (AG)，则设置 MultiSubnetFailover=true 会加快检测（当前）活动服务器以及与服务器的连接。
    ///  有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Boolean" />
    ///  ，这指示属性的当前值。
    ///</returns>
    property MultiSubnetFailover: Boolean read get_MultiSubnetFailover write set_MultiSubnetFailover;
    ///<summary>
    ///  将该键的值设置为 <see langword="true" />
    ///  时，需要应用程序检索特定 DNS 条目的所有 IP 地址并尝试连接到列表中的第一个地址。
    ///  如果未在 0.5 秒内建立连接，应用程序将尝试并行连接到所有其他地址。
    ///  第一个地址响应后，应用程序将与响应的 IP 地址建立连接。
    ///</summary>
    ///<returns>
    ///  一个布尔值。
    ///</returns>
    property TransparentNetworkIPResolution: Boolean read get_TransparentNetworkIPResolution write set_TransparentNetworkIPResolution;
    ///<summary>
    ///  获取或设置一个字符串，该字符串包含用于建立与 SQL Server 的连接的网络库的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property NetworkLibrary: string read get_NetworkLibrary write set_NetworkLibrary;
    ///<summary>
    ///  获取或设置用来与 SQL Server 的实例通信的网络数据包的大小（以字节为单位）。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize" />
    ///  属性的值；如果未提供任何值，则为 8000。
    ///</returns>
    property PacketSize: Int32 read get_PacketSize write set_PacketSize;
    ///<summary>
    ///  获取或设置 SQL Server 帐户的密码。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  密码错误地设置为 null。
    ///  请参阅下面的代码示例。
    ///</exception>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示如果连接是打开的或者一直处于打开状态，那么安全敏感信息（如密码）是否将不作为连接的一部分返回。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="false" />
    ///  。
    ///</returns>
    property PersistSecurityInfo: Boolean read get_PersistSecurityInfo write set_PersistSecurityInfo;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示每次请求连接时该连接是汇入连接池还是显式打开。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="true" />
    ///  。
    ///</returns>
    property Pooling: Boolean read get_Pooling write set_Pooling;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否使用连接来支持复制。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication" />
    ///  属性的值；如果未提供任何值，则为 false。
    ///</returns>
    property Replication: Boolean read get_Replication write set_Replication;
    ///<summary>
    ///  获取或设置一个字符串值，该值表示连接如何保持与登记的 <see langword="System.Transactions" />
    ///  事务的关联。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property TransactionBinding: string read get_TransactionBinding write set_TransactionBinding;
    ///<summary>
    ///  获取或设置一个字符串值，该值指示应用程序所需的类型系统。
    ///</summary>
    ///<returns>
    ///  下表列出了 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion" />
    ///  属性的可能值：
    ///  值
    ///  描述
    ///  SQL Server 2005
    ///  使用 SQL Server 2005年类型系统。
    ///  未对当前版本的 ADO.NET 执行转换。
    ///  SQL Server 2008
    ///  使用 SQL Server 2008 类型系统。
    ///  最新
    ///  使用此客户端/服务器对能够处理的最新版本。
    ///  这个最新版本将随着客户端和服务器组件的升级自动更新。
    ///</returns>
    property TypeSystemVersion: string read get_TypeSystemVersion write set_TypeSystemVersion;
    ///<summary>
    ///  获取或设置连接到 SQL Server 时要使用的用户 ID。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property UserID: string read get_UserID write set_UserID;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将连接从默认的 SQL Server Express 实例重定向到在调用方帐户之下运行并且在运行时启动的实例。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="False" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property UserInstance: Boolean read get_UserInstance write set_UserInstance;
    ///<summary>
    ///  获取或设置连接到 SQL Server 的工作站的名称。
    ///</summary>
    ///<returns>
    ///  为 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID" />
    ///  属性的值，或者，如果未提供任何值，则为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />
    ///  。
    ///</exception>
    property WorkstationID: string read get_WorkstationID write set_WorkstationID;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  是否具有固定大小。
    ///</summary>
    ///<returns>
    ///  任何情况下都为 <see langword="true" />
    ///  ，因为 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  提供固定大小的键/值对集合。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的键的 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  中的键。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    ///<summary>
    ///  获取包含 <see cref="T:System.Collections.ICollection" />
    ///  中的值的 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.ICollection" />
    ///  ，包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" />
    ///  中的值。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
    ///<summary>
    ///  获取或设置一个值，该值指示 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  属性是否在 Visual Studio 设计器中可见。
    ///</summary>
    ///<returns>
    ///  如果连接字符串在设计器中可见，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    ///<summary>
    ///  获取或设置与 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  相关联的连接字符串。
    ///</summary>
    ///<returns>
    ///  使用 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  中包含的键/值对创建的当前连接字符串。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供的连接字符串参数无效。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取属性 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" />
    ///  中包含的键的当前数目。
    ///</summary>
    ///<returns>
    ///  由 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例维护的连接字符串中包含的键的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  为只读，则为 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSqlConnectionStringBuilder = class(TDNGenericImport<DNSqlConnectionStringBuilderClass, DNSqlConnectionStringBuilder>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E06702B-7C2A-5BF2-A0AB-5FEA314EFE7F}']
  { static methods } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DbDataReader" />
    ///  的列架构（<see cref="T:System.Data.Common.DbColumn" />
    ///  集合）。
    ///</summary>
    ///  <param name="reader">
    ///  要返回列架构的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Data.Common.DbDataReader" />
    ///  的列架构（<see cref="T:System.Data.Common.DbColumn" />
    ///  集合）。
    ///</returns>
    {class} function GetColumnSchema(reader: DNDbDataReader): DDN.mscorlib.DNReadOnlyCollection<DNDbColumn>;
    ///<summary>
    ///  获取一个值，指示 <see cref="T:System.Data.Common.DbDataReader" />
    ///  是否可以获取列架构。
    ///</summary>
    ///  <param name="reader">
    ///  要检查其是否支持列架构的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbDataReader" />
    ///  可以获取列架构，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function CanGetColumnSchema(reader: DNDbDataReader): Boolean;

  end;

  ///<summary>
  ///  此类包含用于 <see cref="T:System.Data.Common.DbDataReader" />
  ///  的列架构扩展方法。
  ///</summary>
  [DNTypeName('System.Data.Common.DbDataReaderExtensions')]
  DNDbDataReaderExtensions = interface(DDN.mscorlib.DNObject)
  ['{B6AEE8F8-1EE1-308F-8092-1AACE315F09B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbDataReaderExtensions = class(TDNGenericImport<DNDbDataReaderExtensionsClass, DNDbDataReaderExtensions>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataRecordClass = interface(DNObjectClass)
  ['{D4C8BE44-8B2C-5326-811C-F203B591EB6D}']
  end;

  ///<summary>
  ///  实现 <see cref="T:System.Data.IDataRecord" />
  ///  和 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />
  ///  ，并为 <see cref="T:System.Data.Common.DbEnumerator" />
  ///  提供数据绑定支持。
  ///</summary>
  [DNTypeName('System.Data.Common.DbDataRecord')]
  DNDbDataRecord = interface(DDN.System.DNICustomTypeDescriptor)
  ['{7529B2E8-64FA-3F43-9323-335FC77F4E2B}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  目前尚不支持。
    ///</summary>
    ///  <param name="i">
    ///  目前尚不支持。
    ///</param>
    ///<returns>
    ///  目前尚不支持。
    ///</returns>
    function GetData(i: Int32): DNIDataReader;
    ///<summary>
    ///  以布尔值的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  如果布尔值为 <see langword="true" />
    ///  则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetBoolean(i: Int32): Boolean;
    ///<summary>
    ///  以字节的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetByte(i: Int32): Byte;
    ///<summary>
    ///  以字节数组的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  字段中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要读入字节流的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  开始读取操作的 <paramref name="buffer" />
    ///  的索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的字节数。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  以字符的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetChar(i: Int32): Char;
    ///<summary>
    ///  以字符数组的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  要将数据复制到其中的缓冲区。
    ///</param>
    ///  <param name="buffer">
    ///  复制到缓冲区的最大长度。
    ///</param>
    ///  <param name="bufferIndex">
    ///  从缓冲区中开始的点。
    ///</param>
    ///  <param name="length">
    ///  从数据源中开始的点。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  返回后端数据类型的名称。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  后端数据类型的名称。
    ///</returns>
    function GetDataTypeName(i: Int32): string;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  以双精度浮点数字的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetDouble(i: Int32): Double;
    ///<summary>
    ///  返回作为对象的数据类型的 <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  作为对象的数据类型的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  以单精度浮点数字的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetFloat(i: Int32): Single;
    ///<summary>
    ///  返回指定字段的 GUID 值。
    ///</summary>
    ///  <param name="i">
    ///  要返回的字段的索引。
    ///</param>
    ///<returns>
    ///  指定字段的 GUID 值。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  传递的索引超出了 0 到 <see cref="P:System.Data.IDataRecord.FieldCount" />
    ///  的范围。
    ///</exception>
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  以 16 位带符号整数的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetInt16(i: Int32): Int16;
    ///<summary>
    ///  以 32 位带符号整数的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetInt32(i: Int32): Int32;
    ///<summary>
    ///  以 64 位带符号整数的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetInt64(i: Int32): Int64;
    ///<summary>
    ///  返回指定列的名称。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(i: Int32): string;
    ///<summary>
    ///  在给定列名时返回列序号。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  列序号。
    ///</returns>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  以字符串的形式返回指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetString(i: Int32): string;
    ///<summary>
    ///  以本机格式返回位于指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  要返回的值。
    ///</returns>
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用当前记录的列值填充对象的数组。
    ///</summary>
    ///  <param name="values">
    ///  要将属性字段复制到其中的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  用于指示不存在的值。
    ///</summary>
    ///  <param name="i">
    ///  列序号。
    ///</param>
    ///<returns>
    ///  如果指定的列等于 <see cref="T:System.DBNull" />
    ///  ，则为<see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(i: Int32): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示当前记录中字段的数目。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  当前记录中字段的数目。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  未连接到要从中读取的数据源。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbDataRecord = class(TDNGenericImport<DNDbDataRecordClass, DNDbDataRecord>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataSourceEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BDAF0E7-1148-5DC4-A723-D0739D500B10}']
  end;

  ///<summary>
  ///  提供枚举的本地网络中的数据库服务器的所有可用实例的机制。
  ///</summary>
  [DNTypeName('System.Data.Common.DbDataSourceEnumerator')]
  DNDbDataSourceEnumerator = interface(DDN.mscorlib.DNObject)
  ['{9767A78B-E5A6-3DA2-B87B-445904AC0CBF}']
  { methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Data.DataTable" />
    ///  包含强类型化此类的实例所表示的服务器的所有可见实例有关的信息。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Data.DataTable" />
    ///  包含关联的数据源的可见实例有关的信息。
    ///</returns>
    function GetDataSources: DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbDataSourceEnumerator = class(TDNGenericImport<DNDbDataSourceEnumeratorClass, DNDbDataSourceEnumerator>) end;

  //-------------namespace: System.Data.Sql----------------
  DNSqlDataSourceEnumeratorClass = interface(DNDbDataSourceEnumeratorClass)
  ['{142DDE02-3AB9-53A3-82B2-573326157A8F}']
  { static getter & setter } 

    {class} function get_Instance: DNSqlDataSourceEnumerator;

  { static propertys } 

    ///<summary>
    ///  获取实例 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />
    ///  , ，它可以用于检索有关可用的 SQL Server 实例的信息。
    ///</summary>
    ///<returns>
    ///  一个实例 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />
    ///  用于检索有关可用的 SQL Server 实例的信息。
    ///</returns>
    {class} property Instance: DNSqlDataSourceEnumerator read get_Instance;
  end;

  ///<summary>
  ///  提供枚举的本地网络中的 SQL Server 的所有可用实例的机制。
  ///</summary>
  [DNTypeName('System.Data.Sql.SqlDataSourceEnumerator')]
  DNSqlDataSourceEnumerator = interface(DNDbDataSourceEnumerator)
  ['{0B789350-8957-30C4-B768-17F9F650DC54}']
  { methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Data.DataTable" />
    ///  包含所有可见 SQL Server 2000 或 SQL Server 2005 实例有关的信息。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Data.DataTable" />
    ///  包含可见的 SQL Server 实例有关的信息。
    ///</returns>
    function GetDataSources: DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlDataSourceEnumerator = class(TDNGenericImport<DNSqlDataSourceEnumeratorClass, DNSqlDataSourceEnumerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbEnumeratorClass = interface(DNObjectClass)
  ['{5B316C41-9FB5-58AF-916B-A357E6911750}']
  { constructors } 

    ///<summary>
    ///  使用指定的 <see cref="T:System.Data.Common.DbEnumerator" />
    ///  初始化 <see langword="DataReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="reader">
    ///  要通过其进行循环访问的 <see langword="DataReader" />
    ///  。
    ///</param>
    {class} function init(reader: DNIDataReader): DNDbEnumerator; overload;
    ///<summary>
    ///  使用指定的 <see langword="DataReader" />
    ///  初始化 <see cref="T:System.Data.Common.DbEnumerator" />
    ///  类的新实例，并指示在循环访问 <see langword="DataReader" />
    ///  的数据后是否将其自动关闭。
    ///</summary>
    ///  <param name="reader">
    ///  要通过其进行循环访问的 <see langword="DataReader" />
    ///  。
    ///</param>
    ///  <param name="closeReader">
    ///  若要在循环访问 <see langword="DataReader" />
    ///  的数据后将其自动关闭，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(reader: DNIDataReader; closeReader: Boolean): DNDbEnumerator; overload;
    ///<summary>
    ///  使用给定的数据读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="reader">
    ///  要对其进行循环访问的 DataReader。
    ///</param>
    {class} function init(reader: DNDbDataReader): DNDbEnumerator; overload;
    ///<summary>
    ///  使用指定的读取器初始化 <see cref="T:System.Data.Common.DbEnumerator" />
    ///  类的新实例，并表示在循环访问读取器的数据后是否将其自动关闭。
    ///</summary>
    ///  <param name="reader">
    ///  要对其进行循环访问的 DataReader。
    ///</param>
    ///  <param name="closeReader">
    ///  若要在循环访问 DataReader 的数据后将其自动关闭，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(reader: DNDbDataReader; closeReader: Boolean): DNDbEnumerator; overload;

  end;

  ///<summary>
  ///  公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />
  ///  方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。
  ///</summary>
  [DNTypeName('System.Data.Common.DbEnumerator')]
  DNDbEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{E4F30E4F-D3B2-3FF8-95A4-0207BB25EA7B}']
  { getters & setters } 

    function get_Current: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  将枚举数推进到集合的下一个元素。
    ///</summary>
    ///<returns>
    ///  如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />
    ///  ；如果枚举数传递到集合的末尾，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  创建枚举器后，已修改该集合。
    ///</exception>
    function MoveNext: Boolean;
    ///<summary>
    ///  将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  创建枚举器后，已修改该集合。
    ///</exception>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的当前元素。
    ///</summary>
    ///<returns>
    ///  集合中的当前元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  枚举器位于集合中第一个元素之前或最后一个元素之后。
    ///</exception>
    property Current: DDN.mscorlib.DNObject read get_Current;
  end;

  TDNDbEnumerator = class(TDNGenericImport<DNDbEnumeratorClass, DNDbEnumerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6FE4D1F-2EBB-54C8-897F-A87CB0E4B8F3}']
  { static fields getter & setter } 

   function __fakeFieldGet_MetaDataCollections: string;
   function __fakeFieldGet_DataSourceInformation: string;
   function __fakeFieldGet_DataTypes: string;
   function __fakeFieldGet_Restrictions: string;
   function __fakeFieldGet_ReservedWords: string;

  { static fields } 

    ///<summary>
    ///  与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" />
    ///  表示方法 MetaDataCollections 集合。
    ///</summary>
    {class} property MetaDataCollections: string read __fakeFieldGet_MetaDataCollections;
    ///<summary>
    ///  与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" />
    ///  表示方法 DataSourceInformation 集合。
    ///</summary>
    {class} property DataSourceInformation: string read __fakeFieldGet_DataSourceInformation;
    ///<summary>
    ///  与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" />
    ///  表示方法 DataTypes 集合。
    ///</summary>
    {class} property DataTypes: string read __fakeFieldGet_DataTypes;
    ///<summary>
    ///  与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" />
    ///  表示方法 限制 集合。
    ///</summary>
    {class} property Restrictions: string read __fakeFieldGet_Restrictions;
    ///<summary>
    ///  与一起使用的常量 <see cref="M:System.Data.Common.DbConnection.GetSchema" />
    ///  表示方法 ReservedWords 集合。
    ///</summary>
    {class} property ReservedWords: string read __fakeFieldGet_ReservedWords;

  end;

  ///<summary>
  ///  提供的已知的常量列表 MetaDataCollections: DataSourceInformation, ，DataTypes, ，MetaDataCollections, ，ReservedWords, ，和 限制。
  ///</summary>
  [DNTypeName('System.Data.Common.DbMetaDataCollectionNames')]
  DNDbMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{CE5E7406-07E8-3A8A-B04E-4043BD4AA10D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbMetaDataCollectionNames = class(TDNGenericImport<DNDbMetaDataCollectionNamesClass, DNDbMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbMetaDataColumnNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3ECE213-79F4-5D35-8F22-73F920EC4B0F}']
  { static fields getter & setter } 

   function __fakeFieldGet_CollectionName: string;
   function __fakeFieldGet_ColumnSize: string;
   function __fakeFieldGet_CompositeIdentifierSeparatorPattern: string;
   function __fakeFieldGet_CreateFormat: string;
   function __fakeFieldGet_CreateParameters: string;
   function __fakeFieldGet_DataSourceProductName: string;
   function __fakeFieldGet_DataSourceProductVersion: string;
   function __fakeFieldGet_DataType: string;
   function __fakeFieldGet_DataSourceProductVersionNormalized: string;
   function __fakeFieldGet_GroupByBehavior: string;
   function __fakeFieldGet_IdentifierCase: string;
   function __fakeFieldGet_IdentifierPattern: string;
   function __fakeFieldGet_IsAutoIncrementable: string;
   function __fakeFieldGet_IsBestMatch: string;
   function __fakeFieldGet_IsCaseSensitive: string;
   function __fakeFieldGet_IsConcurrencyType: string;
   function __fakeFieldGet_IsFixedLength: string;
   function __fakeFieldGet_IsFixedPrecisionScale: string;
   function __fakeFieldGet_IsLiteralSupported: string;
   function __fakeFieldGet_IsLong: string;
   function __fakeFieldGet_IsNullable: string;
   function __fakeFieldGet_IsSearchable: string;
   function __fakeFieldGet_IsSearchableWithLike: string;
   function __fakeFieldGet_IsUnsigned: string;
   function __fakeFieldGet_LiteralPrefix: string;
   function __fakeFieldGet_LiteralSuffix: string;
   function __fakeFieldGet_MaximumScale: string;
   function __fakeFieldGet_MinimumScale: string;
   function __fakeFieldGet_NumberOfIdentifierParts: string;
   function __fakeFieldGet_NumberOfRestrictions: string;
   function __fakeFieldGet_OrderByColumnsInSelect: string;
   function __fakeFieldGet_ParameterMarkerFormat: string;
   function __fakeFieldGet_ParameterMarkerPattern: string;
   function __fakeFieldGet_ParameterNameMaxLength: string;
   function __fakeFieldGet_ParameterNamePattern: string;
   function __fakeFieldGet_ProviderDbType: string;
   function __fakeFieldGet_QuotedIdentifierCase: string;
   function __fakeFieldGet_QuotedIdentifierPattern: string;
   function __fakeFieldGet_ReservedWord: string;
   function __fakeFieldGet_StatementSeparatorPattern: string;
   function __fakeFieldGet_StringLiteralPattern: string;
   function __fakeFieldGet_SupportedJoinOperators: string;
   function __fakeFieldGet_TypeName: string;

  { static fields } 

    ///<summary>
    ///  使用 GetSchema 方法来创建 CollectionName 中的列 DataTypes 集合。
    ///</summary>
    {class} property CollectionName: string read __fakeFieldGet_CollectionName;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ColumnSize 中的列 DataTypes 集合。
    ///</summary>
    {class} property ColumnSize: string read __fakeFieldGet_ColumnSize;
    ///<summary>
    ///  使用 GetSchema 方法来创建 CompositeIdentifierSeparatorPattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property CompositeIdentifierSeparatorPattern: string read __fakeFieldGet_CompositeIdentifierSeparatorPattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 CreateFormat 中的列 DataTypes 集合。
    ///</summary>
    {class} property CreateFormat: string read __fakeFieldGet_CreateFormat;
    ///<summary>
    ///  使用 GetSchema 方法来创建 CreateParameters 中的列 DataTypes 集合。
    ///</summary>
    {class} property CreateParameters: string read __fakeFieldGet_CreateParameters;
    ///<summary>
    ///  使用 GetSchema 方法来创建 DataSourceProductName 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property DataSourceProductName: string read __fakeFieldGet_DataSourceProductName;
    ///<summary>
    ///  使用 GetSchema 方法来创建 有时，DataSourceProductVersion 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property DataSourceProductVersion: string read __fakeFieldGet_DataSourceProductVersion;
    ///<summary>
    ///  使用 GetSchema 方法来创建 DataType 中的列 数据类型 集合。
    ///</summary>
    {class} property DataType: string read __fakeFieldGet_DataType;
    ///<summary>
    ///  使用 GetSchema 方法来创建 DataSourceProductVersionNormalized 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property DataSourceProductVersionNormalized: string read __fakeFieldGet_DataSourceProductVersionNormalized;
    ///<summary>
    ///  使用 GetSchema 方法来创建 GroupByBehavior 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property GroupByBehavior: string read __fakeFieldGet_GroupByBehavior;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IdentifierCase 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property IdentifierCase: string read __fakeFieldGet_IdentifierCase;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IdentifierPattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property IdentifierPattern: string read __fakeFieldGet_IdentifierPattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsAutoIncrementable 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsAutoIncrementable: string read __fakeFieldGet_IsAutoIncrementable;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsBestMatch 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsBestMatch: string read __fakeFieldGet_IsBestMatch;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsCaseSensitive 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsCaseSensitive: string read __fakeFieldGet_IsCaseSensitive;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsConcurrencyType 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsConcurrencyType: string read __fakeFieldGet_IsConcurrencyType;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsFixedLength 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsFixedLength: string read __fakeFieldGet_IsFixedLength;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsFixedPrecisionScale 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsFixedPrecisionScale: string read __fakeFieldGet_IsFixedPrecisionScale;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsLiteralSupported 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsLiteralSupported: string read __fakeFieldGet_IsLiteralSupported;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsLong 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsLong: string read __fakeFieldGet_IsLong;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsNullable 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsNullable: string read __fakeFieldGet_IsNullable;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsSearchable 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsSearchable: string read __fakeFieldGet_IsSearchable;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsSearchableWithLike 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsSearchableWithLike: string read __fakeFieldGet_IsSearchableWithLike;
    ///<summary>
    ///  使用 GetSchema 方法来创建 IsUnsigned 中的列 DataTypes 集合。
    ///</summary>
    {class} property IsUnsigned: string read __fakeFieldGet_IsUnsigned;
    ///<summary>
    ///  使用 GetSchema 方法来创建 LiteralPrefix 中的列 DataTypes 集合。
    ///</summary>
    {class} property LiteralPrefix: string read __fakeFieldGet_LiteralPrefix;
    ///<summary>
    ///  使用 GetSchema 方法来创建 LiteralSuffix 中的列 DataTypes 集合。
    ///</summary>
    {class} property LiteralSuffix: string read __fakeFieldGet_LiteralSuffix;
    ///<summary>
    ///  使用 GetSchema 方法来创建 MaximumScale 中的列 DataTypes 集合。
    ///</summary>
    {class} property MaximumScale: string read __fakeFieldGet_MaximumScale;
    ///<summary>
    ///  使用 GetSchema 方法来创建 MinimumScale 中的列 DataTypes 集合。
    ///</summary>
    {class} property MinimumScale: string read __fakeFieldGet_MinimumScale;
    ///<summary>
    ///  使用 GetSchema 方法来创建 NumberOfIdentifierParts 中的列 MetaDataCollections 集合。
    ///</summary>
    {class} property NumberOfIdentifierParts: string read __fakeFieldGet_NumberOfIdentifierParts;
    ///<summary>
    ///  使用 GetSchema 方法来创建 NumberOfRestrictions 中的列 MetaDataCollections 集合。
    ///</summary>
    {class} property NumberOfRestrictions: string read __fakeFieldGet_NumberOfRestrictions;
    ///<summary>
    ///  使用 GetSchema 方法来创建 OrderByColumnsInSelect 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property OrderByColumnsInSelect: string read __fakeFieldGet_OrderByColumnsInSelect;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ParameterMarkerFormat 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property ParameterMarkerFormat: string read __fakeFieldGet_ParameterMarkerFormat;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ParameterMarkerPattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property ParameterMarkerPattern: string read __fakeFieldGet_ParameterMarkerPattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ParameterNameMaxLength 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property ParameterNameMaxLength: string read __fakeFieldGet_ParameterNameMaxLength;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ParameterNamePattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property ParameterNamePattern: string read __fakeFieldGet_ParameterNamePattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ProviderDbType 中的列 DataTypes 集合。
    ///</summary>
    {class} property ProviderDbType: string read __fakeFieldGet_ProviderDbType;
    ///<summary>
    ///  使用 GetSchema 方法来创建 QuotedIdentifierCase 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property QuotedIdentifierCase: string read __fakeFieldGet_QuotedIdentifierCase;
    ///<summary>
    ///  使用 GetSchema 方法来创建 QuotedIdentifierPattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property QuotedIdentifierPattern: string read __fakeFieldGet_QuotedIdentifierPattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 ReservedWord 中的列 ReservedWords 集合。
    ///</summary>
    {class} property ReservedWord: string read __fakeFieldGet_ReservedWord;
    ///<summary>
    ///  使用 GetSchema 方法来创建 StatementSeparatorPattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property StatementSeparatorPattern: string read __fakeFieldGet_StatementSeparatorPattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 StringLiteralPattern 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property StringLiteralPattern: string read __fakeFieldGet_StringLiteralPattern;
    ///<summary>
    ///  使用 GetSchema 方法来创建 SupportedJoinOperators 中的列 DataSourceInformation 集合。
    ///</summary>
    {class} property SupportedJoinOperators: string read __fakeFieldGet_SupportedJoinOperators;
    ///<summary>
    ///  使用 GetSchema 方法来创建 TypeName 中的列 DataTypes 集合。
    ///</summary>
    {class} property TypeName: string read __fakeFieldGet_TypeName;

  end;

  ///<summary>
  ///  提供用于中的列名称的静态值 MetaDataCollection 中所含对象 <see cref="T:System.Data.DataTable" />
  ///  。
  ///<see cref="T:System.Data.DataTable" />
  ///  由创建 GetSchema 方法。
  ///</summary>
  [DNTypeName('System.Data.Common.DbMetaDataColumnNames')]
  DNDbMetaDataColumnNames = interface(DDN.mscorlib.DNObject)
  ['{179009F4-9A5A-331D-9FD8-A68057B57177}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbMetaDataColumnNames = class(TDNGenericImport<DNDbMetaDataColumnNamesClass, DNDbMetaDataColumnNames>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderConfigurationHandlerClass = interface(DNObjectClass)
  ['{ADCF575D-AD12-5CFA-BBF4-0B71877A90E9}']
  { constructors } 

    ///<summary>
    ///  此类可由任何提供程序，用于支持特定于提供程序的配置节。
    ///</summary>
    {class} function init: DNDbProviderConfigurationHandler;

  end;

  ///<summary>
  ///  此类可由任何提供程序，用于支持特定于提供程序的配置节。
  ///</summary>
  [DNTypeName('System.Data.Common.DbProviderConfigurationHandler')]
  DNDbProviderConfigurationHandler = interface(DDN.System.Configuration.DNIConfigurationSectionHandler)
  ['{25D5927A-38D6-3F85-B3C8-2E8603CB0C55}']
  { methods } 

    ///<summary>
    ///  创建一个新 <see cref="System.Collections.Specialized.NameValueCollection" />
    ///  表达式。
    ///</summary>
    ///  <param name="parent">
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</param>
    ///  <param name="configContext">
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</param>
    ///  <param name="section">
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</param>
    ///<returns>
    ///  新的表达式。
    ///</returns>
    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbProviderConfigurationHandler = class(TDNGenericImport<DNDbProviderConfigurationHandlerClass, DNDbProviderConfigurationHandler>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3FC1820-7795-59D2-9A22-9059712AD6E6}']
  { static methods } 

    ///<summary>
    ///  返回一个 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含有关实现 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  的所有已安装提供程序的信息。
    ///</summary>
    ///<returns>
    ///  返回一个 <see cref="T:System.Data.DataTable" />
    ///  ，它包含其中包含以下数据的 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///  列序号
    ///  列名称
    ///  描述
    ///  0
    ///  名称
    ///  数据提供程序的可识别名称。
    ///  1
    ///  描述
    ///  数据提供程序的可识别描述。
    ///  2
    ///  InvariantName
    ///  可以以编程方式用于引用数据提供程序的名称。
    ///  3
    ///  AssemblyQualifiedName
    ///  工厂类的完全限定名，它包含用于实例化该对象的足够的信息。
    ///</returns>
    {class} function GetFactoryClasses: DNDataTable;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  的一个实例。
    ///</summary>
    ///  <param name="providerInvariantName">
    ///  提供程序的固定名称。
    ///</param>
    ///<returns>
    ///  指定提供程序名称的 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  的一个实例。
    ///</returns>
    {class} function GetFactory(providerInvariantName: string): DNDbProviderFactory; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  的一个实例。
    ///</summary>
    ///  <param name="providerRow"><see cref="T:System.Data.DataRow" />
    ///  包含提供程序的配置信息。
    ///</param>
    ///<returns>
    ///  指定 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  的 <see cref="T:System.Data.DataRow" />
    ///  的一个实例。
    ///</returns>
    {class} function GetFactory(providerRow: DNDataRow): DNDbProviderFactory; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  的一个实例。
    ///</summary>
    ///  <param name="connection">
    ///  使用的连接。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  为指定的连接。
    ///</returns>
    {class} function GetFactory(connection: DNDbConnection): DNDbProviderFactory; overload;

  end;

  ///<summary>
  ///  表示一组静态方法，这些方法用于创建 <see cref="T:System.Data.Common.DbProviderFactory" />
  ///  类的一个或多个实例。
  ///</summary>
  [DNTypeName('System.Data.Common.DbProviderFactories')]
  DNDbProviderFactories = interface(DDN.mscorlib.DNObject)
  ['{4F66693F-753B-38BA-8CE7-5993A84851D8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbProviderFactories = class(TDNGenericImport<DNDbProviderFactoriesClass, DNDbProviderFactories>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoriesConfigurationHandlerClass = interface(DNObjectClass)
  ['{0DD69E91-5FF4-5654-B866-09AFECEF66F1}']
  { constructors } 

    ///<summary>
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</summary>
    {class} function init: DNDbProviderFactoriesConfigurationHandler;

  end;

  ///<summary>
  ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
  ///</summary>
  [DNTypeName('System.Data.Common.DbProviderFactoriesConfigurationHandler')]
  DNDbProviderFactoriesConfigurationHandler = interface(DDN.System.Configuration.DNIConfigurationSectionHandler)
  ['{7C35AC0E-F224-3EB1-BF6D-153E48CA5FF2}']
  { methods } 

    ///<summary>
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="parent">
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</param>
    ///  <param name="configContext">
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</param>
    ///  <param name="section">
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</param>
    ///<returns>
    ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
    ///</returns>
    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbProviderFactoriesConfigurationHandler = class(TDNGenericImport<DNDbProviderFactoriesConfigurationHandlerClass, DNDbProviderFactoriesConfigurationHandler>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BCE20412-E2C3-5A60-BC9A-7A98ECCFF473}']
  end;

  ///<summary>
  ///  表示一组方法，这些方法用于创建数据源类的提供程序实现的实例。
  ///</summary>
  [DNTypeName('System.Data.Common.DbProviderFactory')]
  DNDbProviderFactory = interface(DDN.mscorlib.DNObject)
  ['{D444E2EA-2294-335C-AD61-ECF89730C995}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbCommand" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbCommand" />
    ///  的新实例。
    ///</returns>
    function CreateCommand: DNDbCommand;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  的新实例。
    ///</returns>
    function CreateCommandBuilder: DNDbCommandBuilder;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbConnection" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbConnection" />
    ///  的新实例。
    ///</returns>
    function CreateConnection: DNDbConnection;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  的新实例。
    ///</returns>
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbDataAdapter" />
    ///  的新实例。
    ///</returns>
    function CreateDataAdapter: DNDbDataAdapter;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbParameter" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbParameter" />
    ///  的新实例。
    ///</returns>
    function CreateParameter: DNDbParameter;
    ///<summary>
    ///  返回实现 <see cref="T:System.Security.CodeAccessPermission" />
    ///  类的提供程序版本的提供程序类的一个新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Security.CodeAccessPermission" />
    ///  的一个 <see cref="T:System.Security.Permissions.PermissionState" />
    ///  对象。
    ///</returns>
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  的新实例。
    ///</returns>
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定是否特定于 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果实例 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNDbProviderFactory = class(TDNGenericImport<DNDbProviderFactoryClass, DNDbProviderFactory>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcFactoryClass = interface(DNDbProviderFactoryClass)
  ['{A8BB5F11-B5CF-56F5-B43D-EE80FE09FC7E}']
  { static fields getter & setter } 

   function __fakeFieldGet_Instance: DNOdbcFactory;

  { static fields } 

    ///<summary>
    ///  获取实例 <see cref="T:System.Data.Odbc.OdbcFactory" />
    ///  , ，它可以用于检索强类型化数据对象。
    ///</summary>
    {class} property Instance: DNOdbcFactory read __fakeFieldGet_Instance;

  end;

  ///<summary>
  ///  表示一组方法用于创建 ODBC 访问接口的实现的数据源类的实例。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcFactory')]
  DNOdbcFactory = interface(DNDbProviderFactory)
  ['{27C6B951-E1BC-3BB3-BEB7-6F0D23C21915}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbCommand" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbCommand" />
    ///  。
    ///</returns>
    function CreateCommand: DNDbCommand;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    function CreateCommandBuilder: DNDbCommandBuilder;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbConnection" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbConnection" />
    ///  。
    ///</returns>
    function CreateConnection: DNDbConnection;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</returns>
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  。
    ///</returns>
    function CreateDataAdapter: DNDbDataAdapter;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbParameter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbParameter" />
    ///  。
    ///</returns>
    function CreateParameter: DNDbParameter;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Security.CodeAccessPermission" />
    ///  实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  枚举的一个成员。
    ///</param>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Security.CodeAccessPermission" />
    ///  。
    ///</returns>
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  的新实例。
    ///</returns>
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定是否特定于 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果实例 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNOdbcFactory = class(TDNGenericImport<DNOdbcFactoryClass, DNOdbcFactory>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbFactoryClass = interface(DNDbProviderFactoryClass)
  ['{F526CC0E-C8D3-5B64-B170-4B6621E0E3BA}']
  { static fields getter & setter } 

   function __fakeFieldGet_Instance: DNOleDbFactory;

  { static fields } 

    ///<summary>
    ///  获取实例 <see cref="T:System.Data.OleDb.OleDbFactory" />
    ///  。
    ///  这可以用于检索强类型化数据对象。
    ///</summary>
    {class} property Instance: DNOleDbFactory read __fakeFieldGet_Instance;

  end;

  ///<summary>
  ///  表示一组方法用于创建 OLEDB 访问接口的实现的数据源类的实例。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbFactory')]
  DNOleDbFactory = interface(DNDbProviderFactory)
  ['{E0D6CA8C-13A3-3E42-881A-EBEA076DE2FE}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbCommand" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbCommand" />
    ///  。
    ///</returns>
    function CreateCommand: DNDbCommand;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    function CreateCommandBuilder: DNDbCommandBuilder;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbConnection" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbConnection" />
    ///  。
    ///</returns>
    function CreateConnection: DNDbConnection;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</returns>
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  。
    ///</returns>
    function CreateDataAdapter: DNDbDataAdapter;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbParameter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  新的强类型实例的 <see cref="T:System.Data.Common.DbParameter" />
    ///  。
    ///</returns>
    function CreateParameter: DNDbParameter;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Security.CodeAccessPermission" />
    ///  实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  枚举的一个成员。
    ///</param>
    ///<returns>
    ///  强类型化实例 <see cref="T:System.Security.CodeAccessPermission" />
    ///  。
    ///</returns>
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    ///<summary>
    ///  返回实现 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类的提供程序类的一个新实例。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  的新实例。
    ///</returns>
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定是否特定于 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果实例 <see cref="T:System.Data.Common.DbProviderFactory" />
    ///  支持 <see cref="T:System.Data.Common.DbDataSourceEnumerator" />
    ///  类; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNOleDbFactory = class(TDNGenericImport<DNOleDbFactoryClass, DNOleDbFactory>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientFactoryClass = interface(DNDbProviderFactoryClass)
  ['{1A62464C-3560-5279-A3FD-D2CB7A2C0BB2}']
  { static fields getter & setter } 

   function __fakeFieldGet_Instance: DNSqlClientFactory;

  { static fields } 

    ///<summary>
    ///  获取实例 <see cref="T:System.Data.SqlClient.SqlClientFactory" />
    ///  。
    ///  这可以用于检索强类型化的数据对象。
    ///</summary>
    {class} property Instance: DNSqlClientFactory read __fakeFieldGet_Instance;

  end;

  ///<summary>
  ///  表示一组方法用于创建实例 <see cref="N:System.Data.SqlClient" />
  ///  的数据源类的提供程序的实现。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlClientFactory')]
  DNSqlClientFactory = interface(DNDbProviderFactory)
  ['{FCF7570C-31C8-34C5-93D2-6A37D7612323}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbCommand" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  强类型化的新实例 <see cref="T:System.Data.Common.DbCommand" />
    ///  。
    ///</returns>
    function CreateCommand: DNDbCommand;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  强类型化的新实例 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    function CreateCommandBuilder: DNDbCommandBuilder;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbConnection" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  强类型化的新实例 <see cref="T:System.Data.Common.DbConnection" />
    ///  。
    ///</returns>
    function CreateConnection: DNDbConnection;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  强类型化的新实例 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />
    ///  。
    ///</returns>
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  强类型化的新实例 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  。
    ///</returns>
    function CreateDataAdapter: DNDbDataAdapter;
    ///<summary>
    ///  返回一个强类型 <see cref="T:System.Data.Common.DbParameter" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  强类型化的新实例 <see cref="T:System.Data.Common.DbParameter" />
    ///  。
    ///</returns>
    function CreateParameter: DNDbParameter;
    ///<summary>
    ///  返回一个新的 <see cref="T:System.Security.CodeAccessPermission" />
    ///  。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  枚举的一个成员。
    ///</param>
    ///<returns>
    ///  强类型化的实例的 <see cref="T:System.Security.CodeAccessPermission" />
    ///  。
    ///</returns>
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    ///<summary>
    ///  返回一个新的 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的数据源枚举器。
    ///</returns>
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />
    ///  可创建; 否则为 <see langword="false" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />
    ///  可创建; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNSqlClientFactory = class(TDNGenericImport<DNSqlClientFactoryClass, DNSqlClientFactory>) end;

  //-------------namespace: System.Data.Common----------------
  DNSchemaTableColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{340E6785-7541-5ED1-9F11-8E382841FC4A}']
  { static fields getter & setter } 

   function __fakeFieldGet_ColumnName: string;
   function __fakeFieldGet_ColumnOrdinal: string;
   function __fakeFieldGet_ColumnSize: string;
   function __fakeFieldGet_NumericPrecision: string;
   function __fakeFieldGet_NumericScale: string;
   function __fakeFieldGet_DataType: string;
   function __fakeFieldGet_ProviderType: string;
   function __fakeFieldGet_NonVersionedProviderType: string;
   function __fakeFieldGet_IsLong: string;
   function __fakeFieldGet_AllowDBNull: string;
   function __fakeFieldGet_IsAliased: string;
   function __fakeFieldGet_IsExpression: string;
   function __fakeFieldGet_IsKey: string;
   function __fakeFieldGet_IsUnique: string;
   function __fakeFieldGet_BaseSchemaName: string;
   function __fakeFieldGet_BaseTableName: string;
   function __fakeFieldGet_BaseColumnName: string;

  { static fields } 

    ///<summary>
    ///  指定架构表中的列的名称。
    ///</summary>
    {class} property ColumnName: string read __fakeFieldGet_ColumnName;
    ///<summary>
    ///  指定列的序号。
    ///</summary>
    {class} property ColumnOrdinal: string read __fakeFieldGet_ColumnOrdinal;
    ///<summary>
    ///  指定列的大小。
    ///</summary>
    {class} property ColumnSize: string read __fakeFieldGet_ColumnSize;
    ///<summary>
    ///  如果是数值数据，请指定列数据的精度。
    ///</summary>
    {class} property NumericPrecision: string read __fakeFieldGet_NumericPrecision;
    ///<summary>
    ///  如果是数值数据，请指定列数据的小数位数。
    ///</summary>
    {class} property NumericScale: string read __fakeFieldGet_NumericScale;
    ///<summary>
    ///  指定列中的数据类型。
    ///</summary>
    {class} property DataType: string read __fakeFieldGet_DataType;
    ///<summary>
    ///  指定列的提供程序特定的数据类型。
    ///</summary>
    {class} property ProviderType: string read __fakeFieldGet_ProviderType;
    ///<summary>
    ///  指定列的非版本化提供程序特定的数据类型。
    ///</summary>
    {class} property NonVersionedProviderType: string read __fakeFieldGet_NonVersionedProviderType;
    ///<summary>
    ///  指定此列是否包含长整型数据。
    ///</summary>
    {class} property IsLong: string read __fakeFieldGet_IsLong;
    ///<summary>
    ///  指定是否值 <see langword="DBNull" />
    ///  允许的。
    ///</summary>
    {class} property AllowDBNull: string read __fakeFieldGet_AllowDBNull;
    ///<summary>
    ///  指定该列是否是使用别名。
    ///</summary>
    {class} property IsAliased: string read __fakeFieldGet_IsAliased;
    ///<summary>
    ///  指定此列是否是一个表达式。
    ///</summary>
    {class} property IsExpression: string read __fakeFieldGet_IsExpression;
    ///<summary>
    ///  指定该列是否是表的键。
    ///</summary>
    {class} property IsKey: string read __fakeFieldGet_IsKey;
    ///<summary>
    ///  指定唯一约束适用于此列。
    ///</summary>
    {class} property IsUnique: string read __fakeFieldGet_IsUnique;
    ///<summary>
    ///  指定架构表中的架构的名称。
    ///</summary>
    {class} property BaseSchemaName: string read __fakeFieldGet_BaseSchemaName;
    ///<summary>
    ///  指定架构表中的表的名称。
    ///</summary>
    {class} property BaseTableName: string read __fakeFieldGet_BaseTableName;
    ///<summary>
    ///  指定架构表中的列的名称。
    ///</summary>
    {class} property BaseColumnName: string read __fakeFieldGet_BaseColumnName;

  end;

  ///<summary>
  ///  描述列元数据的数据库表的架构。
  ///</summary>
  [DNTypeName('System.Data.Common.SchemaTableColumn')]
  DNSchemaTableColumn = interface(DDN.mscorlib.DNObject)
  ['{945894BD-B20F-3623-92A4-CFBC2CF121D8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSchemaTableColumn = class(TDNGenericImport<DNSchemaTableColumnClass, DNSchemaTableColumn>) end;

  //-------------namespace: System.Data.Common----------------
  DNSchemaTableOptionalColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86063EB6-8BF1-5ADA-8DF4-B9E9FA661882}']
  { static fields getter & setter } 

   function __fakeFieldGet_ProviderSpecificDataType: string;
   function __fakeFieldGet_IsAutoIncrement: string;
   function __fakeFieldGet_IsHidden: string;
   function __fakeFieldGet_IsReadOnly: string;
   function __fakeFieldGet_IsRowVersion: string;
   function __fakeFieldGet_BaseServerName: string;
   function __fakeFieldGet_BaseCatalogName: string;
   function __fakeFieldGet_AutoIncrementSeed: string;
   function __fakeFieldGet_AutoIncrementStep: string;
   function __fakeFieldGet_DefaultValue: string;
   function __fakeFieldGet_Expression: string;
   function __fakeFieldGet_BaseTableNamespace: string;
   function __fakeFieldGet_BaseColumnNamespace: string;
   function __fakeFieldGet_ColumnMapping: string;

  { static fields } 

    ///<summary>
    ///  指定列的提供程序特定的数据类型。
    ///</summary>
    {class} property ProviderSpecificDataType: string read __fakeFieldGet_ProviderSpecificDataType;
    ///<summary>
    ///  指定是否将自动增加列中的列的值。
    ///</summary>
    {class} property IsAutoIncrement: string read __fakeFieldGet_IsAutoIncrement;
    ///<summary>
    ///  指定是否隐藏此列。
    ///</summary>
    {class} property IsHidden: string read __fakeFieldGet_IsHidden;
    ///<summary>
    ///  指定该列是否是只读的。
    ///</summary>
    {class} property IsReadOnly: string read __fakeFieldGet_IsReadOnly;
    ///<summary>
    ///  指定此列是否包含行版本信息。
    ///</summary>
    {class} property IsRowVersion: string read __fakeFieldGet_IsRowVersion;
    ///<summary>
    ///  列的服务器名称。
    ///</summary>
    {class} property BaseServerName: string read __fakeFieldGet_BaseServerName;
    ///<summary>
    ///  与最新的查询的结果相关联的目录的名称。
    ///</summary>
    {class} property BaseCatalogName: string read __fakeFieldGet_BaseCatalogName;
    ///<summary>
    ///  指定从该处分配新标识列系列的值。
    ///</summary>
    {class} property AutoIncrementSeed: string read __fakeFieldGet_AutoIncrementSeed;
    ///<summary>
    ///  指定标识列中的值之间的增量。
    ///</summary>
    {class} property AutoIncrementStep: string read __fakeFieldGet_AutoIncrementStep;
    ///<summary>
    ///  列的默认值。
    ///</summary>
    {class} property DefaultValue: string read __fakeFieldGet_DefaultValue;
    ///<summary>
    ///  用来计算该列的表达式。
    ///</summary>
    {class} property Expression: string read __fakeFieldGet_Expression;
    ///<summary>
    ///  包含列的表的命名空间。
    ///</summary>
    {class} property BaseTableNamespace: string read __fakeFieldGet_BaseTableNamespace;
    ///<summary>
    ///  列的命名空间。
    ///</summary>
    {class} property BaseColumnNamespace: string read __fakeFieldGet_BaseColumnNamespace;
    ///<summary>
    ///  指定列的映射。
    ///</summary>
    {class} property ColumnMapping: string read __fakeFieldGet_ColumnMapping;

  end;

  ///<summary>
  ///  描述数据库表的架构的可选列元数据。
  ///</summary>
  [DNTypeName('System.Data.Common.SchemaTableOptionalColumn')]
  DNSchemaTableOptionalColumn = interface(DDN.mscorlib.DNObject)
  ['{12B8017E-5FCB-31B1-82FC-C00CB63695FC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSchemaTableOptionalColumn = class(TDNGenericImport<DNSchemaTableOptionalColumnClass, DNSchemaTableOptionalColumn>) end;

  //-------------namespace: System.Data----------------
  DNConstraintClass = interface(DDN.mscorlib.DNObjectClass)
  ['{376E489F-FCFD-5759-9D08-4ECBEE117D5D}']
  end;

  ///<summary>
  ///  表示对一个或多个可以强制实施的约束 <see cref="T:System.Data.DataColumn" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Data.Constraint')]
  DNConstraint = interface(DDN.mscorlib.DNObject)
  ['{EB020EE2-BFFB-30DF-B5FA-7769DC394BD2}']
  { getters & setters } 

    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_Table: DNDataTable;
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    ///<summary>
    ///  获取 <see cref="P:System.Data.Constraint.ConstraintName" />
    ///  , ，如果有一个作为字符串。
    ///</summary>
    ///<returns>
    ///  字符串值 <see cref="P:System.Data.Constraint.ConstraintName" />
    ///  。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  中的约束的名称 <see cref="T:System.Data.ConstraintCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.Constraint" />
    ///  名称为 null 值或空字符串。
    ///</exception><exception cref="T:System.Data.DuplicateNameException"><see cref="T:System.Data.ConstraintCollection" />
    ///  已包含 <see cref="T:System.Data.Constraint" />
    ///  具有相同名称 （比较不区分大小写。）。
    ///</exception>
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  向应用约束。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  向应用约束。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  获取用户定义的约束属性的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  的自定义信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNConstraint = class(TDNGenericImport<DNConstraintClass, DNConstraint>) end;

  //-------------namespace: System.Data----------------
  DNForeignKeyConstraintClass = interface(DNConstraintClass)
  ['{E2C7B0FB-A5E1-57AF-BD3E-BFC62C242C38}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  类，具有指定的父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="parentColumn">
    ///  父 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///  <param name="childColumn">
    ///  子 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个列 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型。
    ///  -或者-
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNForeignKeyConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  类，具有指定的名称、 父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="constraintName">
    ///  约束的名称。
    ///</param>
    ///  <param name="parentColumn">
    ///  父 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///  <param name="childColumn">
    ///  子 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个列 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型。
    ///  -或者-
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(constraintName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNForeignKeyConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  类与指定的数组一起使用的父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个列 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型。
    ///  -或者-
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNForeignKeyConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  带有指定的名称和父级和子级的数组类 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="constraintName"><see cref="T:System.Data.ForeignKeyConstraint" />
    ///  的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串，将提供一个默认名称，添加到约束集合时。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see cref="T:System.Data.DataColumn" />
    ///  约束中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个列 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型。
    ///  -或者-
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(constraintName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNForeignKeyConstraint; overload;
    ///<summary>
    ///  此构造函数用于在 Visual Studio 环境中的设计时支持。
    ///<see cref="T:System.Data.ForeignKeyConstraint" />
    ///  然后必须通过向集合添加使用此构造函数创建的对象 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />
    ///  。
    ///  表和具有指定名称的列必须存在于调用该方法时，或者如果 <see cref="M:System.Data.DataTable.BeginInit" />
    ///  已调用之前调用此构造函数、 表和具有指定名称的列时必须存在， <see cref="M:System.Data.DataTable.EndInit" />
    ///  调用。
    ///</summary>
    ///  <param name="constraintName">
    ///  约束的名称。
    ///</param>
    ///  <param name="parentTableName">
    ///  父项的名称 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含父 <see cref="T:System.Data.DataColumn" />
    ///  约束中的对象。
    ///</param>
    ///  <param name="parentColumnNames">
    ///  父项的名称的数组 <see cref="T:System.Data.DataColumn" />
    ///  约束中的对象。
    ///</param>
    ///  <param name="childColumnNames">
    ///  名称的子数组 <see cref="T:System.Data.DataColumn" />
    ///  约束中的对象。
    ///</param>
    ///  <param name="acceptRejectRule"><see cref="T:System.Data.AcceptRejectRule" />
    ///  值之一。
    ///  可能的值包括 <see langword="None" />
    ///  , ，<see langword="Cascade" />
    ///  , ，和 <see langword="Default" />
    ///  。
    ///</param>
    ///  <param name="deleteRule">
    ///  其中一个 <see cref="T:System.Data.Rule" />
    ///  删除某行时要使用值。
    ///  默认值为 <see langword="Cascade" />
    ///  。
    ///  可能的值包括︰ <see langword="None" />
    ///  , ，<see langword="Cascade" />
    ///  , ，<see langword="SetNull" />
    ///  , ，<see langword="SetDefault" />
    ///  , ，和 <see langword="Default" />
    ///  。
    ///</param>
    ///  <param name="updateRule">
    ///  其中一个 <see cref="T:System.Data.Rule" />
    ///  更新了某行时要使用值。
    ///  默认值为 <see langword="Cascade" />
    ///  。
    ///  可能的值包括︰ <see langword="None" />
    ///  , ，<see langword="Cascade" />
    ///  , ，<see langword="SetNull" />
    ///  , ，<see langword="SetDefault" />
    ///  , ，和 <see langword="Default" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个列 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型。
    ///  -或者-
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(constraintName: string; parentTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; acceptRejectRule: DNAcceptRejectRule; deleteRule: DNRule; updateRule: DNRule): DNForeignKeyConstraint; overload;
    ///<summary>
    ///  此构造函数用于在 Visual Studio 环境中的设计时支持。
    ///<see cref="T:System.Data.ForeignKeyConstraint" />
    ///  然后必须通过向集合添加使用此构造函数创建的对象 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />
    ///  。
    ///  表和具有指定名称的列必须存在于调用该方法时，或者如果 <see cref="M:System.Data.DataTable.BeginInit" />
    ///  已调用之前调用此构造函数、 表和具有指定名称的列时必须存在， <see cref="M:System.Data.DataTable.EndInit" />
    ///  调用。
    ///</summary>
    ///  <param name="constraintName">
    ///  约束的名称。
    ///</param>
    ///  <param name="parentTableName">
    ///  父项的名称 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含父 <see cref="T:System.Data.DataColumn" />
    ///  约束中的对象。
    ///</param>
    ///  <param name="parentTableNamespace"><see cref="P:System.Data.DataTable.Namespace" />
    ///  的名称。
    ///</param>
    ///  <param name="parentColumnNames">
    ///  父项的名称的数组 <see cref="T:System.Data.DataColumn" />
    ///  约束中的对象。
    ///</param>
    ///  <param name="childColumnNames">
    ///  名称的子数组 <see cref="T:System.Data.DataColumn" />
    ///  约束中的对象。
    ///</param>
    ///  <param name="acceptRejectRule"><see cref="T:System.Data.AcceptRejectRule" />
    ///  值之一。
    ///  可能的值包括 <see langword="None" />
    ///  , ，<see langword="Cascade" />
    ///  , ，和 <see langword="Default" />
    ///  。
    ///</param>
    ///  <param name="deleteRule">
    ///  其中一个 <see cref="T:System.Data.Rule" />
    ///  删除某行时要使用值。
    ///  默认值为 <see langword="Cascade" />
    ///  。
    ///  可能的值包括︰ <see langword="None" />
    ///  , ，<see langword="Cascade" />
    ///  , ，<see langword="SetNull" />
    ///  , ，<see langword="SetDefault" />
    ///  , ，和 <see langword="Default" />
    ///  。
    ///</param>
    ///  <param name="updateRule">
    ///  其中一个 <see cref="T:System.Data.Rule" />
    ///  更新了某行时要使用值。
    ///  默认值为 <see langword="Cascade" />
    ///  。
    ///  可能的值包括︰ <see langword="None" />
    ///  , ，<see langword="Cascade" />
    ///  , ，<see langword="SetNull" />
    ///  , ，<see langword="SetDefault" />
    ///  , ，和 <see langword="Default" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个列 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型。
    ///  -或者-
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(constraintName: string; parentTableName: string; parentTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; acceptRejectRule: DNAcceptRejectRule; deleteRule: DNRule; updateRule: DNRule): DNForeignKeyConstraint; overload;

  end;

  ///<summary>
  ///  表示某个值或行已删除或更新时在一组主键/外键关系的列上强制执行的操作限制。
  ///</summary>
  [DNTypeName('System.Data.ForeignKeyConstraint')]
  DNForeignKeyConstraint = interface(DNConstraint)
  ['{9CEA06B5-47F6-3E63-B5F4-9564F1F86276}']
  { getters & setters } 

    function get_Columns: TArray<DNDataColumn>;
    function get_Table: DNDataTable;
    function get_AcceptRejectRule: DNAcceptRejectRule;
    procedure set_AcceptRejectRule(value: DNAcceptRejectRule);
    function get_DeleteRule: DNRule;
    procedure set_DeleteRule(value: DNRule);
    function get_RelatedColumns: TArray<DNDataColumn>;
    function get_RelatedTable: DNDataTable;
    function get_UpdateRule: DNRule;
    procedure set_UpdateRule(value: DNRule);
    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否当前 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  等同于指定的对象。
    ///</summary>
    ///  <param name="key">
    ///  与此对象 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  进行比较。
    ///  两个 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  相等，如果它们约束相同的列。
    ///</param>
    ///<returns><see langword="true" />
    ///  , 如果对象是相同的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(key: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此实例的哈希代码 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取 <see cref="P:System.Data.Constraint.ConstraintName" />
    ///  , ，如果有一个作为字符串。
    ///</summary>
    ///<returns>
    ///  字符串值 <see cref="P:System.Data.Constraint.ConstraintName" />
    ///  。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此约束列的子级。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  是该约束的子列的对象。
    ///</returns>
    property Columns: TArray<DNDataColumn> read get_Columns;
    ///<summary>
    ///  获取此约束的子表。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  约束中的子表。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  指示应发生跨此约束的操作时<see cref="M:System.Data.DataTable.AcceptChanges" />
    ///  调用。
    ///</summary>
    ///<returns><see cref="T:System.Data.AcceptRejectRule" />
    ///  值之一。
    ///  可能的值包括<see langword="None" />
    ///  ，和<see langword="Cascade" />
    ///  。
    ///  默认值为 <see langword="None" />
    ///  。
    ///</returns>
    property AcceptRejectRule: DNAcceptRejectRule read get_AcceptRejectRule write set_AcceptRejectRule;
    ///<summary>
    ///  获取或设置通过该约束删除了某行时发生的操作。
    ///</summary>
    ///<returns><see cref="T:System.Data.Rule" />
    ///  值之一。
    ///  默认值为 <see langword="Cascade" />
    ///  。
    ///</returns>
    property DeleteRule: DNRule read get_DeleteRule write set_DeleteRule;
    ///<summary>
    ///  此约束的父列。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  约束的父列的对象。
    ///</returns>
    property RelatedColumns: TArray<DNDataColumn> read get_RelatedColumns;
    ///<summary>
    ///  获取此约束的父表。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataTable" />
    ///  此约束。
    ///</returns>
    property RelatedTable: DNDataTable read get_RelatedTable;
    ///<summary>
    ///  获取或设置当更新行时，通过此约束发生的操作。
    ///</summary>
    ///<returns><see cref="T:System.Data.Rule" />
    ///  值之一。
    ///  默认值为 <see langword="Cascade" />
    ///  。
    ///</returns>
    property UpdateRule: DNRule read get_UpdateRule write set_UpdateRule;
    ///<summary>
    ///  中的约束的名称 <see cref="T:System.Data.ConstraintCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.Constraint" />
    ///  名称为 null 值或空字符串。
    ///</exception><exception cref="T:System.Data.DuplicateNameException"><see cref="T:System.Data.ConstraintCollection" />
    ///  已包含 <see cref="T:System.Data.Constraint" />
    ///  具有相同名称 （比较不区分大小写。）。
    ///</exception>
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    ///<summary>
    ///  获取用户定义的约束属性的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  的自定义信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNForeignKeyConstraint = class(TDNGenericImport<DNForeignKeyConstraintClass, DNForeignKeyConstraint>) end;

  //-------------namespace: System.Data----------------
  DNUniqueConstraintClass = interface(DNConstraintClass)
  ['{5999817A-58A5-5682-8C2C-C667F7EB385E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  类具有指定名称和 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  约束的名称。
    ///</param>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  来约束。
    ///</param>
    {class} function init(name: string; column: DNDataColumn): DNUniqueConstraint; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Data.UniqueConstraint" />
    ///  初始化 <see cref="T:System.Data.DataColumn" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  来约束。
    ///</param>
    {class} function init(column: DNDataColumn): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  带有指定的名称和构成的数组类 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="name">
    ///  约束的名称。
    ///</param>
    ///  <param name="columns">
    ///  数组 <see cref="T:System.Data.DataColumn" />
    ///  要约束的对象。
    ///</param>
    {class} function init(name: string; columns: TArray<DNDataColumn>): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  与给定的数组类 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="columns">
    ///  数组 <see cref="T:System.Data.DataColumn" />
    ///  要约束的对象。
    ///</param>
    {class} function init(columns: TArray<DNDataColumn>): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  初始化具有指定名称的数组 <see cref="T:System.Data.DataColumn" />
    ///  对象，如果要限制和一个值，指定约束是否为主键。
    ///</summary>
    ///  <param name="name">
    ///  约束的名称。
    ///</param>
    ///  <param name="columnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  要约束的对象。
    ///</param>
    ///  <param name="isPrimaryKey"><see langword="true" />
    ///  若要指示约束是主键;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(name: string; columnNames: TArray<string>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  初始化具有指定名称 <see cref="T:System.Data.DataColumn" />
    ///  要约束和指定约束是否为主键的值。
    ///</summary>
    ///  <param name="name">
    ///  约束的名称。
    ///</param>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  来约束。
    ///</param>
    ///  <param name="isPrimaryKey"><see langword="true" />
    ///  若要指示约束是主键;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(name: string; column: DNDataColumn; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  类 <see cref="T:System.Data.DataColumn" />
    ///  要约束和指定约束是否为主键的值。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  来约束。
    ///</param>
    ///  <param name="isPrimaryKey"><see langword="true" />
    ///  若要指示约束是主键;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(column: DNDataColumn; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  初始化具有指定名称的数组 <see cref="T:System.Data.DataColumn" />
    ///  对象，如果要限制和一个值，指定约束是否为主键。
    ///</summary>
    ///  <param name="name">
    ///  约束的名称。
    ///</param>
    ///  <param name="columns">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  要约束的对象。
    ///</param>
    ///  <param name="isPrimaryKey"><see langword="true" />
    ///  若要指示约束是主键;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(name: string; columns: TArray<DNDataColumn>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.UniqueConstraint" />
    ///  使用数组类 <see cref="T:System.Data.DataColumn" />
    ///  对象，如果要限制和一个值，指定约束是否为主键。
    ///</summary>
    ///  <param name="columns">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  要约束的对象。
    ///</param>
    ///  <param name="isPrimaryKey"><see langword="true" />
    ///  若要指示约束是主键;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(columns: TArray<DNDataColumn>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;

  end;

  ///<summary>
  ///  表示对一组列中所有值必须都是唯一的限制。
  ///</summary>
  [DNTypeName('System.Data.UniqueConstraint')]
  DNUniqueConstraint = interface(DNConstraint)
  ['{2E43B09D-4045-385B-9FBA-0D749852FE19}']
  { getters & setters } 

    function get_Columns: TArray<DNDataColumn>;
    function get_IsPrimaryKey: Boolean;
    function get_Table: DNDataTable;
    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    ///<summary>
    ///  比较此约束到一秒钟，以确定是否两者均相同。
    ///</summary>
    ///  <param name="key2">
    ///  与此对象 <see cref="T:System.Data.UniqueConstraint" />
    ///  进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  , 如果约束相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(key2: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此实例的哈希代码 <see cref="T:System.Data.UniqueConstraint" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取 <see cref="P:System.Data.Constraint.ConstraintName" />
    ///  , ，如果有一个作为字符串。
    ///</summary>
    ///<returns>
    ///  字符串值 <see cref="P:System.Data.Constraint.ConstraintName" />
    ///  。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此约束影响的列的数组。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象数组。
    ///</returns>
    property Columns: TArray<DNDataColumn> read get_Columns;
    ///<summary>
    ///  获取一个值，该值指示在主键上为该约束。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果约束是对主键;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPrimaryKey: Boolean read get_IsPrimaryKey;
    ///<summary>
    ///  获取此约束所属的表。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  约束所属。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  中的约束的名称 <see cref="T:System.Data.ConstraintCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.Constraint" />
    ///  名称为 null 值或空字符串。
    ///</exception><exception cref="T:System.Data.DuplicateNameException"><see cref="T:System.Data.ConstraintCollection" />
    ///  已包含 <see cref="T:System.Data.Constraint" />
    ///  具有相同名称 （比较不区分大小写。）。
    ///</exception>
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    ///<summary>
    ///  获取用户定义的约束属性的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  的自定义信息。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNUniqueConstraint = class(TDNGenericImport<DNUniqueConstraintClass, DNUniqueConstraint>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C2B58DB-0CF6-54E5-A228-9139B6D1F527}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定 <see cref="T:System.Data.DataRelation" />
    ///  名称、 父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="relationName"><see cref="T:System.Data.DataRelation" />
    ///  的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumn">
    ///  父 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///  <param name="childColumn">
    ///  子 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象包含 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定的名称、 父级和子级 <see cref="T:System.Data.DataColumn" />
    ///  对象和一个值，该值指示是否创建约束。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumn">
    ///  父 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///  <param name="childColumn">
    ///  子 <see cref="T:System.Data.DataColumn" />
    ///  关系中。
    ///</param>
    ///  <param name="createConstraints">
    ///  一个值，该值指示是否要创建约束。
    ///<see langword="true" />
    ///  , 如果创建约束。
    ///  否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象包含 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定 <see cref="T:System.Data.DataRelation" />
    ///  父级和子级的名称和匹配数组 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象包含 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException"><see cref="T:System.Data.DataColumn" />
    ///  对象具有不同的数据类型
    ///  - 或 -
    ///  不由同一个表中的不同列组成的一个或两个数组。
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataRelation" />
    ///  类使用指定的名称、 父级和子级的匹配数组 <see cref="T:System.Data.DataColumn" />
    ///  对象和值，该值指示是否创建约束。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="createConstraints">
    ///  一个值，该值指示是否创建约束。
    ///<see langword="true" />
    ///  , 如果创建约束。
    ///  否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或两个 <see cref="T:System.Data.DataColumn" />
    ///  对象是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  列具有不同的数据类型
    ///  - 或 -
    ///  表不属于同一个 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception>
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  此构造函数用于在 Visual Studio 环境中的设计时支持。
    ///</summary>
    ///  <param name="relationName">
    ///  该关系的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的父表。
    ///</param>
    ///  <param name="childTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的子表。
    ///</param>
    ///  <param name="parentColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父代中的名称 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="childColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象名称的子级 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="nested">
    ///  一个值，该值指示是否嵌套关系。
    ///</param>
    {class} function init(relationName: string; parentTableName: string; childTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  此构造函数用于在 Visual Studio 环境中的设计时支持。
    ///</summary>
    ///  <param name="relationName"><see cref="T:System.Data.DataRelation" />
    ///  的名称。
    ///  如果 <see langword="null" />
    ///  或空字符串 ("")，所创建的对象添加到时，默认名称会得到 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</param>
    ///  <param name="parentTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的父表。
    ///</param>
    ///  <param name="parentTableNamespace">
    ///  父表命名空间的名称。
    ///</param>
    ///  <param name="childTableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的子表。
    ///</param>
    ///  <param name="childTableNamespace">
    ///  子表命名空间的名称。
    ///</param>
    ///  <param name="parentColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父代中的名称 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="childColumnNames">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象名称的子级 <see cref="T:System.Data.DataTable" />
    ///  的关系。
    ///</param>
    ///  <param name="nested">
    ///  一个值，该值指示是否嵌套关系。
    ///</param>
    {class} function init(relationName: string; parentTableName: string; parentTableNamespace: string; childTableName: string; childTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;

  end;

  ///<summary>
  ///  表示两个区域之间的父/子关系 <see cref="T:System.Data.DataTable" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Data.DataRelation')]
  DNDataRelation = interface(DDN.mscorlib.DNObject)
  ['{28A715A9-0E4D-3E5F-85A2-D3FB10F07D1D}']
  { getters & setters } 

    function get_ChildColumns: TArray<DNDataColumn>;
    function get_ChildTable: DNDataTable;
    function get_DataSet: DNDataSet;
    function get_ParentColumns: TArray<DNDataColumn>;
    function get_ParentTable: DNDataTable;
    function get_RelationName: string;
    procedure set_RelationName(value: string);
    function get_Nested: Boolean;
    procedure set_Nested(value: Boolean);
    function get_ParentKeyConstraint: DNUniqueConstraint;
    function get_ChildKeyConstraint: DNForeignKeyConstraint;
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    ///<summary>
    ///  获取 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  , ，如果存在。
    ///</summary>
    ///<returns><see cref="P:System.Data.DataRelation.RelationName" />
    ///  属性的值。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取子 <see cref="T:System.Data.DataColumn" />
    ///  这一关系中的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象数组。
    ///</returns>
    property ChildColumns: TArray<DNDataColumn> read get_ChildColumns;
    ///<summary>
    ///  获取此关系的子表。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，它是一种关系的子表。
    ///</returns>
    property ChildTable: DNDataTable read get_ChildTable;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataSet" />
    ///  到 <see cref="T:System.Data.DataRelation" />
    ///  所属。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  到 <see cref="T:System.Data.DataRelation" />
    ///  所属。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父列 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象的父列 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</returns>
    property ParentColumns: TArray<DNDataColumn> read get_ParentColumns;
    ///<summary>
    ///  获取父 <see cref="T:System.Data.DataTable" />
    ///  此 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，它是此关系的父表。
    ///</returns>
    property ParentTable: DNDataTable read get_ParentTable;
    ///<summary>
    ///  获取或设置用于检索名称 <see cref="T:System.Data.DataRelation" />
    ///  从 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  名称 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see langword="null" />
    ///  或空字符串 ("") 传递到 <see cref="T:System.Data.DataColumn" />
    ///  即 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</exception><exception cref="T:System.Data.DuplicateNameException"><see cref="T:System.Data.DataRelation" />
    ///  属于集合已包含 <see cref="T:System.Data.DataRelation" />
    ///  具有相同的名称。
    ///</exception>
    property RelationName: string read get_RelationName write set_RelationName;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Data.DataRelation" />
    ///  对象是否嵌套。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果 <see cref="T:System.Data.DataRelation" />
    ///  对象是否嵌套; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Nested: Boolean read get_Nested write set_Nested;
    ///<summary>
    ///  获取 <see cref="T:System.Data.UniqueConstraint" />
    ///  保证的父列中的值 <see cref="T:System.Data.DataRelation" />
    ///  是唯一的。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.UniqueConstraint" />
    ///  确保父列中的值是唯一。
    ///</returns>
    property ParentKeyConstraint: DNUniqueConstraint read get_ParentKeyConstraint;
    ///<summary>
    ///  获取 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  关系。
    ///</summary>
    ///<returns><see langword="ForeignKeyConstraint" />
    ///  。
    ///</returns>
    property ChildKeyConstraint: DNForeignKeyConstraint read get_ChildKeyConstraint;
    ///<summary>
    ///  获取存储自定义的属性的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.PropertyCollection" />
    ///  ，它包含自定义的属性。
    ///</returns>
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNDataRelation = class(TDNGenericImport<DNDataRelationClass, DNDataRelation>) end;

  //-------------namespace: System.Data----------------
  DNDataRowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB7D244F-523B-57B6-89A4-E31CABF91FF2}']
  end;

  ///<summary>
  ///  表示行中的数据 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRow')]
  DNDataRow = interface(DDN.mscorlib.DNObject)
  ['{208AC0D0-8D94-3FE0-8090-4813634573A2}']
  { getters & setters } 

    function get_RowError: string;
    procedure set_RowError(value: string);
    function get_RowState: DNDataRowState;
    function get_Table: DNDataTable;
    function get_Item(columnIndex: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(columnIndex: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(columnName: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(columnName: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(column: DNDataColumn): DDN.mscorlib.DNObject; overload;
    procedure set_Item(column: DNDataColumn; value: DDN.mscorlib.DNObject); overload;
    function get_Item(columnIndex: Int32; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_Item(columnName: string; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_Item(column: DNDataColumn; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_ItemArray: TArray<DDN.mscorlib.DNObject>;
    procedure set_ItemArray(value: TArray<DDN.mscorlib.DNObject>);
    function get_HasErrors: Boolean;

  { methods } 

    ///<summary>
    ///  在开始编辑操作 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///<exception cref="T:System.Data.InRowChangingEventException">
    ///  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" />
    ///  事件。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  该方法是在已删除的行时调用。
    ///</exception>
    procedure BeginEdit;
    ///<summary>
    ///  取消当前编辑的行上。
    ///</summary>
    ///<exception cref="T:System.Data.InRowChangingEventException">
    ///  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" />
    ///  事件。
    ///</exception>
    procedure CancelEdit;
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.Data.DeletedRowInaccessibleException"><see cref="T:System.Data.DataRow" />
    ///  被删除。
    ///</exception>
    procedure Delete;
    ///<summary>
    ///  结束对行进行编辑。
    ///</summary>
    ///<exception cref="T:System.Data.InRowChangingEventException">
    ///  该方法调用内 <see cref="E:System.Data.DataTable.RowChanging" />
    ///  事件。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  编辑破坏了约束。
    ///</exception><exception cref="T:System.Data.ReadOnlyException">
    ///  行所属的表和编辑尝试更改只读列的值。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  编辑尝试将 null 值放入某一列其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    procedure EndEdit;
    ///<summary>
    ///  设置由索引指定的列的错误说明。
    ///</summary>
    ///  <param name="columnIndex">
    ///  列的从零开始的索引。
    ///</param>
    ///  <param name="error">
    ///  错误说明。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="columnIndex" />
    ///  参数不在范围内
    ///</exception>
    procedure SetColumnError(columnIndex: Int32; error: string); overload;
    ///<summary>
    ///  设置由名称指定的列的错误说明。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///  <param name="error">
    ///  错误说明。
    ///</param>
    procedure SetColumnError(columnName: string; error: string); overload;
    ///<summary>
    ///  获取指定索引的列的错误说明。
    ///</summary>
    ///  <param name="columnIndex">
    ///  列的从零开始的索引。
    ///</param>
    ///<returns>
    ///  错误说明的文本。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException"><paramref name="columnIndex" />
    ///  参数不在范围。
    ///</exception>
    function GetColumnError(columnIndex: Int32): string; overload;
    ///<summary>
    ///  获取按名称指定的列中的错误说明。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  错误说明的文本。
    ///</returns>
    function GetColumnError(columnName: string): string; overload;
    ///<summary>
    ///  获取指定的错误说明 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<returns>
    ///  错误说明的文本。
    ///</returns>
    function GetColumnError(column: DNDataColumn): string; overload;
    ///<summary>
    ///  清除的行的错误。
    ///  这包括 <see cref="P:System.Data.DataRow.RowError" />
    ///  并且错误设置有 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />
    ///  。
    ///</summary>
    procedure ClearErrors;
    ///<summary>
    ///  获取子项的行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  使用。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetChildRows(relationName: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取子项的行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  使用。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetChildRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取子项的这行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  该关系是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有此版本的数据。
    ///</exception>
    function GetChildRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取子项的行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetChildRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetParentRow(relationName: string): DNDataRow; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetParentRow(relationName: string; version: DNDataRowVersion): DNDataRow; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  不属于 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  该行是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  该行不属于的子表的 <see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetParentRow(relation: DNDataRelation): DNDataRow; overload;
    ///<summary>
    ///  获取的父行 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///</param>
    ///<returns>
    ///  父 <see cref="T:System.Data.DataRow" />
    ///  当前行的行。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该行是 <see langword="null" />
    ///  。
    ///  <paramref name="relation" />
    ///  不属于此表的父关系。
    ///</exception><exception cref="T:System.Data.DataException">
    ///  子行有多个父级。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  关系的子表不是行所属的表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有此版本的数据。
    ///</exception>
    function GetParentRow(relation: DNDataRelation; version: DNDataRowVersion): DNDataRow; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    function GetParentRows(relationName: string): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relationName"><see cref="P:System.Data.DataRelation.RelationName" />
    ///  的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  关系和行不属于同一个表。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetParentRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.DataRelation" />
    ///  不属于此行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  该行是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  关系的子表不是行所属的表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</exception>
    function GetParentRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取父行的 <see cref="T:System.Data.DataRow" />
    ///  使用指定 <see cref="T:System.Data.DataRelation" />
    ///  , ，和 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要使用的 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  指定要获取的数据的版本值。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  对象或长度为零的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.DataRelation" />
    ///  不属于此行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  该行是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  关系的子表不是行所属的表。
    ///</exception><exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</exception><exception cref="T:System.Data.VersionNotFoundException">
    ///  行不具有所请求 <see cref="T:System.Data.DataRowVersion" />
    ///  。
    ///</exception>
    function GetParentRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    ///<summary>
    ///  获取一个值，该值指示是否存在指定的版本。
    ///</summary>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  值，该值指定行的行版本。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果存在版本;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasVersion(version: DNDataRowVersion): Boolean;
    ///<summary>
    ///  获取一个值，该值指示是否指定索引处的列包含 null 值。
    ///</summary>
    ///  <param name="columnIndex">
    ///  列的从零开始的索引。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(columnIndex: Int32): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示指定的列是否包含 null 值。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(columnName: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" />
    ///  包含一个 null 值。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(column: DNDataColumn): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否指定 <see cref="T:System.Data.DataColumn" />
    ///  和 <see cref="T:System.Data.DataRowVersion" />
    ///  包含一个 null 值。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///  <param name="version">
    ///  其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  值，该值指定行的行版本。
    ///  可能值为 <see langword="Default" />
    ///  、<see langword="Original" />
    ///  、<see langword="Current" />
    ///  和 <see langword="Proposed" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该列包含 null 值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsNull(column: DNDataColumn; version: DNDataRowVersion): Boolean; overload;
    ///<summary>
    ///  设置的父行 <see cref="T:System.Data.DataRow" />
    ///  用新指定 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///  <param name="parentRow">
    ///  新的父级 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    procedure SetParentRow(parentRow: DNDataRow); overload;
    ///<summary>
    ///  设置的父行 <see cref="T:System.Data.DataRow" />
    ///  用新指定 <see cref="T:System.Data.DataRow" />
    ///  和 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="parentRow">
    ///  新的父级 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///  <param name="relation">
    ///  该关系 <see cref="T:System.Data.DataRelation" />
    ///  使用。
    ///</param>
    ///<exception cref="T:System.Data.RowNotInTableException">
    ///  这些行之一不属于表
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这些行之一是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该关系不属于 <see cref="T:System.Data.DataRelationCollection" />
    ///  的 <see cref="T:System.Data.DataSet" />
    ///  对象。
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  该关系的子级 <see cref="T:System.Data.DataTable" />
    ///  不是该行所属的表。
    ///</exception>
    procedure SetParentRow(parentRow: DNDataRow; relation: DNDataRelation); overload;
    ///<summary>
    ///  更改 <see cref="P:System.Data.DataRow.Rowstate" />
    ///  的 <see cref="T:System.Data.DataRow" />
    ///  到 <see langword="Added" />
    ///  。
    ///</summary>
    procedure SetAdded;
    ///<summary>
    ///  更改 <see cref="P:System.Data.DataRow.Rowstate" />
    ///  的 <see cref="T:System.Data.DataRow" />
    ///  到 <see langword="Modified" />
    ///  。
    ///</summary>
    procedure SetModified;
    ///<summary>
    ///  提交自上次对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  调用。
    ///</summary>
    ///<exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    procedure AcceptChanges;
    ///<summary>
    ///  设置为指定的列的错误说明 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  若要设置的错误说明。
    ///</param>
    ///  <param name="error">
    ///  错误说明。
    ///</param>
    procedure SetColumnError(column: DNDataColumn; error: string); overload;
    ///<summary>
    ///  获取具有错误的列的数组。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  包含错误的对象。
    ///</returns>
    function GetColumnsInError: TArray<DNDataColumn>;
    ///<summary>
    ///  拒绝以来对该行进行的所有更改 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上一次调用。
    ///</summary>
    ///<exception cref="T:System.Data.RowNotInTableException">
    ///  该行不属于表。
    ///</exception>
    procedure RejectChanges;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置某一行的自定义错误说明。
    ///</summary>
    ///<returns>
    ///  描述错误的文本。
    ///</returns>
    property RowError: string read get_RowError write set_RowError;
    ///<summary>
    ///  获取有关及其与关系行的当前状态 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowState" />
    ///  值之一。
    ///</returns>
    property RowState: DNDataRowState read get_RowState;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  为其该行有一个架构。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  此行所属。
    ///</returns>
    property Table: DNDataTable read get_Table;
    property Item[columnIndex: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[columnName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[column: DNDataColumn]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[columnIndex: Int32; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[columnName: string; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[column: DNDataColumn; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  获取或设置通过数组此行的所有值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  类型的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该数组将大于表中的列数。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  数组中的值不匹配其 <see cref="P:System.Data.DataColumn.DataType" />
    ///  在其各个供应商 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  编辑破坏了约束。
    ///</exception><exception cref="T:System.Data.ReadOnlyException">
    ///  编辑尝试更改只读列的值。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  编辑尝试放入列中的 null 值其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  的 <see cref="T:System.Data.DataColumn" />
    ///  对象是 <see langword="false" />
    ///  。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  行已被删除。
    ///</exception>
    property ItemArray: TArray<DDN.mscorlib.DNObject> read get_ItemArray write set_ItemArray;
    ///<summary>
    ///  获取一个值，该值指示行是否存在错误。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果行中包含错误。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasErrors: Boolean read get_HasErrors;
  end;

  TDNDataRow = class(TDNGenericImport<DNDataRowClass, DNDataRow>) end;

  //-------------namespace: System.Data----------------
  DNDataRowBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9CCC6370-F073-5902-9B26-AD16F3C32860}']
  end;

  ///<summary><see langword="DataRowBuilder" />
  ///  类型支持.NET Framework 基础结构，不宜在代码中直接使用。
  ///</summary>
  [DNTypeName('System.Data.DataRowBuilder')]
  DNDataRowBuilder = interface(DDN.mscorlib.DNObject)
  ['{AFE4600F-6640-31C0-ADC9-C67BA3F200AA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataRowBuilder = class(TDNGenericImport<DNDataRowBuilderClass, DNDataRowBuilder>) end;

  //-------------namespace: System.Data----------------
  DNDataRowViewClass = interface(DNObjectClass)
  ['{C17EB2C8-B8C1-526F-939F-9872BCC64767}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Data.DataRow" />
  ///  的自定义视图。
  ///</summary>
  [DNTypeName('System.Data.DataRowView')]
  DNDataRowView = interface(DDN.System.DNICustomTypeDescriptor)
  ['{91862A40-DC23-3C7F-B0D8-1BFD26EC98E4}']
  { getters & setters } 

    function get_DataView: DNDataView;
    function get_Item(ndx: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(ndx: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(&property: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(&property: string; value: DDN.mscorlib.DNObject); overload;
    function get_RowVersion: DNDataRowVersion;
    function get_Row: DNDataRow;
    function get_IsNew: Boolean;
    function get_IsEdit: Boolean;

  { events } 

    procedure add_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否当前 <see cref="T:System.Data.DataRowView" />
    ///  等同于指定的对象。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Object" />
    ///  进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="object" />
    ///  是 <see cref="T:System.Data.DataRowView" />
    ///  ，并返回与当前位于同一行 <see cref="T:System.Data.DataRowView" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回的哈希代码 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  32 位有符号的整数哈希代码 1，它表示布尔 <see langword="true" />
    ///  如果此实例的值不为零; 否则整数零，它表示一个布尔值 <see langword="false" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  具有指定 <see cref="T:System.Data.DataRelation" />
    ///  和父...
    ///</summary>
    ///  <param name="relation"><see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</param>
    ///  <param name="followParent">
    ///  父对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relation: DNDataRelation; followParent: Boolean): DNDataView; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  与指定的子 <see cref="T:System.Data.DataRelation" />
    ///  。
    ///</summary>
    ///  <param name="relation"><see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relation: DNDataRelation): DNDataView; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  具有指定 <see cref="T:System.Data.DataRelation" />
    ///  的名称和父级。
    ///</summary>
    ///  <param name="relationName">
    ///  一个字符串，包含 <see cref="T:System.Data.DataRelation" />
    ///  名称。
    ///</param>
    ///  <param name="followParent">
    ///  父级
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relationName: string; followParent: Boolean): DNDataView; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  与指定的子 <see cref="T:System.Data.DataRelation" />
    ///  名称。
    ///</summary>
    ///  <param name="relationName">
    ///  一个字符串，包含 <see cref="T:System.Data.DataRelation" />
    ///  名称。
    ///</param>
    ///<returns><see cref="T:System.Data.DataView" />
    ///  为子 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function CreateChildView(relationName: string): DNDataView; overload;
    ///<summary>
    ///  开始编辑过程。
    ///</summary>
    procedure BeginEdit;
    ///<summary>
    ///  取消编辑过程。
    ///</summary>
    procedure CancelEdit;
    ///<summary>
    ///  将更改提交给基础 <see cref="T:System.Data.DataRow" />
    ///  并结束编辑会话与开始 <see cref="M:System.Data.DataRowView.BeginEdit" />
    ///  。
    ///  使用 <see cref="M:System.Data.DataRowView.CancelEdit" />
    ///  放弃所做的更改 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    procedure EndEdit;
    ///<summary>
    ///  删除行。
    ///</summary>
    procedure Delete;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.DataView" />
    ///  此行所属。
    ///</summary>
    ///<returns><see langword="DataView" />
    ///  此行所属。
    ///</returns>
    property DataView: DNDataView read get_DataView;
    property Item[ndx: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[&property: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取的当前版本说明 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  可能的值有 <see cref="P:System.Data.DataRowView.RowVersion" />
    ///  属性 <see langword="Default" />
    ///  , ，<see langword="Original" />
    ///  , ，<see langword="Current" />
    ///  , ，和 <see langword="Proposed" />
    ///  。
    ///</returns>
    property RowVersion: DNDataRowVersion read get_RowVersion;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  正在查看。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  正被查看 <see cref="T:System.Data.DataRowView" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  指示是否 <see cref="T:System.Data.DataRowView" />
    ///  的新增功能。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该行被新;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNew: Boolean read get_IsNew;
    ///<summary>
    ///  指示行是否处于编辑模式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在行处于，编辑模式，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEdit: Boolean read get_IsEdit;
  end;

  TDNDataRowView = class(TDNGenericImport<DNDataRowViewClass, DNDataRowView>) end;

  //-------------namespace: System.Data----------------
  DNDataViewSettingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7258DA3-4FD2-5DD6-A8B2-89B70951B0AF}']
  end;

  ///<summary>
  ///  表示的默认设置 <see cref="P:System.Data.DataView.ApplyDefaultSort" />
  ///  , ，<see cref="P:System.Data.DataView.DataViewManager" />
  ///  , ，<see cref="P:System.Data.DataView.RowFilter" />
  ///  , ，<see cref="P:System.Data.DataView.RowStateFilter" />
  ///  , ，<see cref="P:System.Data.DataView.Sort" />
  ///  , ，和 <see cref="P:System.Data.DataView.Table" />
  ///  Dataview 创建从 <see cref="T:System.Data.DataViewManager" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataViewSetting')]
  DNDataViewSetting = interface(DDN.mscorlib.DNObject)
  ['{A69B4B3C-E79F-3DA5-9584-17C3D4AF0A9E}']
  { getters & setters } 

    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_DataViewManager: DNDataViewManager;
    function get_Table: DNDataTable;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否使用默认排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果使用默认排序;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    ///<summary>
    ///  获取包含此 <see cref="T:System.Data.DataViewManager" />
    ///  的 <see cref="T:System.Data.DataViewSetting" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataViewManager" />
    ///  对象。
    ///</returns>
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  到 <see cref="T:System.Data.DataViewSetting" />
    ///  属性应用。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  获取或设置要在应用筛选器 <see cref="T:System.Data.DataView" />
    ///  。
    ///  请参阅 <see cref="P:System.Data.DataView.RowFilter" />
    ///  使用 RowFilter 的代码示例。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含要应用的筛选器。
    ///</returns>
    property RowFilter: string read get_RowFilter write set_RowFilter;
    ///<summary>
    ///  获取或设置一个值，该值指示是否显示当前、 已删除、 修改当前、 ModifiedOriginal、 新建、 原始、 未更改或在任何行 <see cref="T:System.Data.DataView" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个值，指示要显示的行。
    ///</returns>
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    ///<summary>
    ///  获取或设置一个值，该值中要应用的排序 <see cref="T:System.Data.DataView" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中要应用的排序 <see cref="T:System.Data.DataView" />
    ///  。
    ///</returns>
    property Sort: string read get_Sort write set_Sort;
  end;

  TDNDataViewSetting = class(TDNGenericImport<DNDataViewSettingClass, DNDataViewSetting>) end;

  //-------------namespace: System.Data----------------
  DNDataViewSettingCollectionClass = interface(DNObjectClass)
  ['{B5806A80-E07F-5D92-844B-6850F4506BAD}']
  end;

  ///<summary>
  ///  包含一个只读集合 <see cref="T:System.Data.DataViewSetting" />
  ///  为每个对象 <see cref="T:System.Data.DataTable" />
  ///  中 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataViewSettingCollection')]
  DNDataViewSettingCollection = interface(DDN.mscorlib.DNICollection)
  ['{F9A67967-A864-3864-A823-94EB28C60765}']
  { getters & setters } 

    function get_Item(table: DNDataTable): DNDataViewSetting; overload;
    procedure set_Item(table: DNDataTable; value: DNDataViewSetting); overload;
    function get_Item(tableName: string): DNDataViewSetting; overload;
    function get_Item(index: Int32): DNDataViewSetting; overload;
    procedure set_Item(index: Int32; value: DNDataViewSetting); overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  将集合对象复制到一维 <see cref="T:System.Array" />
    ///  实例的指定索引处开始。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  从集合复制的值的目标。
    ///</param>
    ///  <param name="index">
    ///  插入操作开始处的数组的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  将集合对象复制到一维 <see cref="T:System.Array" />
    ///  实例的指定索引处开始。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  从集合复制的值的目标。
    ///</param>
    ///  <param name="index">
    ///  插入操作开始处的数组的索引。
    ///</param>
    procedure CopyTo(ar: TArray<DNDataViewSetting>; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[table: DNDataTable]: DNDataViewSetting read get_Item write set_Item; default;
    property Item[tableName: string]: DNDataViewSetting read get_Item; default;
    property Item[index: Int32]: DNDataViewSetting read get_Item write set_Item; default;
    ///<summary>
    ///  获取的数 <see cref="T:System.Data.DataViewSetting" />
    ///  中的对象 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  数 <see cref="T:System.Data.DataViewSetting" />
    ///  集合中的对象。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否同步对 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  的访问（线程安全）。
    ///</summary>
    ///<returns>
    ///  此属性始终为 <see langword="false" />
    ///  , ，除非由派生类中重写。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  的访问的对象。
    ///</summary>
    ///<returns>
    ///  可用于同步对 <see cref="T:System.Data.DataViewSettingCollection" />
    ///  的访问的对象。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataViewSettingCollection = class(TDNGenericImport<DNDataViewSettingCollectionClass, DNDataViewSettingCollection>) end;

  //-------------namespace: System.Data----------------
  DNInternalDataCollectionBaseClass = interface(DNObjectClass)
  ['{6F9B9085-B3D4-5711-B22B-D3D771AADA35}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInternalDataCollectionBase;

  end;

  ///<summary>
  ///  提供用于创建集合的基本功能。
  ///</summary>
  [DNTypeName('System.Data.InternalDataCollectionBase')]
  DNInternalDataCollectionBase = interface(DDN.mscorlib.DNICollection)
  ['{E55DE979-3346-3493-ADE7-ECC252F2D229}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNInternalDataCollectionBase = class(TDNGenericImport<DNInternalDataCollectionBaseClass, DNInternalDataCollectionBase>) end;

  //-------------namespace: System.Data----------------
  DNConstraintCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{62C546D3-8AA5-5A4E-BC36-7AAF56476D74}']
  end;

  ///<summary>
  ///  表示的约束集合 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.ConstraintCollection')]
  DNConstraintCollection = interface(DNInternalDataCollectionBase)
  ['{75461A0D-19F9-3D4E-885C-A066AD8C7DA9}']
  { getters & setters } 

    function get_Item(index: Int32): DNConstraint; overload;
    function get_Item(name: string): DNConstraint; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    ///<summary>
    ///  将指定的 <see cref="T:System.Data.Constraint" />
    ///  对象添加到集合。
    ///</summary>
    ///  <param name="constraint">
    ///  要添加的 <see langword="Constraint" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="constraint" />
    ///  参数为 null。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  约束已属于此集合，或属于其他集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合已具有相同名称的约束。
    ///  （该比较不区分大小写。）
    ///</exception>
    procedure Add(constraint: DNConstraint); overload;
    ///<summary>
    ///  构造一个新 <see cref="T:System.Data.UniqueConstraint" />
    ///  具有指定名称的数组 <see cref="T:System.Data.DataColumn" />
    ///  对象和值，该值指示列是否是主键，并将其添加到集合。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Data.UniqueConstraint" />
    ///  的名称。
    ///</param>
    ///  <param name="columns">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  对象添加到其应用约束。
    ///</param>
    ///  <param name="primaryKey">
    ///  指定列是否应将为主键。
    ///  如果 <see langword="true" />
    ///  , 的列将主键列。
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="UniqueConstraint" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  约束已属于此集合。
    ///  - 或 -
    ///  约束所属的另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的约束。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(name: string; columns: TArray<DNDataColumn>; primaryKey: Boolean): DNConstraint; overload;
    ///<summary>
    ///  构造一个新 <see cref="T:System.Data.UniqueConstraint" />
    ///  具有指定名称 <see cref="T:System.Data.DataColumn" />
    ///  , ，和值，该值指示列是否是主键，并将其添加到集合。
    ///</summary>
    ///  <param name="name"><see langword="UniqueConstraint" />
    ///  的名称。
    ///</param>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  向应用约束。
    ///</param>
    ///  <param name="primaryKey">
    ///  指定列是否应将为主键。
    ///  如果 <see langword="true" />
    ///  , 的列将主键列。
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="UniqueConstraint" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  约束已属于此集合。
    ///  - 或 -
    ///  约束所属的另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的约束。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(name: string; column: DNDataColumn; primaryKey: Boolean): DNConstraint; overload;
    ///<summary>
    ///  构造一个新 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  具有指定名称、 父列和子列并将约束添加到集合。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Data.ForeignKeyConstraint" />
    ///  的名称。
    ///</param>
    ///  <param name="primaryKeyColumn">
    ///  Primary key 或父站点， <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///  <param name="foreignKeyColumn">
    ///  外键或子级 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="ForeignKeyConstraint" />
    ///  。
    ///</returns>
    function Add(name: string; primaryKeyColumn: DNDataColumn; foreignKeyColumn: DNDataColumn): DNConstraint; overload;
    ///<summary>
    ///  构造一个新 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  , ，与指定数组的父列和子列，并将约束添加到集合。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Data.ForeignKeyConstraint" />
    ///  的名称。
    ///</param>
    ///  <param name="primaryKeyColumns">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  是 primary key 或父站点，列的对象。
    ///</param>
    ///  <param name="foreignKeyColumns">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  是外键或子列的对象。
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="ForeignKeyConstraint" />
    ///  。
    ///</returns>
    function Add(name: string; primaryKeyColumns: TArray<DNDataColumn>; foreignKeyColumns: TArray<DNDataColumn>): DNConstraint; overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.ConstraintCollection" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="constraints">
    ///  一个数组 <see cref="T:System.Data.ConstraintCollection" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(constraints: TArray<DNConstraint>);
    ///<summary>
    ///  指示是否<see cref="T:System.Data.Constraint" />
    ///  可以删除。
    ///</summary>
    ///  <param name="constraint"><see cref="T:System.Data.Constraint" />
    ///  要测试为从集合中删除。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果<see cref="T:System.Data.Constraint" />
    ///  可从集合中移除活动; 否则为<see langword="false" />
    ///  。
    ///</returns>
    function CanRemove(constraint: DNConstraint): Boolean;
    ///<summary>
    ///  指示是否 <see cref="T:System.Data.Constraint" />
    ///  集合中存在由名称指定的对象。
    ///</summary>
    ///  <param name="name"><see cref="P:System.Data.Constraint.ConstraintName" />
    ///  的约束。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含指定的约束;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  将集合对象复制到一维 <see cref="T:System.Array" />
    ///  实例的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Array" />
    ///  从集合复制的值的目标。
    ///</param>
    ///  <param name="index">
    ///  插入操作开始处的数组的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNConstraint>; index: Int32); overload;
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.Constraint" />
    ///  。
    ///</summary>
    ///  <param name="constraint">
    ///  要搜索的 <see cref="T:System.Data.Constraint" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <see cref="T:System.Data.Constraint" />
    ///  知识库是否处于集合; 否则为-1。
    ///</returns>
    function IndexOf(constraint: DNConstraint): Int32; overload;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Data.Constraint" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="constraintName"><see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</param>
    ///<returns>
    ///  索引 <see cref="T:System.Data.Constraint" />
    ///  知识库是否处于集合; 否则为-1。
    ///</returns>
    function IndexOf(constraintName: string): Int32; overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.Constraint" />
    ///  。
    ///</summary>
    ///  <param name="constraint">
    ///  要移除的 <see cref="T:System.Data.Constraint" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="constraint" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  约束不属于该集合。
    ///</exception>
    procedure Remove(constraint: DNConstraint); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Constraint" />
    ///  集合中的指定索引处的对象。
    ///</summary>
    ///  <param name="index">
    ///  索引 <see cref="T:System.Data.Constraint" />
    ///  中删除。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  集合不具有在此索引的约束。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  删除 <see cref="T:System.Data.Constraint" />
    ///  指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  要移除的 <see cref="T:System.Data.Constraint" />
    ///  的名称。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  清除集合中的任何 <see cref="T:System.Data.Constraint" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConstraint read get_Item; default;
    property Item[name: string]: DNConstraint read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNConstraintCollection = class(TDNGenericImport<DNConstraintCollectionClass, DNConstraintCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{A00A9A17-EE05-5836-99D0-2CE1D70A785F}']
  end;

  ///<summary>
  ///  表示一套 <see cref="T:System.Data.DataColumn" />
  ///  对象 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataColumnCollection')]
  DNDataColumnCollection = interface(DNInternalDataCollectionBase)
  ['{68727487-487C-383F-A83C-DEE9FDDC59EB}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataColumn; overload;
    function get_Item(name: string): DNDataColumn; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    ///<summary>
    ///  创建并添加了指定 <see cref="T:System.Data.DataColumn" />
    ///  对象传递给 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="column">
    ///  要添加的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="column" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该列已经属于此集合中，或另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidExpressionException">
    ///  该表达式无效。
    ///  请参阅 <see cref="P:System.Data.DataColumn.Expression" />
    ///  有关如何创建表达式的详细信息的属性。
    ///</exception>
    procedure Add(column: DNDataColumn); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.DataColumn" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="columns">
    ///  数组 <see cref="T:System.Data.DataColumn" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(columns: TArray<DNDataColumn>);
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象，它具有指定的名称、 类型和表达式与 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="columnName">
    ///  要在创建列时使用的名称。
    ///</param>
    ///  <param name="type"><see cref="P:System.Data.DataColumn.DataType" />
    ///  的新列。
    ///</param>
    ///  <param name="expression">
    ///  要分配给该表达式 <see cref="P:System.Data.DataColumn.Expression" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidExpressionException">
    ///  该表达式无效。
    ///  请参阅 <see cref="P:System.Data.DataColumn.Expression" />
    ///  有关如何创建表达式的详细信息的属性。
    ///</exception>
    function Add(columnName: string; &type: DDN.mscorlib.DNType; expression: string): DNDataColumn; overload;
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象，它具有指定名称和类型转换为 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="columnName"><see cref="P:System.Data.DataColumn.ColumnName" />
    ///  要创建列时使用。
    ///</param>
    ///  <param name="type"><see cref="P:System.Data.DataColumn.DataType" />
    ///  的新列。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidExpressionException">
    ///  该表达式无效。
    ///  请参阅 <see cref="P:System.Data.DataColumn.Expression" />
    ///  有关如何创建表达式的详细信息的属性。
    ///</exception>
    function Add(columnName: string; &type: DDN.mscorlib.DNType): DNDataColumn; overload;
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象，它具有指定的名称与 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///  <param name="columnName">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的列。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(columnName: string): DNDataColumn; overload;
    ///<summary>
    ///  创建并添加了 <see cref="T:System.Data.DataColumn" />
    ///  对象传递给 <see cref="T:System.Data.DataColumnCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</returns>
    function Add: DNDataColumn; overload;
    ///<summary>
    ///  检查是否可以从集合中移除特定列。
    ///</summary>
    ///  <param name="column">
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  集合中。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果可以删除了该列。
    ///<see langword="false" />
    ///  如果，
    ///  <paramref name="column" />
    ///  参数为 <see langword="null" />
    ///  。
    ///  列不属于此集合。
    ///  列是关系的一部分。
    ///  另一个列的表达式取决于此列。
    ///</returns>
    function CanRemove(column: DNDataColumn): Boolean;
    ///<summary>
    ///  检查集合是否包含具有指定名称的列。
    ///</summary>
    ///  <param name="name"><see cref="P:System.Data.DataColumn.ColumnName" />
    ///  要查找的列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果某一列存在具有此名称;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  将整个集合复制到现有的数组，该数组中指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一个数组 <see cref="T:System.Data.DataColumn" />
    ///  集合复制到的对象。
    ///</param>
    ///  <param name="index">
    ///  从其开始的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataColumn>; index: Int32); overload;
    ///<summary>
    ///  获取由名称指定的列的索引。
    ///</summary>
    ///  <param name="column">
    ///  要返回的列的名称。
    ///</param>
    ///<returns>
    ///  指定的列的索引 <paramref name="column" />
    ///  是否找到; 否则为-1。
    ///</returns>
    function IndexOf(column: DNDataColumn): Int32; overload;
    ///<summary>
    ///  获取与特定的名称 （名称不区分大小写） 的列的索引。
    ///</summary>
    ///  <param name="columnName">
    ///  要查找的列的名称。
    ///</param>
    ///<returns>
    ///  具有指定的名称，则为-1 如果列不存在集合中的列的从零开始的索引。
    ///</returns>
    function IndexOf(columnName: string): Int32; overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</summary>
    ///  <param name="column">
    ///  要移除的 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="column" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  列不属于此集合。
    ///  - 或 -
    ///  列是关系的一部分。
    ///  - 或 -
    ///  另一个列的表达式取决于此列。
    ///</exception>
    procedure Remove(column: DNDataColumn); overload;
    ///<summary>
    ///  从集合中移除指定索引处的列。
    ///</summary>
    ///  <param name="index">
    ///  若要删除的列的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合不具有指定索引处的列。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataColumn" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  要删除的列的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合没有具有指定名称的列。
    ///</exception>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  清除集合中的任何列。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataColumn read get_Item; default;
    property Item[name: string]: DNDataColumn read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataColumnCollection = class(TDNGenericImport<DNDataColumnCollectionClass, DNDataColumnCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{D7BD456A-CD28-5D2F-8BC1-CE6573B5B4F1}']
  end;

  ///<summary>
  ///  表示集合的 <see cref="T:System.Data.DataRelation" />
  ///  对象的 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRelationCollection')]
  DNDataRelationCollection = interface(DNInternalDataCollectionBase)
  ['{6AA9CAE2-68C2-3EFB-8947-06F2A62BE714}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataRelation; overload;
    function get_Item(name: string): DNDataRelation; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.DataRelation" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="relations">
    ///  数组 <see cref="T:System.Data.DataRelation" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(relations: TArray<DNDataRelation>);
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  具有指定的名称和数组的父和子列，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see langword="DataRelation" />
    ///  来创建。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see langword="DataColumn" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  创建的 <see langword="DataRelation" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  关系名称是一个 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  与指定的名称、 父级和子级列和值，该值指定是否创建一个约束的数组并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see langword="DataRelation" />
    ///  来创建。
    ///</param>
    ///  <param name="parentColumns">
    ///  数组的父 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="childColumns">
    ///  子数组 <see langword="DataColumn" />
    ///  对象。
    ///</param>
    ///  <param name="createConstraints"><see langword="true" />
    ///  若要创建约束;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  关系名称是一个 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  使用指定的父和子列，并将其添加到集合。
    ///</summary>
    ///  <param name="parentColumns">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumns">
    ///  关系的子列。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  参数为 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有相同名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    function Add(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  具有指定的名称和父级和子级的列，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  该关系的名称。
    ///</param>
    ///  <param name="parentColumn">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumn">
    ///  关系的子列。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  具有指定名称、 父级和子列，具有可选约束的值根据 <paramref name="createConstraints" />
    ///  参数，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  该关系的名称。
    ///</param>
    ///  <param name="parentColumn">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumn">
    ///  关系的子列。
    ///</param>
    ///  <param name="createConstraints"><see langword="true" />
    ///  若要创建的约束;否则为 <see langword="false" />
    ///  。
    ///  (默认值是 <see langword="true" />
    ///  )。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataRelation" />
    ///  与指定的父和子列中，并将其添加到集合。
    ///</summary>
    ///  <param name="parentColumn">
    ///  关系的父列。
    ///</param>
    ///  <param name="childColumn">
    ///  关系的子列。
    ///</param>
    ///<returns>
    ///  创建的关系。
    ///</returns>
    function Add(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    ///<summary>
    ///  验证是否 <see cref="T:System.Data.DataRelation" />
    ///  集合中存在与特定的名称 （不区分大小写）。
    ///</summary>
    ///  <param name="name">
    ///  若要查找的关系的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  , 如果存在具有指定名称的关系;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  将集合复制 <see cref="T:System.Data.DataRelation" />
    ///  对象指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRelation" />
    ///  要将集合复制到的对象。
    ///</param>
    ///  <param name="index">
    ///  从其开始的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataRelation>; index: Int32); overload;
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.DataRelation" />
    ///  对象。
    ///</summary>
    ///  <param name="relation">
    ///  要搜索的关系。
    ///</param>
    ///<returns>
    ///  从 0 开始的索引，该关系，则为-1 如果集合中找不到该关系。
    ///</returns>
    function IndexOf(relation: DNDataRelation): Int32; overload;
    ///<summary>
    ///  获取的索引 <see cref="T:System.Data.DataRelation" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="relationName">
    ///  若要查找的关系的名称。
    ///</param>
    ///<returns>
    ///  具有指定的名称，则为-1 如果集合中不存在该关系的关系的从零开始的索引。
    ///</returns>
    function IndexOf(relationName: string): Int32; overload;
    ///<summary>
    ///  验证是否指定 <see cref="T:System.Data.DataRelation" />
    ///  可以从集合中移除。
    ///</summary>
    ///  <param name="relation">
    ///  要对其执行检查的关系。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataRelation" />
    ///  可删除; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanRemove(relation: DNDataRelation): Boolean;
    ///<summary>
    ///  从集合中移除指定索引处的关系。
    ///</summary>
    ///  <param name="index">
    ///  要删除的关系的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合中指定索引处没有关系。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  从集合中移除具有指定名称的关系。
    ///</summary>
    ///  <param name="name">
    ///  要删除的关系的名称。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  集合没有具有指定名称的关系。
    ///</exception>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.DataRelation" />
    ///  中添加一个 <see cref="T:System.Data.DataRelationCollection" />
    ///  。
    ///</summary>
    ///  <param name="relation">
    ///  要添加到集合中的 <see langword="DataRelation" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relation" />
    ///  参数为 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  关系已经属于此集合中，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中已存在具有指定名称的关系。
    ///  （比较不区分大小写。）
    ///</exception><exception cref="T:System.Data.InvalidConstraintException">
    ///  创建以来，该关系已进入无效状态。
    ///</exception>
    procedure Add(relation: DNDataRelation); overload;
    ///<summary>
    ///  清除集合的所有关系。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  从集合中移除指定的关系。
    ///</summary>
    ///  <param name="relation">
    ///  要删除的关系。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该关系是一个 null 值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该关系不属于该集合。
    ///</exception>
    procedure Remove(relation: DNDataRelation); overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataRelation read get_Item; default;
    property Item[name: string]: DNDataRelation read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataRelationCollection = class(TDNGenericImport<DNDataRelationCollectionClass, DNDataRelationCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRowCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{5E6C1162-90E6-59F3-BAA0-3D0B3939C9A9}']
  end;

  ///<summary>
  ///  表示的行的集合 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataRowCollection')]
  DNDataRowCollection = interface(DNInternalDataCollectionBase)
  ['{E3A1DFAE-10DE-3667-8ADD-B69986EBF849}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataRow;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Data.DataRow" />
    ///  到 <see cref="T:System.Data.DataRowCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="row">
    ///  要添加的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  该行是 null。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  行属于另一个表，或已属于此表。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  添加使约束无效。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  添加尝试将空值放入 <see cref="T:System.Data.DataColumn" />
    ///  其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    procedure Add(row: DNDataRow); overload;
    ///<summary>
    ///  将新行插入到集合中的指定位置处。
    ///</summary>
    ///  <param name="row">
    ///  要添加的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///  <param name="pos">
    ///  要添加集合中的 （从零开始） 位置 <see langword="DataRow" />
    ///  。
    ///</param>
    procedure InsertAt(row: DNDataRow; pos: Int32);
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///  <param name="row">
    ///  要搜索的 <see langword="DataRow" />
    ///  。
    ///</param>
    ///<returns>
    ///  该行，则为-1 如果集合中找不到行的从零开始的索引。
    ///</returns>
    function IndexOf(row: DNDataRow): Int32;
    ///<summary>
    ///  创建使用指定的值的行，并将其添加到 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</summary>
    ///  <param name="values">
    ///  用于创建新行的值的数组。
    ///</param>
    ///<returns>
    ///  无。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该数组将大于表中的列数。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  一个值与其各自的列类型不匹配。
    ///</exception><exception cref="T:System.Data.ConstraintException">
    ///  添加行使约束无效。
    ///</exception><exception cref="T:System.Data.NoNullAllowedException">
    ///  尝试放入列中的 null 其中 <see cref="P:System.Data.DataColumn.AllowDBNull" />
    ///  为 false。
    ///</exception>
    function Add(values: TArray<DDN.mscorlib.DNObject>): DNDataRow; overload;
    ///<summary>
    ///  获取指定的主键值的行。
    ///</summary>
    ///  <param name="key">
    ///  主键值 <see cref="T:System.Data.DataRow" />
    ///  来查找。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataRow" />
    ///  ，其中包含指定的主键值; 否则为空值中不存在的主键值如果 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function Find(key: DDN.mscorlib.DNObject): DNDataRow; overload;
    ///<summary>
    ///  获取包含指定的主键值的行。
    ///</summary>
    ///  <param name="keys">
    ///  若要查找的主键值的数组。
    ///  数组的类型是<see langword="Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.DataRow" />
    ///  指定包含主键值的对象; 否则为空值中不存在的主键值如果<see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  没有行对应于该索引值。
    ///</exception><exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function Find(keys: TArray<DDN.mscorlib.DNObject>): DNDataRow; overload;
    ///<summary>
    ///  清除集合中的所有行。
    ///</summary>
    ///<exception cref="T:System.Data.InvalidConstraintException">
    ///  一个 <see cref="T:System.Data.ForeignKeyConstraint" />
    ///  上强制 <see cref="T:System.Data.DataRowCollection" />
    ///  。
    ///</exception>
    procedure Clear;
    ///<summary>
    ///  获取一个值，该值指示集合中的任意行的主键是否包含指定的值。
    ///</summary>
    ///  <param name="key">
    ///  若要测试的主键的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Data.DataRow" />
    ///  用指定的主键值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function &Contains(key: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示集合中的任意行的主键列是否包含指定对象数组中的值。
    ///</summary>
    ///  <param name="keys">
    ///  要测试的主键值的数组。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataRowCollection" />
    ///  包含 <see cref="T:System.Data.DataRow" />
    ///  具有指定键的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.MissingPrimaryKeyException">
    ///  表没有主键。
    ///</exception>
    function &Contains(keys: TArray<DDN.mscorlib.DNObject>): Boolean; overload;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Data.DataRow" />
    ///  到给定的目标数组索引处开始的给定数组集合中的对象。
    ///</summary>
    ///  <param name="ar">
    ///  一维数组，它是从 <see langword="DataRowCollection" />
    ///  中复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制的位置的索引（从零开始）。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Data.DataRow" />
    ///  到给定的目标数组索引处开始的给定数组集合中的对象。
    ///</summary>
    ///  <param name="array">
    ///  一维数组，它是从 <see langword="DataRowCollection" />
    ///  中复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制的位置的索引（从零开始）。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataRow>; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  为此集合。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  为此集合。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///  <param name="row">
    ///  要移除的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    procedure Remove(row: DNDataRow);
    ///<summary>
    ///  从集合中移除指定索引处的行。
    ///</summary>
    ///  <param name="index">
    ///  若要删除的行的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的总数 <see cref="T:System.Data.DataRow" />
    ///  此集合中的对象。
    ///</summary>
    ///<returns>
    ///  总次数 <see cref="T:System.Data.DataRow" />
    ///  此集合中的对象。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataRow read get_Item; default;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataRowCollection = class(TDNGenericImport<DNDataRowCollectionClass, DNDataRowCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataTableCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{C362542A-D4FE-581A-9E75-42982C793A0F}']
  end;

  ///<summary>
  ///  表示表的集合 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.DataTableCollection')]
  DNDataTableCollection = interface(DNInternalDataCollectionBase)
  ['{1FB590A0-3C5C-3492-B1BB-B1BBBF38D68A}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataTable; overload;
    function get_Item(name: string): DNDataTable; overload;
    function get_Item(name: string; tableNamespace: string): DNDataTable; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure add_CollectionChanging(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanging(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    ///<summary>
    ///  验证是否指定 <see cref="T:System.Data.DataTable" />
    ///  可以从集合中移除对象。
    ///</summary>
    ///  <param name="table"><see langword="DataTable" />
    ///  集合中要对其执行检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  是否可以删除表;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanRemove(table: DNDataTable): Boolean;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" />
    ///  集合中存在具有指定名称的对象。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  来查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的表存在，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTable" />
    ///  对象集合中存在具有指定名称和表命名空间。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  来查找。
    ///</param>
    ///  <param name="tableNamespace">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  命名空间中进行查找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的表存在，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: string; tableNamespace: string): Boolean; overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.DataTableCollection" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 、 指定的目标数组索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.DataTableCollection" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataTable>; index: Int32); overload;
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="table">
    ///  要搜索的 <see langword="DataTable" />
    ///  。
    ///</param>
    ///<returns>
    ///  表或-1，如果在集合中找不到表的从零开始的索引。
    ///</returns>
    function IndexOf(table: DNDataTable): Int32; overload;
    ///<summary>
    ///  获取集合中的索引 <see cref="T:System.Data.DataTable" />
    ///  具有指定名称的对象。
    ///</summary>
    ///  <param name="tableName">
    ///  名称 <see langword="DataTable" />
    ///  要查找对象。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <see langword="DataTable" />
    ///  与指定的名称，则为-1 如果集合中不存在表。
    ///  将返回-1 时两个或多个表具有相同名称但不同的命名空间。
    ///  如果存在任何多义性，将表名称传递给恰好一个表进行匹配时，不会成功调用。
    ///</returns>
    function IndexOf(tableName: string): Int32; overload;
    ///<summary>
    ///  获取指定的集合中的索引 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="tableName">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  要查找对象。
    ///</param>
    ///  <param name="tableNamespace">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  命名空间中进行查找。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <see cref="T:System.Data.DataTable" />
    ///  与指定的名称，则为-1 如果集合中不存在表。
    ///</returns>
    function IndexOf(tableName: string; tableNamespace: string): Int32; overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataTable" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  要移除对象。
    ///</param>
    ///  <param name="tableNamespace">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  命名空间中进行查找。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合没有具有指定名称的表。
    ///</exception>
    procedure Remove(name: string; tableNamespace: string); overload;
    ///<summary>
    ///  将指定的 <see langword="DataTable" />
    ///  添加到集合。
    ///</summary>
    ///  <param name="table">
    ///  要添加的 <see langword="DataTable" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  为此表是指定的值 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  表已属于该集合，或属于另一个集合。
    ///</exception><exception cref="T:System.Data.DuplicateNameException">
    ///  集合中的表具有相同的名称。
    ///  比较不区分大小写。
    ///</exception>
    procedure Add(table: DNDataTable); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.DataTable" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="tables">
    ///  数组 <see cref="T:System.Data.DataTable" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(tables: TArray<DNDataTable>);
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataTable" />
    ///  对象使用指定的名称，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  指定所创建的名称 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中的表具有相同的名称。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(name: string): DNDataTable; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Data.DataTable" />
    ///  对象使用指定的名称，并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  指定所创建的名称 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="tableNamespace">
    ///  要使所创建的命名空间 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.DuplicateNameException">
    ///  集合中的表具有相同的名称。
    ///  （比较不区分大小写。）
    ///</exception>
    function Add(name: string; tableNamespace: string): DNDataTable; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.DataTable" />
    ///  对象使用的默认名称，并将其添加到集合。
    ///</summary>
    ///<returns>
    ///  新创建的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function Add: DNDataTable; overload;
    ///<summary>
    ///  清除集合中的所有 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="table">
    ///  要移除的 <see langword="DataTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  为此表是指定的值 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  表不属于此集合。
    ///  - 或 -
    ///  表是一种关系的一部分。
    ///</exception>
    procedure Remove(table: DNDataTable); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataTable" />
    ///  集合中的指定索引处的对象。
    ///</summary>
    ///  <param name="index">
    ///  索引 <see langword="DataTable" />
    ///  中删除。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合中指定索引处没有表。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  删除 <see cref="T:System.Data.DataTable" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  要移除对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  集合没有具有指定名称的表。
    ///</exception>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到一维 <see cref="T:System.Array" />
    ///  , 处指定开始 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  索引。
    ///</summary>
    ///  <param name="ar">
    ///  一维 <see cref="T:System.Array" />
    ///  要复制当前 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  到对象的元素。
    ///</param>
    ///  <param name="index">
    ///  目标 <see cref="T:System.Array" />
    ///  开始复制到的索引。
    ///</param>
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  找不到。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataTable read get_Item; default;
    property Item[name: string]: DNDataTable read get_Item; default;
    property Item[name: string; tableNamespace: string]: DNDataTable read get_Item; default;
    ///<summary>
    ///  获取集合中的元素总数。
    ///</summary>
    ///<returns>
    ///  集合中的元素的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.InternalDataCollectionBase" />
    ///  是同步。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该集合已同步;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步集合的对象。
    ///</summary>
    ///<returns><see cref="T:System.object" />
    ///  用于同步集合。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataTableCollection = class(TDNGenericImport<DNDataTableCollectionClass, DNDataTableCollection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{63387667-F2B4-5701-A2E6-495753AB3B94}']
  end;

  ///<summary>
  ///  收集与警告或错误的数据源返回的相关信息。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcError')]
  DNOdbcError = interface(DDN.mscorlib.DNObject)
  ['{B89EC9F4-D800-3B8E-B0A6-B1A1ADBC950A}']
  { getters & setters } 

    function get_Message: string;
    function get_SQLState: string;
    function get_NativeError: Int32;
    function get_Source: string;

  { methods } 

    ///<summary>
    ///  获取错误信息的完整文本。
    ///</summary>
    ///<returns>
    ///  错误信息的完整文本。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取错误的简短说明。
    ///</summary>
    ///<returns>
    ///  错误说明。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取数据库的五个字符的错误代码遵循 ANSI SQL 标准。
    ///</summary>
    ///<returns>
    ///  如果该错误可以由多个位置颁发标识错误来源的五个字符的错误代码。
    ///</returns>
    property SQLState: string read get_SQLState;
    ///<summary>
    ///  获取数据源特定的错误信息。
    ///</summary>
    ///<returns>
    ///  数据源特定的错误信息。
    ///</returns>
    property NativeError: Int32 read get_NativeError;
    ///<summary>
    ///  获取生成错误的驱动程序的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的驱动程序的名称。
    ///</returns>
    property Source: string read get_Source;
  end;

  TDNOdbcError = class(TDNGenericImport<DNOdbcErrorClass, DNOdbcError>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcErrorCollectionClass = interface(DNObjectClass)
  ['{4BC64D8C-EAAC-5C61-B243-A04BC49C9E7E}']
  end;

  ///<summary>
  ///  收集 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
  ///  生成的所有错误。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcErrorCollection')]
  DNOdbcErrorCollection = interface(DDN.mscorlib.DNICollection)
  ['{1EB0B38A-577C-3F0C-8341-E97E8CCFE6A3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(i: Int32): DNOdbcError;

  { methods } 

    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  到数组中，在该数组中的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  将元素复制到的数组。
    ///</param>
    ///  <param name="i">
    ///  起始索引 <paramref name="array" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  总和 <paramref name="index" />
    ///  和中的元素数 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  大于数组的长度。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  无效，不能 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; i: Int32); overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  的所有元素复制到指定的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  中，并以指定的目标索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  中的元素的复制目标的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  。
    ///</param>
    ///  <param name="i">
    ///  一个 32 位整数，表示 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNOdbcError>; i: Int32); overload;
    ///<summary>
    ///  返回实现 <see cref="T:System.Collections.IEnumerator" />
    ///  接口并可循环访问 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  中的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  对象的对象。
    ///</summary>
    ///<returns>
    ///  实现 <see cref="T:System.Collections.IEnumerator" />
    ///  接口并可循环访问 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  中的 <see cref="T:System.Data.Odbc.OdbcErrorCollection" />
    ///  对象的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的错误数。
    ///</summary>
    ///<returns>
    ///  集合中错误的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[i: Int32]: DNOdbcError read get_Item; default;
  end;

  TDNOdbcErrorCollection = class(TDNGenericImport<DNOdbcErrorCollectionClass, DNOdbcErrorCollection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0700762A-92AB-575D-BEA3-60B153DA20D7}']
  { static fields getter & setter } 

   function __fakeFieldGet_Columns: string;
   function __fakeFieldGet_Indexes: string;
   function __fakeFieldGet_Procedures: string;
   function __fakeFieldGet_ProcedureColumns: string;
   function __fakeFieldGet_ProcedureParameters: string;
   function __fakeFieldGet_Tables: string;
   function __fakeFieldGet_Views: string;

  { static fields } 

    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 列 集合。
    ///</summary>
    {class} property Columns: string read __fakeFieldGet_Columns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 索引 集合。
    ///</summary>
    {class} property Indexes: string read __fakeFieldGet_Indexes;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 过程 集合。
    ///</summary>
    {class} property Procedures: string read __fakeFieldGet_Procedures;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ProcedureColumns 集合。
    ///</summary>
    {class} property ProcedureColumns: string read __fakeFieldGet_ProcedureColumns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ProcedureParameters 集合。
    ///</summary>
    {class} property ProcedureParameters: string read __fakeFieldGet_ProcedureParameters;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 表 集合。
    ///</summary>
    {class} property Tables: string read __fakeFieldGet_Tables;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 视图 集合。
    ///</summary>
    {class} property Views: string read __fakeFieldGet_Views;

  end;

  ///<summary>
  ///  提供与一起使用的常量列表 GetSchema 方法来检索元数据集合。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcMetaDataCollectionNames')]
  DNOdbcMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{253D780B-BB5D-35CE-B7F9-65DD8EB74A8F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOdbcMetaDataCollectionNames = class(TDNGenericImport<DNOdbcMetaDataCollectionNamesClass, DNOdbcMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcMetaDataColumnNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80133A1A-C9B9-5E30-8124-598B9EB7D00F}']
  { static fields getter & setter } 

   function __fakeFieldGet_BooleanFalseLiteral: string;
   function __fakeFieldGet_BooleanTrueLiteral: string;
   function __fakeFieldGet_SQLType: string;

  { static fields } 

    ///<summary>
    ///  使用 GetSchema 方法来创建 BooleanFalseLiteral 列。
    ///</summary>
    {class} property BooleanFalseLiteral: string read __fakeFieldGet_BooleanFalseLiteral;
    ///<summary>
    ///  使用 GetSchema 方法来创建 BooleanTrueLiteral 列。
    ///</summary>
    {class} property BooleanTrueLiteral: string read __fakeFieldGet_BooleanTrueLiteral;
    ///<summary>
    ///  使用 GetSchema 方法来创建 SQLType 列。
    ///</summary>
    {class} property SQLType: string read __fakeFieldGet_SQLType;

  end;

  ///<summary>
  ///  提供用于中的列名称的静态值 <see cref="T:System.Data.Odbc.OdbcMetaDataCollectionNames" />
  ///  中所含对象 <see cref="T:System.Data.DataTable" />
  ///  。
  ///<see cref="T:System.Data.DataTable" />
  ///  由创建 GetSchema 方法。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcMetaDataColumnNames')]
  DNOdbcMetaDataColumnNames = interface(DDN.mscorlib.DNObject)
  ['{F1A3BC88-55E3-32E2-A075-7E3D54AAC6B6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOdbcMetaDataColumnNames = class(TDNGenericImport<DNOdbcMetaDataColumnNamesClass, DNOdbcMetaDataColumnNames>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDFD8658-6872-5D3C-8E01-698B91CF3BED}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.OleDb.OleDbEnumerator" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNOleDbEnumerator;

  { static methods } 

    ///<summary>
    ///  使用特定的 OLE DB 枚举器返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  ，而无需的实例包含有关当前安装的 OLE DB 访问接口、 信息 <see cref="T:System.Data.OleDb.OleDbEnumerator" />
    ///  类。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  包含请求的 OLE DB 访问接口，使用指定的 OLE DB 枚举器有关的信息。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  提供程序不支持 ISourcesRowset。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  基础提供程序中发生异常。
    ///</exception>
    {class} function GetEnumerator(&type: DDN.mscorlib.DNType): DNOleDbDataReader;
    ///<summary>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  ，而无需的实例包含有关当前安装的 OLE DB 访问接口、 信息 <see cref="T:System.Data.OleDb.OleDbEnumerator" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  包含可见的 OLE DB 提供程序的信息。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  提供程序不支持 ISourcesRowset。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  基础提供程序中发生了异常。
    ///</exception>
    {class} function GetRootEnumerator: DNOleDbDataReader;

  end;

  ///<summary>
  ///  提供枚举所有的可用 OLE DB 提供程序在本地网络中的机制。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbEnumerator')]
  DNOleDbEnumerator = interface(DDN.mscorlib.DNObject)
  ['{D54552B5-4B35-36C6-96E2-18EF097B802A}']
  { methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Data.DataTable" />
    ///  ，包含有关所有可见的 OLE DB 访问接口信息。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Data.DataTable" />
    ///  包含可见的 OLE DB 提供程序的信息。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  提供程序不支持 ISourcesRowset。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  基础提供程序中发生了异常。
    ///</exception>
    function GetElements: DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbEnumerator = class(TDNGenericImport<DNOleDbEnumeratorClass, DNOleDbEnumerator>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D8C97E12-5EE5-5E51-A46A-FE515DE7E174}']
  end;

  ///<summary>
  ///  收集与警告或错误的数据源返回的相关信息。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbError')]
  DNOleDbError = interface(DDN.mscorlib.DNObject)
  ['{6DEE0079-201B-3ACC-AF36-ADEAD0308B64}']
  { getters & setters } 

    function get_Message: string;
    function get_NativeError: Int32;
    function get_Source: string;
    function get_SQLState: string;

  { methods } 

    ///<summary>
    ///  获取错误信息的完整文本。
    ///</summary>
    ///<returns>
    ///  错误信息的完整文本。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取错误的简短说明。
    ///</summary>
    ///<returns>
    ///  错误的简短描述。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取特定于数据库的错误信息。
    ///</summary>
    ///<returns>
    ///  特定于数据库的错误信息。
    ///</returns>
    property NativeError: Int32 read get_NativeError;
    ///<summary>
    ///  获取生成错误的提供程序的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的提供程序的名称。
    ///</returns>
    property Source: string read get_Source;
    ///<summary>
    ///  获取数据库的五个字符的错误代码遵循 ANSI SQL 标准。
    ///</summary>
    ///<returns>
    ///  五个字符的错误代码，它标识错误的源，如果该错误可以由多个位置颁发。
    ///</returns>
    property SQLState: string read get_SQLState;
  end;

  TDNOleDbError = class(TDNGenericImport<DNOleDbErrorClass, DNOleDbError>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbErrorCollectionClass = interface(DNObjectClass)
  ['{88780DC4-86A7-5189-B822-0324A96846F6}']
  end;

  ///<summary>
  ///  收集 OLE DB .NET Framework 数据提供程序生成的所有错误。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbErrorCollection')]
  DNOleDbErrorCollection = interface(DDN.mscorlib.DNICollection)
  ['{21D1CE24-A06B-323C-A36B-F0FFCBB7363A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNOleDbError;

  { methods } 

    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  到 <see cref="T:System.Array" />
    ///  , 内指定索引处开始， <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Array" />
    ///  要将元素复制到其中。
    ///</param>
    ///  <param name="index">
    ///  起始索引 <paramref name="array" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  总和 <paramref name="index" />
    ///  和中的元素数 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  个的长度大于 <see cref="T:System.Array" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  无效，不能 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  的所有元素复制到指定的 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  中，并以指定的目标索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  中的元素的复制目标的 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Data.OleDb.OleDbErrorCollection" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNOleDbError>; index: Int32); overload;
    ///<summary>
    ///  公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />
    ///  方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。
    ///</summary>
    ///<returns>
    ///  可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的错误数。
    ///</summary>
    ///<returns>
    ///  集合中错误的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOleDbError read get_Item; default;
  end;

  TDNOleDbErrorCollection = class(TDNGenericImport<DNOleDbErrorCollectionClass, DNOleDbErrorCollection>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2582E8C2-D758-58A1-90D9-2966721C642A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Catalogs: string;
   function __fakeFieldGet_Collations: string;
   function __fakeFieldGet_Columns: string;
   function __fakeFieldGet_Indexes: string;
   function __fakeFieldGet_Procedures: string;
   function __fakeFieldGet_ProcedureColumns: string;
   function __fakeFieldGet_ProcedureParameters: string;
   function __fakeFieldGet_Tables: string;
   function __fakeFieldGet_Views: string;

  { static fields } 

    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 目录 集合。
    ///</summary>
    {class} property Catalogs: string read __fakeFieldGet_Catalogs;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 排序规则 集合。
    ///</summary>
    {class} property Collations: string read __fakeFieldGet_Collations;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 列 集合。
    ///</summary>
    {class} property Columns: string read __fakeFieldGet_Columns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 索引 集合。
    ///</summary>
    {class} property Indexes: string read __fakeFieldGet_Indexes;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 过程 集合。
    ///</summary>
    {class} property Procedures: string read __fakeFieldGet_Procedures;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ProcedureColumns 集合。
    ///</summary>
    {class} property ProcedureColumns: string read __fakeFieldGet_ProcedureColumns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ProcedureParameters 集合。
    ///</summary>
    {class} property ProcedureParameters: string read __fakeFieldGet_ProcedureParameters;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 表 集合。
    ///</summary>
    {class} property Tables: string read __fakeFieldGet_Tables;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 视图 集合。
    ///</summary>
    {class} property Views: string read __fakeFieldGet_Views;

  end;

  ///<summary>
  ///  提供与一起使用的常量列表 GetSchema 方法来检索元数据集合。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbMetaDataCollectionNames')]
  DNOleDbMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{059103F6-79E3-3980-8E0C-E3DA2C048531}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbMetaDataCollectionNames = class(TDNGenericImport<DNOleDbMetaDataCollectionNamesClass, DNOleDbMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbMetaDataColumnNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1D80889-C3AA-5EAF-A0BB-53F632AB41E9}']
  { static fields getter & setter } 

   function __fakeFieldGet_BooleanFalseLiteral: string;
   function __fakeFieldGet_BooleanTrueLiteral: string;
   function __fakeFieldGet_NativeDataType: string;
   function __fakeFieldGet_DateTimeDigits: string;

  { static fields } 

    ///<summary>
    ///  使用 GetSchema 方法来创建 BooleanFalseLiteral 列。
    ///</summary>
    {class} property BooleanFalseLiteral: string read __fakeFieldGet_BooleanFalseLiteral;
    ///<summary>
    ///  使用 GetSchema 方法来创建 BooleanTrueLiteral 列。
    ///</summary>
    {class} property BooleanTrueLiteral: string read __fakeFieldGet_BooleanTrueLiteral;
    ///<summary>
    ///  使用 GetSchema 方法来创建 NativeDataType 列。
    ///</summary>
    {class} property NativeDataType: string read __fakeFieldGet_NativeDataType;
    ///<summary>
    ///  使用 GetSchema 方法来创建 DateTimeDigits 列。
    ///</summary>
    {class} property DateTimeDigits: string read __fakeFieldGet_DateTimeDigits;

  end;

  ///<summary>
  ///  提供用于中的列名称的静态值 <see cref="T:System.Data.OleDb.OleDbMetaDataCollectionNames" />
  ///  中所含对象 <see cref="T:System.Data.DataTable" />
  ///  。
  ///<see cref="T:System.Data.DataTable" />
  ///  由创建 GetSchema 方法。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbMetaDataColumnNames')]
  DNOleDbMetaDataColumnNames = interface(DDN.mscorlib.DNObject)
  ['{B960D5F6-C8C0-3112-9948-05740A2828C4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbMetaDataColumnNames = class(TDNGenericImport<DNOleDbMetaDataColumnNamesClass, DNOleDbMetaDataColumnNames>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbSchemaGuidClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A471583-FCB2-5584-85F0-F0369E6FC121}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbSchemaGuid;

  { static fields getter & setter } 

   function __fakeFieldGet_Tables_Info: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Trustee: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Assertions: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Catalogs: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Character_Sets: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Collations: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Columns: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Check_Constraints: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Constraint_Column_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Constraint_Table_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Key_Column_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Referential_Constraints: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Table_Constraints: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Column_Domain_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Indexes: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Column_Privileges: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Table_Privileges: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Usage_Privileges: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Procedures: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Schemata: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Sql_Languages: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Statistics: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Tables: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Translations: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Provider_Types: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Views: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_View_Column_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_View_Table_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Procedure_Parameters: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Foreign_Keys: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Primary_Keys: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Procedure_Columns: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Table_Statistics: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Check_Constraints_By_Table: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_SchemaGuids: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_DbInfoKeywords: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_DbInfoLiterals: DDN.mscorlib.DNGuid;

  { static fields } 

    ///<summary>
    ///  返回给定用户可以访问的表 （包括视图）。
    ///</summary>
    {class} property Tables_Info: DDN.mscorlib.DNGuid read __fakeFieldGet_Tables_Info;
    ///<summary>
    ///  标识数据源中定义的受信者。
    ///</summary>
    {class} property Trustee: DDN.mscorlib.DNGuid read __fakeFieldGet_Trustee;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的断言。
    ///</summary>
    {class} property Assertions: DDN.mscorlib.DNGuid read __fakeFieldGet_Assertions;
    ///<summary>
    ///  返回与从数据源可访问的目录关联的物理属性。
    ///  返回由给定用户拥有的目录中定义的断言。
    ///</summary>
    {class} property Catalogs: DDN.mscorlib.DNGuid read __fakeFieldGet_Catalogs;
    ///<summary>
    ///  返回给定用户可以访问的目录中定义的字符集。
    ///</summary>
    {class} property Character_Sets: DDN.mscorlib.DNGuid read __fakeFieldGet_Character_Sets;
    ///<summary>
    ///  返回给定用户可以访问的目录中定义的字符排序规则。
    ///</summary>
    {class} property Collations: DDN.mscorlib.DNGuid read __fakeFieldGet_Collations;
    ///<summary>
    ///  返回的表 （包括视图） 都可以访问的、 给定用户的目录中定义的列。
    ///</summary>
    {class} property Columns: DDN.mscorlib.DNGuid read __fakeFieldGet_Columns;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的 check 约束。
    ///</summary>
    {class} property Check_Constraints: DDN.mscorlib.DNGuid read __fakeFieldGet_Check_Constraints;
    ///<summary>
    ///  返回引用约束、 唯一约束、 check 约束和断言使用的、 在目录中定义并由的、 给定用户拥有的列。
    ///</summary>
    {class} property Constraint_Column_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Constraint_Column_Usage;
    ///<summary>
    ///  返回由引用约束、 唯一约束、 check 约束和断言的目录中定义并由给定用户拥有的表。
    ///</summary>
    {class} property Constraint_Table_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Constraint_Table_Usage;
    ///<summary>
    ///  返回由给定用户约束为键的目录中定义的列。
    ///</summary>
    {class} property Key_Column_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Key_Column_Usage;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的引用约束。
    ///</summary>
    {class} property Referential_Constraints: DDN.mscorlib.DNGuid read __fakeFieldGet_Referential_Constraints;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的表约束。
    ///</summary>
    {class} property Table_Constraints: DDN.mscorlib.DNGuid read __fakeFieldGet_Table_Constraints;
    ///<summary>
    ///  返回依赖于域的目录中定义并由给定用户拥有的列的目录中定义。
    ///</summary>
    {class} property Column_Domain_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Column_Domain_Usage;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的索引。
    ///</summary>
    {class} property Indexes: DDN.mscorlib.DNGuid read __fakeFieldGet_Indexes;
    ///<summary>
    ///  返回上可使用或由指定的用户授权的表的目录中定义的列的权限。
    ///</summary>
    {class} property Column_Privileges: DDN.mscorlib.DNGuid read __fakeFieldGet_Column_Privileges;
    ///<summary>
    ///  返回上表的目录中定义，可使用或由给定用户授予的权限。
    ///</summary>
    {class} property Table_Privileges: DDN.mscorlib.DNGuid read __fakeFieldGet_Table_Privileges;
    ///<summary>
    ///  返回上可使用或由指定的用户授权的对象的目录中定义使用权限。
    ///</summary>
    {class} property Usage_Privileges: DDN.mscorlib.DNGuid read __fakeFieldGet_Usage_Privileges;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的过程。
    ///</summary>
    {class} property Procedures: DDN.mscorlib.DNGuid read __fakeFieldGet_Procedures;
    ///<summary>
    ///  返回由给定用户拥有的架构对象。
    ///</summary>
    {class} property Schemata: DDN.mscorlib.DNGuid read __fakeFieldGet_Schemata;
    ///<summary>
    ///  返回一致性级别、 选项和支持的目录中定义的 SQL 实现处理数据的方言。
    ///</summary>
    {class} property Sql_Languages: DDN.mscorlib.DNGuid read __fakeFieldGet_Sql_Languages;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的统计信息。
    ///</summary>
    {class} property Statistics: DDN.mscorlib.DNGuid read __fakeFieldGet_Statistics;
    ///<summary>
    ///  返回的表 （包括视图） 的目录中定义的、 给定用户可以访问。
    ///</summary>
    {class} property Tables: DDN.mscorlib.DNGuid read __fakeFieldGet_Tables;
    ///<summary>
    ///  返回给定用户可以访问的目录中定义的字符转换。
    ///</summary>
    {class} property Translations: DDN.mscorlib.DNGuid read __fakeFieldGet_Translations;
    ///<summary>
    ///  返回对于 OLE DB.NET Framework 数据提供程序支持的基本数据类型。
    ///</summary>
    {class} property Provider_Types: DDN.mscorlib.DNGuid read __fakeFieldGet_Provider_Types;
    ///<summary>
    ///  返回给定用户可以访问的目录中定义的视图。
    ///</summary>
    {class} property Views: DDN.mscorlib.DNGuid read __fakeFieldGet_Views;
    ///<summary>
    ///  返回在其中的列中查看表依赖于在目录中定义并由给定用户拥有。
    ///</summary>
    {class} property View_Column_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_View_Column_Usage;
    ///<summary>
    ///  返回在其上的表中查看表、 在目录中定义和由给定用户拥有的所依赖。
    ///</summary>
    {class} property View_Table_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_View_Table_Usage;
    ///<summary>
    ///  返回有关参数和返回代码的过程信息。
    ///</summary>
    {class} property Procedure_Parameters: DDN.mscorlib.DNGuid read __fakeFieldGet_Procedure_Parameters;
    ///<summary>
    ///  返回由给定用户的目录中定义的外键列。
    ///</summary>
    {class} property Foreign_Keys: DDN.mscorlib.DNGuid read __fakeFieldGet_Foreign_Keys;
    ///<summary>
    ///  返回由给定用户的目录中定义的主键列。
    ///</summary>
    {class} property Primary_Keys: DDN.mscorlib.DNGuid read __fakeFieldGet_Primary_Keys;
    ///<summary>
    ///  返回有关由过程返回的行集的列信息。
    ///</summary>
    {class} property Procedure_Columns: DDN.mscorlib.DNGuid read __fakeFieldGet_Procedure_Columns;
    ///<summary>
    ///  描述在提供程序中的表上的可用统计信息集。
    ///</summary>
    {class} property Table_Statistics: DDN.mscorlib.DNGuid read __fakeFieldGet_Table_Statistics;
    ///<summary>
    ///  返回由给定用户拥有的目录中定义的 check 约束。
    ///</summary>
    {class} property Check_Constraints_By_Table: DDN.mscorlib.DNGuid read __fakeFieldGet_Check_Constraints_By_Table;
    ///<summary>
    ///  返回的架构行集，由其 Guid，以及指向限制列的说明的列表。
    ///</summary>
    {class} property SchemaGuids: DDN.mscorlib.DNGuid read __fakeFieldGet_SchemaGuids;
    ///<summary>
    ///  返回提供程序特定关键字的列表。
    ///</summary>
    {class} property DbInfoKeywords: DDN.mscorlib.DNGuid read __fakeFieldGet_DbInfoKeywords;
    ///<summary>
    ///  返回文本命令中使用的提供程序特有的文字的列表。
    ///</summary>
    {class} property DbInfoLiterals: DDN.mscorlib.DNGuid read __fakeFieldGet_DbInfoLiterals;

  end;

  ///<summary>
  ///  返回由指定的架构表的类型 <see cref="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbSchemaGuid')]
  DNOleDbSchemaGuid = interface(DDN.mscorlib.DNObject)
  ['{24F82AA5-56BC-300A-8199-9A9A3FD77ABC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbSchemaGuid = class(TDNGenericImport<DNOleDbSchemaGuidClass, DNOleDbSchemaGuid>) end;

  //-------------namespace: System.Data.Sql----------------
  DNSqlNotificationRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC582921-76B1-5D1F-AB29-F1ED6D6ED44C}']
  { constructors } 

    ///<summary>
    ///  使用默认值创建 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlNotificationRequest; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  类和用户定义的字符串，用来标识特定的通知请求，预定义的 SQL Server 2005 Service Broker 服务名称和超时期限内，名称以秒为单位。
    ///</summary>
    ///  <param name="userData">
    ///  一个字符串，包含此通知的应用程序特定标识符。
    ///  通知基础结构，不使用它，但它允许您将通知与应用程序状态相关联。
    ///  指示此参数中的值包含在 Service Broker 队列消息。
    ///</param>
    ///  <param name="options">
    ///  一个字符串，包含其中发布通知消息，并且它必须包含数据库名称或 GUID，将服务名称查找的作用域限制为特定数据库的 Service Broker 实例的 Service Broker 服务名。
    ///  有关格式的详细信息 <paramref name="options" />
    ///  参数，请参阅 <see cref="P:System.Data.Sql.SqlNotificationRequest.Options" />
    ///  。
    ///</param>
    ///  <param name="timeout">
    ///  以秒为单位，要等待一条通知消息的时间。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值 <paramref name="options" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="options" />
    ///  或 <paramref name="userData" />
    ///  参数的长度超过 <see langword="uint16.MaxValue" />
    ///  或中的值 <paramref name="timeout" />
    ///  参数小于零。
    ///</exception>
    {class} function init(userData: string; options: string; timeout: Int32): DNSqlNotificationRequest; overload;

  end;

  ///<summary>
  ///  表示有关给定命令的通知的请求。
  ///</summary>
  [DNTypeName('System.Data.Sql.SqlNotificationRequest')]
  DNSqlNotificationRequest = interface(DDN.mscorlib.DNObject)
  ['{DE4AC26B-F2EA-33B8-83EA-A252F0B2E17D}']
  { getters & setters } 

    function get_Options: string;
    procedure set_Options(value: string);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_UserData: string;
    procedure set_UserData(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 SQL Server Service Broker 服务名称其中发布通知消息。
    ///</summary>
    ///<returns><see langword="string" />
    ///  包含其中发布通知消息的 SQL Server 2005 Service Broker 服务名称和数据库或服务 broker 实例 GUID 来划分在作用域的服务器名称查找。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值为 NULL。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  值的长度超过 <see langword="uint16.MaxValue" />
    ///  。
    ///</exception>
    property Options: string read get_Options write set_Options;
    ///<summary>
    ///  获取或设置一个值，指定 SQL Server 更改发生在操作超时之前要等待多长时间。
    ///</summary>
    ///<returns>
    ///  指定 SQL Server 等待操作超时之前出现的更改的时间长度，以秒为单位，有符号的整数值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  值小于零。
    ///</exception>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    ///<summary>
    ///  获取或设置针对此通知的应用程序特定的标识符。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  此通知的应用程序特定标识符值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值的长度超过 <see langword="uint16.MaxValue" />
    ///  。
    ///</exception>
    property UserData: string read get_UserData write set_UserData;
  end;

  TDNSqlNotificationRequest = class(TDNGenericImport<DNSqlNotificationRequestClass, DNSqlNotificationRequest>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationInitializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7270086-3DDC-5D87-8A80-782DF57D0B33}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationInitializer')]
  DNSqlAuthenticationInitializer = interface(DDN.mscorlib.DNObject)
  ['{27D7788D-A96E-3512-8829-C0069BC6EBC9}']
  { methods } 

    procedure Initialize;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlAuthenticationInitializer = class(TDNGenericImport<DNSqlAuthenticationInitializerClass, DNSqlAuthenticationInitializer>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D2F6F6B3-D5BA-5FC6-9E01-469E59506280}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationParameters')]
  DNSqlAuthenticationParameters = interface(DDN.mscorlib.DNObject)
  ['{393A36B7-14F1-3474-8785-1FDECC1B0E4A}']
  { getters & setters } 

    function get_AuthenticationMethod: DNSqlAuthenticationMethod;
    function get_Resource: string;
    function get_Authority: string;
    function get_UserId: string;
    function get_Password: string;
    function get_ConnectionId: DDN.mscorlib.DNGuid;
    function get_ServerName: string;
    function get_DatabaseName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AuthenticationMethod: DNSqlAuthenticationMethod read get_AuthenticationMethod;
    property Resource: string read get_Resource;
    property Authority: string read get_Authority;
    property UserId: string read get_UserId;
    property Password: string read get_Password;
    property ConnectionId: DDN.mscorlib.DNGuid read get_ConnectionId;
    property ServerName: string read get_ServerName;
    property DatabaseName: string read get_DatabaseName;
  end;

  TDNSqlAuthenticationParameters = class(TDNGenericImport<DNSqlAuthenticationParametersClass, DNSqlAuthenticationParameters>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{061610E4-19F3-5313-92D3-30909FA5C7A3}']
  { static methods } 

    {class} function GetProvider(authenticationMethod: DNSqlAuthenticationMethod): DNSqlAuthenticationProvider;
    {class} function SetProvider(authenticationMethod: DNSqlAuthenticationMethod; provider: DNSqlAuthenticationProvider): Boolean;

  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationProvider')]
  DNSqlAuthenticationProvider = interface(DDN.mscorlib.DNObject)
  ['{EC1CDE39-B318-33C5-9B28-2311BEC05605}']
  { methods } 

    procedure BeforeLoad(authenticationMethod: DNSqlAuthenticationMethod);
    procedure BeforeUnload(authenticationMethod: DNSqlAuthenticationMethod);
    function IsSupported(authenticationMethod: DNSqlAuthenticationMethod): Boolean;
    function AcquireTokenAsync(parameters: DNSqlAuthenticationParameters): DDN.mscorlib.DNTask<DNSqlAuthenticationToken>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlAuthenticationProvider = class(TDNGenericImport<DNSqlAuthenticationProviderClass, DNSqlAuthenticationProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationTokenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0ECFDB2E-CBC4-5F2B-BF46-019E8FF86071}']
  { constructors } 

    {class} function init(accessToken: string; expiresOn: DDN.mscorlib.DNDateTimeOffset): DNSqlAuthenticationToken;

  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationToken')]
  DNSqlAuthenticationToken = interface(DDN.mscorlib.DNObject)
  ['{2BA7088E-C49D-3A0F-A85D-4F216B6166A2}']
  { getters & setters } 

    function get_ExpiresOn: DDN.mscorlib.DNDateTimeOffset;
    function get_AccessToken: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExpiresOn: DDN.mscorlib.DNDateTimeOffset read get_ExpiresOn;
    property AccessToken: string read get_AccessToken;
  end;

  TDNSqlAuthenticationToken = class(TDNGenericImport<DNSqlAuthenticationTokenClass, DNSqlAuthenticationToken>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlBulkCopyClass = interface(DNObjectClass)
  ['{1228D3A5-047C-5B0D-92E2-38181E5D7731}']
  { constructors } 

    ///<summary>
    ///  使用 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的指定打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="connection">
    ///  将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  实例。
    ///  如果连接字符串不使用 <see langword="Integrated Security = true" />
    ///  ，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。
    ///</param>
    {class} function init(connection: DNSqlConnection): DNSqlBulkCopy; overload;
    ///<summary>
    ///  使用提供的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的现有打开实例初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  类的新实例。
    ///<see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  实例的行为取决于 <paramref name="copyOptions" />
    ///  参数中提供的选项。
    ///  如果提供非空 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  ，则复制操作将在该事务中执行。
    ///</summary>
    ///  <param name="connection">
    ///  将用于执行批量复制操作的已经打开的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  实例。
    ///  如果连接字符串不使用 <see langword="Integrated Security = true" />
    ///  ，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。
    ///</param>
    ///  <param name="copyOptions"><see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />
    ///  枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。
    ///</param>
    ///  <param name="externalTransaction">
    ///  现有的 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  实例，批量复制操作将在该实例下进行。
    ///</param>
    {class} function init(connection: DNSqlConnection; copyOptions: DNSqlBulkCopyOptions; externalTransaction: DNSqlTransaction): DNSqlBulkCopy; overload;
    ///<summary>
    ///  基于提供的 <paramref name="connectionString" />
    ///  初始化并打开 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的新实例。
    ///  该构造函数使用 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="connectionString">
    ///  定义将打开供 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  实例使用的连接的字符串。
    ///  如果该连接字符串不使用 <see langword="Integrated Security = true" />
    ///  ，则可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
    ///  或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
    ///  和 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。
    ///</param>
    {class} function init(connectionString: string): DNSqlBulkCopy; overload;
    ///<summary>
    ///  基于提供的 <paramref name="connectionString" />
    ///  初始化并打开 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的新实例。
    ///  构造函数使用该 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  来初始化 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  类的新实例。
    ///<see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  实例的行为取决于 <paramref name="copyOptions" />
    ///  参数中提供的选项。
    ///</summary>
    ///  <param name="connectionString">
    ///  定义将打开供 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  实例使用的连接的字符串。
    ///  如果该连接字符串不使用 <see langword="Integrated Security = true" />
    ///  ，则可以使用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
    ///  或 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
    ///  和 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。
    ///</param>
    ///  <param name="copyOptions"><see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" />
    ///  枚举中的值的组合，该枚举确定将哪些数据源行复制到目标表中。
    ///</param>
    {class} function init(connectionString: string; copyOptions: DNSqlBulkCopyOptions): DNSqlBulkCopy; overload;

  end;

  ///<summary>
  ///  允许你使用其他源的数据有效地批量加载 SQL Server 表。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlBulkCopy')]
  DNSqlBulkCopy = interface(DDN.mscorlib.DNIDisposable)
  ['{57734AA7-5E91-3868-8716-17A3B9780BA6}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_BulkCopyTimeout: Int32;
    procedure set_BulkCopyTimeout(value: Int32);
    function get_EnableStreaming: Boolean;
    procedure set_EnableStreaming(value: Boolean);
    function get_ColumnMappings: DNSqlBulkCopyColumnMappingCollection;
    function get_DestinationTableName: string;
    procedure set_DestinationTableName(value: string);
    function get_NotifyAfter: Int32;
    procedure set_NotifyAfter(value: Int32);

  { events } 

    procedure add_SqlRowsCopied(value: DNSqlRowsCopiedEventHandler);
    procedure remove_SqlRowsCopied(value: DNSqlRowsCopiedEventHandler);

  { methods } 

    ///<summary>
    ///  将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表中。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  ，其行将复制到目标表。
    ///</param>
    procedure WriteToServer(reader: DNDbDataReader); overload;
    ///<summary>
    ///  将所有行从提供的 <see cref="T:System.Data.IDataReader" />
    ///  复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表中。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.IDataReader" />
    ///  ，其行将复制到目标表。
    ///</param>
    procedure WriteToServer(reader: DNIDataReader); overload;
    ///<summary>
    ///  将所有行从提供的 <see cref="T:System.Data.DataTable" />
    ///  复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表中。
    ///</summary>
    ///  <param name="table">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其行将复制到目标表。
    ///</param>
    procedure WriteToServer(table: DNDataTable); overload;
    ///<summary>
    ///  仅将与提供的 <see cref="T:System.Data.DataTable" />
    ///  中提供的行状态匹配的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///</summary>
    ///  <param name="table">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///  <param name="rowState"><see cref="T:System.Data.DataRowState" />
    ///  枚举中的一个值。
    ///  只有与行状态匹配的行才会复制到目标中。
    ///</param>
    procedure WriteToServer(table: DNDataTable; rowState: DNDataRowState); overload;
    ///<summary>
    ///  将所有行从提供的 <see cref="T:System.Data.DataRow" />
    ///  数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表中。
    ///</summary>
    ///  <param name="rows">
    ///  将复制到目标表的 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</param>
    procedure WriteToServer(rows: TArray<DNDataRow>); overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
    ///  的异步版本，它将所有行从提供的 <see cref="T:System.Data.DataRow" />
    ///  数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///</summary>
    ///  <param name="rows">
    ///  将复制到目标表的 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(rows: TArray<DNDataRow>): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
    ///  的异步版本，它将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function WriteToServerAsync(reader: DNDbDataReader): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
    ///  的异步版本，它将所有行从提供的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///  此参数中的 <see cref="P:System.Threading.CancellationToken.None" />
    ///  值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Threading.Tasks.Task" />
    ///  。
    ///</returns>
    function WriteToServerAsync(reader: DNDbDataReader; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
    ///  的异步版本，它将提供的 <see cref="T:System.Data.IDataReader" />
    ///  中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.IDataReader" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在完成的 <see cref="T:System.Threading.Tasks.Task" />
    ///  返回之前，<see cref="T:System.Data.IDataReader" />
    ///  已关闭。
    ///  在完成的 <see cref="T:System.Threading.Tasks.Task" />
    ///  返回之前，与 <see cref="T:System.Data.IDataReader" />
    ///  相关的连接已关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(reader: DNIDataReader): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
    ///  的异步版本，它将提供的 <see cref="T:System.Data.IDataReader" />
    ///  中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="reader">
    ///  一个 <see cref="T:System.Data.IDataReader" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///  此参数中的 <see cref="P:System.Threading.CancellationToken.None" />
    ///  值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在完成的 <see cref="T:System.Threading.Tasks.Task" />
    ///  返回之前，<see cref="T:System.Data.IDataReader" />
    ///  已关闭。
    ///  在完成的 <see cref="T:System.Threading.Tasks.Task" />
    ///  返回之前，与 <see cref="T:System.Data.IDataReader" />
    ///  相关的连接已关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(reader: DNIDataReader; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
    ///  的异步版本，它将提供的 <see cref="T:System.Data.DataTable" />
    ///  中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///</summary>
    ///  <param name="table">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(table: DNDataTable): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
    ///  的异步版本，它将提供的 <see cref="T:System.Data.DataTable" />
    ///  中的所有行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="table">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///  此参数中的 <see cref="P:System.Threading.CancellationToken.None" />
    ///  值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(table: DNDataTable; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
    ///  的异步版本，它只将匹配所提供 <see cref="T:System.Data.DataTable" />
    ///  中所提供行状态的行复制到  <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表中。
    ///</summary>
    ///  <param name="table">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///  <param name="rowState"><see cref="T:System.Data.DataRowState" />
    ///  枚举中的一个值。
    ///  只有与行状态匹配的行才会复制到目标中。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(table: DNDataTable; rowState: DNDataRowState): DDN.mscorlib.DNTask; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
    ///  的异步版本，它只将匹配所提供 <see cref="T:System.Data.DataTable" />
    ///  中所提供行状态的行复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表中。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="table">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其行将复制到目标表。
    ///</param>
    ///  <param name="rowState"><see cref="T:System.Data.DataRowState" />
    ///  枚举中的一个值。
    ///  只有与行状态匹配的行才会复制到目标中。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///  此参数中的 <see cref="P:System.Threading.CancellationToken.None" />
    ///  值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(table: DNDataTable; rowState: DNDataRowState; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  关闭 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  实例。
    ///</summary>
    procedure Close;
    ///<summary><see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
    ///  的异步版本，它将所有行从提供的 <see cref="T:System.Data.DataRow" />
    ///  数组复制到 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象的 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性指定的目标表。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="rows">
    ///  将复制到目标表的 <see cref="T:System.Data.DataRow" />
    ///  对象数组。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///  此参数中的 <see cref="P:System.Threading.CancellationToken.None" />
    ///  值将使此方法等效于 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
    ///  。
    ///  在完成任务前，为同一个实例调用 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
    ///  和 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
    ///  。
    ///  在执行 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
    ///  期间连接断开或关闭。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象在执行方法时关闭。
    ///  在任务对象中返回后存在连接池超时。
    ///  在任务对象中返回的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象在执行方法前关闭。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  由 SQL Server 在任务对象中返回的任意错误，这些错误是打开连接时出现的。
    ///</exception>
    function WriteToServerAsync(rows: TArray<DNDataRow>; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  每个批处理中的行数。
    ///  在每个批处理结束时，批处理中的行将发送到服务器。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
    ///  属性的整数值；如果未设置任何值，则为零。
    ///</returns>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  超时之前可用于完成操作的秒数。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
    ///  属性的整数值。
    ///  默认值为 30 秒。
    ///  值为 0 表示无限制，大容量复制将无限期等待。
    ///</returns>
    property BulkCopyTimeout: Int32 read get_BulkCopyTimeout write set_BulkCopyTimeout;
    ///<summary>
    ///  启用或禁用 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象，以流式传输 <see cref="T:System.Data.IDataReader" />
    ///  对象中的数据
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
    ///  对象可以流式传输 <see cref="T:System.Data.IDataReader" />
    ///  对象中的数据，则为 <see langword="true" />
    ///  ；否则为 false。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableStreaming: Boolean read get_EnableStreaming write set_EnableStreaming;
    ///<summary>
    ///  返回 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  项的集合。
    ///  列映射定义数据源中的列和目标中的列之间的关系。
    ///</summary>
    ///<returns>
    ///  列映射集合。
    ///  默认情况下为空集合。
    ///</returns>
    property ColumnMappings: DNSqlBulkCopyColumnMappingCollection read get_ColumnMappings;
    ///<summary>
    ///  服务器上的目标表的名称。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
    ///  属性的字符串值，如果未提供任何值，则为 null。
    ///</returns>
    property DestinationTableName: string read get_DestinationTableName write set_DestinationTableName;
    ///<summary>
    ///  定义生成通知事件之前要处理的行数。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
    ///  属性的整数值，如果未设置任何属性，则为零。
    ///</returns>
    property NotifyAfter: Int32 read get_NotifyAfter write set_NotifyAfter;
  end;

  TDNSqlBulkCopy = class(TDNGenericImport<DNSqlBulkCopyClass, DNSqlBulkCopy>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlBulkCopyColumnMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A477E7A-B2C4-5C4F-B6BF-FD9E8A495B01}']
  { constructors } 

    ///<summary>
    ///  初始化一个新的默认构造函数 <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
    ///  对象。
    ///</summary>
    {class} function init: DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建一个新的列映射，并使用列名称来引用的源和目标列。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  数据源中的源列的名称。
    ///</param>
    ///  <param name="destinationColumn">
    ///  目标表中的目标列的名称。
    ///</param>
    {class} function init(sourceColumn: string; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建新的列映射，并使用列的序号引用的源列和目标列的列名称。
    ///</summary>
    ///  <param name="sourceColumnOrdinal">
    ///  数据源中的源列的序号位置。
    ///</param>
    ///  <param name="destinationColumn">
    ///  目标表中的目标列的名称。
    ///</param>
    {class} function init(sourceColumnOrdinal: Int32; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建新的列映射，并使用一个列名称来引用的源列和的列序号目标列。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  数据源中的源列的名称。
    ///</param>
    ///  <param name="destinationOrdinal">
    ///  目标表中的目标列的序号位置。
    ///</param>
    {class} function init(sourceColumn: string; destinationOrdinal: Int32): DNSqlBulkCopyColumnMapping; overload;
    ///<summary>
    ///  创建一个新的列映射，并使用列序号来引用的源和目标列。
    ///</summary>
    ///  <param name="sourceColumnOrdinal">
    ///  数据源中的源列的序号位置。
    ///</param>
    ///  <param name="destinationOrdinal">
    ///  目标表中的目标列的序号位置。
    ///</param>
    {class} function init(sourceColumnOrdinal: Int32; destinationOrdinal: Int32): DNSqlBulkCopyColumnMapping; overload;

  end;

  ///<summary>
  ///  定义中的列之间的映射 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />
  ///  实例的数据源和实例的目标表中的列。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlBulkCopyColumnMapping')]
  DNSqlBulkCopyColumnMapping = interface(DDN.mscorlib.DNObject)
  ['{F38FDFF7-9580-30EA-9A4A-A47FA9B8579D}']
  { getters & setters } 

    function get_DestinationColumn: string;
    procedure set_DestinationColumn(value: string);
    function get_DestinationOrdinal: Int32;
    procedure set_DestinationOrdinal(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceOrdinal: Int32;
    procedure set_SourceOrdinal(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  正在映射的目标数据库表中的列的名称。
    ///</summary>
    ///<returns>
    ///  字符串值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn" />
    ///  属性。
    ///</returns>
    property DestinationColumn: string read get_DestinationColumn write set_DestinationColumn;
    ///<summary>
    ///  目标表中的目标列的序号值。
    ///</summary>
    ///<returns>
    ///  整数值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal" />
    ///  属性，否则为-1 未设置该属性。
    ///</returns>
    property DestinationOrdinal: Int32 read get_DestinationOrdinal write set_DestinationOrdinal;
    ///<summary>
    ///  正在映射的数据源中的列的名称。
    ///</summary>
    ///<returns>
    ///  字符串值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn" />
    ///  属性。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    ///<summary>
    ///  数据源中的源列的序号位置。
    ///</summary>
    ///<returns>
    ///  整数值 <see cref="P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal" />
    ///  属性。
    ///</returns>
    property SourceOrdinal: Int32 read get_SourceOrdinal write set_SourceOrdinal;
  end;

  TDNSqlBulkCopyColumnMapping = class(TDNGenericImport<DNSqlBulkCopyColumnMappingClass, DNSqlBulkCopyColumnMapping>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientLoggerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{64189E45-81B5-5D7D-8AC5-8EC6A77582C9}']
  { constructors } 

    {class} function init: DNSqlClientLogger;

  end;

  [DNTypeName('System.Data.SqlClient.SqlClientLogger')]
  DNSqlClientLogger = interface(DDN.mscorlib.DNObject)
  ['{4BAAEB14-707D-3264-B28B-A37B7012AD88}']
  { getters & setters } 

    function get_IsLoggingEnabled: Boolean;

  { methods } 

    procedure LogInfo(&type: string; method: string; message: string);
    procedure LogError(&type: string; method: string; message: string);
    function LogAssert(value: Boolean; &type: string; method: string; message: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsLoggingEnabled: Boolean read get_IsLoggingEnabled;
  end;

  TDNSqlClientLogger = class(TDNGenericImport<DNSqlClientLoggerClass, DNSqlClientLogger>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A0B61192-D759-556C-A951-65776B6C3690}']
  { static fields getter & setter } 

   function __fakeFieldGet_Columns: string;
   function __fakeFieldGet_Databases: string;
   function __fakeFieldGet_ForeignKeys: string;
   function __fakeFieldGet_IndexColumns: string;
   function __fakeFieldGet_Indexes: string;
   function __fakeFieldGet_Parameters: string;
   function __fakeFieldGet_ProcedureColumns: string;
   function __fakeFieldGet_Procedures: string;
   function __fakeFieldGet_Tables: string;
   function __fakeFieldGet_UserDefinedTypes: string;
   function __fakeFieldGet_Users: string;
   function __fakeFieldGet_ViewColumns: string;
   function __fakeFieldGet_Views: string;

  { static fields } 

    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 列 集合。
    ///</summary>
    {class} property Columns: string read __fakeFieldGet_Columns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 数据库 集合。
    ///</summary>
    {class} property Databases: string read __fakeFieldGet_Databases;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ForeignKeys 集合。
    ///</summary>
    {class} property ForeignKeys: string read __fakeFieldGet_ForeignKeys;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 IndexColumns 集合。
    ///</summary>
    {class} property IndexColumns: string read __fakeFieldGet_IndexColumns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 索引 集合。
    ///</summary>
    {class} property Indexes: string read __fakeFieldGet_Indexes;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 参数 集合。
    ///</summary>
    {class} property Parameters: string read __fakeFieldGet_Parameters;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ProcedureColumns 集合。
    ///</summary>
    {class} property ProcedureColumns: string read __fakeFieldGet_ProcedureColumns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 过程 集合。
    ///</summary>
    {class} property Procedures: string read __fakeFieldGet_Procedures;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 表 集合。
    ///</summary>
    {class} property Tables: string read __fakeFieldGet_Tables;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 UserDefinedTypes 集合。
    ///</summary>
    {class} property UserDefinedTypes: string read __fakeFieldGet_UserDefinedTypes;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 用户 集合。
    ///</summary>
    {class} property Users: string read __fakeFieldGet_Users;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 ViewColumns 集合。
    ///</summary>
    {class} property ViewColumns: string read __fakeFieldGet_ViewColumns;
    ///<summary>
    ///  与一起使用的常量 GetSchema 表示方法 视图 集合。
    ///</summary>
    {class} property Views: string read __fakeFieldGet_Views;

  end;

  ///<summary>
  ///  提供与一起使用的常量列表 GetSchema 方法来检索元数据集合。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlClientMetaDataCollectionNames')]
  DNSqlClientMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{15984A17-E56C-3454-AC1A-B363CDDECE3C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlClientMetaDataCollectionNames = class(TDNGenericImport<DNSqlClientMetaDataCollectionNamesClass, DNSqlClientMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionEnclaveProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0636B43D-3B0C-5D3A-8645-EB692270D29A}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionEnclaveProvider')]
  DNSqlColumnEncryptionEnclaveProvider = interface(DDN.mscorlib.DNObject)
  ['{9F73C055-7997-3654-BDA2-2F55FC8D8BB1}']
  { methods } 

    procedure GetEnclaveSession(serverName: string; attestationUrl: string; out sqlEnclaveSession: DNSqlEnclaveSession; out counter: Int64);
    function GetAttestationParameters: DNSqlEnclaveAttestationParameters;
    procedure CreateEnclaveSession(enclaveAttestationInfo: TArray<Byte>; clientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng; attestationUrl: string; servername: string; out sqlEnclaveSession: DNSqlEnclaveSession; out counter: Int64);
    procedure InvalidateEnclaveSession(serverName: string; enclaveAttestationUrl: string; enclaveSession: DNSqlEnclaveSession);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionEnclaveProvider = class(TDNGenericImport<DNSqlColumnEncryptionEnclaveProviderClass, DNSqlColumnEncryptionEnclaveProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionKeyStoreProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E90EA962-BDCF-52EA-BAEA-39C4F47CD0C8}']
  end;

  ///<summary>
  ///  所有密钥存储提供程序的基类。
  ///  自定义提供程序必须从此类中派生而来并重写其成员函数，然后使用 SqlConnection.RegisterColumnEncryptionKeyStoreProviders() 对其进行注册。
  ///  有关详细信息，请参阅 Always Encrypted。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider')]
  DNSqlColumnEncryptionKeyStoreProvider = interface(DDN.mscorlib.DNObject)
  ['{646E24F4-8540-3AA6-A2E0-60458F6E96EF}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    ///<summary>
    ///  对列加密密钥的指定加密值进行解密。
    ///  加密值预期应使用具有指定密钥路径的列主密钥和使用指定的算法进行加密。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="encryptedColumnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///  已解密的列加密密钥。
    ///</returns>
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  使用具有指定密钥路径的列主密钥和使用指定的算法对列加密密钥进行加密。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="columnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///  加密的列加密密钥。
    ///</returns>
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionKeyStoreProvider = class(TDNGenericImport<DNSqlColumnEncryptionKeyStoreProviderClass, DNSqlColumnEncryptionKeyStoreProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionCertificateStoreProviderClass = interface(DNSqlColumnEncryptionKeyStoreProviderClass)
  ['{B8B51DFD-7D44-58B9-B217-4FD1DE7A9AE5}']
  { constructors } 

    ///<summary>
    ///  Windows 证书存储的密钥存储提供程序。
    ///</summary>
    {class} function init: DNSqlColumnEncryptionCertificateStoreProvider;

  end;

  ///<summary>
  ///  Windows 证书存储的密钥存储提供程序的实现。
  ///  借助此类，可将 Windows 证书存储中存储的证书用作列的主密钥。
  ///  有关详细信息，请参阅 Always Encrypted。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider')]
  DNSqlColumnEncryptionCertificateStoreProvider = interface(DNSqlColumnEncryptionKeyStoreProvider)
  ['{D6655E9D-3A56-3F1C-A126-4B9DE18E6F38}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    ///<summary>
    ///  对列加密密钥的指定加密值进行解密。
    ///  加密值预期应使用具有指定密钥路径的证书和指定的算法进行加密。
    ///  密钥路径的格式应为“Local Machine/My/&lt;certificate_thumbrint&gt;”或“Current User/My/&lt;certificate_thumbprint&gt;”。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///  当前，唯一有效的值是：RSA_OAEP。
    ///</param>
    ///  <param name="encryptedColumnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///  已解密的列加密密钥。
    ///</returns>
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  使用具有指定密钥路径的证书和使用指定的算法对列加密密钥进行加密。
    ///  密钥路径的格式应为“Local Machine/My/&lt;certificate_thumbrint&gt;”或“Current User/My/&lt;certificate_thumbprint&gt;”。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///  当前，唯一有效的值是：RSA_OAEP。
    ///</param>
    ///  <param name="columnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Byte" />
    ///  。
    ///  加密的列加密密钥。
    ///</returns>
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionCertificateStoreProvider = class(TDNGenericImport<DNSqlColumnEncryptionCertificateStoreProviderClass, DNSqlColumnEncryptionCertificateStoreProvider>)
  public const
    ///<summary>
    ///  提供程序名称。
    ///</summary>
    ///<returns>
    ///  提供程序名称。
    ///</returns>
   ProviderName = 'MSSQL_CERTIFICATE_STORE';
  end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionCngProviderClass = interface(DNSqlColumnEncryptionKeyStoreProviderClass)
  ['{96EB1852-D628-5B64-90F3-28900438FCF9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlColumnEncryptionCngProvider" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlColumnEncryptionCngProvider;

  end;

  ///<summary>
  ///  CMK 存储提供程序实现使用 Microsoft 加密 API: Next Generation (CNG) 与 Always Encrypted。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionCngProvider')]
  DNSqlColumnEncryptionCngProvider = interface(DNSqlColumnEncryptionKeyStoreProvider)
  ['{3110E653-1689-3CD0-A5EC-1AF2CEE19911}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    ///<summary>
    ///  使用由密钥路径和指定算法指定的非对称密钥对给定的加密值进行解密。
    ///  密钥路径将采用格式 [ProviderName]/KeyIdentifier，并且应当为存储在指定 CNG 密钥存储提供程序中的非对称密钥。
    ///  用于加密/解密 CEK 的有效算法是“RSA_OAEP”。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="encryptedColumnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  已解密的列加密密钥。
    ///</returns>
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  通过使用由密钥路径和指定算法所指定的非对称密钥，对给定的纯文本列加密密钥进行加密。
    ///  密钥路径将采用格式 [ProviderName]/KeyIdentifier，并且应当为存储在指定 CNG 密钥存储提供程序中的非对称密钥。
    ///  用于加密/解密 CEK 的有效算法是“RSA_OAEP”。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="columnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  加密的列加密密钥。
    ///</returns>
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionCngProvider = class(TDNGenericImport<DNSqlColumnEncryptionCngProviderClass, DNSqlColumnEncryptionCngProvider>)
  public const
    ///<summary>
    ///  提供程序名称“MSSQL_CNG_STORE”的常量字符串。
    ///</summary>
    ///<returns>
    ///  提供程序名称。
    ///</returns>
   ProviderName = 'MSSQL_CNG_STORE';
  end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionCspProviderClass = interface(DNSqlColumnEncryptionKeyStoreProviderClass)
  ['{085DE0C4-0A9B-576C-BFF0-D4F579D3C0DF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlColumnEncryptionCspProvider" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlColumnEncryptionCspProvider;

  end;

  ///<summary>
  ///  使用 Microsoft CAPI CMK 存储提供程序实现基于使用的加密服务提供程序 (CSP) Always Encrypted。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionCspProvider')]
  DNSqlColumnEncryptionCspProvider = interface(DNSqlColumnEncryptionKeyStoreProvider)
  ['{B67DE20E-CF5F-3762-A4E2-39ADDBE5CCFD}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    ///<summary>
    ///  使用由密钥路径和算法指定的非对称密钥对给定的加密值进行解密。
    ///  密钥路径将采用格式 [ProviderName]/ KeyIdentifier，并且应为存储在指定 CSP 提供程序中的非对称密钥。
    ///  用于加密/解密 CEK 的有效算法是“RSA_OAEP”。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="encryptedColumnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  已解密的列加密密钥。
    ///</returns>
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  通过使用由密钥路径和指定算法所指定的非对称密钥，对给定的纯文本列加密密钥进行加密。
    ///  密钥路径将采用格式 [ProviderName]/ KeyIdentifier，并且应为存储在指定 CSP 提供程序中的非对称密钥。
    ///  用于加密/解密 CEK 的有效算法是“RSA_OAEP”。
    ///</summary>
    ///  <param name="masterKeyPath">
    ///  主密钥路径。
    ///</param>
    ///  <param name="encryptionAlgorithm">
    ///  加密算法。
    ///</param>
    ///  <param name="columnEncryptionKey">
    ///  加密的列加密密钥。
    ///</param>
    ///<returns>
    ///  加密的列加密密钥。
    ///</returns>
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionCspProvider = class(TDNGenericImport<DNSqlColumnEncryptionCspProviderClass, DNSqlColumnEncryptionCspProvider>)
  public const
    ///<summary>
    ///  提供程序名称“MSSQL_CSP_PROVIDER”的常量字符串。
    ///</summary>
    ///<returns>
    ///  提供程序名称。
    ///</returns>
   ProviderName = 'MSSQL_CSP_PROVIDER';
  end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCredentialClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E65E795-8FC1-5812-8149-412DEBA4EF7B}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  类型的对象。
    ///</summary>
    ///  <param name="userId">
    ///  用户 id。
    ///</param>
    ///  <param name="password">
    ///  密码，则为 <see cref="T:System.Security.SecureString" />
    ///  值标记为只读的。
    ///  传递读/写 <see cref="T:System.Security.SecureString" />
    ///  参数将引发 <see cref="T:System.ArgumentException" />
    ///  。
    ///</param>
    {class} function init(userId: string; password: DDN.mscorlib.DNSecureString): DNSqlCredential;

  end;

  ///<summary><see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  提供了更安全的方式来指定登录名尝试使用密码 SQL Server 身份验证。
  ///<see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  用户 id 和密码，将用来组成 SQL Server 身份验证。
  ///  中的密码 <see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  对象属于类型 <see cref="T:System.Security.SecureString" />
  ///  。
  ///<see cref="T:System.Data.SqlClient.SqlCredential" />
  ///  不能被继承。
  ///  Windows 身份验证 (<see langword="Integrated Security = true" />
  ///  ) 保持最安全的方式来登录到 SQL Server 数据库。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlCredential')]
  DNSqlCredential = interface(DDN.mscorlib.DNObject)
  ['{8D53DB41-BFD1-3E10-9414-DF8D7A1CB2CE}']
  { getters & setters } 

    function get_UserId: string;
    function get_Password: DDN.mscorlib.DNSecureString;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  返回的用户 ID 组件 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回的用户 ID 组件 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象...
    ///</returns>
    property UserId: string read get_UserId;
    ///<summary>
    ///  返回的密码部分 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回的密码部分 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</returns>
    property Password: DDN.mscorlib.DNSecureString read get_Password;
  end;

  TDNSqlCredential = class(TDNGenericImport<DNSqlCredentialClass, DNSqlCredential>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSQLDebuggingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC0784DE-7976-5E8F-AE68-9A671B344113}']
  { constructors } 

    ///<summary>
    ///  包含以支持调试应用程序。
    ///  不适用于直接使用。
    ///</summary>
    {class} function init: DNSQLDebugging;

  end;

  ///<summary>
  ///  包含在内以支持调试应用程序。
  ///  不适合直接使用。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SQLDebugging')]
  DNSQLDebugging = interface(DDN.mscorlib.DNObject)
  ['{AFEF65AD-4577-447A-A148-83ACADD3D4B9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSQLDebugging = class(TDNGenericImport<DNSQLDebuggingClass, DNSQLDebugging>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDependencyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89A4C3EF-90CF-5252-92A6-7CA9735C17DF}']
  { constructors } 

    ///<summary>
    ///  创建的新实例 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  类使用默认设置。
    ///</summary>
    {class} function init: DNSqlDependency; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  类并将其与关联 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  参数。
    ///</summary>
    ///  <param name="command"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  要与此关联对象 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  对象。
    ///  构造函数将设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  对象，并将其绑定到该命令。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="command" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象已具有 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  对象分配给其 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" />
    ///  属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  与这种依赖关系都不关联。
    ///</exception>
    {class} function init(command: DNSqlCommand): DNSqlDependency; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  类中，将其与相关联 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  参数，并指定通知选项和超时值。
    ///</summary>
    ///  <param name="command"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  要与此关联对象 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  对象。
    ///  该构造函数设置 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  对象，并将其绑定到该命令。
    ///</param>
    ///  <param name="options">
    ///  此依赖关系要使用通知请求选项。
    ///  <paramref name="null" />
    ///  若要使用默认服务。
    ///</param>
    ///  <param name="timeout">
    ///  此通知以秒为单位的超时值。
    ///  默认值为 0，指示应使用的服务器超时。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="command" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  超时值小于零。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象已具有 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  对象分配给其 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" />
    ///  属性且 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  与这种依赖关系都不关联。
    ///  尝试创建 SqlDependency 从实例时在 SQLCLR 内。
    ///</exception>
    {class} function init(command: DNSqlCommand; options: string; timeout: Int32): DNSqlDependency; overload;

  { static methods } 

    ///<summary>
    ///  启动侦听器来接收来自通过连接字符串指定的 SQL Server 实例的依赖项更改通知。
    ///</summary>
    ///  <param name="connectionString">
    ///  实例的连接字符串 SQL Server 要从中获取更改通知。
    ///</param>
    ///<returns>
    ///  true 如果侦听器初始化成功，则 false 如果的兼容侦听器已存在。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="connectionString" />
    ///  参数等同于以前调用此方法，但其他参数不同。
    ///  在 CLR 中调用该方法。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  代码访问安全性 (CAS) 权限。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  该方法的后续调用已使用等效 <paramref name="connectionString" />
    ///  具有不同的用户或用户不属于同一架构的默认参数。
    ///  此外，任何基础 SqlClient 异常。
    ///</exception>
    {class} function Start(connectionString: string): Boolean; overload;
    ///<summary>
    ///  启动侦听器来接收来自通过使用指定的 SQL Server Service Broker 队列的连接字符串指定的 SQL Server 实例的依赖项更改通知。
    ///</summary>
    ///  <param name="connectionString">
    ///  要从中获取 SQL Server 实例的连接字符串的更改通知。
    ///</param>
    ///  <param name="queue">
    ///  要使用现有 SQL Server Service Broker 队列。
    ///  如果 <see langword="null" />
    ///  , ，使用默认的队列。
    ///</param>
    ///<returns>
    ///  true 如果侦听器初始化成功，则 false 如果的兼容侦听器已存在。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="connectionString" />
    ///  参数等同于以前调用此方法，但其他参数不同。
    ///  在 CLR 中调用该方法。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  代码访问安全性 (CAS) 权限。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  该方法的后续调用已使用等效 <paramref name="connectionString" />
    ///  参数，但其他用户或用户不会默认到相同的架构。
    ///  此外，任何基础 SqlClient 异常。
    ///</exception>
    {class} function Start(connectionString: string; queue: string): Boolean; overload;
    ///<summary>
    ///  停止在以前指定的连接的侦听器 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" />
    ///  调用。
    ///</summary>
    ///  <param name="connectionString">
    ///  在之前使用的 SQL Server 实例的连接字符串 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String)" />
    ///  调用。
    ///</param>
    ///<returns>
    ///  true 如果完全停止侦听器; false 如果 <see cref="T:System.AppDomain" />
    ///  被不从该侦听器，解除绑定，但是有至少一个其他 <see cref="T:System.AppDomain" />
    ///  使用相同的侦听器。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  从上在 SQLCLR 内调用该方法。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  代码访问安全性 (CAS) 权限。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  基础 SqlClient 出现异常。
    ///</exception>
    {class} function Stop(connectionString: string): Boolean; overload;
    ///<summary>
    ///  停止在以前指定的连接的侦听器 <see cref="Overload:System.Data.SqlClient.SqlDependency.Start" />
    ///  调用。
    ///</summary>
    ///  <param name="connectionString">
    ///  在之前使用的 SQL Server 实例的连接字符串 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" />
    ///  调用。
    ///</param>
    ///  <param name="queue">
    ///  在之前使用的 SQL Server Service Broker 队列 <see cref="M:System.Data.SqlClient.SqlDependency.Start(System.String,System.String)" />
    ///  调用。
    ///</param>
    ///<returns>
    ///  true 如果完全停止侦听器; false 如果 <see cref="T:System.AppDomain" />
    ///  已从侦听器，未绑定但没有至少一个其他 <see cref="T:System.AppDomain" />
    ///  使用相同的侦听器。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />
    ///  参数为 NULL。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  从上在 SQLCLR 内调用该方法。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所需 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  代码访问安全性 (CAS) 权限。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  和基础 SqlClient 出现异常。
    ///</exception>
    {class} function Stop(connectionString: string; queue: string): Boolean; overload;

  end;

  ///<summary><see cref="T:System.Data.SqlClient.SqlDependency" />
  ///  对象都表示应用程序和 SQL Server 实例之间的查询通知依赖项。
  ///  应用程序可以创建 <see cref="T:System.Data.SqlClient.SqlDependency" />
  ///  对象并进行注册以接收通知通过 <see cref="T:System.Data.SqlClient.OnChangeEventHandler" />
  ///  事件处理程序。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlDependency')]
  DNSqlDependency = interface(DDN.mscorlib.DNObject)
  ['{3426F3A6-F249-3D9C-80EE-C5B0708DA11F}']
  { getters & setters } 

    function get_HasChanges: Boolean;
    function get_Id: string;

  { events } 

    procedure add_OnChange(value: DNOnChangeEventHandler);
    procedure remove_OnChange(value: DNOnChangeEventHandler);

  { methods } 

    ///<summary>
    ///  将相关联 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象与此 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  实例。
    ///</summary>
    ///  <param name="command">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象，它包含无效的通知的语句。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="command" />
    ///  参数为 null。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象已具有 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  对象分配给其 <see cref="P:System.Data.SqlClient.SqlCommand.Notification" />
    ///  属性，且该 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  与这种依赖关系都不关联。
    ///</exception>
    procedure AddCommandDependency(command: DNSqlCommand);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示一个与依赖项关联的结果集是否发生了更改。
    ///</summary>
    ///<returns>
    ///  一个布尔值，该值指示是否结果之一设置已更改。
    ///</returns>
    property HasChanges: Boolean read get_HasChanges;
    ///<summary>
    ///  获取一个值，用于唯一标识的此实例 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  字符串表示形式的每个实例生成一个 GUID <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  类。
    ///</returns>
    property Id: string read get_Id;
  end;

  TDNSqlDependency = class(TDNGenericImport<DNSqlDependencyClass, DNSqlDependency>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlEnclaveAttestationParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57FF4CDC-BDF5-5F76-945A-F66AFBFDE08E}']
  { constructors } 

    {class} function init(protocol: Int32; input: TArray<Byte>; clientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng): DNSqlEnclaveAttestationParameters;

  end;

  [DNTypeName('System.Data.SqlClient.SqlEnclaveAttestationParameters')]
  DNSqlEnclaveAttestationParameters = interface(DDN.mscorlib.DNObject)
  ['{E2D7782F-5C8D-3D37-9F7E-8642EA0D53B6}']
  { getters & setters } 

    function get_Protocol: Int32;
    function get_ClientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng;

  { methods } 

    function GetInput: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Protocol: Int32 read get_Protocol;
    property ClientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng read get_ClientDiffieHellmanKey;
  end;

  TDNSqlEnclaveAttestationParameters = class(TDNGenericImport<DNSqlEnclaveAttestationParametersClass, DNSqlEnclaveAttestationParameters>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlEnclaveSessionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08727787-DA4B-554B-A8D5-2E6709598CE7}']
  { constructors } 

    {class} function init(sessionKey: TArray<Byte>; sessionId: Int64): DNSqlEnclaveSession;

  end;

  [DNTypeName('System.Data.SqlClient.SqlEnclaveSession')]
  DNSqlEnclaveSession = interface(DDN.mscorlib.DNObject)
  ['{2ADE2ADA-6EEA-3FDE-8060-76CF16B7C301}']
  { getters & setters } 

    function get_SessionId: Int64;

  { methods } 

    function GetSessionKey: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SessionId: Int64 read get_SessionId;
  end;

  TDNSqlEnclaveSession = class(TDNGenericImport<DNSqlEnclaveSessionClass, DNSqlEnclaveSession>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08B747E8-D736-5A73-BB28-8D0E63072594}']
  end;

  ///<summary>
  ///  收集与 SQL Server 返回的警告或错误有关的信息。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlError')]
  DNSqlError = interface(DDN.mscorlib.DNObject)
  ['{3300A145-13B0-3DFB-A833-E6DE462FAB99}']
  { getters & setters } 

    function get_Source: string;
    function get_Number: Int32;
    function get_State: Byte;
    function get_Class: Byte;
    function get_Server: string;
    function get_Message: string;
    function get_Procedure: string;
    function get_LineNumber: Int32;

  { methods } 

    ///<summary>
    ///  获取错误信息的完整文本。
    ///</summary>
    ///<returns>
    ///  错误信息的完整文本。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取生成错误的提供程序的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的提供程序的名称。
    ///</returns>
    property Source: string read get_Source;
    ///<summary>
    ///  获取一个标识错误类型的数字。
    ///</summary>
    ///<returns>
    ///  标识错误类型的数字。
    ///</returns>
    property Number: Int32 read get_Number;
    ///<summary>
    ///  某些错误消息可能在数据库引擎的代码中多次引发。
    ///  例如，几种不同的情况下可引发 1105 错误。
    ///  引发错误的每种特定情况将分配一个唯一状态代码。
    ///</summary>
    ///<returns>
    ///  状态代码。
    ///</returns>
    property State: Byte read get_State;
    ///<summary>
    ///  获取从 SQL Server 返回的错误的严重级别。
    ///</summary>
    ///<returns>
    ///  一个 1 至 25 的值，它指示错误的严重级别。
    ///  默认值为 0。
    ///</returns>
    property &Class: Byte read get_Class;
    ///<summary>
    ///  获取生成错误的 SQL Server 实例的名称。
    ///</summary>
    ///<returns>
    ///  SQL Server 实例的名称。
    ///</returns>
    property Server: string read get_Server;
    ///<summary>
    ///  获取对错误进行描述的文本。
    ///</summary>
    ///<returns>
    ///  对错误进行描述的文本。
    ///  有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server 联机丛书。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取生成错误的存储过程或远程过程调用 (RPC) 的名称。
    ///</summary>
    ///<returns>
    ///  存储过程或 RPC 的名称。
    ///  有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server 联机丛书。
    ///</returns>
    property &Procedure: string read get_Procedure;
    ///<summary>
    ///  从包含错误的 Transact-SQL 批命令或存储过程中获取行号。
    ///</summary>
    ///<returns>
    ///  Transact-SQL 批命令或存储过程内包含错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
  end;

  TDNSqlError = class(TDNGenericImport<DNSqlErrorClass, DNSqlError>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlErrorCollectionClass = interface(DNObjectClass)
  ['{55018440-F371-5229-97E5-3A5E88D0F36D}']
  end;

  ///<summary>
  ///  收集用于 SQL Server 的 .NET Framework 数据提供程序生成的所有错误。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlErrorCollection')]
  DNSqlErrorCollection = interface(DDN.mscorlib.DNICollection)
  ['{0D3E24E8-3729-3195-8732-80902BC548FC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNSqlError;

  { methods } 

    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  集合转换为 <see cref="T:System.Array" />
    ///  , 、 指定索引处开始。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Array" />
    ///  复制到的元素。
    ///</param>
    ///  <param name="index">
    ///  从其开始复制到索引 <paramref name="array" />
    ///  参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  总和 <paramref name="index" />
    ///  和中的元素数 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  集合大于 <see cref="P:System.Array.Length" />
    ///  的 <see cref="T:System.Array" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  无效，不能 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  集合转换为 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  , 、 指定索引处开始。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  要复制到的元素。
    ///</param>
    ///  <param name="index">
    ///  从其开始复制到索引 <paramref name="array" />
    ///  参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  总和 <paramref name="index" />
    ///  和中的元素数 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  集合参数的长度大于 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  无效，不能 <paramref name="array" />
    ///  。
    ///</exception>
    procedure CopyTo(&array: TArray<DNSqlError>; index: Int32); overload;
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的错误数。
    ///</summary>
    ///<returns>
    ///  集合中错误的总数。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNSqlError read get_Item; default;
  end;

  TDNSqlErrorCollection = class(TDNGenericImport<DNSqlErrorCollectionClass, DNSqlErrorCollection>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBytesClass = interface(DNObjectClass)
  ['{3AD176CF-E8C3-5490-9208-7DB1326D4517}']
  { static getter & setter } 

    {class} function get_Null: DNSqlBytes;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlBytes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类根据指定的字节数组。
    ///</summary>
    ///  <param name="buffer">
    ///  无符号字节的数组。
    ///</param>
    {class} function init(buffer: TArray<Byte>): DNSqlBytes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类根据指定 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值。
    ///</param>
    {class} function init(value: DNSqlBinary): DNSqlBytes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  类根据指定 <see cref="T:System.IO.Stream" />
    ///  值。
    ///</summary>
    ///  <param name="s"><see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    {class} function init(s: DDN.mscorlib.DNStream): DNSqlBytes; overload;

  { static methods } 

    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  ，该值指示指定的 XSD <see langword="XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  { static propertys } 

    ///<summary>
    ///  返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" />
    ///  返回 <see langword="true" />
    ///  。
    ///</returns>
    {class} property Null: DNSqlBytes read get_Null;
  end;

  ///<summary>
  ///  表示可变的引用类型包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" />
  ///  或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlBytes')]
  DNSqlBytes = interface(DNINullable)
  ['{DFEA266A-B66D-341F-8DE1-ACAB8A9C6564}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Byte>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Byte>;
    function get_Item(offset: Int64): Byte;
    procedure set_Item(offset: Int64; value: Byte);
    function get_Storage: DNStorageState;
    function get_Stream: DDN.mscorlib.DNStream;
    procedure set_Stream(value: DDN.mscorlib.DNStream);

  { methods } 

    ///<summary>
    ///  完成这一设置 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例为 null。
    ///</summary>
    procedure SetNull;
    ///<summary>
    ///  设置此长度 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Int64" />
    ///  长时间值表示长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将字节复制从此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  到缓冲区中传递的实例，并返回复制的字节数。
    ///</summary>
    ///  <param name="offset"><see cref="T:System.Int64" />
    ///  长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  要将复制到的字节数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  表示的字节数要复制的整数。
    ///</param>
    ///<returns><see cref="T:System.Int64" />
    ///  表示的数的长整型值复制字节。
    ///</returns>
    function Read(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32): Int64;
    ///<summary>
    ///  将从传入的缓冲区的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///  <param name="offset"><see cref="T:System.Int64" />
    ///  长值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  要将复制到的字节数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  表示的字节数要复制的整数。
    ///</param>
    procedure Write(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32);
    ///<summary>
    ///  构造并返回 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  从此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  从此实例。
    ///</returns>
    function ToSqlBinary: DNSqlBinary;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  为 null， <see langword="false" />
    ///  否则为。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  返回对内部缓冲区的引用。
    ///</summary>
    ///<returns>
    ///  返回对内部缓冲区的引用。
    ///  有关 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。
    ///</returns>
    property Buffer: TArray<Byte> read get_Buffer;
    ///<summary>
    ///  获取包含中的值的长度<see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Int64" />
    ///  值，该值表示中包含的值的长度<see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///  如果没有缓冲区，对该实例可用，或者如果值为 null，则返回-1。
    ///  返回<see cref="P:System.IO.Stream.Length" />
    ///  流包装的实例。
    ///</returns>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取此的内部缓冲区的值的最大长度 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///<returns>
    ///  Long 值表示的值的内部缓冲区的最大长度。
    ///  则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</returns>
    property MaxLength: Int64 read get_MaxLength;
    ///<summary>
    ///  返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  作为字节数组。
    ///</returns>
    property Value: TArray<Byte> read get_Value;
    property Item[offset: Int64]: Byte read get_Item write set_Item; default;
    ///<summary>
    ///  返回有关的存储状态信息 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.StorageState" />
    ///  枚举。
    ///</returns>
    property Storage: DNStorageState read get_Storage;
    ///<summary>
    ///  获取或设置此数据 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  以流的形式。
    ///</summary>
    ///<returns>
    ///  包含 SqlBytes 数据的流。
    ///</returns>
    property Stream: DDN.mscorlib.DNStream read get_Stream write set_Stream;
  end;

  TDNSqlBytes = class(TDNGenericImport<DNSqlBytesClass, DNSqlBytes>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlCharsClass = interface(DNObjectClass)
  ['{402C3B2D-44A0-5FCC-92E5-902F2DEDD826}']
  { static getter & setter } 

    {class} function get_Null: DNSqlChars;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlChars; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  类根据指定的字符数组。
    ///</summary>
    ///  <param name="buffer"><see cref="T:System.Char" />
    ///  数组。
    ///</param>
    {class} function init(buffer: TArray<Char>): DNSqlChars; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  类根据指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  值。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    {class} function init(value: DNSqlString): DNSqlChars; overload;

  { static methods } 

    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  { static propertys } 

    ///<summary>
    ///  返回的 null 实例 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回一个实例，在这种方式， <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" />
    ///  返回 <see langword="true" />
    ///  。
    ///  有关详细信息，请参阅处理 Null 值。
    ///</returns>
    {class} property Null: DNSqlChars read get_Null;
  end;

  ///<summary><see cref="T:System.Data.SqlTypes.SqlChars" />
  ///  是可变的引用类型包装 <see cref="T:System.Char" />
  ///  数组或 <see cref="T:System.Data.SqlTypes.SqlString" />
  ///  实例。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlChars')]
  DNSqlChars = interface(DNINullable)
  ['{445D8429-C2BC-30B2-94DF-D51131301951}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Char>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Char>;
    function get_Item(offset: Int64): Char;
    procedure set_Item(offset: Int64; value: Char);
    function get_Storage: DNStorageState;

  { methods } 

    ///<summary>
    ///  完成这一设置 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例为 null。
    ///</summary>
    procedure SetNull;
    ///<summary>
    ///  设置此长度 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Int64" />
    ///<see langword="long" />
    ///  表示长度值。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将字符复制从此 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  到缓冲区中传递的实例，并返回复制的字符数。
    ///</summary>
    ///  <param name="offset"><see cref="T:System.Int64" />
    ///<see langword="long" />
    ///  值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  若要将复制到指定字符数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  整数值，表示要复制的字符数。
    ///</param>
    ///<returns><see cref="T:System.Int64" />
    ///<see langword="long" />
    ///  表示版本号的值复制字节。
    ///</returns>
    function Read(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32): Int64;
    ///<summary>
    ///  将从传入的缓冲区的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///  <param name="offset">
    ///  一个 <see langword="long" />
    ///  值偏移量中包含的值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</param>
    ///  <param name="buffer">
    ///  若要将复制到指定字符数组缓冲区。
    ///</param>
    ///  <param name="offsetInBuffer"><see cref="T:System.Int32" />
    ///  整数偏移量开始复制到的缓冲区。
    ///</param>
    ///  <param name="count"><see cref="T:System.Int32" />
    ///  表示的字符数要复制的整数。
    ///</param>
    procedure Write(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32);
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例传递给它的等效项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示形式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  此类型表示形式。
    ///</returns>
    function ToSqlString: DNSqlString;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  返回对内部缓冲区的引用。
    ///</summary>
    ///<returns>
    ///  返回对内部缓冲区的引用。
    ///  有关 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  在非托管指针之上创建的实例，它将返回内部缓冲区的托管的副本。
    ///</returns>
    property Buffer: TArray<Char> read get_Buffer;
    ///<summary>
    ///  获取中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Int64" />
    ///  值，该值指示以字符为单位中包含的值的长度 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///  如果没有缓冲区可用的实例，或者如果值为 null，则返回-1。
    ///  返回 <see cref="P:System.IO.Stream.Length" />
    ///  流包装的实例。
    ///</returns>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取内部缓冲区可以容纳的值的双字节字符中的最大长度。
    ///</summary>
    ///<returns><see cref="T:System.Int64" />
    ///  值，该值表示双字节字符的值的内部缓冲区的最大长度。
    ///  则返回-1 流包装 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</returns>
    property MaxLength: Int64 read get_MaxLength;
    ///<summary>
    ///  返回此保留的值的托管的副本 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  作为一个字符数组。
    ///</returns>
    property Value: TArray<Char> read get_Value;
    property Item[offset: Int64]: Char read get_Item write set_Item; default;
    ///<summary>
    ///  返回有关的存储状态信息 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.StorageState" />
    ///  枚举。
    ///</returns>
    property Storage: DNStorageState read get_Storage;
  end;

  TDNSqlChars = class(TDNGenericImport<DNSqlCharsClass, DNSqlChars>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlXmlClass = interface(DNObjectClass)
  ['{2DA5915F-CEFB-54C3-8860-97DD634A514F}']
  { static getter & setter } 

    {class} function get_Null: DNSqlXml;

  { constructors } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例。
    ///</summary>
    {class} function init: DNSqlXml; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例，并将其与所提供的内容关联 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Xml.XmlReader" />
    ///  的派生类实例要用作新值 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例。
    ///</param>
    {class} function init(value: DDN.System.Xml.DNXmlReader): DNSqlXml; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例，以提供从提供的 XML 值 <see cref="T:System.IO.Stream" />
    ///  -派生实例。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  -派生实例 (如 <see cref="T:System.IO.FileStream" />
    ///  ) 要从其中加载 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例的 Xml 内容。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNStream): DNSqlXml; overload;

  { static methods } 

    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个字符串，指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  { static propertys } 

    ///<summary>
    ///  表示的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  类型。
    ///</summary>
    ///<returns>
    ///  Null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  类型。
    ///</returns>
    {class} property Null: DNSqlXml read get_Null;
  end;

  ///<summary>
  ///  表示 XML 数据存储在数据库中或从服务器检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlXml')]
  DNSqlXml = interface(DNINullable)
  ['{D2B9B85D-34A6-3D8E-B78F-88919F51DF17}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;

  { methods } 

    ///<summary>
    ///  获取此内容的 xml 值 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  作为 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  -派生的实例，它包含的 XML 内容。
    ///  可能会有所不同的实际类型 (例如，返回值可能是 <see cref="T:System.Xml.XmlTextReader" />
    ///  ) 具体取决于如何呈现的信息是在内部，在服务器上。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  尝试访问此属性上的 null 实例 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  。
    ///</exception>
    function CreateReader: DDN.System.Xml.DNXmlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  该值指示此实例是否表示 null <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Value" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此内容的字符串表示形式 XML <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  字符串表示形式的 XML 内容中。
    ///</returns>
    property Value: string read get_Value;
  end;

  TDNSqlXml = class(TDNGenericImport<DNSqlXmlClass, DNSqlXml>) end;

  //-------------namespace: System.Data----------------
  DNTypedDataSetGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{424002BC-971E-549B-9E79-079006F30562}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.TypedDataSetGenerator" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypedDataSetGenerator;

  { static methods } 

    ///<summary>
    ///  生成强类型化 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet">
    ///  源 <see cref="T:System.Data.DataSet" />
    ///  指定的类型化的元数据 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="codeNamespace">
    ///  提供的类型化的目标命名空间的命名空间 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="codeGen">
    ///  用于创建类型化的生成器 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    {class} procedure Generate(dataSet: DNDataSet; codeNamespace: DDN.System.DNCodeNamespace; codeGen: DDN.System.DNICodeGenerator);
    ///<summary>
    ///  一个字符串是有效的转换类型化 <see cref="T:System.Data.DataSet" />
    ///  名称。
    ///</summary>
    ///  <param name="name">
    ///  要将转换为一个有效的源名称键入 <see cref="T:System.Data.DataSet" />
    ///  名称。
    ///</param>
    ///  <param name="codeGen">
    ///  用于执行转换的生成器。
    ///</param>
    ///<returns>
    ///  一个字符串，表示转换后的名称。
    ///</returns>
    {class} function GenerateIdName(name: string; codeGen: DDN.System.DNICodeGenerator): string;

  end;

  ///<summary>
  ///  用于创建强类型化 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.TypedDataSetGenerator')]
  DNTypedDataSetGenerator = interface(DDN.mscorlib.DNObject)
  ['{6E1E89F6-487E-306B-8210-8E5812529515}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypedDataSetGenerator = class(TDNGenericImport<DNTypedDataSetGeneratorClass, DNTypedDataSetGenerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNRowUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{89985335-8E9C-5B28-8478-0D1C0E5763BA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataRow"><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.IDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</param>
    ///  <param name="statementType">
    ///  执行 SQL 语句的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNRowUpdatedEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see langword="RowUpdated" />
  ///  的.NET Framework 数据提供程序的事件。
  ///</summary>
  [DNTypeName('System.Data.Common.RowUpdatedEventArgs')]
  DNRowUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E4D48765-DD05-3535-BED1-90F0D496B1A4}']
  { getters & setters } 

    function get_Command: DNIDbCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    ///  <param name="arrayIndex">
    ///  中开始将复制到的数组的索引。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.IDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</returns>
    property Command: DNIDbCommand read get_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取已更新的记录的批中处理的行数。
    ///</summary>
    ///<returns><see langword="int" />
    ///  指定处理的行数。
    ///</returns>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  获取执行 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  执行 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNRowUpdatedEventArgs = class(TDNGenericImport<DNRowUpdatedEventArgsClass, DNRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcRowUpdatedEventArgsClass = interface(DNRowUpdatedEventArgsClass)
  ['{F2D68EE2-75ED-50C3-BF19-98F72E1393C0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcRowUpdatedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row"><see langword="DataRow" />
    ///  发送通过更新操作。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</param>
    ///  <param name="statementType">
    ///  其中一个 <see cref="T:System.Data.StatementType" />
    ///  值，该值指定执行查询的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOdbcRowUpdatedEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdated" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcRowUpdatedEventArgs')]
  DNOdbcRowUpdatedEventArgs = interface(DNRowUpdatedEventArgs)
  ['{53700BD6-7A75-3375-9080-8DB368360D17}']
  { getters & setters } 

    function get_Command: DNOdbcCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    ///  <param name="arrayIndex">
    ///  中开始将复制到的数组的索引。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</returns>
    property Command: DNOdbcCommand read get_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取已更新的记录的批中处理的行数。
    ///</summary>
    ///<returns><see langword="int" />
    ///  指定处理的行数。
    ///</returns>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  获取执行 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  执行 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOdbcRowUpdatedEventArgs = class(TDNGenericImport<DNOdbcRowUpdatedEventArgsClass, DNOdbcRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbRowUpdatedEventArgsClass = interface(DNRowUpdatedEventArgsClass)
  ['{56141D82-BAFA-5E86-B398-960869F2C9C6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataRow"><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.IDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</param>
    ///  <param name="statementType">
    ///  其中一个 <see cref="T:System.Data.StatementType" />
    ///  值，该值指定执行查询的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOleDbRowUpdatedEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbRowUpdatedEventArgs')]
  DNOleDbRowUpdatedEventArgs = interface(DNRowUpdatedEventArgs)
  ['{38DF6A4D-0373-34A1-9390-E7721215A819}']
  { getters & setters } 

    function get_Command: DNOleDbCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    ///  <param name="arrayIndex">
    ///  中开始将复制到的数组的索引。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</returns>
    property Command: DNOleDbCommand read get_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取已更新的记录的批中处理的行数。
    ///</summary>
    ///<returns><see langword="int" />
    ///  指定处理的行数。
    ///</returns>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  获取执行 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  执行 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOleDbRowUpdatedEventArgs = class(TDNGenericImport<DNOleDbRowUpdatedEventArgsClass, DNOleDbRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlRowUpdatedEventArgsClass = interface(DNRowUpdatedEventArgsClass)
  ['{4ECDEFDA-047A-55CF-BE59-A558FFA247E4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.IDbCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</param>
    ///  <param name="statementType">
    ///  其中一个 <see cref="T:System.Data.StatementType" />
    ///  值，该值指定执行查询的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNSqlRowUpdatedEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlRowUpdatedEventArgs')]
  DNSqlRowUpdatedEventArgs = interface(DNRowUpdatedEventArgs)
  ['{FDDC357F-D7FC-3269-B46E-B015DD784F78}']
  { getters & setters } 

    function get_Command: DNSqlCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    ///<summary>
    ///  将对已修改行的引用复制到所提供的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Data.DataRow" />
    ///  将复制到。
    ///</param>
    ///  <param name="arrayIndex">
    ///  中开始将复制到的数组的索引。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  时执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</returns>
    property Command: DNSqlCommand read get_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  后执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取已更新的记录的批中处理的行数。
    ///</summary>
    ///<returns><see langword="int" />
    ///  指定处理的行数。
    ///</returns>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  获取执行 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  执行 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNSqlRowUpdatedEventArgs = class(TDNGenericImport<DNSqlRowUpdatedEventArgsClass, DNSqlRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.Common----------------
  DNRowUpdatingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{1E3BE921-4ED7-52D7-9782-0CCCD4BB37A4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataRow"><see cref="T:System.Data.DataRow" />
    ///  到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.IDbCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</param>
    ///  <param name="statementType">
    ///  要执行的 SQL 语句的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNRowUpdatingEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 RowUpdating 的.NET Framework 数据提供程序的事件。
  ///</summary>
  [DNTypeName('System.Data.Common.RowUpdatingEventArgs')]
  DNRowUpdatingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BC6E44BB-A58E-3156-ACC2-50D167FCCF44}']
  { getters & setters } 

    function get_Command: DNIDbCommand;
    procedure set_Command(value: DNIDbCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.IDbCommand" />
    ///  过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  操作。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Command: DNIDbCommand read get_Command write set_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  ，将向服务器发送，作为插入、 更新或删除操作的一部分。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取要执行的 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  要执行的 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNRowUpdatingEventArgs = class(TDNGenericImport<DNRowUpdatingEventArgsClass, DNRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcRowUpdatingEventArgsClass = interface(DNRowUpdatingEventArgsClass)
  ['{160B0195-9D6A-5DB9-A9A1-33A63490242D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcRowUpdatingEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row">
    ///  要更新的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  更新操作过程中执行。
    ///</param>
    ///  <param name="statementType">
    ///  其中一个 <see cref="T:System.Data.StatementType" />
    ///  值，该值指定执行查询的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOdbcRowUpdatingEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.Odbc.OdbcDataAdapter.RowUpdating" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcRowUpdatingEventArgs')]
  DNOdbcRowUpdatingEventArgs = interface(DNRowUpdatingEventArgs)
  ['{91EF26F3-E833-3246-B66F-94F20A490FE6}']
  { getters & setters } 

    function get_Command: DNOdbcCommand;
    procedure set_Command(value: DNOdbcCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  调用。
    ///</returns>
    property Command: DNOdbcCommand read get_Command write set_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  ，将向服务器发送，作为插入、 更新或删除操作的一部分。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取要执行的 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  要执行的 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOdbcRowUpdatingEventArgs = class(TDNGenericImport<DNOdbcRowUpdatingEventArgsClass, DNOdbcRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbRowUpdatingEventArgsClass = interface(DNRowUpdatingEventArgsClass)
  ['{E99F5526-9820-549C-9CB7-F932F6E70B40}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataRow"><see cref="T:System.Data.DataRow" />
    ///  到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.IDbCommand" />
    ///  过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="statementType">
    ///  其中一个 <see cref="T:System.Data.StatementType" />
    ///  值，该值指定执行查询的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOleDbRowUpdatingEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbRowUpdatingEventArgs')]
  DNOleDbRowUpdatingEventArgs = interface(DNRowUpdatingEventArgs)
  ['{EDB4D7FF-9268-3EF6-A9CB-6DABDD7DB263}']
  { getters & setters } 

    function get_Command: DNOleDbCommand;
    procedure set_Command(value: DNOleDbCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Command: DNOleDbCommand read get_Command write set_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  ，将向服务器发送，作为插入、 更新或删除操作的一部分。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取要执行的 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  要执行的 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOleDbRowUpdatingEventArgs = class(TDNGenericImport<DNOleDbRowUpdatingEventArgsClass, DNOleDbRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlRowUpdatingEventArgsClass = interface(DNRowUpdatingEventArgsClass)
  ['{ADFF2CC7-B2FA-57BD-83C1-A4DE3BE365F5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  到 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="command"><see cref="T:System.Data.IDbCommand" />
    ///  过程中执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    ///  <param name="statementType">
    ///  其中一个 <see cref="T:System.Data.StatementType" />
    ///  值，该值指定执行查询的类型。
    ///</param>
    ///  <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</param>
    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNSqlRowUpdatingEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlRowUpdatingEventArgs')]
  DNSqlRowUpdatingEventArgs = interface(DNRowUpdatingEventArgs)
  ['{64F42CA7-B456-3308-80B0-18D165B29007}']
  { getters & setters } 

    function get_Command: DNSqlCommand;
    procedure set_Command(value: DNSqlCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  时要执行 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Command: DNSqlCommand read get_Command write set_Command;
    ///<summary>
    ///  获取由.NET Framework 数据提供程序生成的任何错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</summary>
    ///<returns>
    ///  .NET Framework 数据提供程序所生成错误时 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  执行。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  ，将向服务器发送，作为插入、 更新或删除操作的一部分。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取要执行的 SQL 语句的类型。
    ///</summary>
    ///<returns>
    ///  要执行的 SQL 语句的类型。
    ///</returns>
    property StatementType: DNStatementType read get_StatementType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.UpdateStatus" />
    ///  的 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateStatus" />
    ///  值之一。
    ///  默认值为 <see langword="Continue" />
    ///  。
    ///</returns>
    property Status: DNUpdateStatus read get_Status write set_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  通过发送 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</returns>
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNSqlRowUpdatingEventArgs = class(TDNGenericImport<DNSqlRowUpdatingEventArgsClass, DNSqlRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E093AF51-E23D-5B0E-BFF1-DEA4554E8CCC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataColumnChangeEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  的不断变化的值的列。
    ///</param>
    ///  <param name="column"><see cref="T:System.Data.DataColumn" />
    ///  带有可变值。
    ///</param>
    ///  <param name="value">
    ///  新值。
    ///</param>
    {class} function init(row: DNDataRow; column: DNDataColumn; value: DDN.mscorlib.DNObject): DNDataColumnChangeEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.DataTable.ColumnChanging" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.DataColumnChangeEventArgs')]
  DNDataColumnChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F3D0A1DA-D027-3E0A-95CB-4CD3B25F3E9D}']
  { getters & setters } 

    function get_Column: DNDataColumn;
    function get_Row: DNDataRow;
    function get_ProposedValue: DDN.mscorlib.DNObject;
    procedure set_ProposedValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.DataColumn" />
    ///  带有可变值。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataColumn" />
    ///  带有可变值。
    ///</returns>
    property Column: DNDataColumn read get_Column;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataRow" />
    ///  具有可变值的列。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  具有可变值的列。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取或设置列建议的新值。
    ///</summary>
    ///<returns>
    ///  建议的值，类型的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    property ProposedValue: DDN.mscorlib.DNObject read get_ProposedValue write set_ProposedValue;
  end;

  TDNDataColumnChangeEventArgs = class(TDNGenericImport<DNDataColumnChangeEventArgsClass, DNDataColumnChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataRowChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EACF8D2A-F76A-5DCD-ADE6-3BD171C9C6F7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataRowChangeEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="row"><see cref="T:System.Data.DataRow" />
    ///  后某项操作是出现。
    ///</param>
    ///  <param name="action"><see cref="T:System.Data.DataRowAction" />
    ///  值之一。
    ///</param>
    {class} function init(row: DNDataRow; action: DNDataRowAction): DNDataRowChangeEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Data.DataTable.RowChanged" />
  ///  , ，<see cref="E:System.Data.DataTable.RowChanging" />
  ///  , ，<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />
  ///  , ，和 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Data.DataRowChangeEventArgs')]
  DNDataRowChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BE27FF81-9AE9-3583-99C1-9D8F15D8832F}']
  { getters & setters } 

    function get_Row: DNDataRow;
    function get_Action: DNDataRowAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取在其发生操作的行。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  后发生了操作。
    ///</returns>
    property Row: DNDataRow read get_Row;
    ///<summary>
    ///  获取发生的操作 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowAction" />
    ///  值之一。
    ///</returns>
    property Action: DNDataRowAction read get_Action;
  end;

  TDNDataRowChangeEventArgs = class(TDNGenericImport<DNDataRowChangeEventArgsClass, DNDataRowChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClearEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3FAA835A-6B33-5E6E-9249-759E8E8179BA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataTableClearEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  正在清除其行。
    ///</param>
    {class} function init(dataTable: DNDataTable): DNDataTableClearEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="M:System.Data.DataTable.Clear" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.DataTableClearEventArgs')]
  DNDataTableClearEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1C828E83-1DA2-3ED3-A238-E68B1B66E5CF}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_TableName: string;
    function get_TableNamespace: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取正在清除其行的表。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  正在清除其行。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  获取正在清除其行的表名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，该值指示表名。
    ///</returns>
    property TableName: string read get_TableName;
    ///<summary>
    ///  获取正在清除其行的表的命名空间。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，该值指示命名空间名称。
    ///</returns>
    property TableNamespace: string read get_TableNamespace;
  end;

  TDNDataTableClearEventArgs = class(TDNGenericImport<DNDataTableClearEventArgsClass, DNDataTableClearEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableNewRowEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DD55550D-4643-5E2A-BFA7-33BDA30D720F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataTableNewRowEventArgs" />
    ///  的新实例。
    ///</summary>
    ///  <param name="dataRow"><see cref="T:System.Data.DataRow" />
    ///  正在添加。
    ///</param>
    {class} function init(dataRow: DNDataRow): DNDataTableNewRowEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="M:System.Data.DataTable.NewRow" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Data.DataTableNewRowEventArgs')]
  DNDataTableNewRowEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{8DA50CAC-EA82-38BE-8041-D721195CBBAB}']
  { getters & setters } 

    function get_Row: DNDataRow;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要添加的行。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  正被添加。
    ///</returns>
    property Row: DNDataRow read get_Row;
  end;

  TDNDataTableNewRowEventArgs = class(TDNGenericImport<DNDataTableNewRowEventArgsClass, DNDataTableNewRowEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNFillErrorEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A7082645-C257-58BC-8E25-4B2074DA6356}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.FillErrorEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  正在更新。
    ///</param>
    ///  <param name="values">
    ///  正在更新的行的值。
    ///</param>
    {class} function init(dataTable: DNDataTable; values: TArray<DDN.mscorlib.DNObject>): DNFillErrorEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Data.Common.DataAdapter.FillError" />
  ///  事件 <see cref="T:System.Data.Common.DbDataAdapter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.FillErrorEventArgs')]
  DNFillErrorEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{23695D73-5ED9-3965-90A8-66488560DF52}']
  { getters & setters } 

    function get_Continue: Boolean;
    procedure set_Continue(value: Boolean);
    function get_DataTable: DNDataTable;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Values: TArray<DDN.mscorlib.DNObject>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否要继续填充操作忽略错误。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应继续填充操作;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property &Continue: Boolean read get_Continue write set_Continue;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataTable" />
    ///  发生错误时进行更新。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  正在更新。
    ///</returns>
    property DataTable: DNDataTable read get_DataTable;
    ///<summary>
    ///  获取正在处理的错误。
    ///</summary>
    ///<returns>
    ///  正在处理的错误。
    ///</returns>
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    ///<summary>
    ///  获取发生错误时正在更新的行的值。
    ///</summary>
    ///<returns>
    ///  正在更新的行的值。
    ///</returns>
    property Values: TArray<DDN.mscorlib.DNObject> read get_Values;
  end;

  TDNFillErrorEventArgs = class(TDNGenericImport<DNFillErrorEventArgsClass, DNFillErrorEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNMergeFailedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{609582C1-8731-5867-89A8-F23BF6C3B576}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.MergeFailedEventArgs" />
    ///  类 <see cref="T:System.Data.DataTable" />
    ///  和合并冲突的说明。
    ///</summary>
    ///  <param name="table"><see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</param>
    ///  <param name="conflict">
    ///  合并冲突的说明。
    ///</param>
    {class} function init(table: DNDataTable; conflict: string): DNMergeFailedEventArgs;

  end;

  ///<summary>
  ///  当目标和源时发生 <see langword="DataRow" />
  ///  具有相同的主键值，和 <see cref="P:System.Data.DataSet.EnforceConstraints" />
  ///  属性设置为 true。
  ///</summary>
  [DNTypeName('System.Data.MergeFailedEventArgs')]
  DNMergeFailedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{08B4397F-E667-341F-8B61-6303224951F2}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_Conflict: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  返回 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</returns>
    property Table: DNDataTable read get_Table;
    ///<summary>
    ///  返回合并冲突的说明。
    ///</summary>
    ///<returns>
    ///  合并冲突的说明。
    ///</returns>
    property Conflict: string read get_Conflict;
  end;

  TDNMergeFailedEventArgs = class(TDNGenericImport<DNMergeFailedEventArgsClass, DNMergeFailedEventArgs>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{160DA715-EFFD-5C56-B980-D7EAC9039620}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcInfoMessageEventArgs')]
  DNOdbcInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{278F49B4-1D34-35F9-B853-AD9E5C0693CF}']
  { getters & setters } 

    function get_Errors: DNOdbcErrorCollection;
    function get_Message: string;

  { methods } 

    ///<summary>
    ///  检索的字符串表示形式 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="E:System.Data.Odbc.OdbcConnection.InfoMessage" />
    ///  事件。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取从数据源发送的警告的集合。
    ///</summary>
    ///<returns>
    ///  从数据源发送的警告集合。
    ///</returns>
    property Errors: DNOdbcErrorCollection read get_Errors;
    ///<summary>
    ///  获取从数据库发送的错误的完整文本。
    ///</summary>
    ///<returns>
    ///  完整的错误文本。
    ///</returns>
    property Message: string read get_Message;
  end;

  TDNOdbcInfoMessageEventArgs = class(TDNGenericImport<DNOdbcInfoMessageEventArgsClass, DNOdbcInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7BA4AD22-7E73-5E3E-9A5D-0FEC17EACC17}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
  ///  事件提供数据。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbInfoMessageEventArgs')]
  DNOleDbInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F7FCAC61-B247-3EA0-A99E-9761E4FB85F5}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Errors: DNOleDbErrorCollection;
    function get_Message: string;
    function get_Source: string;

  { methods } 

    ///<summary>
    ///  检索的字符串表示形式 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
    ///  事件。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 HRESULT 遵循 ANSI SQL 标准的数据库。
    ///</summary>
    ///<returns>
    ///  HRESULT，它确定的错误的来源，如果该错误可以由多个位置颁发。
    ///</returns>
    property ErrorCode: Int32 read get_ErrorCode;
    ///<summary>
    ///  获取从数据源发送的警告的集合。
    ///</summary>
    ///<returns>
    ///  从数据源发送的警告集合。
    ///</returns>
    property Errors: DNOleDbErrorCollection read get_Errors;
    ///<summary>
    ///  获取从数据源发送的错误的完整文本。
    ///</summary>
    ///<returns>
    ///  完整的错误文本。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取生成错误的对象的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的对象的名称。
    ///</returns>
    property Source: string read get_Source;
  end;

  TDNOleDbInfoMessageEventArgs = class(TDNGenericImport<DNOleDbInfoMessageEventArgsClass, DNOleDbInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{481F2F6B-6013-5B28-B3AF-FBDF5112B463}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlInfoMessageEventArgs')]
  DNSqlInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD38BC5F-E6CA-35CF-9BCE-087D6285E1A5}']
  { getters & setters } 

    function get_Errors: DNSqlErrorCollection;
    function get_Message: string;
    function get_Source: string;

  { methods } 

    ///<summary>
    ///  检索的字符串表示形式 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
    ///  事件。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取从服务器发送的警告集合。
    ///</summary>
    ///<returns>
    ///  从服务器发送的警告集合。
    ///</returns>
    property Errors: DNSqlErrorCollection read get_Errors;
    ///<summary>
    ///  获取从数据库发送的错误的完整文本。
    ///</summary>
    ///<returns>
    ///  完整的错误文本。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取生成错误的对象的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的对象的名称。
    ///</returns>
    property Source: string read get_Source;
  end;

  TDNSqlInfoMessageEventArgs = class(TDNGenericImport<DNSqlInfoMessageEventArgsClass, DNSqlInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlNotificationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A4BD358D-CFDA-55A3-B654-2D53532E78B5}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.SqlClient.SqlNotificationEventArgs" />
    ///  对象的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Data.SqlClient.SqlNotificationType" />
    ///  值，该值指示是否由于实际的改变，因此，将生成此通知或订阅。
    ///</param>
    ///  <param name="info"><see cref="T:System.Data.SqlClient.SqlNotificationInfo" />
    ///  值，该值指示通知事件的原因。
    ///  这可能是因为实际更改存储区中的数据，或者通知变为无效 （例如，它已超时）。
    ///</param>
    ///  <param name="source"><see cref="T:System.Data.SqlClient.SqlNotificationSource" />
    ///  值，该值指示生成了通知的源。
    ///</param>
    {class} function init(&type: DNSqlNotificationType; info: DNSqlNotificationInfo; source: DNSqlNotificationSource): DNSqlNotificationEventArgs;

  end;

  ///<summary>
  ///  表示传递给通知事件处理程序的参数集。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlNotificationEventArgs')]
  DNSqlNotificationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EA5B7613-CB34-3120-AC57-58124910F1A9}']
  { getters & setters } 

    function get_Type: DNSqlNotificationType;
    function get_Info: DNSqlNotificationInfo;
    function get_Source: DNSqlNotificationSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否由于实际发生了更改，生成此通知或订阅。
    ///</summary>
    ///<returns>
    ///  一个值，该值指示是否由订阅或更改生成通知。
    ///</returns>
    property &Type: DNSqlNotificationType read get_Type;
    ///<summary>
    ///  获取一个值，指示通知事件，例如，被修改的数据库或被截断的表中的行的原因。
    ///</summary>
    ///<returns>
    ///  通知事件原因。
    ///</returns>
    property Info: DNSqlNotificationInfo read get_Info;
    ///<summary>
    ///  获取一个值，该值指示生成通知，如对查询数据或数据库的状态更改的源。
    ///</summary>
    ///<returns>
    ///  通知的源。
    ///</returns>
    property Source: DNSqlNotificationSource read get_Source;
  end;

  TDNSqlNotificationEventArgs = class(TDNGenericImport<DNSqlNotificationEventArgsClass, DNSqlNotificationEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlRowsCopiedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5B49A0E8-C46B-52FD-ADEE-583B28D5E1CA}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventArgs" />
    ///  对象的新实例。
    ///</summary>
    ///  <param name="rowsCopied"><see cref="T:System.Int64" />
    ///  ，该值指示当前的大容量复制操作期间复制的行数。
    ///</param>
    {class} function init(rowsCopied: Int64): DNSqlRowsCopiedEventArgs;

  end;

  ///<summary>
  ///  表示传递给参数集 <see cref="T:System.Data.SqlClient.SqlRowsCopiedEventHandler" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlRowsCopiedEventArgs')]
  DNSqlRowsCopiedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C6D8CE5F-556F-36DF-845D-AFA25B58F2A5}']
  { getters & setters } 

    function get_Abort: Boolean;
    procedure set_Abort(value: Boolean);
    function get_RowsCopied: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否应中止批量复制操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应中止批量复制操作;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property &Abort: Boolean read get_Abort write set_Abort;
    ///<summary>
    ///  获取一个值，返回当前的大容量复制操作期间复制的行数。
    ///</summary>
    ///<returns><see langword="int" />
    ///  返回复制的行数。
    ///</returns>
    property RowsCopied: Int64 read get_RowsCopied;
  end;

  TDNSqlRowsCopiedEventArgs = class(TDNGenericImport<DNSqlRowsCopiedEventArgsClass, DNSqlRowsCopiedEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStateChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{62F1B9D0-E4D8-5961-A5C4-37DC95CA1F4F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.StateChangeEventArgs" />
    ///  类，在给定的原始状态和该对象的当前状态。
    ///</summary>
    ///  <param name="originalState"><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</param>
    ///  <param name="currentState"><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</param>
    {class} function init(originalState: DNConnectionState; currentState: DNConnectionState): DNStateChangeEventArgs;

  end;

  ///<summary>
  ///  提供 .NET Framework 数据提供程序的状态更改事件数据。
  ///</summary>
  [DNTypeName('System.Data.StateChangeEventArgs')]
  DNStateChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1579DF95-26A0-392F-9B07-AFA8F2EC8639}']
  { getters & setters } 

    function get_CurrentState: DNConnectionState;
    function get_OriginalState: DNConnectionState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取连接的新状态。
    ///  连接对象将事件激发时已处于新建状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</returns>
    property CurrentState: DNConnectionState read get_CurrentState;
    ///<summary>
    ///  获取连接的原始状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值之一。
    ///</returns>
    property OriginalState: DNConnectionState read get_OriginalState;
  end;

  TDNStateChangeEventArgs = class(TDNGenericImport<DNStateChangeEventArgsClass, DNStateChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStatementCompletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8AA5531F-E032-59BE-B470-0E1D4EC9BB32}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Data.StatementCompletedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="recordCount">
    ///  指示导致的语句所影响的行数 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
    ///  事件发生。
    ///</param>
    {class} function init(recordCount: Int32): DNStatementCompletedEventArgs;

  end;

  ///<summary>
  ///  为提供附加信息 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Data.StatementCompletedEventArgs')]
  DNStatementCompletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{965D4C7C-4A5F-31D4-BBE7-8700B9D563B7}']
  { getters & setters } 

    function get_RecordCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示导致的语句所影响的行数 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
    ///  事件发生。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    property RecordCount: Int32 read get_RecordCount;
  end;

  TDNStatementCompletedEventArgs = class(TDNGenericImport<DNStatementCompletedEventArgsClass, DNStatementCompletedEventArgs>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNInvalidUdtExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{EC111D83-C8E9-5C18-A193-CCDE6188E558}']
  end;

  ///<summary>
  ///  时，引发 SQL Server 或 ADO.NET <see cref="N:System.Data.SqlClient" />
  ///  提供程序检测到无效的用户定义类型 (UDT)。
  ///</summary>
  [DNTypeName('Microsoft.SqlServer.Server.InvalidUdtException')]
  DNInvalidUdtException = interface(DDN.mscorlib.DNSystemException)
  ['{5E0FFDED-B506-31B9-9323-C6FDDD7663E0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see cref="T:Microsoft.SqlServer.Server.InvalidUdtException" />
    ///  属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  。
    ///</summary>
    ///  <param name="si"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象。
    ///</param>
    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidUdtException = class(TDNGenericImport<DNInvalidUdtExceptionClass, DNInvalidUdtException>) end;

  //-------------namespace: System.Data----------------
  DNDataExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{DCA79D6D-7247-5D5F-8C3F-00AEE99AFCB0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DataException" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNDataException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNDataException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataException" />
    ///  使用指定的字符串和内部异常的类。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    ///  <param name="innerException">
    ///  对内部异常的引用。
    ///</param>
    {class} function init(s: string; innerException: DDN.mscorlib.DNException): DNDataException; overload;

  end;

  ///<summary>
  ///  表示使用 ADO.NET 组件生成的错误时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.DataException')]
  DNDataException = interface(DDN.mscorlib.DNSystemException)
  ['{95332F7A-E0C0-3F4C-B43E-37A649E5D82F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDataException = class(TDNGenericImport<DNDataExceptionClass, DNDataException>) end;

  //-------------namespace: System.Data----------------
  DNConstraintExceptionClass = interface(DNDataExceptionClass)
  ['{B4AE4F67-FBE7-59F6-93E7-88493B8EEFE8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.ConstraintException" />
    ///  类的新实例。
    ///  这是默认构造函数。
    ///</summary>
    {class} function init: DNConstraintException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ConstraintException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNConstraintException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ConstraintException" />
    ///  类使用指定的字符串和内部异常。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    ///  <param name="innerException">
    ///  获取导致当前异常的 <see langword="Exception" />
    ///  实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNConstraintException; overload;

  end;

  ///<summary>
  ///  表示在尝试执行违反约束的操作时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.ConstraintException')]
  DNConstraintException = interface(DNDataException)
  ['{4F5DB157-1B87-3BFA-A646-EA9626CC305B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNConstraintException = class(TDNGenericImport<DNConstraintExceptionClass, DNConstraintException>) end;

  //-------------namespace: System.Data----------------
  DNDeletedRowInaccessibleExceptionClass = interface(DNDataExceptionClass)
  ['{FF807492-9CA0-5209-8CC7-79286D0E9B36}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDeletedRowInaccessibleException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNDeletedRowInaccessibleException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.DeletedRowInaccessibleException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNDeletedRowInaccessibleException; overload;

  end;

  ///<summary>
  ///  表示尝试操作时引发的异常 <see cref="T:System.Data.DataRow" />
  ///  已被删除。
  ///</summary>
  [DNTypeName('System.Data.DeletedRowInaccessibleException')]
  DNDeletedRowInaccessibleException = interface(DNDataException)
  ['{EEAF5688-A1A4-3A06-9BD4-5D2CE72925A1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDeletedRowInaccessibleException = class(TDNGenericImport<DNDeletedRowInaccessibleExceptionClass, DNDeletedRowInaccessibleException>) end;

  //-------------namespace: System.Data----------------
  DNDuplicateNameExceptionClass = interface(DNDataExceptionClass)
  ['{1F635599-B4F7-560A-BD82-9E3764926E59}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DuplicateNameException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDuplicateNameException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DuplicateNameException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNDuplicateNameException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DuplicateNameException" />
    ///  使用指定的字符串和异常类。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNDuplicateNameException; overload;

  end;

  ///<summary>
  ///  表示添加操作中的过程中遇到重复的数据库对象名称时引发的异常 <see cref="T:System.Data.DataSet" />
  ///  的相关的对象。
  ///</summary>
  [DNTypeName('System.Data.DuplicateNameException')]
  DNDuplicateNameException = interface(DNDataException)
  ['{35B3B69B-F044-38A4-B605-C7C0A305B5BB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDuplicateNameException = class(TDNGenericImport<DNDuplicateNameExceptionClass, DNDuplicateNameException>) end;

  //-------------namespace: System.Data----------------
  DNInRowChangingEventExceptionClass = interface(DNDataExceptionClass)
  ['{7E614671-D11E-5D8A-BE1F-07A03D9B1F7D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.InRowChangingEventException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInRowChangingEventException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.InRowChangingEventException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNInRowChangingEventException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InRowChangingEventException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInRowChangingEventException; overload;

  end;

  ///<summary>
  ///  表示在调用时引发的异常 <see cref="M:System.Data.DataRow.EndEdit" />
  ///  方法是在 <see cref="E:System.Data.DataTable.RowChanging" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Data.InRowChangingEventException')]
  DNInRowChangingEventException = interface(DNDataException)
  ['{10A5490A-C1C0-3E1F-A5F9-DB5B1277EA9D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInRowChangingEventException = class(TDNGenericImport<DNInRowChangingEventExceptionClass, DNInRowChangingEventException>) end;

  //-------------namespace: System.Data----------------
  DNInvalidConstraintExceptionClass = interface(DNDataExceptionClass)
  ['{19521912-F8E0-5C32-888E-55944DA4A376}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.InvalidConstraintException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInvalidConstraintException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.InvalidConstraintException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNInvalidConstraintException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidConstraintException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidConstraintException; overload;

  end;

  ///<summary>
  ///  表示当错误地尝试创建或访问某个关系时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.InvalidConstraintException')]
  DNInvalidConstraintException = interface(DNDataException)
  ['{E5C5CFB3-1213-3B38-9C87-64C614F3F121}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidConstraintException = class(TDNGenericImport<DNInvalidConstraintExceptionClass, DNInvalidConstraintException>) end;

  //-------------namespace: System.Data----------------
  DNInvalidExpressionExceptionClass = interface(DNDataExceptionClass)
  ['{FF0025DA-14BE-5F10-B9C5-14DD08895A97}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.InvalidExpressionException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInvalidExpressionException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.InvalidExpressionException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNInvalidExpressionException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.InvalidExpressionException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidExpressionException; overload;

  end;

  ///<summary>
  ///  表示当你尝试添加时引发的异常 <see cref="T:System.Data.DataColumn" />
  ///  ，其中包含一个无效的 <see cref="P:System.Data.DataColumn.Expression" />
  ///  到 <see cref="T:System.Data.DataColumnCollection" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.InvalidExpressionException')]
  DNInvalidExpressionException = interface(DNDataException)
  ['{E3D6CB57-9EE1-32B6-8A2B-AB50D1936FD2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidExpressionException = class(TDNGenericImport<DNInvalidExpressionExceptionClass, DNInvalidExpressionException>) end;

  //-------------namespace: System.Data----------------
  DNEvaluateExceptionClass = interface(DNInvalidExpressionExceptionClass)
  ['{87E2CD6F-5A80-5E67-B821-C60776F58FFE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.EvaluateException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEvaluateException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.EvaluateException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNEvaluateException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.EvaluateException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEvaluateException; overload;

  end;

  ///<summary>
  ///  表示时，将引发的异常 <see cref="P:System.Data.DataColumn.Expression" />
  ///  属性 <see cref="T:System.Data.DataColumn" />
  ///  无法计算的值。
  ///</summary>
  [DNTypeName('System.Data.EvaluateException')]
  DNEvaluateException = interface(DNInvalidExpressionException)
  ['{62788F22-F1CE-3059-8384-7AC4AFCF6BDA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEvaluateException = class(TDNGenericImport<DNEvaluateExceptionClass, DNEvaluateException>) end;

  //-------------namespace: System.Data----------------
  DNSyntaxErrorExceptionClass = interface(DNInvalidExpressionExceptionClass)
  ['{BA387326-FAE3-593B-91D4-39FD83844E69}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SyntaxErrorException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSyntaxErrorException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SyntaxErrorException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNSyntaxErrorException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SyntaxErrorException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSyntaxErrorException; overload;

  end;

  ///<summary>
  ///  表示时，将引发的异常 <see cref="P:System.Data.DataColumn.Expression" />
  ///  属性 <see cref="T:System.Data.DataColumn" />
  ///  包含语法错误。
  ///</summary>
  [DNTypeName('System.Data.SyntaxErrorException')]
  DNSyntaxErrorException = interface(DNInvalidExpressionException)
  ['{0D4EEFDA-E8FC-392D-A2CC-0EC26C4A25F4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSyntaxErrorException = class(TDNGenericImport<DNSyntaxErrorExceptionClass, DNSyntaxErrorException>) end;

  //-------------namespace: System.Data----------------
  DNMissingPrimaryKeyExceptionClass = interface(DNDataExceptionClass)
  ['{13DC3B41-8488-56C1-988A-91F94E2C4F3B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.MissingPrimaryKeyException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMissingPrimaryKeyException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.MissingPrimaryKeyException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNMissingPrimaryKeyException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.MissingPrimaryKeyException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMissingPrimaryKeyException; overload;

  end;

  ///<summary>
  ///  表示当您尝试访问没有主键的表中的行时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.MissingPrimaryKeyException')]
  DNMissingPrimaryKeyException = interface(DNDataException)
  ['{28292C62-2A34-3475-9254-2C9D16607AE0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingPrimaryKeyException = class(TDNGenericImport<DNMissingPrimaryKeyExceptionClass, DNMissingPrimaryKeyException>) end;

  //-------------namespace: System.Data----------------
  DNNoNullAllowedExceptionClass = interface(DNDataExceptionClass)
  ['{2F4AC106-B26B-5614-9694-2B2B43ECDB59}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.NoNullAllowedException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNoNullAllowedException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.NoNullAllowedException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNNoNullAllowedException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.NoNullAllowedException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNNoNullAllowedException; overload;

  end;

  ///<summary>
  ///  表示在尝试将 NULL 值插入 <see cref="P:System.Data.DataColumn.AllowDBNull" />
  ///  设置为 <see langword="false" />
  ///  的列中时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.NoNullAllowedException')]
  DNNoNullAllowedException = interface(DNDataException)
  ['{F44D3CD4-B00A-35CB-8517-48B88157FE44}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNoNullAllowedException = class(TDNGenericImport<DNNoNullAllowedExceptionClass, DNNoNullAllowedException>) end;

  //-------------namespace: System.Data----------------
  DNReadOnlyExceptionClass = interface(DNDataExceptionClass)
  ['{BC446F6F-D209-5BD7-BE03-CA2A74A86A82}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.ReadOnlyException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNReadOnlyException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.ReadOnlyException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNReadOnlyException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.ReadOnlyException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNReadOnlyException; overload;

  end;

  ///<summary>
  ///  表示在尝试更改只读列的值时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.ReadOnlyException')]
  DNReadOnlyException = interface(DNDataException)
  ['{D41F90F6-251A-3A54-B633-EBE4D14D6EA6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReadOnlyException = class(TDNGenericImport<DNReadOnlyExceptionClass, DNReadOnlyException>) end;

  //-------------namespace: System.Data----------------
  DNRowNotInTableExceptionClass = interface(DNDataExceptionClass)
  ['{E0C567B8-D8B1-5AC9-BAB8-FC9808BE68F2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.RowNotInTableException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRowNotInTableException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.RowNotInTableException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNRowNotInTableException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.RowNotInTableException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNRowNotInTableException; overload;

  end;

  ///<summary>
  ///  表示当您尝试上执行操作时引发的异常 <see cref="T:System.Data.DataRow" />
  ///  未处于 <see cref="T:System.Data.DataTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.RowNotInTableException')]
  DNRowNotInTableException = interface(DNDataException)
  ['{644C9CEC-12AD-373D-8F72-A407B4F8FF15}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRowNotInTableException = class(TDNGenericImport<DNRowNotInTableExceptionClass, DNRowNotInTableException>) end;

  //-------------namespace: System.Data----------------
  DNStrongTypingExceptionClass = interface(DNDataExceptionClass)
  ['{6379B64C-50EE-5DF4-9902-EF0D512EC335}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.StrongTypingException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNStrongTypingException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.StrongTypingException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(message: string): DNStrongTypingException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.StrongTypingException" />
    ///  使用指定的字符串和内部异常的类。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    ///  <param name="innerException">
    ///  对内部异常的引用。
    ///</param>
    {class} function init(s: string; innerException: DDN.mscorlib.DNException): DNStrongTypingException; overload;

  end;

  ///<summary>
  ///  则会引发该异常通过强类型化 <see cref="T:System.Data.DataSet" />
  ///  当用户访问 <see langword="DBNull" />
  ///  值。
  ///</summary>
  [DNTypeName('System.Data.StrongTypingException')]
  DNStrongTypingException = interface(DNDataException)
  ['{0344E365-016C-346C-B029-84E053C98510}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNStrongTypingException = class(TDNGenericImport<DNStrongTypingExceptionClass, DNStrongTypingException>) end;

  //-------------namespace: System.Data----------------
  DNTypedDataSetGeneratorExceptionClass = interface(DNDataExceptionClass)
  ['{5E7A7584-B217-57B5-A3C9-83056183DA24}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypedDataSetGeneratorException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(message: string): DNTypedDataSetGeneratorException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" />
    ///  使用指定的字符串和内部异常的类。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    ///  <param name="innerException">
    ///  对内部异常的引用。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTypedDataSetGeneratorException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.TypedDataSetGeneratorException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="list"><see cref="T:System.Collections.ArrayList" />
    ///  对象，包含异常的动态列表。
    ///</param>
    {class} function init(list: DDN.mscorlib.DNArrayList): DNTypedDataSetGeneratorException; overload;

  end;

  ///<summary>
  ///  当生成强类型 <see cref="T:System.Data.DataSet" />
  ///  的过程中发生名称冲突时引发的异常。
  ///</summary>
  [DNTypeName('System.Data.TypedDataSetGeneratorException')]
  DNTypedDataSetGeneratorException = interface(DNDataException)
  ['{7368AA2F-95D3-3E49-88D8-4566C0020FB0}']
  { getters & setters } 

    function get_ErrorList: DDN.mscorlib.DNArrayList;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  实现 <see langword="ISerializable" />
    ///  接口，并返回序列化所需的数据 <see cref="T:System.Data.TypedDataSetGeneratorException" />
    ///  对象。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  结构。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取生成的错误的动态列表。
    ///</summary>
    ///<returns><see cref="T:System.Collections.ArrayList" />
    ///  对象。
    ///</returns>
    property ErrorList: DDN.mscorlib.DNArrayList read get_ErrorList;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypedDataSetGeneratorException = class(TDNGenericImport<DNTypedDataSetGeneratorExceptionClass, DNTypedDataSetGeneratorException>) end;

  //-------------namespace: System.Data----------------
  DNVersionNotFoundExceptionClass = interface(DNDataExceptionClass)
  ['{08A44480-0613-50F6-BF52-B08F2A39AC98}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.VersionNotFoundException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNVersionNotFoundException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.VersionNotFoundException" />
    ///  类，具有指定的字符串。
    ///</summary>
    ///  <param name="s">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(s: string): DNVersionNotFoundException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.VersionNotFoundException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNVersionNotFoundException; overload;

  end;

  ///<summary>
  ///  表示当尝试返回的版本时引发的异常 <see cref="T:System.Data.DataRow" />
  ///  已被删除。
  ///</summary>
  [DNTypeName('System.Data.VersionNotFoundException')]
  DNVersionNotFoundException = interface(DNDataException)
  ['{B5F91CF5-31D5-311B-A974-09AE28E1C261}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNVersionNotFoundException = class(TDNGenericImport<DNVersionNotFoundExceptionClass, DNVersionNotFoundException>) end;

  //-------------namespace: System.Data----------------
  DNDBConcurrencyExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{AC5878F3-9C4C-5BD5-A7F7-E3C39A9ED264}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.DBConcurrencyException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDBConcurrencyException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.DBConcurrencyException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述异常的详细信息的文本字符串。
    ///</param>
    {class} function init(message: string): DNDBConcurrencyException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.DBConcurrencyException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述异常的详细信息的文本字符串。
    ///</param>
    ///  <param name="inner">
    ///  对内部异常的引用。
    ///</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException): DNDBConcurrencyException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.DBConcurrencyException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释此异常原因的错误信息。
    ///</param>
    ///  <param name="inner">
    ///  导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</param>
    ///  <param name="dataRows">
    ///  一个数组，包含 <see cref="T:System.Data.DataRow" />
    ///  因更新失败而导致产生此异常的对象。
    ///</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException; dataRows: TArray<DNDataRow>): DNDBConcurrencyException; overload;

  end;

  ///<summary>
  ///  通过引发的异常 <see cref="T:System.Data.Common.DataAdapter" />
  ///  期间插入、 更新或删除操作，如果受影响的行数等于零。
  ///</summary>
  [DNTypeName('System.Data.DBConcurrencyException')]
  DNDBConcurrencyException = interface(DDN.mscorlib.DNSystemException)
  ['{41AC822C-4053-3239-89CD-D09EAACBA9A9}']
  { getters & setters } 

    function get_Row: DNDataRow;
    procedure set_Row(value: DNDataRow);
    function get_RowCount: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  使用序列化所需的数据填充指定的序列化信息对象 <see cref="T:System.Data.DBConcurrencyException" />
    ///  。
    ///</summary>
    ///  <param name="si">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存与 <see cref="T:System.Data.DBConcurrencyException" />
    ///  关联的序列化数据。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含与 <see cref="T:System.Data.DBConcurrencyException" />
    ///  关联的序列化流的源和目标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  副本 <see cref="T:System.Data.DataRow" />
    ///  因更新失败而导致生成此异常时，为指定的数组对象 <see cref="T:System.Data.DataRow" />
    ///  对象。
    ///</summary>
    ///  <param name="array">
    ///  一维数组 <see cref="T:System.Data.DataRow" />
    ///  对象复制 <see cref="T:System.Data.DataRow" />
    ///  将对象插入。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    ///<summary>
    ///  副本 <see cref="T:System.Data.DataRow" />
    ///  因更新失败而导致生成此异常时，为指定的数组对象 <see cref="T:System.Data.DataRow" />
    ///  对象，指定的目标数组索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一维数组 <see cref="T:System.Data.DataRow" />
    ///  对象复制 <see cref="T:System.Data.DataRow" />
    ///  将对象插入。
    ///</param>
    ///  <param name="arrayIndex">
    ///  要开始复制到的目标数组索引。
    ///</param>
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置的值 <see cref="T:System.Data.DataRow" />
    ///  生成 <see cref="T:System.Data.DBConcurrencyException" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRow" />
    ///  的值。
    ///</returns>
    property Row: DNDataRow read get_Row write set_Row;
    ///<summary>
    ///  获取其更新失败，生成此异常的行数。
    ///</summary>
    ///<returns>
    ///  包含其更新失败的行数的整数。
    ///</returns>
    property RowCount: Int32 read get_RowCount;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDBConcurrencyException = class(TDNGenericImport<DNDBConcurrencyExceptionClass, DNDBConcurrencyException>) end;

  //-------------namespace: System.Data----------------
  DNOperationAbortedExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{4A232F22-A431-5790-B874-8D332F3507B7}']
  end;

  ///<summary>
  ///  当用户中止正在进行的操作时，引发此异常。
  ///</summary>
  [DNTypeName('System.Data.OperationAbortedException')]
  DNOperationAbortedException = interface(DDN.mscorlib.DNSystemException)
  ['{73B53162-443B-3457-91A5-D7262A82BD92}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOperationAbortedException = class(TDNGenericImport<DNOperationAbortedExceptionClass, DNOperationAbortedException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTypeExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{9625EB0F-3854-513A-9DEB-912C57E7FE35}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlTypeException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    {class} function init(message: string): DNSqlTypeException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlTypeException; overload;

  end;

  ///<summary>
  ///  基异常类 <see cref="N:System.Data.SqlTypes" />
  ///  。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlTypeException')]
  DNSqlTypeException = interface(DDN.mscorlib.DNSystemException)
  ['{7678DA29-71E3-3FBA-A739-077120A6869D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlTypeException = class(TDNGenericImport<DNSqlTypeExceptionClass, DNSqlTypeException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlAlreadyFilledExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{1EC3BB71-A3E3-59EF-B7E1-103E67845349}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlAlreadyFilledException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(message: string): DNSqlAlreadyFilledException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    ///  <param name="e">
    ///  对内部异常的引用。
    ///</param>
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlAlreadyFilledException; overload;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlAlreadyFilledException')]
  DNSqlAlreadyFilledException = interface(DNSqlTypeException)
  ['{E9E525F9-1084-3C76-A305-D7C371D88327}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlAlreadyFilledException = class(TDNGenericImport<DNSqlAlreadyFilledExceptionClass, DNSqlAlreadyFilledException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlNotFilledExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{55CE0BCE-3C74-5576-88B2-7774E1A6E73B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlNotFilledException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    {class} function init(message: string): DNSqlNotFilledException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlNotFilledException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  要在引发异常时显示的字符串。
    ///</param>
    ///  <param name="e">
    ///  对内部异常的引用。
    ///</param>
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlNotFilledException; overload;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.SqlNotFilledException" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlNotFilledException')]
  DNSqlNotFilledException = interface(DNSqlTypeException)
  ['{72878FEE-1263-3C0F-93B9-022BBEF05490}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlNotFilledException = class(TDNGenericImport<DNSqlNotFilledExceptionClass, DNSqlNotFilledException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlNullValueExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{4CEC667A-12E6-5029-9825-7D491314ABD6}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlNullValueException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNSqlNullValueException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlNullValueException; overload;

  end;

  ///<summary>
  ///  当 <see langword="Value" />
  ///  结构的 <see cref="N:System.Data.SqlTypes" />
  ///  属性设置为 null 时所引发的异常。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlNullValueException')]
  DNSqlNullValueException = interface(DNSqlTypeException)
  ['{13C65320-A71B-3473-860D-DFDEBCCE58A6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlNullValueException = class(TDNGenericImport<DNSqlNullValueExceptionClass, DNSqlNullValueException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTruncateExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{213C7C6E-7316-50CE-80F5-F756A08A4FA2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlTruncateException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    {class} function init(message: string): DNSqlTruncateException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" />
    ///  使用指定的错误消息和对引用 <see cref="T:System.Exception" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  解释异常原因的错误消息。
    ///</param>
    ///  <param name="e">
    ///  对内部引用 <see cref="T:System.Exception" />
    ///  。
    ///</param>
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlTruncateException; overload;

  end;

  ///<summary>
  ///  设置一个值时引发的异常 <see cref="N:System.Data.SqlTypes" />
  ///  结构会截断该值。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlTruncateException')]
  DNSqlTruncateException = interface(DNSqlTypeException)
  ['{03DD07B2-755B-3B9D-ADCE-6ABB51CAF504}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlTruncateException = class(TDNGenericImport<DNSqlTruncateExceptionClass, DNSqlTruncateException>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{6F0ACD2C-DDFC-5B6E-AFEF-087170AD944A}']
  end;

  ///<summary>
  ///  代表数据源引发的所有异常的基类。
  ///</summary>
  [DNTypeName('System.Data.Common.DbException')]
  DNDbException = interface(DDN.mscorlib.DNExternalException)
  ['{61AD995A-DA04-3139-BD92-150C4935184D}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDbException = class(TDNGenericImport<DNDbExceptionClass, DNDbException>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcExceptionClass = interface(DNDbExceptionClass)
  ['{6F22F2C1-7272-5F68-8728-2F33AB5FD7A4}']
  end;

  ///<summary>
  ///  ODBC 数据源返回警告或错误时，将生成的异常。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcException')]
  DNOdbcException = interface(DNDbException)
  ['{25963533-A5F8-3BE2-A6A8-952B0F856310}']
  { getters & setters } 

    function get_Errors: DNOdbcErrorCollection;
    function get_Source: string;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  此成员重写 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  。
    ///</summary>
    ///  <param name="si"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存关于所引发异常的序列化对象数据。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含关于源或目标的上下文信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="si" />
    ///  参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个或多个集合 <see cref="T:System.Data.Odbc.OdbcError" />
    ///  对象可提供有关用于 ODBC 的.NET Framework 数据提供程序生成的异常的详细的信息。
    ///</summary>
    ///<returns>
    ///  收集的实例 <see cref="T:System.Data.Odbc.OdbcError" />
    ///  类。
    ///</returns>
    property Errors: DNOdbcErrorCollection read get_Errors;
    ///<summary>
    ///  获取生成错误的 ODBC 驱动程序的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的 ODBC 驱动程序的名称。
    ///</returns>
    property Source: string read get_Source;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property HResult: Int32 read get_HResult;
  end;

  TDNOdbcException = class(TDNGenericImport<DNOdbcExceptionClass, DNOdbcException>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbExceptionClass = interface(DNDbExceptionClass)
  ['{D1BA5C2A-6D6C-5DA1-988A-438E0789CBC5}']
  end;

  ///<summary>
  ///  当基础提供程序返回的警告或错误的 OLE DB 数据源时引发异常。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbException')]
  DNOleDbException = interface(DNDbException)
  ['{7D375F63-68C8-3955-8A75-A69EE8E96A8D}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Errors: DNOleDbErrorCollection;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  此成员重写 <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  。
    ///</summary>
    ///  <param name="si"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存关于所引发异常的序列化对象数据。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含关于源或目标的上下文信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="si" />
    ///  参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</exception>
    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取错误的 HRESULT。
    ///</summary>
    ///<returns>
    ///  该错误的 HRESULT。
    ///</returns>
    property ErrorCode: Int32 read get_ErrorCode;
    ///<summary>
    ///  获取一个或多个集合 <see cref="T:System.Data.OleDb.OleDbError" />
    ///  对象可提供有关对于 OLE DB 的.NET Framework 数据提供程序生成的异常的详细的信息。
    ///</summary>
    ///<returns>
    ///  收集的实例 <see cref="T:System.Data.OleDb.OleDbError" />
    ///  类。
    ///</returns>
    property Errors: DNOleDbErrorCollection read get_Errors;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOleDbException = class(TDNGenericImport<DNOleDbExceptionClass, DNOleDbException>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlExceptionClass = interface(DNDbExceptionClass)
  ['{80A5A752-E801-5490-91C5-550B2386497C}']
  end;

  ///<summary>
  ///  SQL Server 返回警告或错误时引发的异常。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlException')]
  DNSqlException = interface(DNDbException)
  ['{B85AC0F9-3A9B-3DAE-B9DB-96F517A25B1A}']
  { getters & setters } 

    function get_Errors: DNSqlErrorCollection;
    function get_ClientConnectionId: DDN.mscorlib.DNGuid;
    function get_Class: Byte;
    function get_LineNumber: Int32;
    function get_Number: Int32;
    function get_Procedure: string;
    function get_Server: string;
    function get_State: Byte;
    function get_Source: string;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  返回一个字符串，表示当前 <see cref="T:System.Data.SqlClient.SqlException" />
    ///  对象，并包括客户端连接 ID (有关详细信息，请参阅 <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />
    ///  )。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示当前 <see cref="T:System.Data.SqlClient.SqlException" />
    ///  对象。<see cref="T:System.String" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///</summary>
    ///  <param name="si"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存关于所引发异常的序列化对象数据。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含关于源或目标的上下文信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="si" />
    ///  参数为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</exception>
    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个或多个集合 <see cref="T:System.Data.SqlClient.SqlError" />
    ///  为提供适用于 SQL Server 的.NET Framework 数据提供程序生成的异常有关的详细的信息的对象。
    ///</summary>
    ///<returns>
    ///  收集的实例 <see cref="T:System.Data.SqlClient.SqlError" />
    ///  类。
    ///</returns>
    property Errors: DNSqlErrorCollection read get_Errors;
    ///<summary>
    ///  表示客户端连接 id。
    ///  有关详细信息，请参阅ADO.NET 中的数据跟踪。
    ///</summary>
    ///<returns>
    ///  返回客户端连接 id。
    ///</returns>
    property ClientConnectionId: DDN.mscorlib.DNGuid read get_ClientConnectionId;
    ///<summary>
    ///  获取适用于 SQL Server 从.NET Framework 数据提供程序返回的错误的严重性级别。
    ///</summary>
    ///<returns>
    ///  一个 1 至 25 的值，它指示错误的严重级别。
    ///</returns>
    property &Class: Byte read get_Class;
    ///<summary>
    ///  获取生成错误的存储的过程的 TRANSACT-SQL 命令批处理中的行号。
    ///</summary>
    ///<returns>
    ///  中的 TRANSACT-SQL 命令批处理或存储的过程生成该错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取一个标识错误类型的数字。
    ///</summary>
    ///<returns>
    ///  标识错误类型的数字。
    ///</returns>
    property Number: Int32 read get_Number;
    ///<summary>
    ///  获取生成错误的存储过程或远程过程调用 (RPC) 的名称。
    ///</summary>
    ///<returns>
    ///  存储过程或 RPC 的名称。
    ///</returns>
    property &Procedure: string read get_Procedure;
    ///<summary>
    ///  获取正在运行的生成错误的 SQL Server 实例的计算机的名称。
    ///</summary>
    ///<returns>
    ///  运行 SQL Server 实例的计算机的名称。
    ///</returns>
    property Server: string read get_Server;
    ///<summary>
    ///  从表示错误、 警告或"未找到数据"消息的 SQL Server 中获取数字错误代码。
    ///  有关如何对这些值进行解码的详细信息，请参阅 SQL Server 联机丛书。
    ///</summary>
    ///<returns>
    ///  表示错误代码的数字。
    ///</returns>
    property State: Byte read get_State;
    ///<summary>
    ///  获取生成错误的提供程序的名称。
    ///</summary>
    ///<returns>
    ///  生成错误的提供程序的名称。
    ///</returns>
    property Source: string read get_Source;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlException = class(TDNGenericImport<DNSqlExceptionClass, DNSqlException>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataAdapterClass = interface(DNObjectClass)
  ['{50CE4E0C-5D83-5588-8AEA-C7B1C12699A5}']
  end;

  ///<summary>
  ///  表示用于填充 <see cref="T:System.Data.DataSet" />
  ///  和更新数据源的一组 SQL 命令和一个数据库连接。
  ///</summary>
  [DNTypeName('System.Data.Common.DataAdapter')]
  DNDataAdapter = interface(DNObject)
  ['{FF7BB96D-D9D5-35F0-BE9F-61B28F6B42D4}']
  { getters & setters } 

    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  确定是否 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
    ///  应保持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
    ///  属性是持久的; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    ///<summary>
    ///  确定是否 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />
    ///  应保持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />
    ///  属性是持久的; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeFillLoadOption: Boolean;
    ///<summary>
    ///  重置 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />
    ///  到其默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />
    ///  遵守 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
    ///  。
    ///</summary>
    procedure ResetFillLoadOption;
    ///<summary>
    ///  添加 <see cref="T:System.Data.DataTable" />
    ///  到指定 <see cref="T:System.Data.DataSet" />
    ///  和配置架构的架构以匹配数据源中根据指定 <see cref="T:System.Data.SchemaType" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要填充数据源中的架构。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  从数据源返回的对象，其中包含架构信息。
    ///</returns>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  以匹配数据源中。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataSet: DNDataSet): Int32;
    ///<summary>
    ///  获取在执行 SQL SELECT 语句时由用户设置的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.IDataParameter" />
    ///  由用户来设置包含的参数的对象。
    ///</returns>
    function GetFillParameters: TArray<DNIDataParameter>;
    ///<summary>
    ///  对于每个插入、 更新或删除了行中指定调用相应的 INSERT、 UPDATE 或 DELETE 语句 <see cref="T:System.Data.DataSet" />
    ///  从 <see cref="T:System.Data.DataTable" />
    ///  名为"Table"。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet): Int32;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上调用 <see cref="T:System.Data.DataRow" />
    ///  添加到后 <see cref="T:System.Data.DataTable" />
    ///  期间的任何 填充 操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上调用 <see cref="T:System.Data.DataRow" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    ///<summary>
    ///  获取或设置是否 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    ///<summary>
    ///  获取或设置一个值，指定是否生成错误时出现的异常在过程中遇到的行更新。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要继续而不会生成异常，则此更新否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.LoadOption" />
    ///  ，它确定适配器的填充方式 <see cref="T:System.Data.DataTable" />
    ///  从 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.LoadOption" />
    ///  值。
    ///</returns>
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    ///<summary>
    ///  确定当传入的数据没有匹配的表或列时要执行的操作。
    ///</summary>
    ///<returns><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///  默认值为 <see langword="Passthrough" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" />
    ///  值。
    ///</exception>
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    ///<summary>
    ///  确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" />
    ///  架构与传入的数据不匹配。
    ///</summary>
    ///<returns><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///  默认值为 <see langword="Add" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" />
    ///  值。
    ///</exception>
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    ///<summary>
    ///  获取或设置是否 <see langword="Fill" />
    ///  方法应返回提供程序特定值或常见符合 cls 的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Fill" />
    ///  方法应返回提供程序特定的值; 否则为 <see langword="false" />
    ///  返回常见符合 cls 的值。
    ///</returns>
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    ///<summary>
    ///  获取一个集合，它提供了源表之间的主映射的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  默认值为空集合。
    ///</returns>
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDataAdapter = class(TDNGenericImport<DNDataAdapterClass, DNDataAdapter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataAdapterClass = interface(DNDataAdapterClass)
  ['{E2F24866-4CE2-5DE5-92BB-5847AD6F39C2}']
  end;

  ///<summary>
  ///  帮助实现 <see cref="T:System.Data.IDbDataAdapter" />
  ///  接口。
  ///<see cref="T:System.Data.Common.DbDataAdapter" />
  ///  的继承类实现了一组功能以提供强类型，但是继承了完全实现 DataAdapter 所需的大部分功能。
  ///</summary>
  [DNTypeName('System.Data.Common.DbDataAdapter')]
  DNDbDataAdapter = interface(DNDataAdapter)
  ['{709CDBCC-26E5-3D11-A73A-5AA9BF436DB4}']
  { getters & setters } 

    function get_DeleteCommand: DNDbCommand;
    procedure set_DeleteCommand(value: DNDbCommand);
    function get_InsertCommand: DNDbCommand;
    procedure set_InsertCommand(value: DNDbCommand);
    function get_SelectCommand: DNDbCommand;
    procedure set_SelectCommand(value: DNDbCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_UpdateCommand: DNDbCommand;
    procedure set_UpdateCommand(value: DNDbCommand);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置指定 <see cref="T:System.Data.DataTable" />
    ///  的架构。
    ///</summary>
    ///  <param name="dataTable">
    ///  要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含从数据源返回的架构信息。
    ///</returns>
    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    ///<summary>
    ///  将名为“Table”的 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  ，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    ///<summary>
    ///  将 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  中，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  找不到从中获取架构的源表。
    ///</exception>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///  - 或 -
    ///  连接无效。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  找不到该连接。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="startRecord" />
    ///  参数小于 0。
    ///  - 或 -
    ///  <paramref name="maxRecords" />
    ///  参数小于 0。
    ///</exception>
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataTable">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  用于表映射。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataTable" />
    ///  以匹配所指定的记录从开始，并检索由指定的最大记录数的数据源中。
    ///</summary>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="dataTables"><see cref="T:System.Data.DataTable" />
    ///  要从数据源填充对象。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  此值不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    ///<summary>
    ///  获取在执行 SQL SELECT 语句时由用户设置的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.IDataParameter" />
    ///  由用户来设置包含的参数的对象。
    ///</returns>
    function GetFillParameters: TArray<DNIDataParameter>;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了行中指定的数组中执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataRows">
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  用于更新数据源的对象。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除行中的更新数据库中的值<see cref="T:System.Data.DataSet" />
    ///  具有指定<see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要用于更新数据源。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  已成功从更新的行数<see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  源表无效。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    ///<summary>
    ///  确定是否 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
    ///  应保持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
    ///  属性是持久的; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    ///<summary>
    ///  确定是否 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />
    ///  应保持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />
    ///  属性是持久的; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeFillLoadOption: Boolean;
    ///<summary>
    ///  重置 <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />
    ///  到其默认状态，并使 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />
    ///  遵守 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />
    ///  。
    ///</summary>
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用于从数据集中删除记录的命令。
    ///</summary>
    ///<returns><see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
    ///  来删除已删除行在数据集中的数据源中的记录。
    ///</returns>
    property DeleteCommand: DNDbCommand read get_DeleteCommand write set_DeleteCommand;
    ///<summary>
    ///  获取或设置用来将新记录插入到数据源的命令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
    ///  以新行在数据集中的数据源中插入记录。
    ///</returns>
    property InsertCommand: DNDbCommand read get_InsertCommand write set_InsertCommand;
    ///<summary>
    ///  获取或设置用来选择数据源中的记录的命令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
    ///  从放入数据集中的数据源选择记录。
    ///</returns>
    property SelectCommand: DNDbCommand read get_SelectCommand write set_SelectCommand;
    ///<summary>
    ///  获取或设置一个值，启用或禁用批处理支持，并指定可以在一个批次中执行的命令数。
    ///</summary>
    ///<returns>
    ///  要处理的每批行数。
    ///  值是
    ///  效果
    ///  0
    ///  批大小没有限制。
    ///  1
    ///  禁用批量更新。
    ///  &gt; 1
    ///  使用多批发送更改 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
    ///  一次的操作。
    ///  当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  必须具有其 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" />
    ///  属性设置为 无 或 输出参数。
    ///  否则将引发异常。
    ///</returns>
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    ///<summary>
    ///  获取或设置用于更新数据源中的记录的命令。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.IDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
    ///  来更新数据集中的已修改行的数据源中的记录。
    ///</returns>
    property UpdateCommand: DNDbCommand read get_UpdateCommand write set_UpdateCommand;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上调用 <see cref="T:System.Data.DataRow" />
    ///  添加到后 <see cref="T:System.Data.DataTable" />
    ///  期间的任何 填充 操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  上调用 <see cref="T:System.Data.DataRow" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    ///<summary>
    ///  获取或设置是否 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Data.DataRow.AcceptChanges" />
    ///  期间调用 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    ///<summary>
    ///  获取或设置一个值，指定是否生成错误时出现的异常在过程中遇到的行更新。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要继续而不会生成异常，则此更新否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.LoadOption" />
    ///  ，它确定适配器的填充方式 <see cref="T:System.Data.DataTable" />
    ///  从 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.LoadOption" />
    ///  值。
    ///</returns>
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    ///<summary>
    ///  确定当传入的数据没有匹配的表或列时要执行的操作。
    ///</summary>
    ///<returns><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///  默认值为 <see langword="Passthrough" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值不是之一 <see cref="T:System.Data.MissingMappingAction" />
    ///  值。
    ///</exception>
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    ///<summary>
    ///  确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" />
    ///  架构与传入的数据不匹配。
    ///</summary>
    ///<returns><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///  默认值为 <see langword="Add" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值不是之一 <see cref="T:System.Data.MissingSchemaAction" />
    ///  值。
    ///</exception>
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    ///<summary>
    ///  获取或设置是否 <see langword="Fill" />
    ///  方法应返回提供程序特定值或常见符合 cls 的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Fill" />
    ///  方法应返回提供程序特定的值; 否则为 <see langword="false" />
    ///  返回常见符合 cls 的值。
    ///</returns>
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    ///<summary>
    ///  获取一个集合，它提供了源表之间的主映射的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个集合，提供返回的记录之间的主映射和 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  默认值为空集合。
    ///</returns>
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbDataAdapter = class(TDNGenericImport<DNDbDataAdapterClass, DNDbDataAdapter>)
  public const
    ///<summary>
    ///  使用默认名称 <see cref="T:System.Data.Common.DataAdapter" />
    ///  表映射的对象。
    ///</summary>
   DefaultSourceTableName = 'Table';
  end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcDataAdapterClass = interface(DNDbDataAdapterClass)
  ['{4A2CECDD-5203-528C-B34B-3077D060F7F3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  与指定的 SQL SELECT 语句一起使用的类。
    ///</summary>
    ///  <param name="selectCommand"><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  ，是 SQL SELECT 语句或存储的过程，并将设置为 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  。
    ///</param>
    {class} function init(selectCommand: DNOdbcCommand): DNOdbcDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  类，具有一个 SQL SELECT 语句和一个 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  。
    ///</summary>
    ///  <param name="selectCommandText">
    ///  一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  。
    ///</param>
    ///  <param name="selectConnection"><see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  表示的连接。
    ///</param>
    {class} function init(selectCommandText: string; selectConnection: DNOdbcConnection): DNOdbcDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  类与一个 SQL SELECT 语句和连接字符串。
    ///</summary>
    ///  <param name="selectCommandText">
    ///  一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.Odbc.OdbcDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  。
    ///</param>
    ///  <param name="selectConnectionString">
    ///  连接字符串。
    ///</param>
    {class} function init(selectCommandText: string; selectConnectionString: string): DNOdbcDataAdapter; overload;

  end;

  ///<summary>
  ///  表示用于填充 <see cref="T:System.Data.DataSet" />
  ///  和更新数据源的一组数据命令和一个数据源连接。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcDataAdapter')]
  DNOdbcDataAdapter = interface(DNDbDataAdapter)
  ['{C84DB417-A3DD-3F46-B15E-21873853E324}']
  { getters & setters } 

    function get_DeleteCommand: DNOdbcCommand;
    procedure set_DeleteCommand(value: DNOdbcCommand);
    function get_InsertCommand: DNOdbcCommand;
    procedure set_InsertCommand(value: DNOdbcCommand);
    function get_SelectCommand: DNOdbcCommand;
    procedure set_SelectCommand(value: DNOdbcCommand);
    function get_UpdateCommand: DNOdbcCommand;
    procedure set_UpdateCommand(value: DNOdbcCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_RowUpdated(value: DNOdbcRowUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNOdbcRowUpdatedEventHandler);
    procedure add_RowUpdating(value: DNOdbcRowUpdatingEventHandler);
    procedure remove_RowUpdating(value: DNOdbcRowUpdatingEventHandler);
    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置指定 <see cref="T:System.Data.DataTable" />
    ///  的架构。
    ///</summary>
    ///  <param name="dataTable">
    ///  要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含从数据源返回的架构信息。
    ///</returns>
    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    ///<summary>
    ///  将名为“Table”的 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  ，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    ///<summary>
    ///  将 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  中，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  找不到从中获取架构的源表。
    ///</exception>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///  - 或 -
    ///  连接无效。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  找不到该连接。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="startRecord" />
    ///  参数小于 0。
    ///  - 或 -
    ///  <paramref name="maxRecords" />
    ///  参数小于 0。
    ///</exception>
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataTable">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  用于表映射。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataTable" />
    ///  以匹配所指定的记录从开始，并检索由指定的最大记录数的数据源中。
    ///</summary>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="dataTables"><see cref="T:System.Data.DataTable" />
    ///  要从数据源填充对象。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  此值不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    ///<summary>
    ///  获取在执行 SQL SELECT 语句时由用户设置的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.IDataParameter" />
    ///  由用户来设置包含的参数的对象。
    ///</returns>
    function GetFillParameters: TArray<DNIDataParameter>;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了行中指定的数组中执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataRows">
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  用于更新数据源的对象。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除行中的更新数据库中的值<see cref="T:System.Data.DataSet" />
    ///  具有指定<see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要用于更新数据源。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  已成功从更新的行数<see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  源表无效。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 SQL 语句或存储的过程，用于删除数据源中的记录。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  更新操作期间用于删除数据源中对应的已删除行的记录 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DeleteCommand: DNOdbcCommand read get_DeleteCommand write set_DeleteCommand;
    ///<summary>
    ///  获取或设置 SQL 语句或用于将新记录插入数据源的存储过程。
    ///</summary>
    ///<returns>
    ///  在更新操作期间用于在对应于 <see cref="T:System.Data.DataSet" />
    ///  中新行的数据源中插入记录的 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  。
    ///</returns>
    property InsertCommand: DNOdbcCommand read get_InsertCommand write set_InsertCommand;
    ///<summary>
    ///  获取或设置的 SQL 语句或存储的过程用于在数据源中选择记录。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  ，填充操作过程中，用于从数据源以便放入选择记录 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property SelectCommand: DNOdbcCommand read get_SelectCommand write set_SelectCommand;
    ///<summary>
    ///  获取或设置 SQL 语句或用于在数据源中更新记录的存储过程。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  ，用于在更新操作期间在对应于 <see cref="T:System.Data.DataSet" />
    ///  中被修改行的数据源中更新记录。
    ///</returns>
    property UpdateCommand: DNOdbcCommand read get_UpdateCommand write set_UpdateCommand;
    ///<summary>
    ///  获取或设置一个值，启用或禁用批处理支持，并指定可以在一个批次中执行的命令数。
    ///</summary>
    ///<returns>
    ///  要处理的每批行数。
    ///  值是
    ///  效果
    ///  0
    ///  批大小没有限制。
    ///  1
    ///  禁用批量更新。
    ///  &gt; 1
    ///  使用多批发送更改 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
    ///  一次的操作。
    ///  当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  必须具有其 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" />
    ///  属性设置为 无 或 输出参数。
    ///  否则将引发异常。
    ///</returns>
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcDataAdapter = class(TDNGenericImport<DNOdbcDataAdapterClass, DNOdbcDataAdapter>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbDataAdapterClass = interface(DNDbDataAdapterClass)
  ['{E7B972FA-EBBF-5D7A-99A4-B671DF3C4756}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  类与指定 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  作为 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
    ///  属性。
    ///</summary>
    ///  <param name="selectCommand"><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  ，SELECT 语句或存储的过程，并设置为 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  。
    ///</param>
    {class} function init(selectCommand: DNOleDbCommand): DNOleDbDataAdapter; overload;
    ///<summary>
    ///  用 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  初始化 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="selectCommandText">
    ///  一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  。
    ///</param>
    ///  <param name="selectConnectionString">
    ///  连接字符串。
    ///</param>
    {class} function init(selectCommandText: string; selectConnectionString: string): DNOleDbDataAdapter; overload;
    ///<summary>
    ///  用 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  初始化 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="selectCommandText">
    ///  一个字符串，它 SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  。
    ///</param>
    ///  <param name="selectConnection"><see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  表示的连接。
    ///</param>
    {class} function init(selectCommandText: string; selectConnection: DNOleDbConnection): DNOleDbDataAdapter; overload;

  end;

  ///<summary>
  ///  表示用于填充 <see cref="T:System.Data.DataSet" />
  ///  和更新数据源的一组数据命令和一个数据库连接。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbDataAdapter')]
  DNOleDbDataAdapter = interface(DNDbDataAdapter)
  ['{01C0E727-85AB-3B18-9A25-85648F0DB50C}']
  { getters & setters } 

    function get_DeleteCommand: DNOleDbCommand;
    procedure set_DeleteCommand(value: DNOleDbCommand);
    function get_InsertCommand: DNOleDbCommand;
    procedure set_InsertCommand(value: DNOleDbCommand);
    function get_SelectCommand: DNOleDbCommand;
    procedure set_SelectCommand(value: DNOleDbCommand);
    function get_UpdateCommand: DNOleDbCommand;
    procedure set_UpdateCommand(value: DNOleDbCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_RowUpdated(value: DNOleDbRowUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNOleDbRowUpdatedEventHandler);
    procedure add_RowUpdating(value: DNOleDbRowUpdatingEventHandler);
    procedure remove_RowUpdating(value: DNOleDbRowUpdatingEventHandler);
    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataTable" />
    ///  以与 ADO 中的匹配 <see langword="Recordset" />
    ///  或 <see langword="Record" />
    ///  对象使用指定 <see cref="T:System.Data.DataTable" />
    ///  和 ADO 对象。
    ///</summary>
    ///  <param name="dataTable">
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  要用记录填充以及它是必需的如果架构。
    ///</param>
    ///  <param name="ADODBRecordSet">
    ///  ADO <see langword="Recordset" />
    ///  或 <see langword="Record" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  行数已成功刷新到 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataTable: DNDataTable; ADODBRecordSet: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  以与 ADO 中的匹配 <see langword="Recordset" />
    ///  或 <see langword="Record" />
    ///  对象使用指定 <see cref="T:System.Data.DataSet" />
    ///  , ，ADO 对象和源表名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充以及它是必需的如果架构。
    ///</param>
    ///  <param name="ADODBRecordSet">
    ///  ADO <see langword="Recordset" />
    ///  或 <see langword="Record" />
    ///  对象。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataSet: DNDataSet; ADODBRecordSet: DDN.mscorlib.DNObject; srcTable: string): Int32; overload;
    ///<summary>
    ///  根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置指定 <see cref="T:System.Data.DataTable" />
    ///  的架构。
    ///</summary>
    ///  <param name="dataTable">
    ///  要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含从数据源返回的架构信息。
    ///</returns>
    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    ///<summary>
    ///  将名为“Table”的 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  ，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    ///<summary>
    ///  将 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  中，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  找不到从中获取架构的源表。
    ///</exception>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///  - 或 -
    ///  连接无效。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  找不到该连接。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="startRecord" />
    ///  参数小于 0。
    ///  - 或 -
    ///  <paramref name="maxRecords" />
    ///  参数小于 0。
    ///</exception>
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataTable">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  用于表映射。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataTable" />
    ///  以匹配所指定的记录从开始，并检索由指定的最大记录数的数据源中。
    ///</summary>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="dataTables"><see cref="T:System.Data.DataTable" />
    ///  要从数据源填充对象。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  此值不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    ///<summary>
    ///  获取在执行 SQL SELECT 语句时由用户设置的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.IDataParameter" />
    ///  由用户来设置包含的参数的对象。
    ///</returns>
    function GetFillParameters: TArray<DNIDataParameter>;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了行中指定的数组中执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataRows">
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  用于更新数据源的对象。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除行中的更新数据库中的值<see cref="T:System.Data.DataSet" />
    ///  具有指定<see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要用于更新数据源。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  已成功从更新的行数<see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  源表无效。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置的 SQL 语句或存储的过程用于从数据集中删除记录。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  尝试删除对应的数据源中的记录已删除的行中的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DeleteCommand: DNOleDbCommand read get_DeleteCommand write set_DeleteCommand;
    ///<summary>
    ///  获取或设置 SQL 语句或用于将新记录插入数据源的存储过程。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  过程中使用<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  对应中新行的数据源中插入记录<see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property InsertCommand: DNOleDbCommand read get_InsertCommand write set_InsertCommand;
    ///<summary>
    ///  获取或设置的 SQL 语句或存储的过程用于在数据源中选择记录。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
    ///  从放置中的数据源选择记录 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property SelectCommand: DNOleDbCommand read get_SelectCommand write set_SelectCommand;
    ///<summary>
    ///  获取或设置 SQL 语句或用于在数据源中更新记录的存储过程。
    ///</summary>
    ///<returns>
    ///  在 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  期间用于在对应于 <see cref="T:System.Data.DataSet" />
    ///  中的修改行的数据源中更新记录的 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  。
    ///</returns>
    property UpdateCommand: DNOleDbCommand read get_UpdateCommand write set_UpdateCommand;
    ///<summary>
    ///  获取或设置一个值，启用或禁用批处理支持，并指定可以在一个批次中执行的命令数。
    ///</summary>
    ///<returns>
    ///  要处理的每批行数。
    ///  值是
    ///  效果
    ///  0
    ///  批大小没有限制。
    ///  1
    ///  禁用批量更新。
    ///  &gt; 1
    ///  使用多批发送更改 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
    ///  一次的操作。
    ///  当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  必须具有其 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" />
    ///  属性设置为 无 或 输出参数。
    ///  否则将引发异常。
    ///</returns>
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbDataAdapter = class(TDNGenericImport<DNOleDbDataAdapterClass, DNOleDbDataAdapter>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDataAdapterClass = interface(DNDbDataAdapterClass)
  ['{C63B489B-515B-5A38-A872-42B4EF5882DA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  类与指定 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  作为 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
    ///  属性。
    ///</summary>
    ///  <param name="selectCommand">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  ，TRANSACT-SQL SELECT 语句或存储的过程并被设置为 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  。
    ///</param>
    {class} function init(selectCommand: DNSqlCommand): DNSqlDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  类 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
    ///  和连接字符串。
    ///</summary>
    ///  <param name="selectCommandText">
    ///  一个 <see cref="T:System.String" />
    ///  即 TRANSACT-SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  。
    ///</param>
    ///  <param name="selectConnectionString">
    ///  连接字符串。
    ///  如果您的连接字符串未使用 <see langword="Integrated Security = true" />
    ///  , ，您可以使用 <see cref="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)" />
    ///  和 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  相比，通过更安全地传递用户 ID 和密码作为连接字符串中的文本中指定的用户 ID 和密码。
    ///</param>
    {class} function init(selectCommandText: string; selectConnectionString: string): DNSqlDataAdapter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  类 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
    ///  和 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  对象。
    ///</summary>
    ///  <param name="selectCommandText">
    ///  一个 <see cref="T:System.String" />
    ///  即 TRANSACT-SQL SELECT 语句或存储的过程以通过使用 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
    ///  属性 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  。
    ///</param>
    ///  <param name="selectConnection">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  表示的连接。
    ///  如果连接字符串不使用 <see langword="Integrated Security = true" />
    ///  ，则可以使用 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  来传递用户 ID 和密码，这比将用户 ID 和密码指定为连接字符串中的文本更安全。
    ///</param>
    {class} function init(selectCommandText: string; selectConnection: DNSqlConnection): DNSqlDataAdapter; overload;

  end;

  ///<summary>
  ///  表示用于填充 <see cref="T:System.Data.DataSet" />
  ///  和更新 SQL Server 数据库的一组数据命令和一个数据库连接。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlDataAdapter')]
  DNSqlDataAdapter = interface(DNDbDataAdapter)
  ['{27A46983-6FE5-3792-9ABA-2BBA046C6F7B}']
  { getters & setters } 

    function get_DeleteCommand: DNSqlCommand;
    procedure set_DeleteCommand(value: DNSqlCommand);
    function get_InsertCommand: DNSqlCommand;
    procedure set_InsertCommand(value: DNSqlCommand);
    function get_SelectCommand: DNSqlCommand;
    procedure set_SelectCommand(value: DNSqlCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_UpdateCommand: DNSqlCommand;
    procedure set_UpdateCommand(value: DNSqlCommand);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_RowUpdated(value: DNSqlRowUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNSqlRowUpdatedEventHandler);
    procedure add_RowUpdating(value: DNSqlRowUpdatingEventHandler);
    procedure remove_RowUpdating(value: DNSqlRowUpdatingEventHandler);
    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置指定 <see cref="T:System.Data.DataTable" />
    ///  的架构。
    ///</summary>
    ///  <param name="dataTable">
    ///  要用数据源中的架构填充的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  ，其中包含从数据源返回的架构信息。
    ///</returns>
    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    ///<summary>
    ///  将名为“Table”的 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  ，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    ///<summary>
    ///  将 <see cref="T:System.Data.DataTable" />
    ///  添加到指定的 <see cref="T:System.Data.DataSet" />
    ///  中，并根据指定的 <see cref="T:System.Data.SchemaType" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  配置架构以匹配数据源中的架构。
    ///</summary>
    ///  <param name="dataSet">
    ///  要插入架构的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</param>
    ///  <param name="schemaType"><see cref="T:System.Data.SchemaType" />
    ///  值之一，指定如何插入架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  一个引用，指向添加到 <see cref="T:System.Data.DataSet" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  对象的集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  找不到从中获取架构的源表。
    ///</exception>
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataSet" />
    ///  和 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet">
    ///  一个 <see cref="T:System.Data.DataSet" />
    ///  要用记录填充并且如有必要，架构。
    ///</param>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///  - 或 -
    ///  连接无效。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  找不到该连接。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="startRecord" />
    ///  参数小于 0。
    ///  - 或 -
    ///  <paramref name="maxRecords" />
    ///  参数小于 0。
    ///</exception>
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    ///<summary>
    ///  添加或刷新指定范围中的行 <see cref="T:System.Data.DataSet" />
    ///  以匹配中使用数据源的那些 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataTable">
    ///  名称 <see cref="T:System.Data.DataTable" />
    ///  用于表映射。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataSet" />
    ///  。
    ///  这不包括不返回行的语句影响的行。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception>
    function Fill(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  添加或刷新中行 <see cref="T:System.Data.DataTable" />
    ///  以匹配所指定的记录从开始，并检索由指定的最大记录数的数据源中。
    ///</summary>
    ///  <param name="startRecord">
    ///  要以开头的从零开始记录数。
    ///</param>
    ///  <param name="maxRecords">
    ///  要检索的记录中最大的数。
    ///</param>
    ///  <param name="dataTables"><see cref="T:System.Data.DataTable" />
    ///  要从数据源填充对象。
    ///</param>
    ///<returns>
    ///  行数已成功添加到或在刷新 <see cref="T:System.Data.DataTable" />
    ///  。
    ///  此值不包括不返回行的语句影响的行。
    ///</returns>
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    ///<summary>
    ///  获取在执行 SQL SELECT 语句时由用户设置的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Data.IDataParameter" />
    ///  由用户来设置包含的参数的对象。
    ///</returns>
    function GetFillParameters: TArray<DNIDataParameter>;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了行中指定的数组中执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///  <param name="dataRows">
    ///  一个数组 <see cref="T:System.Data.DataRow" />
    ///  用于更新数据源的对象。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    ///<summary>
    ///  通过为每个插入、 更新或删除了在指定的行执行相应的 INSERT、 UPDATE 或 DELETE 语句来更新数据库中的值 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  用于更新数据源。
    ///</param>
    ///<returns>
    ///  从已成功更新的行数 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  此源表是无效的。
    ///</exception><exception cref="T:System.SystemException">
    ///  否 <see cref="T:System.Data.DataRow" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataTable" />
    ///  存在更新。
    ///  - 或 -
    ///  否 <see cref="T:System.Data.DataSet" />
    ///  存在是为了用作源。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataTable: DNDataTable): Int32; overload;
    ///<summary>
    ///  通过执行相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除行中的更新数据库中的值<see cref="T:System.Data.DataSet" />
    ///  具有指定<see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要用于更新数据源。
    ///</param>
    ///  <param name="srcTable">
    ///  用于表映射的源表的名称。
    ///</param>
    ///<returns>
    ///  已成功从更新的行数<see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />
    ///  无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  源表无效。
    ///</exception><exception cref="T:System.Data.DBConcurrencyException">
    ///  尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。
    ///</exception>
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 TRANSACT-SQL 语句或存储的过程来从数据集中删除记录。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  删除对应于数据库中的记录已删除的行中的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DeleteCommand: DNSqlCommand read get_DeleteCommand write set_DeleteCommand;
    ///<summary>
    ///  获取或设置 TRANSACT-SQL 语句或存储的过程以将新记录插入到数据源。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  将记录插入数据库中的新行与对应 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property InsertCommand: DNSqlCommand read get_InsertCommand write set_InsertCommand;
    ///<summary>
    ///  获取或设置 TRANSACT-SQL 语句或存储的过程用于在数据源中选择记录。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
    ///  从以便放入数据库中选择记录 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property SelectCommand: DNSqlCommand read get_SelectCommand write set_SelectCommand;
    ///<summary>
    ///  获取或设置在每个往返中进行处理的行数，到服务器。
    ///</summary>
    ///<returns>
    ///  要处理每个批的行数。
    ///  值是
    ///  效果
    ///  0
    ///  批大小没有限制...
    ///  1
    ///  禁用批量更新。
    ///  &gt;1
    ///  使用多批发送更改 <see cref="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize" />
    ///  一次的操作。
    ///  当将此值设置为 1 以外的值，与关联的所有命令 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  必须具有其 UpdatedRowSource 属性设置为 <see langword="None" />
    ///  或 <see langword="OutputParameters" />
    ///  。
    ///  否则引发异常。
    ///</returns>
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    ///<summary>
    ///  获取或设置 TRANSACT-SQL 语句或存储的过程用于更新数据源中的记录。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  过程中使用 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
    ///  更新对应于数据库中的记录已修改的行中的 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property UpdateCommand: DNSqlCommand read get_UpdateCommand write set_UpdateCommand;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlDataAdapter = class(TDNGenericImport<DNSqlDataAdapterClass, DNSqlDataAdapter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandClass = interface(DNObjectClass)
  ['{E455D831-9C37-5B53-9804-FD467C53D206}']
  end;

  ///<summary>
  ///  表示要对数据源执行的 SQL 语句或存储过程。
  ///  提供表示命令的数据库特定类的基类。
  ///<see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />
  ///</summary>
  [DNTypeName('System.Data.Common.DbCommand')]
  DNDbCommand = interface(DNObject)
  ['{00E5A1B0-8B83-3CF0-B5EC-EE6EDC19D2D2}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNDbConnection;
    procedure set_Connection(value: DNDbConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNDbParameterCollection;
    function get_Transaction: DNDbTransaction;
    procedure set_Transaction(value: DNDbTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  尝试取消执行 <see cref="T:System.Data.Common.DbCommand" />
    ///  。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  创建 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的新实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///</returns>
    function CreateParameter: DNDbParameter;
    ///<summary>
    ///  执行 SQL 语句对连接对象。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  , ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader: DNDbDataReader; overload;
    ///<summary>
    ///  执行 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  , ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  使用一种 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader(behavior: DNCommandBehavior): DNDbDataReader; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  , ，它在执行 SQL 语句对连接对象。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 被忽略的取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
    ///  引发的异常 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  将向您提供通过返回的任务异常属性。
    ///  不调用其他方法和属性的 <see langword="DbCommand" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  此方法传播有关应取消操作的通知。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  , ，其执行查询并返回第一行的第一列中由查询返回的结果集。
    ///  忽略所有其他列和行。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 被忽略的取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
    ///  通过返回的任务异常属性，将向由 ExecuteScalar 引发的异常。
    ///  不调用其他方法和属性的 <see langword="DbCommand" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  执行查询并返回第一行的第一列中由查询返回的结果集。
    ///  忽略所有其他列和行。
    ///</summary>
    ///<returns>
    ///  在结果中的第一行的第一列设置。
    ///</returns>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  在数据源上创建命令的已准备好 （或已编译） 版本。
    ///</summary>
    procedure Prepare;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置要对数据源运行的文本命令。
    ///</summary>
    ///<returns>
    ///  要执行的文本命令。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  等待命令执行所需的时间（以秒为单位）。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  指示或指定了 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  属性将被解释。
    ///</summary>
    ///<returns><see cref="T:System.Data.CommandType" />
    ///  值之一。
    ///  默认值为 <see langword="Text" />
    ///  。
    ///</returns>
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Data.Common.DbConnection" />
    ///  使用的 <see cref="T:System.Data.Common.DbCommand" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与数据源的连接。
    ///</returns>
    property Connection: DNDbConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在一个自定义的界面控件中可见。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果命令对象应会显示在控件;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///  有关参数的详细信息，请参阅 配置参数和参数数据类型。
    ///</summary>
    ///<returns>
    ///  SQL 语句或存储的过程的参数。
    ///</returns>
    property Parameters: DNDbParameterCollection read get_Parameters;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.DbTransaction" />
    ///  中此 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象执行。
    ///</summary>
    ///<returns>
    ///  在其中事务 <see langword="Command" />
    ///  对象的.NET Framework 数据提供程序执行。
    ///  默认值为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    property Transaction: DNDbTransaction read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置如何将命令结果应用于 <see cref="T:System.Data.DataRow" />
    ///  时使用的 Update 方法 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateRowSource" />
    ///  值之一。
    ///  默认值是 <see langword="Both" />
    ///  如果该命令自动生成。
    ///  默认值为 <see langword="None" />
    ///  。
    ///</returns>
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbCommand = class(TDNGenericImport<DNDbCommandClass, DNDbCommand>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcCommandClass = interface(DNDbCommandClass)
  ['{C7753A3F-5AB4-5698-A387-E49233BBF875}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcCommand; overload;
    ///<summary>
    ///  使用查询的文本初始化 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    {class} function init(cmdText: string): DNOdbcCommand; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  用文本的查询的类和一个 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  对象。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection"><see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  对象，表示与数据源的连接。
    ///</param>
    {class} function init(cmdText: string; connection: DNOdbcConnection): DNOdbcCommand; overload;
    ///<summary>
    ///  使用查询文本、<see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  对象以及 <see cref="P:System.Data.Odbc.OdbcCommand.Transaction" />
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示数据源连接的 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  对象。
    ///</param>
    ///  <param name="transaction"><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  在其中执行的事务。
    ///</param>
    {class} function init(cmdText: string; connection: DNOdbcConnection; transaction: DNOdbcTransaction): DNOdbcCommand; overload;

  end;

  ///<summary>
  ///  表示要对数据源执行的 SQL 语句或存储过程。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcCommand')]
  DNOdbcCommand = interface(DNDbCommand)
  ['{C24C1018-CD7F-3757-97D9-7F825DE347DC}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNOdbcConnection;
    procedure set_Connection(value: DNOdbcConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNOdbcParameterCollection;
    function get_Transaction: DNOdbcTransaction;
    procedure set_Transaction(value: DNOdbcTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  尝试取消执行 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  重置 <see cref="P:System.Data.Odbc.OdbcCommand.CommandTimeout" />
    ///  属性设置为默认值。
    ///</summary>
    procedure ResetCommandTimeout;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象。
    ///</returns>
    function CreateParameter: DNOdbcParameter;
    ///<summary>
    ///  执行 SQL 语句针对 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />
    ///  ，并返回受影响的行数。
    ///</summary>
    ///<returns>
    ///  对于 UPDATE、 INSERT 和 DELETE 语句，返回值是由该命令影响的行数。
    ///  对于所有其他类型的语句，则返回值为-1。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该连接不存在。
    ///  - 或 -
    ///  连接未打开。
    ///</exception>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  将发送 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" />
    ///  到 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />
    ///  并生成 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader: DNOdbcDataReader; overload;
    ///<summary>
    ///  将发送 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" />
    ///  到 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />
    ///  , ，并生成 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  使用一种 <see langword="CommandBehavior" />
    ///  值。
    ///</summary>
    ///  <param name="behavior"><see langword="System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  对象。
    ///</returns>
    function ExecuteReader(behavior: DNCommandBehavior): DNOdbcDataReader; overload;
    ///<summary>
    ///  执行查询，并返回由查询返回的结果集中的第一行的第一列。
    ///  其他列或行将被忽略。
    ///</summary>
    ///<returns>
    ///  在结果中的第一行的第一列设置，或为 null 引用的结果集是否为空。
    ///</returns>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  在数据源上创建准备就绪（或已编译）的命令版本。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  未设置 <see cref="P:System.Data.Odbc.OdbcCommand.Connection" />
    ///  。
    ///  - 或 -
    ///<see cref="P:System.Data.Odbc.OdbcCommand.Connection" />
    ///  不为 <see cref="M:System.Data.Odbc.OdbcConnection.Open" />
    ///  。
    ///</exception>
    procedure Prepare;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  , ，它在执行 SQL 语句对连接对象。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 被忽略的取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
    ///  引发的异常 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  将向您提供通过返回的任务异常属性。
    ///  不调用其他方法和属性的 <see langword="DbCommand" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  此方法传播有关应取消操作的通知。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  , ，其执行查询并返回第一行的第一列中由查询返回的结果集。
    ///  忽略所有其他列和行。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 被忽略的取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
    ///  通过返回的任务异常属性，将向由 ExecuteScalar 引发的异常。
    ///  不调用其他方法和属性的 <see langword="DbCommand" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置要对数据源执行的 SQL 语句或存储过程。
    ///</summary>
    ///<returns>
    ///  要执行的 SQL 语句或存储过程。
    ///  默认值为空字符串 ("")。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  等待命令执行所需的时间（以秒为单位）。
    ///  默认值为 30 秒。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  获取或设置一个值，该值指示如何解释 <see cref="P:System.Data.Odbc.OdbcCommand.CommandText" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Data.CommandType" />
    ///  值之一。
    ///  默认值为 <see langword="Text" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该值不是有效的 <see cref="T:System.Data.CommandType" />
    ///  。
    ///</exception>
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  的此实例使用的 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  到数据源的连接。
    ///  默认值为 null 。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.Odbc.OdbcCommand.Connection" />
    ///  属性在事务执行过程中发生了更改。
    ///</exception>
    property Connection: DNOdbcConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在一个自定义的界面控件中可见。
    ///</summary>
    ///<returns>
    ///  true, ，如果命令对象应在控件中可见; 否则为 false。
    ///  默认值为 true。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  SQL 语句或存储的过程的参数。
    ///  默认值为空集合。
    ///</returns>
    property Parameters: DNOdbcParameterCollection read get_Parameters;
    ///<summary>
    ///  获取或设置要在其中执行 <see cref="T:System.Data.Odbc.OdbcTransaction" />
    ///  的 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcTransaction" />
    ///  。
    ///  默认值为 null 值。
    ///</returns>
    property Transaction: DNOdbcTransaction read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置一个值，指定如何 更新 方法应该应用到的命令结果 DataRow。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateRowSource" />
    ///  值之一。
    ///</returns>
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcCommand = class(TDNGenericImport<DNOdbcCommandClass, DNOdbcCommand>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbCommandClass = interface(DNDbCommandClass)
  ['{3A2CB0B2-4101-5FB1-87AD-B7F8BD8CBEC5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbCommand; overload;
    ///<summary>
    ///  使用查询的文本初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    {class} function init(cmdText: string): DNOleDbCommand; overload;
    ///<summary>
    ///  使用查询的文本和 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到数据源的连接的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</param>
    {class} function init(cmdText: string; connection: DNOleDbConnection): DNOleDbCommand; overload;
    ///<summary>
    ///  使用查询文本、<see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  以及 <see cref="P:System.Data.OleDb.OleDbCommand.Transaction" />
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到数据源的连接的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</param>
    ///  <param name="transaction"><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  在其中执行的事务。
    ///</param>
    {class} function init(cmdText: string; connection: DNOleDbConnection; transaction: DNOleDbTransaction): DNOleDbCommand; overload;

  end;

  ///<summary>
  ///  表示要对数据源执行的 SQL 语句或存储过程。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbCommand')]
  DNOleDbCommand = interface(DNDbCommand)
  ['{8297BC84-C7C9-3FF2-82F8-076658B9225A}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNOleDbConnection;
    procedure set_Connection(value: DNOleDbConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNOleDbParameterCollection;
    function get_Transaction: DNOleDbTransaction;
    procedure set_Transaction(value: DNOleDbTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  重置 <see cref="P:System.Data.OleDb.OleDbCommand.CommandTimeout" />
    ///  属性设置为默认值。
    ///</summary>
    procedure ResetCommandTimeout;
    ///<summary>
    ///  尝试取消执行 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象，它是当前实例的副本。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象，它是此实例的副本。
    ///</returns>
    function Clone: DNOleDbCommand;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象。
    ///</returns>
    function CreateParameter: DNOleDbParameter;
    ///<summary>
    ///  将发送 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" />
    ///  到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  并生成 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteReader: DNOleDbDataReader; overload;
    ///<summary>
    ///  将发送 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" />
    ///  到 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  , ，并生成 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  使用一种 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteReader(behavior: DNCommandBehavior): DNOleDbDataReader; overload;
    ///<summary>
    ///  执行 SQL 语句针对 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  ，并返回受影响的行数。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该连接不存在。
    ///  - 或 -
    ///  连接未打开。
    ///  - 或 -
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  执行查询，并返回由查询返回的结果集中的第一行的第一列。
    ///  其他列或行将被忽略。
    ///</summary>
    ///<returns>
    ///  在结果中的第一行的第一列设置，或为 null 引用的结果集是否为空。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法从最初在其中登记连接上下文执行不同的事务上下文中的命令。
    ///</exception>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  在数据源上创建命令的已准备好 （或已编译） 版本。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  未设置。
    ///  - 或 -
    ///<see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  未打开。
    ///</exception>
    procedure Prepare;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  , ，它在执行 SQL 语句对连接对象。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 被忽略的取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
    ///  引发的异常 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  将向您提供通过返回的任务异常属性。
    ///  不调用其他方法和属性的 <see langword="DbCommand" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  此方法传播有关应取消操作的通知。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />
    ///  , ，该解释器 <see cref="P:System.Data.Common.DbCommand.CommandText" />
    ///  针对 <see cref="P:System.Data.Common.DbCommand.Connection" />
    ///  ，并返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  一个无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  , ，其执行查询并返回第一行的第一列中由查询返回的结果集。
    ///  忽略所有其他列和行。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 被忽略的取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递一个已被取消的取消标记，则默认实现将返回已取消的任务。
    ///  通过返回的任务异常属性，将向由 ExecuteScalar 引发的异常。
    ///  不调用其他方法和属性的 <see langword="DbCommand" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  要监视取消请求的标记。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 SQL 语句或存储的过程以在数据源中执行。
    ///</summary>
    ///<returns>
    ///  SQL 语句或执行存储的过程。
    ///  默认值为一个空字符串。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  时间 （以秒为单位） 以等待要执行的命令。
    ///  默认值为 30 秒。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  获取或设置一个值，指示如何 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" />
    ///  属性将被解释。
    ///</summary>
    ///<returns><see cref="P:System.Data.OleDb.OleDbCommand.CommandType" />
    ///  值之一。
    ///  默认值为 Text。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值不是有效 <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" />
    ///  。
    ///</exception>
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  的此实例使用的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  到数据源的连接。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.OleDb.OleDbCommand.Connection" />
    ///  属性在事务执行过程中发生了更改。
    ///</exception>
    property Connection: DNOleDbConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在自定义 Windows 窗体设计器控件中可见。
    ///</summary>
    ///<returns>
    ///  一个指示命令对象在控件中是否应该可见的值。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    ///<summary>
    ///  获取 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  SQL 语句或存储的过程的参数。
    ///  默认值为空集合。
    ///</returns>
    property Parameters: DNOleDbParameterCollection read get_Parameters;
    ///<summary>
    ///  获取或设置要在其中执行 <see cref="T:System.Data.OleDb.OleDbTransaction" />
    ///  的 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbTransaction" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Transaction: DNOleDbTransaction read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置如何将命令结果应用于 <see cref="T:System.Data.DataRow" />
    ///  时使用的 <see langword="Update" />
    ///  方法 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateRowSource" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  输入的值不是之一 <see cref="T:System.Data.UpdateRowSource" />
    ///  值。
    ///</exception>
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbCommand = class(TDNGenericImport<DNOleDbCommandClass, DNOleDbCommand>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCommandClass = interface(DNDbCommandClass)
  ['{CC985FF6-C9B0-52BF-902E-E57FAEBF1EAC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlCommand; overload;
    ///<summary>
    ///  使用查询的文本初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    {class} function init(cmdText: string): DNSqlCommand; overload;
    ///<summary>
    ///  使用查询的文本和 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    {class} function init(cmdText: string; connection: DNSqlConnection): DNSqlCommand; overload;
    ///<summary>
    ///  使用查询文本、<see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  以及 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    ///  <param name="transaction">
    ///  其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  。
    ///</param>
    {class} function init(cmdText: string; connection: DNSqlConnection; transaction: DNSqlTransaction): DNSqlCommand; overload;
    ///<summary>
    ///  使用指定的命令文本、连接、事务和加密设置初始化 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cmdText">
    ///  查询的文本。
    ///</param>
    ///  <param name="connection">
    ///  表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    ///  <param name="transaction">
    ///  其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  。
    ///</param>
    ///  <param name="columnEncryptionSetting">
    ///  加密设置。
    ///  有关详细信息，请参阅 Always Encrypted。
    ///</param>
    {class} function init(cmdText: string; connection: DNSqlConnection; transaction: DNSqlTransaction; columnEncryptionSetting: DNSqlCommandColumnEncryptionSetting): DNSqlCommand; overload;

  end;

  ///<summary>
  ///  表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlCommand')]
  DNSqlCommand = interface(DNDbCommand)
  ['{227D56B1-F0A1-3A78-BCE9-3C145295413D}']
  { getters & setters } 

    function get_Connection: DNSqlConnection;
    procedure set_Connection(value: DNSqlConnection);
    function get_NotificationAutoEnlist: Boolean;
    procedure set_NotificationAutoEnlist(value: Boolean);
    function get_Notification: DNSqlNotificationRequest;
    procedure set_Notification(value: DNSqlNotificationRequest);
    function get_Transaction: DNSqlTransaction;
    procedure set_Transaction(value: DNSqlTransaction);
    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_ColumnEncryptionSetting: DNSqlCommandColumnEncryptionSetting;
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNSqlParameterCollection;
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_StatementCompleted(value: DNStatementCompletedEventHandler);
    procedure remove_StatementCompleted(value: DNStatementCompletedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
    ///  属性重置为其默认值。
    ///</summary>
    procedure ResetCommandTimeout;
    ///<summary>
    ///  在 SQL Server 的实例上创建命令的一个准备版本。
    ///</summary>
    procedure Prepare;
    ///<summary>
    ///  尝试取消 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的执行。
    ///</summary>
    procedure Cancel;
    ///<summary>
    ///  创建 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象的新实例。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</returns>
    function CreateParameter: DNSqlParameter;
    ///<summary>
    ///  执行查询，并返回由查询返回的结果集中的第一行的第一列。
    ///  其他列或行将被忽略。
    ///</summary>
    ///<returns>
    ///  为结果集中的第一行的第一列，或者，如果结果集为空，则为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///  返回的最大字符数为 2033 个字符。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteScalar: DDN.mscorlib.DNObject;
    ///<summary>
    ///  对连接执行 Transact-SQL 语句并返回受影响的行数。
    ///</summary>
    ///<returns>
    ///  受影响的行数。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteNonQuery: Int32;
    ///<summary>
    ///  启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行。
    ///</summary>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteNonQuery: DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用可返回受影响的行数的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteNonQuery(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  完成 Transact-SQL 语句的异步执行。
    ///</summary>
    ///  <param name="asyncResult">
    ///  通过调用 <see cref="T:System.IAsyncResult" />
    ///  返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  。
    ///</param>
    ///<returns>
    ///  受影响的行数（与 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
    ///  相同的行为）。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  ，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
    ///  调用的执行。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException"><see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
    ///  中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  指定的异步操作不完整。
    ///  在某些情况下，<see cref="T:System.IAsyncResult" />
    ///  可能不正确地设置为 <see langword="IsCompleted" />
    ///  。
    ///  如果发生这种情况并且调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
    ///  ，则 EndExecuteNonQuery 可能引发 SqlException 错误（如果 <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
    ///  中指定的时间已过，并且使用 <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  指定的异步操作不完整）。
    ///  若要更正这种情况，应增加 CommandTimeout 的值或减少正由异步操作完成的工作。
    ///</exception>
    function EndExecuteNonQuery(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteXmlReader: DDN.System.Xml.DNXmlReader;
    ///<summary>
    ///  启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" />
    ///  对象返回。
    ///</summary>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用会返回单个 XML 值的 <see langword="EndExecuteXmlReader" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteXmlReader: DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  通过使用回调过程，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并将结果作为 <see cref="T:System.Xml.XmlReader" />
    ///  对象返回。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
    ///  时，也需要该值，用于将命令的结果作为 XML 返回。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteXmlReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  完成 Transact-SQL 语句的异步执行，从而将请求的数据以 XML 形式返回。
    ///</summary>
    ///  <param name="asyncResult">
    ///  通过调用 <see cref="T:System.IAsyncResult" />
    ///  返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  可用于获取生成的 XML 数据的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
    ///  ，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
    ///  以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
    ///  调用的执行。
    ///</exception>
    function EndExecuteXmlReader(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.System.Xml.DNXmlReader;
    ///<summary>
    ///  启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。
    ///</summary>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；在调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  时，也需要该值。该调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteReader: DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  在给定回调过程和状态信息的情况下，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行，并从服务器中检索一个或多个结果集。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用会返回可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  对锁定的行执行命令时出现异常。
    ///  当使用 Microsoft .NET Framework 1.0 版时不生成此异常。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接的当前状态已关闭。
    ///<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
    ///  需要打开 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReader: DNSqlDataReader; overload;
    ///<summary>
    ///  将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并使用 <see cref="T:System.Data.CommandBehavior" />
    ///  值之一生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReader(behavior: DNCommandBehavior): DNSqlDataReader; overload;
    ///<summary>
    ///  通过使用 <see cref="T:System.Data.CommandBehavior" />
    ///  值之一，启动此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行。
    ///</summary>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一，指示用于语句执行和数据检索的选项。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；当调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例的 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  时，也需要该值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteReader(behavior: DNCommandBehavior): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  在给定回调过程和状态信息的情况下，通过使用 <see langword="CommandBehavior" />
    ///  值之一并从服务器中检索一个或多个结果集，启动由此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  描述的 Transact-SQL 语句或存储过程的异步执行。
    ///</summary>
    ///  <param name="callback">
    ///  命令执行完成时调用的 <see cref="T:System.AsyncCallback" />
    ///  委托。
    ///  传递 <see langword="null" />
    ///  （在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）以指示不需要回调。
    ///</param>
    ///  <param name="stateObject">
    ///  传递到回调过程的用户定义的状态对象。
    ///  使用 <see cref="P:System.IAsyncResult.AsyncState" />
    ///  属性从回调过程内检索此对象。
    ///</param>
    ///  <param name="behavior"><see cref="T:System.Data.CommandBehavior" />
    ///  值之一，指示用于语句执行和数据检索的选项。
    ///</param>
    ///<returns>
    ///  可用于轮询和/或等待结果的 <see cref="T:System.IAsyncResult" />
    ///  ；在调用 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  时，也需要该值。该调用会返回一个可用于检索返回行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时出现的任何错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  名称/值对“Asynchronous Processing=true”未包含在为此 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  定义连接的连接字符串中。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function BeginExecuteReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject; behavior: DNCommandBehavior): DDN.mscorlib.DNIAsyncResult; overload;
    ///<summary>
    ///  完成 Transact-SQL 语句的异步执行，从而返回请求的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///  <param name="asyncResult">
    ///  通过调用 <see cref="T:System.IAsyncResult" />
    ///  返回的 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  可用于检索请求行的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="asyncResult" />
    ///  参数为 null（在 Microsoft Visual Basic 中为 <see langword="Nothing" />
    ///  ）
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不止一次为单个命令执行调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  ，或该方法不匹配其执行方法（例如，代码调用了 <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
    ///  以完成对 <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
    ///  调用的执行。
    ///</exception>
    function EndExecuteReader(asyncResult: DDN.mscorlib.DNIAsyncResult): DNSqlDataReader;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
    ///  的异步版本，它对连接执行 Transact-SQL 语句并返回受影响的行数。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
    ///  的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />
    ///  的异步版本，用于将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="behavior">
    ///  语句执行和数据检索的选项。
    ///  当设置为 <see langword="Default" />
    ///  时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  将在返回完整任务前读取整行。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
    ///  的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />
    ///  的异步版本，它可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="behavior">
    ///  语句执行和数据检索的选项。
    ///  当设置为 <see langword="Default" />
    ///  时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  将在返回完整任务前读取整行。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  无效的 <see cref="T:System.Data.CommandBehavior" />
    ///  值。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />
    ///  的异步版本，该版本异步执行查询，并返回由查询返回的结果集中的第一行的第一列。
    ///  其他列或行将被忽略。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
    ///  的异步版本，可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteXmlReaderAsync: DDN.mscorlib.DNTask<DDN.System.Xml.DNXmlReader>; overload;
    ///<summary><see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
    ///  的异步版本，可以将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  ，并生成 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.Stream" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Binary 或 VarBinary。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.IO.TextReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Char、NChar、NVarChar、VarChar 或 Xml。
    ///  将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  设置为 <see cref="T:System.Xml.XmlReader" />
    ///  时，使用的是 <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" />
    ///  而不是 Xml。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  流式处理操作期间关闭或删除了 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///  流式处理操作期间发生了超时。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  流式处理操作期间在 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象中出现了错误。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  流式处理操作期间关闭了 <see cref="T:System.IO.Stream" />
    ///  、<see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///  有关流式处理的详细信息，请参阅 SqlClient 流支持。
    ///</exception>
    function ExecuteXmlReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.System.Xml.DNXmlReader>; overload;
    ///<summary>
    ///  创建属于当前实例的副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  属于此实例副本的新 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</returns>
    function Clone: DNSqlCommand;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />
    ///  , ，它在执行 SQL 语句对连接对象。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />
    ///  , ，其执行查询并返回第一行的第一列中由查询返回的结果集。
    ///  忽略所有其他列和行。
    ///  调用 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  的此实例使用的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  到数据源的连接。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  命令在事务中登记时 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />
    ///  属性被更改。
    ///</exception>
    property Connection: DNSqlConnection read get_Connection write set_Connection;
    ///<summary>
    ///  获取或设置一个值，该值指示应用程序是否应自动接收来自通用 <see cref="T:System.Data.SqlClient.SqlDependency" />
    ///  对象的查询通知。
    ///</summary>
    ///<returns>
    ///  如果应用程序应自动接收查询通知，则为 true；否则为 false。
    ///  默认值为 true。
    ///</returns>
    property NotificationAutoEnlist: Boolean read get_NotificationAutoEnlist write set_NotificationAutoEnlist;
    ///<summary>
    ///  获取或设置一个指定绑定到此命令的 <see cref="T:System.Data.Sql.SqlNotificationRequest" />
    ///  对象的值。
    ///</summary>
    ///<returns>
    ///  如果设置为 null（默认值），则不应请求任何通知。
    ///</returns>
    property Notification: DNSqlNotificationRequest read get_Notification write set_Notification;
    ///<summary>
    ///  获取或设置要在其中执行 <see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlTransaction" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Transaction: DNSqlTransaction read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置要在数据源中执行的 Transact-SQL 语句、表名或存储过程。
    ///</summary>
    ///<returns>
    ///  要执行的 Transact-SQL 语句或存储过程。
    ///  默认值为一个空字符串。
    ///</returns>
    property CommandText: string read get_CommandText write set_CommandText;
    ///<summary>
    ///  获取或设置此命令的列加密设置。
    ///</summary>
    ///<returns>
    ///  此命令的列加密设置。
    ///</returns>
    property ColumnEncryptionSetting: DNSqlCommandColumnEncryptionSetting read get_ColumnEncryptionSetting;
    ///<summary>
    ///  获取或设置在终止尝试执行命令并生成错误之前的等待时间。
    ///</summary>
    ///<returns>
    ///  等待命令执行所需的时间（以秒为单位）。
    ///  默认值为 30 秒。
    ///</returns>
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    ///<summary>
    ///  获取或设置一个值，该值指示解释 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
    ///  属性的方式。
    ///</summary>
    ///<returns><see cref="T:System.Data.CommandType" />
    ///  值之一。
    ///  默认值为 <see langword="Text" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该值不是有效的 <see cref="T:System.Data.CommandType" />
    ///  。
    ///</exception>
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    ///<summary>
    ///  获取或设置一个值，该值指示命令对象是否应在 Windows 窗体设计器控件中可见。
    ///</summary>
    ///<returns>
    ///  一个指示命令对象是否应在控件中可见的值。
    ///  默认值为 true。
    ///</returns>
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  Transact-SQL 语句或存储过程的参数。
    ///  默认值为空集合。
    ///</returns>
    property Parameters: DNSqlParameterCollection read get_Parameters;
    ///<summary>
    ///  获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  的 Update  方法使用时应用于 <see cref="T:System.Data.DataRow" />
    ///  的方式。
    ///</summary>
    ///<returns><see cref="T:System.Data.UpdateRowSource" />
    ///  值之一。
    ///</returns>
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlCommand = class(TDNGenericImport<DNSqlCommandClass, DNSqlCommand>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandBuilderClass = interface(DNObjectClass)
  ['{1CC1E454-A9F1-5AA6-8C86-8B46BD7F387B}']
  end;

  ///<summary>
  ///  自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" />
  ///  与关联的数据库。
  ///  这是一个抽象类，只能被继承。
  ///</summary>
  [DNTypeName('System.Data.Common.DbCommandBuilder')]
  DNDbCommandBuilder = interface(DNObject)
  ['{E3ED7AF0-DF9B-31CB-BBF1-0752C94F7459}']
  { getters & setters } 

    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_DataAdapter: DNDbDataAdapter;
    procedure set_DataAdapter(value: DNDbDataAdapter);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  清除与此相关的命令 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    procedure RefreshSchema;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  需要执行插入操作的数据源对象。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand: DNDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行插入操作在数据源，可以选择使用列作为参数名。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，生成与列名称，如有可能匹配的参数名。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需的数据源执行更新。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand: DNDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需数据源，可以选择使用列作为参数名在执行更新。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，生成与列名称，如有可能匹配的参数名。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行删除操作在数据源。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand: DNDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行删除操作在数据源，可以选择使用列作为参数名。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，生成与列名称，如有可能匹配的参数名。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    ///<summary>
    ///  给定在正确的目录的情况下不带引号的标识符，将返回正确带引号的该标识符，包括正确转义任何在标识符中嵌入的引号的形式。
    ///</summary>
    ///  <param name="unquotedIdentifier">
    ///  原始的不带引号的标识符。
    ///</param>
    ///<returns>
    ///  带引号的标识符版本。
    ///  适当地转义标识符中嵌入的引号。
    ///</returns>
    function QuoteIdentifier(unquotedIdentifier: string): string;
    ///<summary>
    ///  给定带引号的标识符，将返回该标识符，包括正确取消转义的正确不带引号的形式嵌入的任何引号标识符中。
    ///</summary>
    ///  <param name="quotedIdentifier">
    ///  将删除其嵌入的引号的标识符。
    ///</param>
    ///<returns>
    ///  不带引号的标识符，其嵌入的引号正确取消转义。
    ///</returns>
    function UnquoteIdentifier(quotedIdentifier: string): string;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指定使用哪些 <see cref="T:System.Data.ConflictOption" />
    ///  是要使用 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回的一个 <see cref="T:System.Data.ConflictOption" />
    ///  描述此行为值 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  实例 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  对象。
    ///</returns>
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    ///<summary>
    ///  设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</returns>
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  对于的 TRANSACT-SQL 语句会自动生成的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataAdapter" />
    ///  对象。
    ///</returns>
    property DataAdapter: DNDbDataAdapter read get_DataAdapter write set_DataAdapter;
    ///<summary>
    ///  获取或设置的起始字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
    ///</summary>
    ///<returns>
    ///  开头字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  生成 insert、 update 或 delete 命令后，不能更改此属性。
    ///</exception>
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    ///<summary>
    ///  获取或设置结束字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
    ///</summary>
    ///<returns>
    ///  结束字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    ///<summary>
    ///  获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。
    ///</summary>
    ///<returns>
    ///  要用作架构分隔符的字符。
    ///</returns>
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    ///<summary>
    ///  指定是否在 update 语句中所有列的值都是包含还是仅更改的列值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果由生成的 UPDATE 语句 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  要包括所有列; <see langword="false" />
    ///  如果它都包含仅更改了列。
    ///</returns>
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbCommandBuilder = class(TDNGenericImport<DNDbCommandBuilderClass, DNDbCommandBuilder>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcCommandBuilderClass = interface(DNDbCommandBuilderClass)
  ['{EE20785E-84E4-5F70-8C13-7ACA63D3CAD0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcCommandBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />
    ///  使用关联的类 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  对象。
    ///</summary>
    ///  <param name="adapter"><see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  要与此关联对象 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />
    ///  。
    ///</param>
    {class} function init(adapter: DNOdbcDataAdapter): DNOdbcCommandBuilder; overload;

  { static methods } 

    ///<summary>
    ///  从在指定的存储过程中检索参数信息 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  并填充 <see cref="P:System.Data.Odbc.OdbcCommand.Parameters" />
    ///  的指定集合 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象。
    ///</summary>
    ///  <param name="command"><see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  引用存储的过程将为派生参数信息。
    ///  派生的参数添加到 <see cref="P:System.Data.Odbc.OdbcCommand.Parameters" />
    ///  集合 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  基础 ODBC 驱动程序不支持返回存储的过程参数信息，或命令文本不是有效的存储的过程名称，或 <see cref="T:System.Data.CommandType" />
    ///  指定未 <see langword="CommandType.StoredProcedure" />
    ///  。
    ///</exception>
    {class} procedure DeriveParameters(command: DNOdbcCommand);

  end;

  ///<summary>
  ///  自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" />
  ///  对关联的数据源。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcCommandBuilder')]
  DNOdbcCommandBuilder = interface(DNDbCommandBuilder)
  ['{B3070EF9-1EB5-3D69-A515-4BC58D761A8C}']
  { getters & setters } 

    function get_DataAdapter: DNOdbcDataAdapter;
    procedure set_DataAdapter(value: DNOdbcDataAdapter);
    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。
    ///  这包括正确转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="unquotedIdentifier">
    ///  原始的不带引号的标识符。
    ///</param>
    ///<returns>
    ///  带引号的标识符版本。
    ///  正确转义标识符中嵌入的引号。
    ///</returns>
    function QuoteIdentifier(unquotedIdentifier: string): string; overload;
    ///<summary>
    ///  该标识符，包括正确的正确不带引号的形式提供了带引号的标识符返回未转义标识符中任何嵌入的引号。
    ///</summary>
    ///  <param name="quotedIdentifier">
    ///  将删除其嵌入的引号的标识符。
    ///</param>
    ///<returns>
    ///  不带引号的标识符，其嵌入的引号正确进行非转义。
    ///</returns>
    function UnquoteIdentifier(quotedIdentifier: string): string; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  需要执行插入操作的数据源对象。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand: DNOdbcCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  需要执行插入操作的数据源对象。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，它是否可以生成与列名称相匹配的参数名称。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNOdbcCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需的数据源执行更新。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand: DNOdbcCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需的数据源执行更新。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，它是否可以生成与列名称相匹配的参数名称。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNOdbcCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行删除操作在数据源。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand: DNOdbcCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行删除操作在数据源。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，它是否可以生成与列名称相匹配的参数名称。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNOdbcCommand; overload;
    ///<summary>
    ///  给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。
    ///  这包括正确转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="unquotedIdentifier">
    ///  原始的不带引号的标识符。
    ///</param>
    ///  <param name="connection">
    ///  当传递连接时，将导致从 ODBC 驱动程序，调用 SQLGetInfo(SQL_IDENTIFIER_QUOTE_CHAR) 获取引号字符的托管的包装。
    ///  当传递时没有连接时，字符串括在引号中的值使用 <see cref="P:System.Data.Common.DbCommandBuilder.QuotePrefix" />
    ///  和 <see cref="P:System.Data.Common.DbCommandBuilder.QuoteSuffix" />
    ///  。
    ///</param>
    ///<returns>
    ///  带引号的标识符版本。
    ///  正确转义标识符中嵌入的引号。
    ///</returns>
    function QuoteIdentifier(unquotedIdentifier: string; connection: DNOdbcConnection): string; overload;
    ///<summary>
    ///  该标识符，包括正确的正确不带引号的形式提供了带引号的标识符返回未转义标识符中任何嵌入的引号。
    ///</summary>
    ///  <param name="quotedIdentifier">
    ///  将删除其嵌入的引号的标识符。
    ///</param>
    ///  <param name="connection"><see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  。
    ///</param>
    ///<returns>
    ///  不带引号的标识符，其嵌入的引号正确进行非转义。
    ///</returns>
    function UnquoteIdentifier(quotedIdentifier: string; connection: DNOdbcConnection): string; overload;
    ///<summary>
    ///  清除与此相关的命令 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    procedure RefreshSchema;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  由此对象 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />
    ///  对象将生成的 SQL 语句。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcDataAdapter" />
    ///  对象，它是与此关联 <see cref="T:System.Data.Odbc.OdbcCommandBuilder" />
    ///  。
    ///</returns>
    property DataAdapter: DNOdbcDataAdapter read get_DataAdapter write set_DataAdapter;
    ///<summary>
    ///  指定使用哪些 <see cref="T:System.Data.ConflictOption" />
    ///  是要使用 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回的一个 <see cref="T:System.Data.ConflictOption" />
    ///  描述此行为值 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  实例 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  对象。
    ///</returns>
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    ///<summary>
    ///  设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</returns>
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    ///<summary>
    ///  获取或设置的起始字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
    ///</summary>
    ///<returns>
    ///  开头字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  生成 insert、 update 或 delete 命令后，不能更改此属性。
    ///</exception>
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    ///<summary>
    ///  获取或设置结束字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
    ///</summary>
    ///<returns>
    ///  结束字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    ///<summary>
    ///  获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。
    ///</summary>
    ///<returns>
    ///  要用作架构分隔符的字符。
    ///</returns>
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    ///<summary>
    ///  指定是否在 update 语句中所有列的值都是包含还是仅更改的列值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果由生成的 UPDATE 语句 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  要包括所有列; <see langword="false" />
    ///  如果它都包含仅更改了列。
    ///</returns>
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcCommandBuilder = class(TDNGenericImport<DNOdbcCommandBuilderClass, DNOdbcCommandBuilder>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbCommandBuilderClass = interface(DNDbCommandBuilderClass)
  ['{8F35996D-C13E-554B-9A52-D54D292B0915}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbCommandBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbCommandBuilder" />
    ///  使用关联的类 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  对象。
    ///</summary>
    ///  <param name="adapter">
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  。
    ///</param>
    {class} function init(adapter: DNOleDbDataAdapter): DNOleDbCommandBuilder; overload;

  { static methods } 

    ///<summary>
    ///  从在指定的存储过程中检索参数信息 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  并填充 <see cref="P:System.Data.OleDb.OleDbCommand.Parameters" />
    ///  的指定集合 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象。
    ///</summary>
    ///  <param name="command"><see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  引用存储的过程将为派生参数信息。
    ///  派生的参数添加到 <see cref="P:System.Data.OleDb.OleDbCommand.Parameters" />
    ///  集合 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  基础 OLE DB 访问接口不支持返回存储的过程的参数信息、 命令文本不是有效的存储的过程名称，或 <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" />
    ///  指定未 <see langword="StoredProcedure" />
    ///  。
    ///</exception>
    {class} procedure DeriveParameters(command: DNOleDbCommand);

  end;

  ///<summary>
  ///  自动生成用于协调所做的更改的单表命令 <see cref="T:System.Data.DataSet" />
  ///  与关联的数据库。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbCommandBuilder')]
  DNOleDbCommandBuilder = interface(DNDbCommandBuilder)
  ['{37CBF99A-AA08-36FD-94A1-56786EADC080}']
  { getters & setters } 

    function get_DataAdapter: DNOleDbDataAdapter;
    procedure set_DataAdapter(value: DNOleDbDataAdapter);
    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。
    ///  这包括正确转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="unquotedIdentifier">
    ///  原始的不带引号的标识符。
    ///</param>
    ///<returns>
    ///  带引号的标识符版本。
    ///  正确转义标识符中嵌入的引号。
    ///</returns>
    function QuoteIdentifier(unquotedIdentifier: string): string; overload;
    ///<summary>
    ///  给定带引号的标识符，将返回该标识符的正确不带引号的形式。
    ///  这包括正确地取消转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="quotedIdentifier">
    ///  将删除其嵌入的引号的标识符。
    ///</param>
    ///<returns>
    ///  不带引号的标识符，其嵌入的引号正确地取消转义。
    ///</returns>
    function UnquoteIdentifier(quotedIdentifier: string): string; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  需要执行插入操作的数据源对象。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand: DNOleDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  需要执行插入操作的数据源对象。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，它是否可以生成与列名称相匹配的参数名称。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNOleDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需的数据源执行更新。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand: DNOleDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需数据源，可以选择使用列作为参数名在执行更新。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，它是否可以生成与列名称相匹配的参数名称。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNOleDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行删除操作在数据源。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand: DNOleDbCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行删除操作在数据源。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，它是否可以生成与列名称相匹配的参数名称。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNOleDbCommand; overload;
    ///<summary>
    ///  给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。
    ///  这包括正确转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="unquotedIdentifier">
    ///  若要以带引号的格式返回不带引号的标识符。
    ///</param>
    ///  <param name="connection">
    ///  当传递连接时，将导致从 OLE DB 访问接口获取的引号字符的托管的包装。
    ///  当传递时没有连接时，字符串括在引号中的值使用 <see cref="P:System.Data.Common.DbCommandBuilder.QuotePrefix" />
    ///  和 <see cref="P:System.Data.Common.DbCommandBuilder.QuoteSuffix" />
    ///  。
    ///</param>
    ///<returns>
    ///  带引号的标识符版本。
    ///  正确转义标识符中嵌入的引号。
    ///</returns>
    function QuoteIdentifier(unquotedIdentifier: string; connection: DNOleDbConnection): string; overload;
    ///<summary>
    ///  给定带引号的标识符，将返回该标识符的正确不带引号的形式。
    ///  这包括正确地取消转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="quotedIdentifier">
    ///  将删除其嵌入的引号的标识符。
    ///</param>
    ///  <param name="connection"><see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</param>
    ///<returns>
    ///  不带引号的标识符，其嵌入的引号正确地取消转义。
    ///</returns>
    function UnquoteIdentifier(quotedIdentifier: string; connection: DNOleDbConnection): string; overload;
    ///<summary>
    ///  清除与此相关的命令 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    procedure RefreshSchema;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  对于哪些 SQL 语句会自动生成的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />
    ///  对象。
    ///</returns>
    property DataAdapter: DNOleDbDataAdapter read get_DataAdapter write set_DataAdapter;
    ///<summary>
    ///  指定使用哪些 <see cref="T:System.Data.ConflictOption" />
    ///  是要使用 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回的一个 <see cref="T:System.Data.ConflictOption" />
    ///  描述此行为值 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  实例 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  对象。
    ///</returns>
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    ///<summary>
    ///  设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  类。
    ///</returns>
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    ///<summary>
    ///  获取或设置的起始字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
    ///</summary>
    ///<returns>
    ///  开头字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  生成 insert、 update 或 delete 命令后，不能更改此属性。
    ///</exception>
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    ///<summary>
    ///  获取或设置结束字符或字符指定其名称包含空格或保留的标记等字符的数据库对象 （例如，表或列） 时使用。
    ///</summary>
    ///<returns>
    ///  结束字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    ///<summary>
    ///  获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。
    ///</summary>
    ///<returns>
    ///  要用作架构分隔符的字符。
    ///</returns>
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    ///<summary>
    ///  指定是否在 update 语句中所有列的值都是包含还是仅更改的列值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果由生成的 UPDATE 语句 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  要包括所有列; <see langword="false" />
    ///  如果它都包含仅更改了列。
    ///</returns>
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbCommandBuilder = class(TDNGenericImport<DNOleDbCommandBuilderClass, DNOleDbCommandBuilder>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCommandBuilderClass = interface(DNDbCommandBuilderClass)
  ['{B2CCD562-232F-5195-99E9-3B71EE7DF204}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlCommandBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />
    ///  使用关联的类 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  对象。
    ///</summary>
    ///  <param name="adapter"><see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  的名称。
    ///</param>
    {class} function init(adapter: DNSqlDataAdapter): DNSqlCommandBuilder; overload;

  { static methods } 

    ///<summary>
    ///  从在指定的存储过程中检索参数信息 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  并填充 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" />
    ///  的指定集合 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</summary>
    ///  <param name="command"><see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  引用存储的过程将为派生参数信息。
    ///  派生的参数添加到 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" />
    ///  集合 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  命令文本不是有效的存储的过程名称。
    ///</exception>
    {class} procedure DeriveParameters(command: DNSqlCommand);

  end;

  ///<summary>
  ///  自动生成用于协调通过关联的 SQL Server 数据库对 <see cref="T:System.Data.DataSet" />
  ///  所做更改的单表命令。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlCommandBuilder')]
  DNSqlCommandBuilder = interface(DNDbCommandBuilder)
  ['{DF7ADC5F-E439-3079-A773-8954876B15BE}']
  { getters & setters } 

    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_DataAdapter: DNSqlDataAdapter;
    procedure set_DataAdapter(value: DNSqlDataAdapter);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  在数据库上执行插入操作所需的对象。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象所需执行插入操作。
    ///</returns>
    function GetInsertCommand: DNSqlCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  在数据库上执行插入操作所需的对象。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，生成尽可能与列名相匹配的参数名。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  执行插入操作所需的对象。
    ///</returns>
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNSqlCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  在数据库上执行更新所需的对象。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  执行更新所需的对象。
    ///</returns>
    function GetUpdateCommand: DNSqlCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  在数据库上执行更新所需的对象。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，生成尽可能与列名相匹配的参数名。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象所需执行更新。
    ///</returns>
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNSqlCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  在数据库上执行删除操作所需的对象。
    ///</summary>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象所需执行删除操作。
    ///</returns>
    function GetDeleteCommand: DNSqlCommand; overload;
    ///<summary>
    ///  获取自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  在数据库上执行删除操作所需的对象。
    ///</summary>
    ///  <param name="useColumnsForParameterNames">
    ///  如果 <see langword="true" />
    ///  , ，生成尽可能与列名相匹配的参数名。
    ///  如果 <see langword="false" />
    ///  , 、 生成 @p1，@p2，依次类推。
    ///</param>
    ///<returns>
    ///  自动生成 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  执行删除操作所需的对象。
    ///</returns>
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNSqlCommand; overload;
    ///<summary>
    ///  给定在正确的目录的情况下不带引号的标识符，将返回正确的带引号的标识符形式。
    ///  这包括正确转义任何嵌入的引号标识符中。
    ///</summary>
    ///  <param name="unquotedIdentifier">
    ///  原始的不带引号的标识符。
    ///</param>
    ///<returns>
    ///  带引号的标识符版本。
    ///  正确转义标识符中嵌入的引号。
    ///</returns>
    function QuoteIdentifier(unquotedIdentifier: string): string;
    ///<summary>
    ///  给定带引号的标识符，将返回该标识符的正确不带引号的形式。
    ///  这包括正确地非转义标识符中任何嵌入的引号。
    ///</summary>
    ///  <param name="quotedIdentifier">
    ///  将删除其嵌入的引号的标识符。
    ///</param>
    ///<returns>
    ///  不带引号的标识符，其嵌入的引号正确进行非转义。
    ///</returns>
    function UnquoteIdentifier(quotedIdentifier: string): string;
    ///<summary>
    ///  清除与此相关的命令 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    procedure RefreshSchema;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  实例 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.CatalogLocation" />
    ///  对象。
    ///</returns>
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    ///<summary>
    ///  设置或获取一个字符串，用于为实例的目录分隔符 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个字符串，指示的实例一起使用的目录分隔符 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />
    ///  类。
    ///</returns>
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  对于的 TRANSACT-SQL 语句会自动生成的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />
    ///  对象。
    ///</returns>
    property DataAdapter: DNSqlDataAdapter read get_DataAdapter write set_DataAdapter;
    ///<summary>
    ///  获取或设置用于指定 SQL Server 数据库对象，如表或列，其名称包含空格或保留的标记等字符时的起始字符。
    ///</summary>
    ///<returns>
    ///  若要使用的字符或起始字符。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此属性不能更改后的 INSERT、 UPDATE，或生成删除命令。
    ///</exception>
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    ///<summary>
    ///  获取或设置一个字符或字符，用于指定 SQL Server 数据库对象，如表或列，其名称包含空格或保留的标记等字符结束。
    ///</summary>
    ///<returns>
    ///  结束字符或要使用的字符。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  生成 insert、 update 或 delete 命令后，不能更改此属性。
    ///</exception>
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    ///<summary>
    ///  获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。
    ///</summary>
    ///<returns>
    ///  要用作架构分隔符的字符。
    ///</returns>
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    ///<summary>
    ///  指定使用哪些 <see cref="T:System.Data.ConflictOption" />
    ///  是要使用 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回的一个 <see cref="T:System.Data.ConflictOption" />
    ///  描述此行为值 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  。
    ///</returns>
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    ///<summary>
    ///  指定是否在 update 语句中所有列的值都是包含还是仅更改的列值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果由生成的 UPDATE 语句 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  要包括所有列; <see langword="false" />
    ///  如果它都包含仅更改了列。
    ///</returns>
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlCommandBuilder = class(TDNGenericImport<DNSqlCommandBuilderClass, DNSqlCommandBuilder>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbConnectionClass = interface(DNObjectClass)
  ['{62B283BB-1B18-5941-AA2D-22A2D3D7B8B5}']
  end;

  ///<summary>
  ///  表示数据库连接。
  ///</summary>
  [DNTypeName('System.Data.Common.DbConnection')]
  DNDbConnection = interface(DNObject)
  ['{4E5995F3-B839-3C89-9E92-54B67A829185}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  开始数据库事务。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    function BeginTransaction: DNDbTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别启动数据库事务。
    ///</summary>
    ///  <param name="isolationLevel">
    ///  指定事务的隔离级别。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    function BeginTransaction(isolationLevel: DNIsolationLevel): DNDbTransaction; overload;
    ///<summary>
    ///  关闭与数据库之间的连接。
    ///  此方法是关闭任何打开连接的首选方法。
    ///</summary>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  打开连接时出现的连接级别的错误。
    ///</exception>
    procedure Close;
    ///<summary>
    ///  更改打开的连接的当前数据库。
    ///</summary>
    ///  <param name="databaseName">
    ///  指定要使用的连接的数据库的名称。
    ///</param>
    procedure ChangeDatabase(databaseName: string);
    ///<summary>
    ///  创建并返回 <see cref="T:System.Data.Common.DbCommand" />
    ///  与当前连接关联的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbCommand" />
    ///  对象。
    ///</returns>
    function CreateCommand: DNDbCommand;
    ///<summary>
    ///  在指定的事务中登记。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.Transactions.Transaction" />
    ///  的引用。
    ///</param>
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema: DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" />
    ///  使用架构名称指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将 <paramref name="collectionName" />
    ///  指定为 null。
    ///</exception>
    function GetSchema(collectionName: string): DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.Common.DbConnection" />
    ///  架构名称和指定的字符串数组的限制值使用指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///  <param name="restrictionValues">
    ///  指定一组请求的架构的限制值。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将 <paramref name="collectionName" />
    ///  指定为 null。
    ///</exception>
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///</summary>
    procedure Open;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  , ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///  此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 可以接受取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  调用并返回已完成的任务。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  打开由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbConnection" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用来打开该连接的字符串。
    ///</summary>
    ///<returns>
    ///  用于建立初始连接的连接字符串。
    ///  连接字符串的确切内容取决于此连接的特定数据源。
    ///  默认值为一个空字符串。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取要在终止尝试并生成错误之前的连接时等待的时间。
    ///</summary>
    ///<returns>
    ///  等待连接打开所需的时间（以秒为单位）。
    ///  默认值是由正在使用的连接的特定类型确定的。
    ///</returns>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    ///<summary>
    ///  获取打开连接时后, 当前数据库的名称或打开连接前在连接字符串中指定的数据库名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称或打开连接后要使用的数据库的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取要连接到数据库服务器的名称。
    ///</summary>
    ///<returns>
    ///  要连接到数据库服务器的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property DataSource: string read get_DataSource;
    ///<summary>
    ///  获取一个字符串，表示该对象连接到服务器的版本。
    ///</summary>
    ///<returns>
    ///  数据库的版本。
    ///  返回的字符串的格式取决于正在使用的连接的特定类型。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当返回的任务未完成，且在调用 <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" />
    ///  后未打开连接时，调用了 <see cref="P:System.Data.Common.DbConnection.ServerVersion" />
    ///  。
    ///</exception>
    property ServerVersion: string read get_ServerVersion;
    ///<summary>
    ///  获取一个字符串，描述连接状态。
    ///</summary>
    ///<returns>
    ///  连接的状态。
    ///  返回的字符串的格式取决于正在使用的连接的特定类型。
    ///</returns>
    property State: DNConnectionState read get_State;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbConnection = class(TDNGenericImport<DNDbConnectionClass, DNDbConnection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcConnectionClass = interface(DNDbConnectionClass)
  ['{CBA938C7-5777-5BAA-A324-FFDE3530E9D7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  类，具有指定的连接字符串。
    ///</summary>
    ///  <param name="connectionString">
    ///  用于打开数据源的连接。
    ///</param>
    {class} function init(connectionString: string): DNOdbcConnection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcConnection; overload;

  { static methods } 

    ///<summary>
    ///  指示当释放最后一个基础连接时，可以释放 ODBC 驱动程序管理器环境句柄。
    ///</summary>
    {class} procedure ReleaseObjectPool;

  end;

  ///<summary>
  ///  表示与数据源的开放连接。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcConnection')]
  DNOdbcConnection = interface(DNDbConnection)
  ['{67D42822-4C6B-372D-9939-D59B17EBD29D}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    procedure set_ConnectionTimeout(value: Int32);
    function get_Database: string;
    function get_DataSource: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Driver: string;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNOdbcInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNOdbcInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  更改与打开关联的当前数据库 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  数据库名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  数据库名称无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接未打开。
    ///</exception><exception cref="T:System.Data.Odbc.OdbcException">
    ///  不能更改数据库。
    ///</exception>
    procedure ChangeDatabase(value: string);
    ///<summary>
    ///  关闭与数据源的连接。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema: DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  使用的架构名称指定的名称。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema(collectionName: string): DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  架构名称和指定的字符串数组的限制值使用指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///  <param name="restrictionValues">
    ///  指定一组请求的架构的限制值。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  启动一个事务对数据源。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  事务是当前处于活动状态。
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction: DNOdbcTransaction; overload;
    ///<summary>
    ///  在数据源事务开头指定 <see cref="T:System.Data.IsolationLevel" />
    ///  值。
    ///</summary>
    ///  <param name="isolevel">
    ///  此连接事务隔离级别。
    ///  如果不指定隔离级别，使用该驱动程序的默认隔离级别。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  事务是当前处于活动状态。
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(isolevel: DNIsolationLevel): DNOdbcTransaction; overload;
    ///<summary>
    ///  创建并返回 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  与关联对象 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcCommand" />
    ///  对象。
    ///</returns>
    function CreateCommand: DNOdbcCommand;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  的引用。
    ///</param>
    procedure EnlistDistributedTransaction(transaction: DDN.System.EnterpriseServices.DNITransaction);
    ///<summary>
    ///  使用指定的属性设置打开与数据源的连接 <see cref="P:System.Data.Odbc.OdbcConnection.ConnectionString" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">
    ///  此方法的功能在基类中不受支持，并且必须改为在派生类中实现。
    ///</exception>
    procedure Open;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.Transactions.Transaction" />
    ///  的引用。
    ///</param>
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  , ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///  此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 可以接受取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  调用并返回已完成的任务。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  打开由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbConnection" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用来打开数据源的字符串。
    ///</summary>
    ///<returns>
    ///  ODBC 驱动程序连接字符串中包含设置，如建立初始连接所需的数据源名称。
    ///  默认值为空字符串 ("")。
    ///  最大长度为 1024年个字符。
    ///</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取或设置要在尝试建立在终止尝试并生成错误之前的连接时等待的时间。
    ///</summary>
    ///<returns>
    ///  以秒为单位时要等待连接打开的时间。
    ///  默认值为 15 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值小于 0。
    ///</exception>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout write set_ConnectionTimeout;
    ///<summary>
    ///  获取当前数据库的名称或打开连接后要使用的数据库的名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称。
    ///  默认值为空字符串 ("") 之前在打开的连接。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取服务器名称或数据源的文件名。
    ///</summary>
    ///<returns>
    ///  服务器名称或数据源的文件名。
    ///  默认值为空字符串 ("") 之前在打开的连接。
    ///</returns>
    property DataSource: string read get_DataSource;
    ///<summary>
    ///  获取一个字符串，包含客户端连接到服务器的版本。
    ///</summary>
    ///<returns>
    ///  已连接的服务器的版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已关闭。
    ///</exception>
    property ServerVersion: string read get_ServerVersion;
    ///<summary>
    ///  获取连接的当前状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值的按位组合。
    ///  默认值为 <see langword="Closed" />
    ///  。
    ///</returns>
    property State: DNConnectionState read get_State;
    ///<summary>
    ///  获取指定当前连接的 ODBC 驱动程序的名称。
    ///</summary>
    ///<returns>
    ///  ODBC 驱动程序的名称。
    ///  这通常是 DLL 名称 (例如，Sqlsrv32.dll)。
    ///  默认值为空字符串 ("") 之前在打开的连接。
    ///</returns>
    property Driver: string read get_Driver;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcConnection = class(TDNGenericImport<DNOdbcConnectionClass, DNOdbcConnection>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbConnectionClass = interface(DNDbConnectionClass)
  ['{047A5A0F-EEC5-51A7-99FD-069EDB7AB0A5}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  类，具有指定的连接字符串。
    ///</summary>
    ///  <param name="connectionString">
    ///  用于打开数据库的连接。
    ///</param>
    {class} function init(connectionString: string): DNOleDbConnection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbConnection; overload;

  { static methods } 

    ///<summary>
    ///  指示 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  对象池可以释放最后一个基础连接时释放。
    ///</summary>
    {class} procedure ReleaseObjectPool;

  end;

  ///<summary>
  ///  表示与数据源的开放连接。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbConnection')]
  DNOleDbConnection = interface(DNDbConnection)
  ['{FF833BE1-7559-39E3-8101-632D1EFCE029}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_Provider: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNOleDbInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNOleDbInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  关闭与数据源的连接。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema: DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  使用架构名称指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。 </param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema(collectionName: string): DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  架构名称和指定的字符串数组的限制值使用指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///  <param name="restrictionValues">
    ///  指定一组请求的架构的限制值。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  更新 <see cref="P:System.Data.OleDb.OleDbConnection.State" />
    ///  属性 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  对象。
    ///</summary>
    procedure ResetState;
    ///<summary>
    ///  开始数据库事务与当前 <see cref="T:System.Data.IsolationLevel" />
    ///  值。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction: DNOleDbTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别启动数据库事务。
    ///</summary>
    ///  <param name="isolationLevel">
    ///  事务应在其下运行的隔离级别。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(isolationLevel: DNIsolationLevel): DNOleDbTransaction; overload;
    ///<summary>
    ///  更改已打开的 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  的当前数据库。
    ///</summary>
    ///  <param name="value">
    ///  数据库名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  数据库名称无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接未打开。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  不能更改数据库。
    ///</exception>
    procedure ChangeDatabase(value: string);
    ///<summary>
    ///  创建并返回 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  与关联对象 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbCommand" />
    ///  对象。
    ///</returns>
    function CreateCommand: DNOleDbCommand;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  的引用。
    ///</param>
    procedure EnlistDistributedTransaction(transaction: DDN.System.EnterpriseServices.DNITransaction);
    ///<summary>
    ///  由一个 GUID，并在应用指定的限制之后，请从数据源返回架构信息。
    ///</summary>
    ///  <param name="schema">
    ///  其中一个 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" />
    ///  值，该值指定要返回的架构表。
    ///</param>
    ///  <param name="restrictions"><see cref="T:System.Object" />
    ///  限制值的数组。
    ///  这些适用的限制列的顺序。
    ///  也就是说，适用于第一个限制列的第一个限制值，第二个限制值应用到的第二个限制列中，依次类推。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataTable" />
    ///  包含请求的架构信息。
    ///</returns>
    ///<exception cref="T:System.Data.OleDb.OleDbException">
    ///  指定的限制集是无效的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  已关闭。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  OLE DB 访问接口不支持指定的架构行集。
    ///  - 或 -
    ///  <paramref name="schema" />
    ///  参数包含的值 <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" />
    ///  和 <paramref name="restrictions" />
    ///  参数包含一个或多个限制。
    ///</exception>
    function GetOleDbSchemaTable(schema: DDN.mscorlib.DNGuid; restrictions: TArray<DDN.mscorlib.DNObject>): DNDataTable;
    ///<summary>
    ///  使用指定的属性设置打开数据库连接 <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已打开。
    ///</exception><exception cref="T:System.Data.OleDb.OleDbException">
    ///  打开连接时出现的连接级别错误。
    ///</exception>
    procedure Open;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.Transactions.Transaction" />
    ///  的引用。
    ///</param>
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  , ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///  此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  （可选） 可以接受取消标记。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  调用并返回已完成的任务。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  打开由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbConnection" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用于打数据库的字符串。
    ///</summary>
    ///<returns>
    ///  OLE DB 提供程序连接字符串中包含数据源名称和建立初始连接所需的其他参数。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供了无效的连接字符串参数或尚未提供所需的连接字符串参数。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。
    ///</summary>
    ///<returns>
    ///  以秒为单位时要等待连接打开的时间。
    ///  默认值为 15 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值小于 0。
    ///</exception>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    ///<summary>
    ///  获取当前数据库的名称或打开连接后要使用的数据库的名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称或打开连接后要使用的数据库的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取服务器名称或数据源的文件名。
    ///</summary>
    ///<returns>
    ///  服务器名称或数据源的文件名。
    ///  默认值为一个空字符串。
    ///</returns>
    property DataSource: string read get_DataSource;
    ///<summary>
    ///  获取在指定的 OLE DB 提供程序的名称"提供程序 ="连接字符串的子句。
    ///</summary>
    ///<returns>
    ///  在指定的提供程序的名称"提供程序 ="连接字符串的子句。
    ///  默认值为一个空字符串。
    ///</returns>
    property Provider: string read get_Provider;
    ///<summary>
    ///  获取一个字符串，包含客户端连接到服务器的版本。
    ///</summary>
    ///<returns>
    ///  已连接的服务器的版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已关闭。
    ///</exception>
    property ServerVersion: string read get_ServerVersion;
    ///<summary>
    ///  获取连接的当前状态。
    ///</summary>
    ///<returns><see cref="T:System.Data.ConnectionState" />
    ///  值的按位组合。
    ///  默认值已关闭。
    ///</returns>
    property State: DNConnectionState read get_State;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbConnection = class(TDNGenericImport<DNOleDbConnectionClass, DNOleDbConnection>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlConnectionClass = interface(DNDbConnectionClass)
  ['{C469825F-AD4F-5E6A-A8BD-F229AF9A0051}']
  { static getter & setter } 

    {class} function get_ColumnEncryptionTrustedMasterKeyPaths: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNIList<string>>;
    {class} function get_ColumnEncryptionQueryMetadataCacheEnabled: Boolean;
    {class} procedure set_ColumnEncryptionQueryMetadataCacheEnabled(value: Boolean);
    {class} function get_ColumnEncryptionKeyCacheTtl: DDN.mscorlib.DNTimeSpan;
    {class} procedure set_ColumnEncryptionKeyCacheTtl(value: DDN.mscorlib.DNTimeSpan);

  { constructors } 

    ///<summary>
    ///  如果给定包含连接字符串的字符串，则初始化 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="connectionString">
    ///  用于打开 SQL Server 数据库的连接。
    ///</param>
    {class} function init(connectionString: string): DNSqlConnection; overload;
    ///<summary>
    ///  在给定连接字符串的情况下，初始化 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  类的新实例，该连接字符串不使用 <see langword="Integrated Security = true" />
    ///  和包含用户 ID 和密码的 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///  <param name="connectionString">
    ///  不使用 <see langword="ContextConnection = true" />
    ///  或以下任何连接字符串关键字的连接字符串：<see langword="Integrated Security = true" />
    ///  、<see langword="UserId" />
    ///  或 <see langword="Password" />
    ///  。
    ///</param>
    ///  <param name="credential">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///  如果 <paramref name="credential" />
    ///  为 null，则 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" />
    ///  在功能上等效于 <see cref="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />
    ///  。
    ///</param>
    {class} function init(connectionString: string; credential: DNSqlCredential): DNSqlConnection; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlConnection; overload;

  { static methods } 

    ///<summary>
    ///  清空连接池。
    ///</summary>
    {class} procedure ClearAllPools;
    {class} procedure RegisterColumnEncryptionKeyStoreProviders(customProviders: DDN.mscorlib.DNIDictionary<string, DNSqlColumnEncryptionKeyStoreProvider>);
    ///<summary>
    ///  清空与指定连接关联的连接池。
    ///</summary>
    ///  <param name="connection">
    ///  要从池中清除的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///</param>
    {class} procedure ClearPool(connection: DNSqlConnection);
    ///<summary>
    ///  将连接字符串中指示的用户的 SQL Server 密码更改为提供的新密码。
    ///</summary>
    ///  <param name="connectionString">
    ///  包含连接至所需服务器的足够信息的连接字符串。
    ///  连接字符串必须包含用户 ID 和当前密码。
    ///</param>
    ///  <param name="newPassword">
    ///  要设置的新密码。
    ///  此密码必须符合服务器上设置的任何密码安全策略，包括最小长度、特定字符要求等等。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  连接字符串包括将使用集成安全性的选项。
    ///  Or
    ///  <paramref name="newPassword" />
    ///  超过了 128 个字符。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />
    ///  或 <paramref name="newPassword" />
    ///  参数为 null。
    ///</exception>
    {class} procedure ChangePassword(connectionString: string; newPassword: string); overload;
    ///<summary>
    ///  更改 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象中指示的用户的 SQL Server 密码。
    ///</summary>
    ///  <param name="connectionString">
    ///  包含连接至服务器的足够信息的连接字符串。
    ///  连接字符串不应使用以下任何一个连接字符串关键字：<see langword="Integrated Security = true" />
    ///  、<see langword="UserId" />
    ///  或 <see langword="Password" />
    ///  ；或 <see langword="ContextConnection = true" />
    ///  。
    ///</param>
    ///  <param name="credential">
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</param>
    ///  <param name="newSecurePassword">
    ///  新密码。
    ///  <paramref name="newSecurePassword" />
    ///  必须为只读。
    ///  该密码也必须符合服务器上设置的任何密码安全策略（例如：最小长度、特定字符要求）。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  连接字符串包含的任意组合 <see langword="UserId" />
    ///  , ，<see langword="Password" />
    ///  , ，或 <see langword="Integrated Security=true" />
    ///  。
    ///  连接字符串包含 <see langword="Context Connection=true" />
    ///  。
    ///  <paramref name="newSecurePassword" />
    ///  大于 128 个字符。
    ///  <paramref name="newSecurePassword" />
    ///  不是只读。
    ///  <paramref name="newSecurePassword" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  其中一个参数（<paramref name="connectionString" />
    ///  、<paramref name="credential" />
    ///  或 <paramref name="newSecurePassword" />
    ///  ）为 null。
    ///</exception>
    {class} procedure ChangePassword(connectionString: string; credential: DNSqlCredential; newSecurePassword: DDN.mscorlib.DNSecureString); overload;

  { static propertys } 

    ///<summary>
    ///  允许你设置数据库服务器的受信任密钥路径列表。
    ///  如果在处理应用程序查询时驱动程序接收到不位于列表中的密钥路径，则查询会失败。
    ///  此属性针对安全攻击提供附加保护，这些安全攻击涉及提供伪造密钥路径的受威胁的 SQL Server，可能导致密钥存储凭据泄露。
    ///</summary>
    ///<returns>
    ///  适用于列加密的受信任主密钥路径的列表。
    ///</returns>
    {class} property ColumnEncryptionTrustedMasterKeyPaths: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNIList<string>> read get_ColumnEncryptionTrustedMasterKeyPaths;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用查询元数据缓存 (true) 或不针对运行参数化查询的 (false) Always Encrypted启用了数据库。
    ///  默认值为 true。
    ///</summary>
    ///<returns>
    ///  如果启用查询元数据缓存，则返回 True；否则返回 False。
    ///  默认为 True。
    ///</returns>
    {class} property ColumnEncryptionQueryMetadataCacheEnabled: Boolean read get_ColumnEncryptionQueryMetadataCacheEnabled write set_ColumnEncryptionQueryMetadataCacheEnabled;
    ///<summary>
    ///  获取或设置的生存时间的列加密密钥条目的列加密密钥缓存中为Always Encrypted功能。
    ///  默认值为 2 小时。
    ///  0 表示无缓存。
    ///</summary>
    ///<returns>
    ///  时间间隔。
    ///</returns>
    {class} property ColumnEncryptionKeyCacheTtl: DDN.mscorlib.DNTimeSpan read get_ColumnEncryptionKeyCacheTtl write set_ColumnEncryptionKeyCacheTtl;
  end;

  ///<summary>
  ///  表示到 SQL Server 数据库的打开连接。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlConnection')]
  DNSqlConnection = interface(DNDbConnection)
  ['{F8C85934-FC42-3A0A-AB23-EBA6D5B37B8A}']
  { getters & setters } 

    function get_StatisticsEnabled: Boolean;
    procedure set_StatisticsEnabled(value: Boolean);
    function get_AccessToken: string;
    procedure set_AccessToken(value: string);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_PacketSize: Int32;
    function get_ClientConnectionId: DDN.mscorlib.DNGuid;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_WorkstationId: string;
    function get_Credential: DNSqlCredential;
    procedure set_Credential(value: DNSqlCredential);
    function get_FireInfoMessageEventOnUserErrors: Boolean;
    procedure set_FireInfoMessageEventOnUserErrors(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNSqlInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNSqlInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  。
    ///  有关方案的详细信息，请参阅 SQL Server Schema Collections。
    ///</summary>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    function GetSchema: DNDataTable; overload;
    ///<summary>
    ///  通过使用架构名称的指定字符串，返回此 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的数据源的架构信息。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将 <paramref name="collectionName" />
    ///  指定为 null。
    ///</exception>
    function GetSchema(collectionName: string): DNDataTable; overload;
    ///<summary>
    ///  返回的数据源的架构信息 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  架构名称和指定的字符串数组的限制值使用指定的字符串。
    ///</summary>
    ///  <param name="collectionName">
    ///  指定要返回的架构的名称。
    ///</param>
    ///  <param name="restrictionValues">
    ///  请求的架构的一组限制值。
    ///</param>
    ///<returns>
    ///  一个包含架构信息的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将 <paramref name="collectionName" />
    ///  指定为 null。
    ///</exception>
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    ///<summary>
    ///  开始数据库事务。
    ///</summary>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction: DNSqlTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别启动数据库事务。
    ///</summary>
    ///  <param name="iso">
    ///  事务应在其下运行的隔离级别。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(iso: DNIsolationLevel): DNSqlTransaction; overload;
    ///<summary>
    ///  以指定的事务名称启动数据库事务。
    ///</summary>
    ///  <param name="transactionName">
    ///  事务名称。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(transactionName: string): DNSqlTransaction; overload;
    ///<summary>
    ///  以指定的隔离级别和事务名称启动数据库事务。
    ///</summary>
    ///  <param name="iso">
    ///  事务应在其下运行的隔离级别。
    ///</param>
    ///  <param name="transactionName">
    ///  事务名称。
    ///</param>
    ///<returns>
    ///  表示新事务的对象。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  使用多个活动结果集 (MARS) 时，不允许并行事务。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不支持并行事务。
    ///</exception>
    function BeginTransaction(iso: DNIsolationLevel; transactionName: string): DNSqlTransaction; overload;
    ///<summary>
    ///  更改已打开的 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的当前数据库。
    ///</summary>
    ///  <param name="database">
    ///  要代替当前数据库加以使用的数据库的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  数据库名称无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  连接未打开。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  不能更改数据库。
    ///</exception>
    procedure ChangeDatabase(database: string);
    ///<summary>
    ///  关闭与数据库之间的连接。
    ///  此方法是关闭任何打开连接的首选方法。
    ///</summary>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  打开连接时出现的连接级别的错误。
    ///</exception>
    procedure Close;
    ///<summary>
    ///  创建并返回与 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  关联的 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlCommand" />
    ///  对象。
    ///</returns>
    function CreateCommand: DNSqlCommand;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  的引用。
    ///</param>
    procedure EnlistDistributedTransaction(transaction: DDN.System.EnterpriseServices.DNITransaction);
    ///<summary>
    ///  使用由 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
    ///  指定的属性设置打开一个数据库连接。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  如果不指定数据源或服务器，则无法打开连接。
    ///  或
    ///  连接已打开。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  打开连接时出现的连接级别错误。
    ///  如果 <see cref="P:System.Data.SqlClient.SqlException.Number" />
    ///  属性包含值 18487 或 18488，这表明指定的密码已过期或必须重置。
    ///  有关更多信息，请参阅 <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />
    ///  方法。
    ///  App.config 文件中的 <see langword="&lt;system.data.localdb&gt;" />
    ///  标记具有无效或未知元素。
    ///</exception><exception cref="T:System.Configuration.ConfigurationErrorsException"><see langword="&lt;localdbinstances&gt;" />
    ///  部分中有两个具有相同名称的条目。
    ///</exception>
    procedure Open;
    ///<summary><see cref="M:System.Data.SqlClient.SqlConnection.Open" />
    ///  的异步版本，打开 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
    ///  指定的属性设置的数据库连接。
    ///  取消标记可用于请求在连接超时超过前放弃操作。
    ///  异常将通过返回的任务传播。
    ///  如果在未成功连接的情况下连接超时时间已过，则返回的任务将被标记为“附带异常出错”。
    ///  实现返回一个不带有用于共用和非共用连接的锁定调用线程的“任务”。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///  在经过连接超时时间之前从连接池中的连接不可用。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  打开连接时出现的任何由 SQL Server 返回的错误。
    ///</exception>
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  如果启用了统计信息收集，所有值都将重置为零。
    ///</summary>
    procedure ResetStatistics;
    ///<summary>
    ///  调用此方法时，将返回统计信息的名称值对集合。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Collections.DictionaryEntry" />
    ///  项的 <see cref="T:System.Collections.IDictionary" />
    ///  类型的引用。
    ///</returns>
    function RetrieveStatistics: DDN.mscorlib.DNIDictionary;
    ///<summary>
    ///  在指定的事务中登记为分布式事务。
    ///</summary>
    ///  <param name="transaction">
    ///  对用于登记的现有 <see cref="T:System.Transactions.Transaction" />
    ///  的引用。
    ///</param>
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbConnection.Open" />
    ///  , ，用于打开数据库连接指定的设置与 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />
    ///  。
    ///  此方法调用虚方法 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  如果设置为 <see langword="true" />
    ///  ，则对当前连接启用统计信息收集。
    ///</summary>
    ///<returns>
    ///  如果启用了统计信息收集，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  默认为 <see langword="false" />
    ///  。
    ///</returns>
    property StatisticsEnabled: Boolean read get_StatisticsEnabled write set_StatisticsEnabled;
    ///<summary>
    ///  获取或设置用于连接的访问令牌。
    ///</summary>
    ///<returns>
    ///  用于连接的访问令牌。
    ///</returns>
    property AccessToken: string read get_AccessToken write set_AccessToken;
    ///<summary>
    ///  获取或设置用于打开 SQL Server 数据库的字符串。
    ///</summary>
    ///<returns>
    ///  连接字符串，其中包含源数据库名称和建立初始连接所需的其他参数。
    ///  默认值为一个空字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  提供了一个无效的连接字符串参数，或者未提供所需的连接字符串参数。
    ///</exception>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>
    ///  获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。
    ///</summary>
    ///<returns>
    ///  等待连接打开所需的时间（以秒为单位）。
    ///  默认值为 15 秒。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置的值小于 0。
    ///</exception>
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    ///<summary>
    ///  获取当前数据库的名称或打开连接后要使用的数据库的名称。
    ///</summary>
    ///<returns>
    ///  当前数据库的名称或打开连接后要使用的数据库的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property Database: string read get_Database;
    ///<summary>
    ///  获取要连接的 SQL Server 的实例的名称。
    ///</summary>
    ///<returns>
    ///  要连接的 SQL Server 的实例的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property DataSource: string read get_DataSource;
    ///<summary>
    ///  获取用于与 SQL Server 的实例进行通信的网络数据包的大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  网络数据包的大小（以字节为单位）。
    ///  默认值为 8000。
    ///</returns>
    property PacketSize: Int32 read get_PacketSize;
    ///<summary>
    ///  最近连接尝试连接的 ID，无论该尝试是成功还是失败。
    ///</summary>
    ///<returns>
    ///  最近连接尝试的连接 ID。
    ///</returns>
    property ClientConnectionId: DDN.mscorlib.DNGuid read get_ClientConnectionId;
    ///<summary>
    ///  获取一个字符串，该字符串包含客户端所连接到的 SQL Server 的实例的版本。
    ///</summary>
    ///<returns>
    ///  SQL Server 的实例的版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接已关闭。
    ///  当返回的任务未完成，且在调用 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
    ///  后未打开连接时，调用了 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" />
    ///  。
    ///</exception>
    property ServerVersion: string read get_ServerVersion;
    ///<summary>
    ///  最近在连接上执行网络操作时表示 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  的状态。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.ConnectionState" />
    ///  枚举。
    ///</returns>
    property State: DNConnectionState read get_State;
    ///<summary>
    ///  获取一个标识数据库客户端的字符串。
    ///</summary>
    ///<returns>
    ///  一个标识数据库客户端的字符串。
    ///  如果未指定，则为客户端计算机的名称。
    ///  如果两个都没有指定，则值为空字符串。
    ///</returns>
    property WorkstationId: string read get_WorkstationId;
    ///<summary>
    ///  获取或设置此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  此连接的 <see cref="T:System.Data.SqlClient.SqlCredential" />
    ///  对象。
    ///</returns>
    property Credential: DNSqlCredential read get_Credential write set_Credential;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  如果已设置了 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
    ///  属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property FireInfoMessageEventOnUserErrors: Boolean read get_FireInfoMessageEventOnUserErrors write set_FireInfoMessageEventOnUserErrors;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlConnection = class(TDNGenericImport<DNSqlConnectionClass, DNSqlConnection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataColumnMappingClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C5C847C1-5BCB-525C-B083-B05C3944BB3E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataColumnMapping; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  类具有指定的源列名称和 <see cref="T:System.Data.DataSet" />
    ///  要映射到列名称。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  数据源的区分大小写的列名称。
    ///</param>
    ///  <param name="dataSetColumn">
    ///  列名称不区分大小写，从 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</param>
    {class} function init(sourceColumn: string; dataSetColumn: string): DNDataColumnMapping; overload;

  { static methods } 

    ///<summary>
    ///  静态版本 <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" />
    ///  可以无需实例化调用 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  数据源的区分大小写的列名称。
    ///</param>
    ///  <param name="dataSetColumn">
    ///  列名称不区分大小写，从 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</param>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  的一个实例。
    ///</param>
    ///  <param name="dataType">
    ///  正在映射的列的数据类型。
    ///</param>
    ///  <param name="schemaAction">
    ///  确定要在现有时执行的操作 <see cref="T:System.Data.DataSet" />
    ///  架构与传入的数据不匹配。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</returns>
    {class} function GetDataColumnBySchemaAction(sourceColumn: string; dataSetColumn: string; dataTable: DNDataTable; dataType: DDN.mscorlib.DNType; schemaAction: DNMissingSchemaAction): DNDataColumn; overload;

  end;

  ///<summary>
  ///  包含继承的对象的一般列映射 <see cref="T:System.Data.Common.DataAdapter" />
  ///  。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Common.DataColumnMapping')]
  DNDataColumnMapping = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{39520FE3-6378-3299-AB11-6042EFBED6FE}']
  { getters & setters } 

    function get_DataSetColumn: string;
    procedure set_DataSetColumn(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);

  { methods } 

    ///<summary>
    ///  将当前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" />
    ///  名称为字符串。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" />
    ///  作为字符串名称。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataColumn" />
    ///  从给定 <see cref="T:System.Data.DataTable" />
    ///  使用 <see cref="T:System.Data.MissingSchemaAction" />
    ///  和 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" />
    ///  属性。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  要从中获取列。
    ///</param>
    ///  <param name="dataType"><see cref="T:System.Type" />
    ///  的数据列。
    ///</param>
    ///  <param name="schemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  数据列。
    ///</returns>
    function GetDataColumnBySchemaAction(dataTable: DNDataTable; dataType: DDN.mscorlib.DNType; schemaAction: DNMissingSchemaAction): DNDataColumn; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的列名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</summary>
    ///<returns>
    ///  中的数据列的名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///  名称不区分大小写。
    ///</returns>
    property DataSetColumn: string read get_DataSetColumn write set_DataSetColumn;
    ///<summary>
    ///  获取或设置数据源从映射中的列的名称。
    ///  名称是区分大小写。
    ///</summary>
    ///<returns>
    ///  区分大小写的数据源中的列名称。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
  end;

  TDNDataColumnMapping = class(TDNGenericImport<DNDataColumnMappingClass, DNDataColumnMapping>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataColumnMappingCollectionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{E22F8FA0-6B35-5896-B69A-BB82E59330AF}']
  { constructors } 

    ///<summary>
    ///  创建一个空的 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  。
    ///</summary>
    {class} function init: DNDataColumnMappingCollection;

  { static methods } 

    ///<summary>
    ///  返回的静态方法 <see cref="T:System.Data.DataColumn" />
    ///  对象而无需实例化 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="columnMappings"><see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  。
    ///</param>
    ///  <param name="sourceColumn">
    ///  数据源的区分大小写的列名称。
    ///</param>
    ///  <param name="dataType">
    ///  正在映射的列的数据类型。
    ///</param>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  的一个实例。
    ///</param>
    ///  <param name="mappingAction"><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///</param>
    ///  <param name="schemaAction">
    ///  决定时要采取的操作现有 <see cref="T:System.Data.DataSet" />
    ///  架构与传入的数据不匹配。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</returns>
    {class} function GetDataColumn(columnMappings: DNDataColumnMappingCollection; sourceColumn: string; dataType: DDN.mscorlib.DNType; dataTable: DNDataTable; mappingAction: DNMissingMappingAction; schemaAction: DNMissingSchemaAction): DNDataColumn;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  指定 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  , ，源列名称和 <see cref="T:System.Data.MissingMappingAction" />
    ///  。
    ///</summary>
    ///  <param name="columnMappings"><see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  。
    ///</param>
    ///  <param name="sourceColumn">
    ///  要查找的区分大小写的源列名称。
    ///</param>
    ///  <param name="mappingAction"><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="mappingAction" />
    ///  参数设置为 <see langword="Error" />
    ///  , ，且未指定任何映射。
    ///</exception>
    {class} function GetColumnMappingBySchemaAction(columnMappings: DNDataColumnMappingCollection; sourceColumn: string; mappingAction: DNMissingMappingAction): DNDataColumnMapping;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Data.Common.DataColumnMapping" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Data.Common.DataColumnMappingCollection')]
  DNDataColumnMappingCollection = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{CA59DC57-554D-3ED3-8CF4-AA921FD38D46}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataColumnMapping; overload;
    procedure set_Item(index: Int32; value: DNDataColumnMapping); overload;
    function get_Item(sourceColumn: string): DNDataColumnMapping; overload;
    procedure set_Item(sourceColumn: string; value: DNDataColumnMapping); overload;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  集合中存在具有给定的源列名称的对象。
    ///</summary>
    ///  <param name="value">
    ///  区分大小写的源列名称的 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象与指定的源列名称; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象与给定 <see cref="T:System.Object" />
    ///  集合中存在。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含指定 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  传入的对象不是 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</exception>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  到指定的数组。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Array" />
    ///  要向其复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  元素。
    ///</param>
    ///  <param name="index">
    ///  数组的起始索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取遍历该集合的枚举器可循环访问。
    ///</summary>
    ///<returns>
    ///  可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  来查找。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  在集合中。
    ///</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  要插入的 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象的从零开始的索引。
    ///</param>
    ///  <param name="value"><see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  与从该集合的指定索引的对象。
    ///</summary>
    ///  <param name="index">
    ///  要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象的索引（从零开始）。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  有没有 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  具有指定索引的对象。
    ///</exception>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  具有指定的源列名称从集合对象。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  区分大小写的源列名称。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  有没有 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象具有指定的源列名称。
    ///</exception>
    procedure RemoveAt(sourceColumn: string); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象传递给该集合在给定源列名称和 <see cref="T:System.Data.DataSet" />
    ///  列名称。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  要映射到的源列的名称区分大小写。
    ///</param>
    ///  <param name="dataSetColumn">
    ///  该名称，不区分大小写的 <see cref="T:System.Data.DataSet" />
    ///  要映射到列。
    ///</param>
    ///<returns><see langword="DataColumnMapping" />
    ///  添加到集合的对象。
    ///</returns>
    function Add(sourceColumn: string; dataSetColumn: string): DNDataColumnMapping;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="values">
    ///  数组 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(values: TArray<DNDataColumnMapping>); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Array" />
    ///  到集合的末尾。
    ///</summary>
    ///  <param name="values">
    ///  要添加到集合中的 <see cref="T:System.Array" />
    ///  。
    ///</param>
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  到指定 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  数组。
    ///</summary>
    ///  <param name="array">
    ///  一个 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  要复制到数组 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  元素。
    ///</param>
    ///  <param name="index">
    ///  中的从零开始索引 <paramref name="array" />
    ///  复制开始处。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataColumnMapping>; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象具有指定 <see cref="T:System.Data.DataSet" />
    ///  列名称。
    ///</summary>
    ///  <param name="value">
    ///  该名称，不区分大小写的 <see cref="T:System.Data.DataSet" />
    ///  要查找列。
    ///</param>
    ///<returns><see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象具有指定 <see cref="T:System.Data.DataSet" />
    ///  列名称。
    ///</returns>
    function GetByDataSetColumn(value: string): DNDataColumnMapping;
    ///<summary>
    ///  获取的位置 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  具有指定的源列名称。
    ///</summary>
    ///  <param name="sourceColumn">
    ///  区分大小写的源列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的位置 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  具有指定区分大小写的源列名称。
    ///</returns>
    function IndexOf(sourceColumn: string): Int32; overload;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  与给定 <see cref="T:System.Data.DataSet" />
    ///  列名称。
    ///</summary>
    ///  <param name="dataSetColumn">
    ///  名称，它不区分大小写，要查找的数据集列。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  与给定 <see langword="DataSet" />
    ///  列名称，或者为-1 <see langword="DataColumnMapping" />
    ///  集合中不存在对象。
    ///</returns>
    function IndexOfDataSetColumn(dataSetColumn: string): Int32;
    ///<summary>
    ///  在 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  要插入的 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象的从零开始的索引。
    ///</param>
    ///  <param name="value"><see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DNDataColumnMapping); overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要移除的 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  。
    ///</param>
    procedure Remove(value: DNDataColumnMapping);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的数 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  集合中的对象。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataColumnMapping read get_Item write set_Item; default;
    property Item[sourceColumn: string]: DNDataColumnMapping read get_Item write set_Item; default;
  end;

  TDNDataColumnMappingCollection = class(TDNGenericImport<DNDataColumnMappingCollectionClass, DNDataColumnMappingCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataTableMappingClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{B5260371-A96F-52A8-A3FC-1093A39A23E4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDataTableMapping; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  给定源名称和一个与源类 <see cref="T:System.Data.DataTable" />
    ///  名称。
    ///</summary>
    ///  <param name="sourceTable">
    ///  数据源的区分大小写的源表名称。
    ///</param>
    ///  <param name="dataSetTable">
    ///  中的表名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</param>
    {class} function init(sourceTable: string; dataSetTable: string): DNDataTableMapping; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  类时提供源表名称， <see cref="T:System.Data.DataTable" />
    ///  名称，以及数组 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象。
    ///</summary>
    ///  <param name="sourceTable">
    ///  数据源的区分大小写的源表名称。
    ///</param>
    ///  <param name="dataSetTable">
    ///  中的表名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</param>
    ///  <param name="columnMappings">
    ///  一个 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象数组。
    ///</param>
    {class} function init(sourceTable: string; dataSetTable: string; columnMappings: TArray<DNDataColumnMapping>): DNDataTableMapping; overload;

  end;

  ///<summary>
  ///  包含源表与 <see cref="T:System.Data.DataTable" />
  ///  之间的映射关系的说明。
  ///  此类由 <see cref="T:System.Data.Common.DataAdapter" />
  ///  在填充 <see cref="T:System.Data.DataSet" />
  ///  时使用。
  ///</summary>
  [DNTypeName('System.Data.Common.DataTableMapping')]
  DNDataTableMapping = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{4A427B61-A253-3B5D-AB26-CF8CB7A391C0}']
  { getters & setters } 

    function get_ColumnMappings: DNDataColumnMappingCollection;
    function get_DataSetTable: string;
    procedure set_DataSetTable(value: string);
    function get_SourceTable: string;
    procedure set_SourceTable(value: string);

  { methods } 

    ///<summary>
    ///  将当前 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" />
    ///  名称为字符串。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" />
    ///  名称作为一个字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  返回 <see cref="T:System.Data.DataColumn" />
    ///  给定的列名称的对象。
    ///</summary>
    ///  <param name="sourceColumn"><see cref="T:System.Data.DataColumn" />
    ///  的名称。
    ///</param>
    ///  <param name="dataType">
    ///  数据类型为 <paramref name="sourceColumn" />
    ///  。
    ///</param>
    ///  <param name="dataTable">
    ///  中的表名称 <see cref="T:System.Data.DataSet" />
    ///  映射到。
    ///</param>
    ///  <param name="mappingAction"><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///</param>
    ///  <param name="schemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.DataColumn" />
    ///  对象。
    ///</returns>
    function GetDataColumn(sourceColumn: string; dataType: DDN.mscorlib.DNType; dataTable: DNDataTable; mappingAction: DNMissingMappingAction; schemaAction: DNMissingSchemaAction): DNDataColumn;
    ///<summary>
    ///  获取 <see cref="T:System.Data.DataColumn" />
    ///  从指定 <see cref="T:System.Data.DataTable" />
    ///  使用指定 <see cref="T:System.Data.MissingMappingAction" />
    ///  值和名称 <see cref="T:System.Data.DataColumn" />
    ///  。
    ///</summary>
    ///  <param name="sourceColumn"><see cref="T:System.Data.DataColumn" />
    ///  的名称。
    ///</param>
    ///  <param name="mappingAction"><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  数据列。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="mappingAction" />
    ///  参数设置为 <see langword="Error" />
    ///  , ，且未指定任何映射。
    ///</exception>
    function GetColumnMappingBySchemaAction(sourceColumn: string; mappingAction: DNMissingMappingAction): DNDataColumnMapping;
    ///<summary>
    ///  获取当前 <see cref="T:System.Data.DataTable" />
    ///  指定 <see cref="T:System.Data.DataSet" />
    ///  使用指定 <see cref="T:System.Data.MissingSchemaAction" />
    ///  值。
    ///</summary>
    ///  <param name="dataSet"><see cref="T:System.Data.DataSet" />
    ///  要从其中获取 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</param>
    ///  <param name="schemaAction"><see cref="T:System.Data.MissingSchemaAction" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  构造函数。
    ///</returns>
    function GetDataTableBySchemaAction(dataSet: DNDataSet; schemaAction: DNMissingSchemaAction): DNDataTable;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataColumnMappingCollection" />
    ///  的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  数据列映射集合。
    ///</returns>
    property ColumnMappings: DNDataColumnMappingCollection read get_ColumnMappings;
    ///<summary>
    ///  获取或设置中的表名称 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的表名称 <see cref="T:System.Data.DataSet" />
    ///  。
    ///</returns>
    property DataSetTable: string read get_DataSetTable write set_DataSetTable;
    ///<summary>
    ///  获取或设置从数据源的区分大小写的源表名称。
    ///</summary>
    ///<returns>
    ///  数据源的区分大小写的源表名称。
    ///</returns>
    property SourceTable: string read get_SourceTable write set_SourceTable;
  end;

  TDNDataTableMapping = class(TDNGenericImport<DNDataTableMappingClass, DNDataTableMapping>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataTableMappingCollectionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{97C165F2-70FB-5562-80D6-5536FEA628E6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  类的新实例。
    ///  此新实例为空，也就是说，它不尚未包含任何 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</summary>
    {class} function init: DNDataTableMappingCollection;

  { static methods } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataColumnMapping" />
    ///  对象使用指定的源的表名和 <see cref="T:System.Data.DataSet" />
    ///  表名称、 使用给定 <see cref="T:System.Data.MissingMappingAction" />
    ///  。
    ///</summary>
    ///  <param name="tableMappings"><see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  要搜索的集合。
    ///</param>
    ///  <param name="sourceTable">
    ///  区分大小写映射的源表的名称。
    ///</param>
    ///  <param name="dataSetTable">
    ///  该名称，不区分大小写，所映射的 <see cref="T:System.Data.DataSet" />
    ///  表。
    ///</param>
    ///  <param name="mappingAction"><see cref="T:System.Data.MissingMappingAction" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="mappingAction" />
    ///  参数设置为 <see langword="Error" />
    ///  , ，且未指定任何映射。
    ///</exception>
    {class} function GetTableMappingBySchemaAction(tableMappings: DNDataTableMappingCollection; sourceTable: string; dataSetTable: string; mappingAction: DNMissingMappingAction): DNDataTableMapping;

  end;

  ///<summary><see cref="T:System.Data.Common.DataTableMapping" />
  ///  对象的集合。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.Common.DataTableMappingCollection')]
  DNDataTableMappingCollection = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{F3117EC1-489D-39B3-B89E-FF106E64D3E6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataTableMapping; overload;
    procedure set_Item(index: Int32; value: DNDataTableMapping); overload;
    function get_Item(sourceTable: string): DNDataTableMapping; overload;
    procedure set_Item(sourceTable: string; value: DNDataTableMapping); overload;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  集合中存在具有指定的源的表名称的对象。
    ///</summary>
    ///  <param name="value">
    ///  区分大小写的源的表名称包含 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象与此源表名; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示是否给定 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  集合中存在的对象。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此集合包含指定 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  到指定的数组。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Array" />
    ///  要向其复制 <see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  元素。
    ///</param>
    ///  <param name="index">
    ///  数组的起始索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  获取遍历该集合的枚举器可循环访问。
    ///</summary>
    ///<returns>
    ///  可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  在集合中的对象。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  要查找对象。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  在集合中的对象。
    ///</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  要插入的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象的从零开始的索引。
    ///</param>
    ///  <param name="value">
    ///  要插入的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象位于集合中的指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  要移除的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象的索引（从零开始）。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  一个 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象不存在具有指定的索引。
    ///</exception>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  具有指定的源的表名称从集合对象。
    ///</summary>
    ///  <param name="sourceTable">
    ///  若要查找区分大小写的源表名称。
    ///</param>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  一个 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象不存在使用指定的源的表名。
    ///</exception>
    procedure RemoveAt(sourceTable: string); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  数组转换为集合的末尾。
    ///</summary>
    ///  <param name="values">
    ///  数组 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(values: TArray<DNDataTableMapping>); overload;
    ///<summary>
    ///  将指定的元素复制 <see cref="T:System.Array" />
    ///  到集合的末尾。
    ///</summary>
    ///  <param name="values"><see cref="T:System.Array" />
    ///  要添加到集合的值。
    ///</param>
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象传递给集合时提供源表名称和 <see cref="T:System.Data.DataSet" />
    ///  表名。
    ///</summary>
    ///  <param name="sourceTable">
    ///  要从映射的源表的区分大小写的名称。
    ///</param>
    ///  <param name="dataSetTable">
    ///  该名称，不区分大小写的 <see cref="T:System.Data.DataSet" />
    ///  要映射到表。
    ///</param>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  添加到集合的对象。
    ///</returns>
    function Add(sourceTable: string; dataSetTable: string): DNDataTableMapping;
    ///<summary>
    ///  中的元素复制 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  到指定的数组。
    ///</summary>
    ///  <param name="array">
    ///  一个 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  要向其复制 <see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  元素。
    ///</param>
    ///  <param name="index">
    ///  数组的起始索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNDataTableMapping>; index: Int32); overload;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象具有指定 <see cref="T:System.Data.DataSet" />
    ///  表名。
    ///</summary>
    ///  <param name="dataSetTable">
    ///  该名称，不区分大小写的 <see cref="T:System.Data.DataSet" />
    ///  表，以查找。
    ///</param>
    ///<returns><see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象具有指定 <see cref="T:System.Data.DataSet" />
    ///  表名。
    ///</returns>
    function GetByDataSetTable(dataSetTable: string): DNDataTableMapping;
    ///<summary>
    ///  获取的位置 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象使用指定的源的表名。
    ///</summary>
    ///  <param name="sourceTable">
    ///  区分大小写的源表的名称。
    ///</param>
    ///<returns>
    ///  从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象使用指定的源的表名。
    ///</returns>
    function IndexOf(sourceTable: string): Int32; overload;
    ///<summary>
    ///  获取的位置 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象具有指定 <see cref="T:System.Data.DataSet" />
    ///  表名。
    ///</summary>
    ///  <param name="dataSetTable">
    ///  该名称，不区分大小写的 <see langword="DataSet" />
    ///  表，以查找。
    ///</param>
    ///<returns>
    ///  从零开始的位置 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象与给定 <see cref="T:System.Data.DataSet" />
    ///  表名称，则为-1，如果 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  集合中不存在对象。
    ///</returns>
    function IndexOfDataSetTable(dataSetTable: string): Int32;
    ///<summary>
    ///  在 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.Common.DataTableMappingCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  要插入的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象的从零开始的索引。
    ///</param>
    ///  <param name="value">
    ///  要插入的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DNDataTableMapping); overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要移除的 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  对象。
    ///</param>
    procedure Remove(value: DNDataTableMapping);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的数 <see cref="T:System.Data.Common.DataTableMapping" />
    ///  集合中的对象。
    ///</summary>
    ///<returns>
    ///  数 <see langword="DataTableMapping" />
    ///  集合中的对象。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataTableMapping read get_Item write set_Item; default;
    property Item[sourceTable: string]: DNDataTableMapping read get_Item write set_Item; default;
  end;

  TDNDataTableMappingCollection = class(TDNGenericImport<DNDataTableMappingCollectionClass, DNDataTableMappingCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{AC311513-5303-52B1-90BC-EC46F7579F8F}']
  end;

  ///<summary>
  ///  从数据源中读取行的只进流。
  ///</summary>
  [DNTypeName('System.Data.Common.DbDataReader')]
  DNDbDataReader = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{BD84DD06-A2C7-33E9-BD16-288FD41CCD30}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  关闭 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.Common.DbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  返回指定列的提供程序特定的字段类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  描述指定列的数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</returns>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在当前行的集合中获取提供程序特定的所有属性列。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///  （可选） 将发送告知应取消操作的通知。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始的列。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令，传播有关应取消操作的通知。
    ///  这不保证取消。
    ///  如果设置为 <see langword="CancellationToken.None" />
    ///  使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />
    ///  。
    ///  返回的任务必须标记为已取消。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  CancellationToken （可选） 可能会被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  读取由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbDataReader" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  <paramref name="cancellationToken" />
    ///  （可选） 被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  默认实现将返回已取消的任务，如果传递已取消 <paramref name="cancellationToken" />
    ///  。
    ///  引发的异常 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  将向您提供通过返回的任务异常属性。
    ///  其他方法和 DbDataReader 对象的属性不应调用时返回的任务尚未完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  获取指定列的数据类型的名称。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个字符串，表示数据类型的名称。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDataTypeName(ordinal: Int32): string;
    ///<summary>
    ///  返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  ，可用于循环访问数据读取器中的行。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定列的数据类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的数据类型。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  在给定从零开始的列序号时获取该列的名称。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(ordinal: Int32): string;
    ///<summary>
    ///  在给定列名时获取相应的列序号。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  从指定的列中，由指示位置处开始读取的字节流 <paramref name="dataOffset" />
    ///  , ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataOffset">
    ///  行中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  要将数据复制到的位置的缓冲区索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的最大字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBytes(ordinal: Int32; dataOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  以单个字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  从指定的列所指示的位置开始的字符流读入 <paramref name="dataOffset" />
    ///  , ，到缓冲区中，从所指示的位置开始 <paramref name="bufferOffset" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataOffset">
    ///  行中作为读取操作起始位置的索引。
    ///</param>
    ///  <param name="buffer">
    ///  要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferOffset">
    ///  要将数据复制到的位置的缓冲区索引。
    ///</param>
    ///  <param name="length">
    ///  要读取的最大字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(ordinal: Int32; dataOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  以双精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  以单精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  以 <see cref="T:System.String" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取一个值，该值指示列中是否包含不存在或丢失的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  在读取一批语句的结果时，使读取器前进到下一个结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  使读取器前进到结果集中的下一条记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  , ，它将读取器推进到结果集中的下一个记录。
    ///  此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  , ，它将读取器推进到下一个结果时读取一批语句的结果。
    ///  调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  当前行中的列数。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到 SQL Server 的实例。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Data.Common.DbDataReader" />
    ///  是否包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Common.DbDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" />
    ///  是否已关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Common.DbDataReader" />
    ///  已关闭，否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  已关闭。
    ///</exception>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、插入或删除的行数。
    ///  在为 SELECT 语句; 的-1如果受不影响任何行，则为 0 或语句失败。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbDataReader = class(TDNGenericImport<DNDbDataReaderClass, DNDbDataReader>) end;

  //-------------namespace: System.Data----------------
  DNDataTableReaderClass = interface(DNDbDataReaderClass)
  ['{DE013FFE-18A1-549D-BBFE-B7A35A1EC675}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTableReader" />
    ///  通过使用所提供的数据类 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</summary>
    ///  <param name="dataTable"><see cref="T:System.Data.DataTable" />
    ///  从中新 <see cref="T:System.Data.DataTableReader" />
    ///  获取其结果集。
    ///</param>
    {class} function init(dataTable: DNDataTable): DNDataTableReader; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.DataTableReader" />
    ///  类使用所提供的数组 <see cref="T:System.Data.DataTable" />
    ///  对象。
    ///</summary>
    ///  <param name="dataTables">
    ///  数组 <see cref="T:System.Data.DataTable" />
    ///  提供针对新的结果的对象 <see cref="T:System.Data.DataTableReader" />
    ///  对象。
    ///</param>
    {class} function init(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;

  end;

  ///<summary><see cref="T:System.Data.DataTableReader" />
  ///  以一个或多个只读、只进结果集的形式获取一个或多个 <see cref="T:System.Data.DataTable" />
  ///  对象的内容。
  ///</summary>
  [DNTypeName('System.Data.DataTableReader')]
  DNDataTableReader = interface(DNDbDataReader)
  ['{B042F350-345A-3F37-B532-D557D91D5FCA}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_HasRows: Boolean;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_FieldCount: Int32;
    function get_VisibleFieldCount: Int32;

  { methods } 

    ///<summary>
    ///  关闭当前 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.DataTableReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  前移 <see cref="T:System.Data.DataTableReader" />
    ///  到下一个结果集，如果有的话。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果没有其他结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试在已关闭中导航 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function NextResult: Boolean;
    ///<summary>
    ///  前移 <see cref="T:System.Data.DataTableReader" />
    ///  到下一个记录。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果没有另一行读取;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  获取指定列的类型提供程序特定格式。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  在提供程序特定格式中获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索其值的列的从零开始的数字。
    ///</param>
    ///<returns>
    ///  提供程序特定格式中的指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///</exception>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  提供的数组填充中的所有列的提供程序特定的类型信息 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    ///  <param name="values">
    ///  若要使用中的列的类型信息来填充的对象的数组 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  列的值复制到数组中的数。
    ///</returns>
    ///<exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取表示指定列的数据类型的字符串。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示列的数据类型的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetDataTypeName(ordinal: Int32): string;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetName(ordinal: Int32): string;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  返回可用于循环访问项集合的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  对象，表示项集合。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 <see langword="Boolean" />
    ///  。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个字节。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  读取指定的列偏移量开始到缓冲区作为数组从指定的缓冲区偏移量开始的字节的流。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  若要开始放置数据的缓冲区中的索引。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个字节数组。
    ///</exception>
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的字段不包含一个字符。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  字符数组的形式返回指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字符流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  若要开始放置数据的缓冲区中的索引。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含的字符数组。
    ///</exception>
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含日期时间值。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 <see langword="Decimal" />
    ///  值。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  双精度浮点数字的形式获取列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see langword="DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含双精度浮点数。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  以单精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含单精度浮点数。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个 GUID。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 16 位有符号的整数。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 32 位有符号的整数值。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含 64 位有符号的整数值。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  获取指定列的值作为字符串。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  指定的列不包含一个字符串。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  以其本机格式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///  此方法返回 <see langword="DBNull" />
    ///  为 null 的列。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问中为已关闭的列 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Object" />
    ///  向其复制的列的值从 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  列的值复制到数组中的数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1。
    ///</exception><exception cref="T:System.Data.DeletedRowInaccessibleException">
    ///  尝试从已删除的行中检索数据。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问某一列中为已关闭 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///  （可选） 将发送告知应取消操作的通知。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始的列。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令，传播有关应取消操作的通知。
    ///  这不保证取消。
    ///  如果设置为 <see langword="CancellationToken.None" />
    ///  使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />
    ///  。
    ///  返回的任务必须标记为已取消。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  CancellationToken （可选） 可能会被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  读取由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbDataReader" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  <paramref name="cancellationToken" />
    ///  （可选） 被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  默认实现将返回已取消的任务，如果传递已取消 <paramref name="cancellationToken" />
    ///  。
    ///  引发的异常 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  将向您提供通过返回的任务异常属性。
    ///  其他方法和 DbDataReader 对象的属性不应调用时返回的任务尚未完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  , ，它将读取器推进到结果集中的下一个记录。
    ///  此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  , ，它将读取器推进到下一个结果时读取一批语句的结果。
    ///  调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当前行的嵌套深度 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前行; 嵌套的深度始终为零。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" />
    ///  已关闭。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Data.DataTableReader" />
    ///  关闭; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取插入、 发生更改时，或通过执行 SQL 语句删除的行数。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataTableReader" />
    ///  不支持此属性，并且始终返回 0。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.DataTableReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试检索有关已关闭的信息 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    property HasRows: Boolean read get_HasRows;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  返回当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未放在有效的结果集中，0;否则为中当前行的列数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试检索中为已关闭的字段计数 <see cref="T:System.Data.DataTableReader" />
    ///  。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNDataTableReader = class(TDNGenericImport<DNDataTableReaderClass, DNDataTableReader>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcDataReaderClass = interface(DNDbDataReaderClass)
  ['{2471BE4D-B343-5EE3-9C0A-2DFE24A5479C}']
  end;

  ///<summary>
  ///  提供了一种从数据源中读取数据行的只进流。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcDataReader')]
  DNOdbcDataReader = interface(DNDbDataReader)
  ['{3F16877F-1104-31CE-BA29-EE6A4E68DB41}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(value: string): DDN.mscorlib.DNObject; overload;
    function get_VisibleFieldCount: Int32;

  { methods } 

    ///<summary>
    ///  关闭 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  ，可用于循环访问数据读取器中的行。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取一个值，该值指示列中是否包含不存在或丢失的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(i: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以字节的形式指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(i: Int32): Byte;
    ///<summary>
    ///  字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定为字符列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(i: Int32): Char;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列作为 16 位有符号整数的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(i: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  作为 32 位有符号整数指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(i: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列作为 64 位有符号整数的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(i: Int32): Int64;
    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个布尔值，这是列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(i: Int32): Boolean;
    ///<summary>
    ///  获取指定列的值作为单精度浮点数。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  作为单精度浮点数的指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(i: Int32): Single;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  获取指定列的值作为双精度浮点数。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  作为双精度浮点数的指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(i: Int32): Double;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以 GUID 形式表示的指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(i: Int32): string;
    ///<summary>
    ///  读取字节的流从指定的列偏移量到缓冲区作为一个数组，从特定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中开始读取的操作所在的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要读取的字节数。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  读取字符流，从指定的列偏移量到缓冲区作为一个数组，从特定缓冲区偏移量开始。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中开始读取的操作所在的行的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要读取的字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  前移 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  到下一个记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  前移 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  到下一个结果时读取批处理 SQL 语句的结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  获取源数据类型的名称。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  源数据类型的名称。
    ///</returns>
    function GetDataTypeName(i: Int32): string;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的名称。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个字符串，表示指定列的名称。
    ///</returns>
    function GetName(i: Int32): string;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="value">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    function GetOrdinal(value: string): Int32;
    ///<summary>
    ///  获取以其本机格式表示的指定序号处的列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  要返回的值。
    ///</returns>
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  类型的数组 <see cref="T:System.Object" />
    ///  向其复制属性列。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    function GetDate(i: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.TimeSpan" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值 <see cref="T:System.TimeSpan" />
    ///  对象。
    ///</returns>
    function GetTime(i: Int32): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回指定列的提供程序特定的字段类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  描述指定列的数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</returns>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在当前行的集合中获取提供程序特定的所有属性列。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///  （可选） 将发送告知应取消操作的通知。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始的列。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令，传播有关应取消操作的通知。
    ///  这不保证取消。
    ///  如果设置为 <see langword="CancellationToken.None" />
    ///  使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />
    ///  。
    ///  返回的任务必须标记为已取消。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  CancellationToken （可选） 可能会被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  读取由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbDataReader" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  <paramref name="cancellationToken" />
    ///  （可选） 被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  默认实现将返回已取消的任务，如果传递已取消 <paramref name="cancellationToken" />
    ///  。
    ///  引发的异常 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  将向您提供通过返回的任务异常属性。
    ///  其他方法和 DbDataReader 对象的属性不应调用时返回的任务尚未完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  , ，它将读取器推进到结果集中的下一个记录。
    ///  此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  , ，它将读取器推进到下一个结果时读取一批语句的结果。
    ///  调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未定位在有效记录集中，0;否则为当前记录中的列数。
    ///  默认值为 -1。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到数据源。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  指示是否 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  已关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcDataReader" />
    ///  已关闭，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、插入或删除的行数。
    ///  在为 SELECT 语句; 的-1如果没有行受到影响，则为 0 或语句失败。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[value: string]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Data.Common.DbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNOdbcDataReader = class(TDNGenericImport<DNOdbcDataReaderClass, DNOdbcDataReader>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbDataReaderClass = interface(DNDbDataReaderClass)
  ['{5998AC6D-88DE-5E03-8321-2B9F08D92B18}']
  end;

  ///<summary>
  ///  提供了一种从数据源中读取数据行的只进流。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbDataReader')]
  DNOleDbDataReader = interface(DNDbDataReader)
  ['{EC6F90AC-BAD9-3D17-9115-66514B377436}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_VisibleFieldCount: Int32;

  { methods } 

    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(ordinal: Int32): Boolean;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以字节的形式指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(ordinal: Int32): Byte;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  获取指定列的值作为双精度浮点数。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(ordinal: Int32): Double;
    ///<summary>
    ///  返回一个可用于循环访问数据读取器中的行的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEnumerator" />
    ///  ，可用于循环访问数据读取器中的行。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取指定列的值作为单精度浮点数。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(ordinal: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(ordinal: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(ordinal: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(ordinal: Int32): Int64;
    ///<summary>
    ///  获取指定列的值作为字符串。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(ordinal: Int32): string;
    ///<summary>
    ///  获取以其本机格式表示的指定序号处的列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  要返回的值。
    ///</returns>
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取一个值，该值指示列中是否包含不存在或丢失的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(ordinal: Int32): Boolean;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  关闭 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  流读入的字节从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  读取字符流从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  从其开始读取的操作的行中的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要将数据复制到的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要读取的字符数。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(ordinal: Int32): Char;
    ///<summary>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNOleDbDataReader;
    ///<summary>
    ///  获取源数据类型的名称。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  后端数据类型的名称。
    ///  有关详细信息，请参阅 SQL Server data types 或 Access data types。
    ///</returns>
    function GetDataTypeName(index: Int32): string;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</returns>
    function GetFieldType(index: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的名称。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(index: Int32): string;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  以 <see cref="T:System.TimeSpan" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetTimeSpan(ordinal: Int32): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  在读取批处理 SQL 语句的结果时，将数据读取器推进到下一个结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  前移 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  到下一个记录。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个行;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回指定列的提供程序特定的字段类型。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  描述指定列的数据类型的 <see cref="T:System.Type" />
    ///  对象。
    ///</returns>
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  以 <see cref="T:System.Object" />
    ///  实例的形式获取指定列的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在当前行的集合中获取提供程序特定的所有属性列。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///  （可选） 将发送告知应取消操作的通知。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始的列。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令，传播有关应取消操作的通知。
    ///  这不保证取消。
    ///  如果设置为 <see langword="CancellationToken.None" />
    ///  使得此方法等效于 <see cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)" />
    ///  。
    ///  返回的任务必须标记为已取消。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  CancellationToken （可选） 可能会被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  如果传递已取消的 cancellationToken，默认实现将返回已取消的任务。
    ///  读取由引发的异常将通过返回的任务异常属性进行通信。
    ///  不调用其他方法和属性的 <see langword="DbDataReader" />
    ///  对象，直到返回的任务已完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  这是异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  。
    ///  提供程序应使用适当的实现重写。
    ///  <paramref name="cancellationToken" />
    ///  （可选） 被忽略。
    ///  默认实现调用同步 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  方法，并返回已完成的任务，阻止调用线程。
    ///  默认实现将返回已取消的任务，如果传递已取消 <paramref name="cancellationToken" />
    ///  。
    ///  引发的异常 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  将向您提供通过返回的任务异常属性。
    ///  其他方法和 DbDataReader 对象的属性不应调用时返回的任务尚未完成。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="ordinal">
    ///  将数据检索为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  , ，它将读取器推进到结果集中的下一个记录。
    ///  此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  , ，它将读取器推进到下一个结果时读取一批语句的结果。
    ///  调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未放在有效记录集中，0;否则为当前记录中的列数。
    ///  默认值为 -1。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到数据源。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  指示是否关闭数据读取器。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  关闭; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取通过执行 SQL 语句更改、插入或删除的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    ///<summary>
    ///  获取 <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNOleDbDataReader = class(TDNGenericImport<DNOleDbDataReaderClass, DNOleDbDataReader>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDataReaderClass = interface(DNDbDataReaderClass)
  ['{119ACEE0-904D-5216-A436-ED710B01A3C8}']
  end;

  ///<summary>
  ///  提供一种从 SQL Server 数据库中读取只进的行流的方式。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlDataReader')]
  DNSqlDataReader = interface(DNDbDataReader)
  ['{071B1B29-B2A1-31D8-B9E6-8C926B02709A}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  获取表示指定列的数据类型的字符串。
    ///</summary>
    ///  <param name="i">
    ///  要查找的列从零开始的序号位置。
    ///</param>
    ///<returns>
    ///  表示指定列的数据类型的字符串。
    ///</returns>
    function GetDataTypeName(i: Int32): string;
    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  ，它循环访问 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取 <see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see cref="T:System.Type" />
    ///  ，它是该对象的数据类型。
    ///  如果客户端上，如果一个用户定义类型 (UDT) 从数据库中，返回上不存在类型 GetFieldType ，则返回 null。
    ///</returns>
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取指定列的名称。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的名称。
    ///</returns>
    function GetName(i: Int32): string;
    ///<summary>
    ///  获取 <see langword="Object" />
    ///  ，它表示的基础提供程序特定的字段类型。
    ///</summary>
    ///  <param name="i"><see cref="T:System.Int32" />
    ///  表示列序号。
    ///</param>
    ///<returns>
    ///  获取 <see cref="T:System.Object" />
    ///  ，它表示的基础提供程序特定的字段类型。
    ///</returns>
    function GetProviderSpecificFieldType(i: Int32): DDN.mscorlib.DNType;
    ///<summary>
    ///  获取列序号，给定的列的名称。
    ///</summary>
    ///  <param name="name">
    ///  列的名称。
    ///</param>
    ///<returns>
    ///  从零开始的列序号。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  指定的名称不是有效的列名。
    ///</exception>
    function GetOrdinal(name: string): Int32;
    ///<summary>
    ///  获取 <see langword="Object" />
    ///  ，它表示基础提供程序特定值。
    ///</summary>
    ///  <param name="i"><see cref="T:System.Int32" />
    ///  表示列序号。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，它表示基础提供程序特定值。
    ///</returns>
    function GetProviderSpecificValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取基础提供程序特定值的表示形式的对象的数组。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Object" />
    ///  向其复制的列的值。
    ///</param>
    ///<returns>
    ///  基础提供程序特定值的表示形式的对象的数组。
    ///</returns>
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  作为 SQL Server 类型，指定列中返回的数据值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlDbType" />
    ///  。
    ///</returns>
    function GetSqlValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  以其本机格式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.DBNull" />
    ///  用于 null 数据库列。
    ///</returns>
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  关闭 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  对象。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  返回一个描述 <see cref="T:System.Data.DataTable" />
    ///  的列元数据的 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个描述列元数据的 <see cref="T:System.Data.DataTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  已关闭。
    ///</exception>
    function GetSchemaTable: DNDataTable;
    ///<summary>
    ///  以布尔值的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetBoolean(i: Int32): Boolean;
    ///<summary>
    ///  检索数据的类型为作为 XML <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  指定列的值。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是 xml。
    ///</exception>
    function GetXmlReader(i: Int32): DDN.System.Xml.DNXmlReader;
    ///<summary>
    ///  检索二进制、 图像、 varbinary、 UDT 和 variant 数据类型为 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个流对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  binary
    ///  图像
    ///  varbinary
    ///  udt
    ///</exception>
    function GetStream(i: Int32): DDN.mscorlib.DNStream;
    ///<summary>
    ///  以字节的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  以字节的形式指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetByte(i: Int32): Byte;
    ///<summary>
    ///  从指定的列偏移量将字节流读入数组以给定的缓冲区偏移量开始的缓冲区。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字节数。
    ///</returns>
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  检索 Char、 NChar、 NText、 NVarChar、 text、 varChar、 和 Variant 数据类型为 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  要检索的列。
    ///</param>
    ///<returns>
    ///  返回的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  尝试读取顺序模式中的以前读取列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  返回的类型不是以下类型之一︰
    ///  char
    ///  nchar
    ///  ntext
    ///  nvarchar
    ///  文本
    ///  varchar
    ///</exception>
    function GetTextReader(i: Int32): DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  以单个字符的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetChar(i: Int32): Char;
    ///<summary>
    ///  读取字符流从指定的列偏移量到缓冲区作为数组从给定的缓冲区偏移量处开始。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///  <param name="dataIndex">
    ///  中自其开始读取的操作的字段的索引。
    ///</param>
    ///  <param name="buffer">
    ///  若要读取的字节流读入的缓冲区。
    ///</param>
    ///  <param name="bufferIndex">
    ///  中的索引位置 <paramref name="buffer" />
    ///  写入操作旨在启动。
    ///</param>
    ///  <param name="length">
    ///  要复制到缓冲区的最大长度。
    ///</param>
    ///<returns>
    ///  读取的实际字符数。
    ///</returns>
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    ///<summary>
    ///  以 <see cref="T:System.DateTime" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  以 <see cref="T:System.Decimal" />
    ///  对象的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  以双精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDouble(i: Int32): Double;
    ///<summary>
    ///  以单精度浮点数字的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetFloat(i: Int32): Single;
    ///<summary>
    ///  以全局唯一标识符 (GUID) 的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  16 位有符号整数形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt16(i: Int32): Int16;
    ///<summary>
    ///  作为 32 位有符号整数获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt32(i: Int32): Int32;
    ///<summary>
    ///  以 64 位有符号整数的形式获取指定列的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetInt64(i: Int32): Int64;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  列的值。
    ///</returns>
    function GetSqlBoolean(i: Int32): DNSqlBoolean;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</returns>
    function GetSqlBinary(i: Int32): DNSqlBinary;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function GetSqlByte(i: Int32): DNSqlByte;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlBytes" />
    ///  。
    ///</returns>
    function GetSqlBytes(i: Int32): DNSqlBytes;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlChars" />
    ///  。
    ///</returns>
    function GetSqlChars(i: Int32): DNSqlChars;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</returns>
    function GetSqlDateTime(i: Int32): DNSqlDateTime;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function GetSqlDecimal(i: Int32): DNSqlDecimal;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</returns>
    function GetSqlGuid(i: Int32): DNSqlGuid;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值  <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function GetSqlDouble(i: Int32): DNSqlDouble;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    function GetSqlInt16(i: Int32): DNSqlInt16;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function GetSqlInt32(i: Int32): DNSqlInt32;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function GetSqlInt64(i: Int32): DNSqlInt64;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function GetSqlMoney(i: Int32): DNSqlMoney;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function GetSqlSingle(i: Int32): DNSqlSingle;
    ///<summary>
    ///  获取指定列的值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  表示为列的值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function GetSqlString(i: Int32): DNSqlString;
    ///<summary>
    ///  获取指定列的值作为一个 XML 值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  值，该值包含相应字段中存储的 XML。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递的索引已超出范围的范围为 0 到 <see cref="P:System.Data.DataTableReader.FieldCount" />
    ///  -1
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试读取或访问中为已关闭的列 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  检索到的数据与不兼容 <see cref="T:System.Data.SqlTypes.SqlXml" />
    ///  类型。
    ///</exception>
    function GetSqlXml(i: Int32): DNSqlXml;
    ///<summary>
    ///  填充数组 <see cref="T:System.Object" />
    ///  ，其中包含的记录中的所有列的值表示为 SQL Server 类型。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Object" />
    ///  要将值复制到其中。
    ///  与 SQL Server 类型表示的列的值。
    ///</param>
    ///<returns>
    ///  一个整数，指示复制的列数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="values" />
    ///  为 null。
    ///</exception>
    function GetSqlValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取指定列的值作为字符串。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetString(i: Int32): string;
    ///<summary>
    ///  检索指定列的值 <see cref="T:System.TimeSpan" />
    ///  对象。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetTimeSpan(i: Int32): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  检索指定列的值 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  指定列的值。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  指定的强制转换无效。
    ///</exception>
    function GetDateTimeOffset(i: Int32): DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  使用来填充数组的对象的当前行的列的值。
    ///</summary>
    ///  <param name="values">
    ///  要将属性列复制到的 <see cref="T:System.Object" />
    ///  数组。
    ///</param>
    ///<returns>
    ///  数组中的 <see cref="T:System.Object" />
    ///  实例数。
    ///</returns>
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    ///<summary>
    ///  获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="i">
    ///  从零开始的列序号。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see cref="T:System.DBNull" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDBNull(i: Int32): Boolean;
    ///<summary>
    ///  读取批处理 TRANSACT-SQL 语句的结果时，将数据读取器推进到下一个结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有多个结果集;否则为<see langword="false" />
    ///  。
    ///</returns>
    function NextResult: Boolean;
    ///<summary>
    ///  让 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  前进到下一条记录。
    ///</summary>
    ///<returns>
    ///  如果存在更多行，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.SqlClient.SqlDataReader.NextResult" />
    ///  , ，该数据读取器推进到下一个结果，在读取批处理的结果时 Transact-SQL 语句。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///</exception>
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  , ，哪些改进 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  到下一个记录。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="cancellationToken">
    ///  取消指令。
    ///</param>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在完成任务前，为同一个实例多次调用 <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.Data.SqlClient.SqlException">
    ///  执行命令文本时，SQL Server 返回了一个错误。
    ///</exception>
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///  取消标记可用于请求在命令超时超过前放弃操作。
    ///  将通过返回的任务对象报告异常。
    ///</summary>
    ///  <param name="i">
    ///  要检索的从零开始列。
    ///</param>
    ///  <param name="cancellationToken">
    ///  取消指令，传播有关应取消操作的通知。
    ///  这不保证取消。
    ///  如果设置为 <see langword="CancellationToken.None" />
    ///  使得此方法等效于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />
    ///  。
    ///  返回的任务必须标记为已取消。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///  在连接字符串中指定 <see langword="Context Connection=true" />
    ///  。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(i: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbDataReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象请求的列序号。
    ///</summary>
    ///  <param name="ordinal">
    ///  从零开始的列序号。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Common.DbDataReader" />
    ///  对象。
    ///</returns>
    function GetData(ordinal: Int32): DNDbDataReader;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)" />
    ///  , ，后者将获取一个值，该值指示列是否包含不存在或缺少的值。
    ///</summary>
    ///  <param name="ordinal">
    ///  要检索的从零开始列。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的列的值等效于 <see langword="DBNull" />
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  连接断开或很期间数据检索已关闭。
    ///<see cref="T:System.Data.Common.DbDataReader" />
    ///  数据检索过程中关闭。
    ///  没有可供读取的数据 (例如，第一个 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  没有调用，或返回了 false)。
    ///  试图读取顺序模式中的以前读取的列。
    ///  没有正在进行的异步操作。
    ///  这适用于所有 Get * 方法在顺序模式中，运行时无法读取流时调用它们。
    ///</exception><exception cref="T:System.IndexOutOfRangeException">
    ///  试图读取某个列不存在。
    ///</exception>
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.Read" />
    ///  , ，它将读取器推进到结果集中的下一个记录。
    ///  此方法调用 <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    ///<summary>
    ///  异步版本 <see cref="M:System.Data.Common.DbDataReader.NextResult" />
    ///  , ，它将读取器推进到下一个结果时读取一批语句的结果。
    ///  调用 <see cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)" />
    ///  与 CancellationToken.None。
    ///</summary>
    ///<returns>
    ///  表示异步操作的任务。
    ///</returns>
    ///<exception cref="T:System.Data.Common.DbException">
    ///  执行命令文本时出错。
    ///</exception>
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前行的嵌套深度。
    ///</summary>
    ///<returns>
    ///  当前行的嵌套深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前行中的列数。
    ///</summary>
    ///<returns>
    ///  如果未放在有效记录集中，0;否则为中当前行的列数。
    ///  默认值为 -1。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  没有当前连接到 SQL Server 的实例。
    ///</exception>
    property FieldCount: Int32 read get_FieldCount;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  包含一个或多个行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  包含一个或多个行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasRows: Boolean read get_HasRows;
    ///<summary>
    ///  检索一个布尔值，该值指示是否指定 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例已关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果指定 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  实例已关闭，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClosed: Boolean read get_IsClosed;
    ///<summary>
    ///  获取已更改、 插入或删除通过执行 TRANSACT-SQL 语句的行数。
    ///</summary>
    ///<returns>
    ///  更改、 插入或删除，则行数如果受不影响任何行，则为 0 或语句失败。和-1 表示 SELECT 语句。
    ///</returns>
    property RecordsAffected: Int32 read get_RecordsAffected;
    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  中未隐藏的字段的数目。
    ///</summary>
    ///<returns>
    ///  未隐藏的字段的数目。
    ///</returns>
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNSqlDataReader = class(TDNGenericImport<DNSqlDataReaderClass, DNSqlDataReader>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbParameterClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F6963C2C-CA04-5763-A9E1-B6EC207FA30C}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Data.Common.DbCommand" />
  ///  的参数，还可以是它到 <see cref="T:System.Data.DataSet" />
  ///  列的映射。
  ///  有关参数的详细信息，请参阅 配置参数和参数数据类型。
  ///</summary>
  [DNTypeName('System.Data.Common.DbParameter')]
  DNDbParameter = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{C4B6E989-39F9-3A4D-ABFE-52E8C93A7E8B}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  重置 DbType 属性设置为其原始设置。
    ///</summary>
    procedure ResetDbType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.DbType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DbType" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Data.DbType.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性未设置为有效 <see cref="T:System.Data.DbType" />
    ///  。
    ///</exception>
    property DbType: DNDbType read get_DbType write set_DbType;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///  默认值为 <see langword="Input" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为一个有效 <see cref="T:System.Data.ParameterDirection" />
    ///  值。
    ///</exception>
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是否接受 null 值。
    ///</summary>
    ///<returns>
    ///  如果接受 null 值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Common.DbParameter" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbParameter" />
    ///  的名称。
    ///  默认值为空字符串("")。
    ///</returns>
    property ParameterName: string read get_ParameterName write set_ParameterName;
    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  获取或设置用于表示 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  属性的最大位数。
    ///</summary>
    ///<returns>
    ///  用于表示 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  属性的最大位数。
    ///</returns>
    property Precision: Byte read get_Precision write set_Precision;
    ///<summary>
    ///  获取或设置所解析的 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  的小数位数。
    ///</summary>
    ///<returns>
    ///  所解析的 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  的小数位数。
    ///</returns>
    property Scale: Byte read get_Scale write set_Scale;
    ///<summary>
    ///  获取或设置列中的数据的最大大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  列中的数据的最大大小（以字节为单位）。
    ///  默认值将根据参数值进行推断。
    ///</returns>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" />
    ///  ，并且用于加载或返回 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  映射到 <see cref="T:System.Data.DataSet" />
    ///  的源列的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    ///<summary>
    ///  设置或获取一个值，该值指示源列是否可以为 null。
    ///  这允许 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  来正确生成为 null 的列的 Update 语句。
    ///</summary>
    ///<returns>
    ///  如果源列可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataRowVersion" />
    ///  来加载时使用 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  默认值为 <see langword="Current" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  值。
    ///</exception>
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
    ///<summary>
    ///  获取或设置参数的值。
    ///</summary>
    ///<returns>
    ///  充当参数值的 <see cref="T:System.Object" />
    ///  。
    ///  默认值为 null。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNDbParameter = class(TDNGenericImport<DNDbParameterClass, DNDbParameter>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcParameterClass = interface(DNDbParameterClass)
  ['{E60BBD69-62CF-59DB-B824-4FF4978220E7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类，该类使用参数名称和一个 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="name">
    ///  参数的名称。
    ///</param>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象。
    ///</param>
    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类，该类使用参数名称和数据类型。
    ///</summary>
    ///  <param name="name">
    ///  参数的名称。
    ///</param>
    ///  <param name="type"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="type" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(name: string; &type: DNOdbcType): DNOdbcParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类，该类使用参数名称、 数据类型和长度。
    ///</summary>
    ///  <param name="name">
    ///  参数的名称。
    ///</param>
    ///  <param name="type"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="type" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(name: string; &type: DNOdbcType; size: Int32): DNOdbcParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类，该类使用参数名称、 数据类型、 长度和源列名称。
    ///</summary>
    ///  <param name="name">
    ///  参数的名称。
    ///</param>
    ///  <param name="type"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="sourcecolumn">
    ///  源列的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="type" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(name: string; &type: DNOdbcType; size: Int32; sourcecolumn: string): DNOdbcParameter; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类的新实例，该类使用参数名称、数据类型、长度、源列名、参数方向、数值精度和其他属性。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="odbcType"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="parameterDirection"><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</param>
    ///  <param name="isNullable">
    ///  如果字段的值可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="precision">
    ///  所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  的小数点左右两侧的总位数。
    ///</param>
    ///  <param name="scale">
    ///  所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  的总小数位数。
    ///</param>
    ///  <param name="srcColumn">
    ///  源列的名称。
    ///</param>
    ///  <param name="srcVersion"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="type" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; odbcType: DNOdbcType; size: Int32; parameterDirection: DNParameterDirection; isNullable: Boolean; precision: Byte; scale: Byte; srcColumn: string; srcVersion: DNDataRowVersion; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="odbcType"><see cref="P:System.Data.Odbc.OdbcParameter.OdbcType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="parameterDirection"><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</param>
    ///  <param name="precision">
    ///  所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  的小数点左右两侧的总位数。
    ///</param>
    ///  <param name="scale">
    ///  所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  的总小数位数。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列的名称。
    ///</param>
    ///  <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///  <param name="sourceColumnNullMapping"><see langword="true" />
    ///  如果相应的源列可以为 null; <see langword="false" />
    ///  如果不是。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  中提供的值 <paramref name="type" />
    ///  参数是无效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; odbcType: DNOdbcType; size: Int32; parameterDirection: DNParameterDirection; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; sourceColumnNullMapping: Boolean; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Data.Odbc.OdbcCommand" />
  ///  的参数，还可以表示它到 <see cref="T:System.Data.DataColumn" />
  ///  的映射。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcParameter')]
  DNOdbcParameter = interface(DNDbParameter)
  ['{1E022618-1E0C-36DB-BBE6-CE8F6AD07304}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_OdbcType: DNOdbcType;
    procedure set_OdbcType(value: DNOdbcType);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);

  { methods } 

    ///<summary>
    ///  重置与此 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  关联的类型。
    ///</summary>
    procedure ResetDbType;
    ///<summary>
    ///  获取一个包含 <see cref="P:System.Data.Odbc.OdbcParameter.ParameterName" />
    ///  的字符串。
    ///</summary>
    ///<returns>
    ///  一个包含 <see cref="P:System.Data.Odbc.OdbcParameter.ParameterName" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  重置与此 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  关联的类型。
    ///</summary>
    procedure ResetOdbcType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.DbType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DbType" />
    ///  值之一。
    ///  默认值为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  该属性未设置为有效 <see cref="T:System.Data.DbType" />
    ///  。
    ///</exception>
    property DbType: DNDbType read get_DbType write set_DbType;
    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.Odbc.OdbcType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值，该值是 <see cref="T:System.Data.Odbc.OdbcType" />
    ///  的参数。
    ///  默认值为 <see langword="Nchar" />
    ///  。
    ///</returns>
    property OdbcType: DNOdbcType read get_OdbcType write set_OdbcType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的名称。
    ///  默认值为空字符串("")。
    ///</returns>
    property ParameterName: string read get_ParameterName write set_ParameterName;
    ///<summary>
    ///  获取或设置用来表示的数字个数 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  用于表示 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  属性的最大位数。
    ///  默认值为 0，它表示的数据提供程序设置的精度 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  。
    ///</returns>
    property Precision: Byte read get_Precision write set_Precision;
    ///<summary>
    ///  获取或设置所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  的小数位数。
    ///</summary>
    ///<returns>
    ///  所解析的 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  的小数位数。
    ///  默认值为 0。
    ///</returns>
    property Scale: Byte read get_Scale write set_Scale;
    ///<summary>
    ///  获取或设置参数的值。
    ///</summary>
    ///<returns>
    ///  充当参数值的 <see cref="T:System.Object" />
    ///  。
    ///  默认值为 null。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///  默认值为 <see langword="Input" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</exception>
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是否接受 null 值。
    ///</summary>
    ///<returns>
    ///  如果接受 null 值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置列中数据的最大大小。
    ///</summary>
    ///<returns>
    ///  列中数据的最大大小。
    ///  默认值将根据参数值进行推断。
    ///</returns>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" />
    ///  ，并且用于加载或返回 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  将用于设置此参数的值的源列的名称。
    ///  默认值为空字符串("")。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    ///<summary>
    ///  设置或获取一个值，该值指示源列是否可以为 null。
    ///  这样就 <see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  正确生成为 null 的列的 Update 语句。
    ///</summary>
    ///<returns>
    ///  如果源列可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataRowVersion" />
    ///  来加载时使用 <see cref="P:System.Data.Odbc.OdbcParameter.Value" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  默认值为当前。
    ///</returns>
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
  end;

  TDNOdbcParameter = class(TDNGenericImport<DNOdbcParameterClass, DNOdbcParameter>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbParameterClass = interface(DNDbParameterClass)
  ['{8FC50BD2-324C-56E6-9486-C4C0BD85DA81}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类，该类使用参数名称和新值 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="value">
    ///  新的值 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象。
    ///</param>
    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类，该类使用参数名称和数据类型。
    ///</summary>
    ///  <param name="name">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dataType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dataType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(name: string; dataType: DNOleDbType): DNOleDbParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类，该类使用参数名称、 数据类型和长度。
    ///</summary>
    ///  <param name="name">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dataType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dataType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(name: string; dataType: DNOleDbType; size: Int32): DNOleDbParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类，该类使用参数名称、 数据类型、 长度和源列名称。
    ///</summary>
    ///  <param name="name">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dataType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="srcColumn">
    ///  源列的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dataType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(name: string; dataType: DNOleDbType; size: Int32; srcColumn: string): DNOleDbParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="direction"><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</param>
    ///  <param name="isNullable">
    ///  如果字段的值可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="precision">
    ///  所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的小数点左右两侧的总位数。
    ///</param>
    ///  <param name="scale">
    ///  所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的总小数位数。
    ///</param>
    ///  <param name="srcColumn">
    ///  源列的名称。
    ///</param>
    ///  <param name="srcVersion"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dataType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; dbType: DNOleDbType; size: Int32; direction: DNParameterDirection; isNullable: Boolean; precision: Byte; scale: Byte; srcColumn: string; srcVersion: DNDataRowVersion; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  类，该类使用参数名称、 数据类型、 长度、 源列名称、 参数方向、 数值精度和其他属性。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="direction"><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</param>
    ///  <param name="precision">
    ///  所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的小数点左右两侧的总位数。
    ///</param>
    ///  <param name="scale">
    ///  所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的总小数位数。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列的名称。
    ///</param>
    ///  <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///  <param name="sourceColumnNullMapping">
    ///  如果源列可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dataType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; dbType: DNOleDbType; size: Int32; direction: DNParameterDirection; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; sourceColumnNullMapping: Boolean; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Data.OleDb.OleDbCommand" />
  ///  的参数，还可以是参数到 <see cref="T:System.Data.DataSet" />
  ///  列的映射。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbParameter')]
  DNOleDbParameter = interface(DNDbParameter)
  ['{A96E1807-77BF-31AD-A4CE-2DEC5B2C4A62}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_OleDbType: DNOleDbType;
    procedure set_OleDbType(value: DNOleDbType);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);

  { methods } 

    ///<summary>
    ///  重置与此 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  关联的类型。
    ///</summary>
    procedure ResetDbType;
    ///<summary>
    ///  获取一个包含 <see cref="P:System.Data.OleDb.OleDbParameter.ParameterName" />
    ///  的字符串。
    ///</summary>
    ///<returns>
    ///  一个包含 <see cref="P:System.Data.OleDb.OleDbParameter.ParameterName" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  重置与此 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  关联的类型。
    ///</summary>
    procedure ResetOleDbType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.DbType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DbType" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Data.DbType.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  该属性未设置为有效 <see cref="T:System.Data.DbType" />
    ///  。
    ///</exception>
    property DbType: DNDbType read get_DbType write set_DbType;
    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.OleDb.OleDbType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  参数的 <see cref="T:System.Data.OleDb.OleDbType" />
    ///  。
    ///  默认值为 <see cref="F:System.Data.OleDb.OleDbType.VarWChar" />
    ///  。
    ///</returns>
    property OleDbType: DNOleDbType read get_OleDbType write set_OleDbType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的名称。
    ///  默认值为空字符串("")。
    ///</returns>
    property ParameterName: string read get_ParameterName write set_ParameterName;
    ///<summary>
    ///  获取或设置用于表示 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  属性的最大位数。
    ///</summary>
    ///<returns>
    ///  用于表示 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  属性的最大位数。
    ///  默认值为 0，它表示的数据提供程序设置的精度 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  。
    ///</returns>
    property Precision: Byte read get_Precision write set_Precision;
    ///<summary>
    ///  获取或设置所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的小数位数。
    ///</summary>
    ///<returns>
    ///  所解析的 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的小数位数。
    ///  默认值为 0。
    ///</returns>
    property Scale: Byte read get_Scale write set_Scale;
    ///<summary>
    ///  获取或设置参数的值。
    ///</summary>
    ///<returns>
    ///  充当参数值的 <see cref="T:System.Object" />
    ///  。
    ///  默认值为 null。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是仅输入、 输出、 双向参数还是存储的过程返回值参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///  默认值为 <see langword="Input" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</exception>
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是否接受 null 值。
    ///</summary>
    ///<returns>
    ///  如果接受 null 值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置列中的数据的最大大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  列中的数据的最大大小（以字节为单位）。
    ///  默认值将根据参数值进行推断。
    ///</returns>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  获取或设置映射到的源列的名称 <see cref="T:System.Data.DataSet" />
    ///  ，并且用于加载或返回 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  映射到 <see cref="T:System.Data.DataSet" />
    ///  的源列的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    ///<summary>
    ///  设置或获取一个值，该值指示源列是否可以为 null。
    ///  通过此操作，<see cref="T:System.Data.Common.DbCommandBuilder" />
    ///  能够为可以为 null 的列正确地生成 Update 语句。
    ///</summary>
    ///<returns>
    ///  如果源列可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.DataRowVersion" />
    ///  来加载时使用 <see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  默认值为 <see langword="Current" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该属性未设置为其中一个 <see cref="T:System.Data.DataRowVersion" />
    ///  值。
    ///</exception>
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
  end;

  TDNOleDbParameter = class(TDNGenericImport<DNOleDbParameterClass, DNOleDbParameter>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlParameterClass = interface(DNDbParameterClass)
  ['{BA938AC2-82F5-59BE-88BC-E00D81906E86}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlParameter; overload;
    ///<summary>
    ///  使用提供的参数名称、参数类型、参数大小、<see cref="T:System.Data.ParameterDirection" />
    ///  、参数精度、参数小数位数、源列、要使用的 <see cref="T:System.Data.DataRowVersion" />
    ///  以及参数值初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parameterName">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="direction"><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</param>
    ///  <param name="isNullable">
    ///  如果字段的值可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="precision">
    ///  所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的小数点左右两侧的总位数。
    ///</param>
    ///  <param name="scale">
    ///  所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的总小数位数。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />
    ///  )（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" />
    ///  中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  ）。
    ///</param>
    ///  <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dbType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32; direction: DNParameterDirection; isNullable: Boolean; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; value: DDN.mscorlib.DNObject): DNSqlParameter; overload;
    ///<summary>
    ///  使用以下信息初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例：参数名、参数类型、参数长度、参数传递方向、参数精度、参数的范围、源列名、<see cref="T:System.Data.DataRowVersion" />
    ///  的一个值、源列映射的布尔值、<see langword="SqlParameter" />
    ///  的值、此 XML 实例的架构集所在的数据库名称、此 XML 实例的架构集所在的关系型架构，以及此参数的架构集的名称。
    ///</summary>
    ///  <param name="parameterName">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="direction"><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</param>
    ///  <param name="precision">
    ///  所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的小数点左右两侧的总位数。
    ///</param>
    ///  <param name="scale">
    ///  所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的总小数位数。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />
    ///  )（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" />
    ///  中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  ）。
    ///</param>
    ///  <param name="sourceVersion"><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///</param>
    ///  <param name="sourceColumnNullMapping">
    ///  如果源列可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</param>
    ///  <param name="xmlSchemaCollectionDatabase">
    ///  此 XML 实例的架构集合所在的数据库的名称。
    ///</param>
    ///  <param name="xmlSchemaCollectionOwningSchema">
    ///  此 XML 实例的架构集合所在的所属关系架构。
    ///</param>
    ///  <param name="xmlSchemaCollectionName">
    ///  此参数的架构集的名称。
    ///</param>
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32; direction: DNParameterDirection; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; sourceColumnNullMapping: Boolean; value: DDN.mscorlib.DNObject; xmlSchemaCollectionDatabase: string; xmlSchemaCollectionOwningSchema: string; xmlSchemaCollectionName: string): DNSqlParameter; overload;
    ///<summary>
    ///  使用提供的参数名称和数据类型初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parameterName">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dbType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; dbType: DNSqlDbType): DNSqlParameter; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例，该类使用参数名称和新 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的值。
    ///</summary>
    ///  <param name="parameterName">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="value">
    ///  作为 <see cref="T:System.Object" />
    ///  的值的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</param>
    {class} function init(parameterName: string; value: DDN.mscorlib.DNObject): DNSqlParameter; overload;
    ///<summary>
    ///  使用参数名称、<see cref="T:System.Data.SqlDbType" />
    ///  和大小初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parameterName">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dbType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32): DNSqlParameter; overload;
    ///<summary>
    ///  使用提供的参数名称、<see cref="T:System.Data.SqlDbType" />
    ///  、大小和源列名初始化 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parameterName">
    ///  要映射的参数的名称。
    ///</param>
    ///  <param name="dbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  参数的长度。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />
    ///  )（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" />
    ///  中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  ）。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  参数 <paramref name="dbType" />
    ///  中提供的值不是有效的后端数据类型。
    ///</exception>
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32; sourceColumn: string): DNSqlParameter; overload;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Data.SqlClient.SqlCommand" />
  ///  的参数，或者其与 <see cref="T:System.Data.DataSet" />
  ///  列的映射。
  ///  此类不能被继承。
  ///  有关参数的详细信息，请参阅 配置参数和参数数据类型。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlParameter')]
  DNSqlParameter = interface(DNDbParameter)
  ['{FBA6EDCE-D5E7-3E0D-8DF5-18E249F61813}']
  { getters & setters } 

    function get_CompareInfo: DNSqlCompareOptions;
    procedure set_CompareInfo(value: DNSqlCompareOptions);
    function get_XmlSchemaCollectionDatabase: string;
    procedure set_XmlSchemaCollectionDatabase(value: string);
    function get_XmlSchemaCollectionOwningSchema: string;
    procedure set_XmlSchemaCollectionOwningSchema(value: string);
    function get_XmlSchemaCollectionName: string;
    procedure set_XmlSchemaCollectionName(value: string);
    function get_ForceColumnEncryption: Boolean;
    procedure set_ForceColumnEncryption(value: Boolean);
    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_SqlDbType: DNSqlDbType;
    procedure set_SqlDbType(value: DNSqlDbType);
    function get_SqlValue: DDN.mscorlib.DNObject;
    procedure set_SqlValue(value: DDN.mscorlib.DNObject);
    function get_UdtTypeName: string;
    procedure set_UdtTypeName(value: string);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Offset: Int32;
    procedure set_Offset(value: Int32);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);

  { methods } 

    ///<summary>
    ///  重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  关联的类型。
    ///</summary>
    procedure ResetDbType;
    ///<summary>
    ///  获取一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" />
    ///  的字符串。
    ///</summary>
    ///<returns>
    ///  一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  关联的类型。
    ///</summary>
    procedure ResetSqlDbType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Globalization.CompareInfo" />
    ///  对象，它定义应如何对此参数执行字符串比较。
    ///</summary>
    ///<returns><see cref="T:System.Globalization.CompareInfo" />
    ///  对象，它定义此参数的字符串比较。
    ///</returns>
    property CompareInfo: DNSqlCompareOptions read get_CompareInfo write set_CompareInfo;
    ///<summary>
    ///  获取此 XML 实例的架构集合所在的数据库的名称。
    ///</summary>
    ///<returns>
    ///  此 XML 实例的架构集合所在的数据库的名称。
    ///</returns>
    property XmlSchemaCollectionDatabase: string read get_XmlSchemaCollectionDatabase write set_XmlSchemaCollectionDatabase;
    ///<summary>
    ///  此 XML 实例的架构集合所在的所属关系架构。
    ///</summary>
    ///<returns>
    ///  此 XML 实例的所属关系架构。
    ///</returns>
    property XmlSchemaCollectionOwningSchema: string read get_XmlSchemaCollectionOwningSchema write set_XmlSchemaCollectionOwningSchema;
    ///<summary>
    ///  获取此 XML 实例的架构集合的名称。
    ///</summary>
    ///<returns>
    ///  此 XML 实例的架构集合的名称。
    ///</returns>
    property XmlSchemaCollectionName: string read get_XmlSchemaCollectionName write set_XmlSchemaCollectionName;
    ///<summary>
    ///  实施时使用的参数的加密 Always Encrypted。
    ///  如果 SQL Server 通知驱动程序参数不需要进行加密，则使用该参数的查询会失败。
    ///  此属性针对安全攻击提供附加保护，这些安全攻击涉及向客户端提供不正确的加密元数据的受威胁的 SQL Server，可能导致数据泄露。
    ///</summary>
    ///<returns>
    ///  如果参数具有强制列加密，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ForceColumnEncryption: Boolean read get_ForceColumnEncryption write set_ForceColumnEncryption;
    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.SqlDbType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///  默认值为 <see langword="NVarChar" />
    ///  。
    ///</returns>
    property DbType: DNDbType read get_DbType write set_DbType;
    ///<summary>
    ///  获取或设置确定某一特定区域的约定和语言设置的区域设置标识符。
    ///</summary>
    ///<returns>
    ///  返回与此参数相关联的区域设置标识符。
    ///</returns>
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的名称。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property ParameterName: string read get_ParameterName write set_ParameterName;
    ///<summary>
    ///  获取或设置用于表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  属性的最大位数。
    ///</summary>
    ///<returns>
    ///  用于表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  属性的最大位数。
    ///  默认值为 0。
    ///  这指示数据提供程序将设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的精度。
    ///</returns>
    property Precision: Byte read get_Precision write set_Precision;
    ///<summary>
    ///  获取或设置所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的小数位数。
    ///</summary>
    ///<returns>
    ///  所解析的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的小数位数。
    ///  默认值为 0。
    ///</returns>
    property Scale: Byte read get_Scale write set_Scale;
    ///<summary>
    ///  获取或设置参数的 <see cref="T:System.Data.SqlDbType" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///  默认值为 <see langword="NVarChar" />
    ///  。
    ///</returns>
    property SqlDbType: DNSqlDbType read get_SqlDbType write set_SqlDbType;
    ///<summary>
    ///  获取或设置作为 SQL 类型的参数的值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  对象，是使用 SQL 类型的参数的值。
    ///  默认值为 null。
    ///</returns>
    property SqlValue: DDN.mscorlib.DNObject read get_SqlValue write set_SqlValue;
    ///<summary>
    ///  获取或设置作为参数的表示用户定义类型的 <see langword="string" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示数据库中用户定义类型的完全限定名称的 <see langword="string" />
    ///  。
    ///</returns>
    property UdtTypeName: string read get_UdtTypeName write set_UdtTypeName;
    ///<summary>
    ///  获取或设置表值参数的类型名称。
    ///</summary>
    ///<returns>
    ///  指定的表值参数的类型名称。
    ///</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>
    ///  获取或设置参数的值。
    ///</summary>
    ///<returns>
    ///  充当参数值的 <see cref="T:System.Object" />
    ///  。
    ///  默认值为 null。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。
    ///</summary>
    ///<returns><see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///  默认值为 <see langword="Input" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" />
    ///  值之一。
    ///</exception>
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    ///<summary>
    ///  获取或设置一个值，该值指示参数是否接受 null 值。
    ///<see cref="P:System.Data.SqlClient.SqlParameter.IsNullable" />
    ///  不用于验证参数的值，并且在执行命令时不会阻止发送或接收 null 值。
    ///</summary>
    ///<returns>
    ///  如果接受 null 值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  属性的偏移量。
    ///</summary>
    ///<returns><see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的偏移量。
    ///  默认值为 0。
    ///</returns>
    property Offset: Int32 read get_Offset write set_Offset;
    ///<summary>
    ///  获取或设置列中的数据的最大大小（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  列中的数据的最大大小（以字节为单位）。
    ///  默认值将根据参数值进行推断。
    ///</returns>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  获取或设置映射到 <see cref="T:System.Data.DataSet" />
    ///  并且用于加载或返回 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  的源列的名称
    ///</summary>
    ///<returns>
    ///  映射到 <see cref="T:System.Data.DataSet" />
    ///  的源列的名称。
    ///  默认值为一个空字符串。
    ///</returns>
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    ///<summary>
    ///  设置或获取一个值，该值指示源列是否可以为 null。
    ///  通过此操作，<see cref="T:System.Data.SqlClient.SqlCommandBuilder" />
    ///  能够为可以为 null 的列正确地生成 Update 语句。
    ///</summary>
    ///<returns>
    ///  如果源列可以为 null，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    ///<summary>
    ///  获取或设置要在加载 <see cref="T:System.Data.DataRowVersion" />
    ///  时使用的 <see cref="P:System.Data.SqlClient.SqlParameter.Value" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Data.DataRowVersion" />
    ///  值之一。
    ///  默认值为 <see langword="Current" />
    ///  。
    ///</returns>
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
  end;

  TDNSqlParameter = class(TDNGenericImport<DNSqlParameterClass, DNSqlParameter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbParameterCollectionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{02F02AC2-2327-5D70-B009-B174A461E656}']
  end;

  ///<summary>
  ///  与 <see cref="T:System.Data.Common.DbCommand" />
  ///  相关的参数集合的基类。
  ///</summary>
  [DNTypeName('System.Data.Common.DbParameterCollection')]
  DNDbParameterCollection = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8498DAF2-C125-3F91-9392-5410107143A2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDbParameter; overload;
    procedure set_Item(index: Int32; value: DNDbParameter); overload;
    function get_Item(parameterName: string): DNDbParameter; overload;
    procedure set_Item(parameterName: string; value: DNDbParameter); overload;

  { methods } 

    ///<summary>
    ///  将指定的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象添加到 <see cref="T:System.Data.Common.DbParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value">
    ///  要添加到集合中的 <see cref="T:System.Data.Common.DbParameter" />
    ///  的 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  。
    ///</param>
    ///<returns>
    ///  集合中的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(value: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  将具有指定值的项的数组添加到 <see cref="T:System.Data.Common.DbParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="values">
    ///  要添加到集合的 <see cref="T:System.Data.Common.DbParameter" />
    ///  类型的值的数组。
    ///</param>
    procedure AddRange(values: DDN.mscorlib.DNArray);
    ///<summary>
    ///  指示集合中是否包含具有指定 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  的 <see cref="T:System.Data.Common.DbParameter" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" />
    ///  的 <see cref="P:System.Data.Common.DbParameter.Value" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbParameter" />
    ///  位于集合中，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  指示具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />
    ///  是否存在于集合中。
    ///</summary>
    ///  <param name="value">
    ///  要在集合中查找的 <see cref="T:System.Data.Common.DbParameter" />
    ///  的名称。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.Common.DbParameter" />
    ///  位于集合中，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean; overload;
    ///<summary>
    ///  将项的数组复制到从指定索引开始的集合。
    ///</summary>
    ///  <param name="array">
    ///  要复制到集合的项数组。
    ///</param>
    ///  <param name="index">
    ///  要复制项的集合中的索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  将所有 <see cref="T:System.Data.Common.DbParameter" />
    ///  值从 <see cref="T:System.Data.Common.DbParameterCollection" />
    ///  中移除。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  公开 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />
    ///  方法，该方法支持 .NET Framework 数据提供程序对集合进行简单的迭代。
    ///</summary>
    ///<returns>
    ///  可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  返回指定的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的索引。
    ///</summary>
    ///  <param name="value">
    ///  集合中的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的索引。
    ///</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  返回具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的索引。
    ///</summary>
    ///  <param name="parameterName">
    ///  集合中 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的名称。
    ///</param>
    ///<returns>
    ///  具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的索引。
    ///</returns>
    function IndexOf(parameterName: string): Int32; overload;
    ///<summary>
    ///  将具有指定名称的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的指定索引插入指定索引处的集合中。
    ///</summary>
    ///  <param name="index">
    ///  插入 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的索引位置。
    ///</param>
    ///  <param name="value">
    ///  要插入到集合中的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要移除的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///</param>
    procedure Remove(value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  从集合中删除位于指定位置的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="index"><see cref="T:System.Data.Common.DbParameter" />
    ///  对象所在的索引。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Common.DbParameter" />
    ///  具有指定的名称从集合对象。
    ///</summary>
    ///  <param name="parameterName">
    ///  要删除的 <see cref="T:System.Data.Common.DbParameter" />
    ///  对象的名称。
    ///</param>
    procedure RemoveAt(parameterName: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定集合中项的数目。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  指定集合是否为固定大小。
    ///</summary>
    ///<returns>
    ///  如果集合为固定大小，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  指定集合是否为只读。
    ///</summary>
    ///<returns>
    ///  如果该集合为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  指定是否同步集合。
    ///</summary>
    ///<returns>
    ///  如果同步集合，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  指定将用于同步集合访问的 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于同步 <see cref="T:System.Data.Common.DbParameterCollection" />
    ///  访问的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDbParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNDbParameter read get_Item write set_Item; default;
  end;

  TDNDbParameterCollection = class(TDNGenericImport<DNDbParameterCollectionClass, DNDbParameterCollection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcParameterCollectionClass = interface(DNDbParameterCollectionClass)
  ['{C5E01425-796C-5B08-93D4-AB6EAE258DA8}']
  end;

  ///<summary>
  ///  表示与 <see cref="T:System.Data.Odbc.OdbcCommand" />
  ///  相关的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" />
  ///  中列的映射。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcParameterCollection')]
  DNOdbcParameterCollection = interface(DNDbParameterCollection)
  ['{E38F61BA-6E96-3D86-99DF-3E4B7D876070}']
  { getters & setters } 

    function get_Item(index: Int32): DNOdbcParameter; overload;
    procedure set_Item(index: Int32; value: DNOdbcParameter); overload;
    function get_Item(parameterName: string): DNOdbcParameter; overload;
    procedure set_Item(parameterName: string; value: DNOdbcParameter); overload;
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  集合中存在具有指定的参数名称的对象。
    ///</summary>
    ///  <param name="value">
    ///  名称 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  要查找对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含参数;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象添加到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的索引 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  集合中的对象。
    ///</returns>
    function Add(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  删除所有 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Object" />
    ///  是否在此 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  否则包含值 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的所有元素复制到指定的一维 <see cref="T:System.Array" />
    ///  中，并以指定的目标 <see cref="T:System.Array" />
    ///  索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Array" />
    ///  中的元素的复制目标的一维 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Array" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.Generic.IEnumerator" />
    ///  的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取具有指定名称的指定 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的位置。
    ///</summary>
    ///  <param name="parameterName">
    ///  要查找的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的名称（区分大小写）。
    ///</param>
    ///<returns>
    ///  具有指定名称（区分大小写）的指定 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的位置（从零开始）。
    ///</returns>
    function IndexOf(parameterName: string): Int32; overload;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Object" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value">
    ///  要查找的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  在集合中。
    ///</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  将插入 <see cref="T:System.Object" />
    ///  到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，应在该位置插入该对象。
    ///</param>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Object" />
    ///  中插入 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Object" />
    ///  对象从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Object" />
    ///  从删除 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</param>
    procedure Remove(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的指定索引处移除 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  要移除的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象的索引（从零开始）。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  具有指定的参数名称。
    ///</summary>
    ///  <param name="parameterName">
    ///  名称 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  要移除对象。
    ///</param>
    procedure RemoveAt(parameterName: string); overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要添加到集合中的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  中指定 <paramref name="value" />
    ///  参数已添加到这个或其他 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  参数为 null。
    ///</exception>
    function Add(value: DNOdbcParameter): DNOdbcParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  给定参数名称和值。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="value"><see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  要添加到集合。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象的索引。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException"><paramref name="value" />
    ///  参数不是 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  。
    ///</exception>
    function Add(parameterName: string; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的末尾添加一个值。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="value">
    ///  要添加的值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象。
    ///</returns>
    function AddWithValue(parameterName: string; value: DDN.mscorlib.DNObject): DNOdbcParameter;
    ///<summary>
    ///  添加 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  , ，给定参数名称和数据类型。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="odbcType"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(parameterName: string; odbcType: DNOdbcType): DNOdbcParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  , 给定参数名称、 数据类型和列的长度。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="odbcType"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  列的长度。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(parameterName: string; odbcType: DNOdbcType; size: Int32): DNOdbcParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  到 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  给定参数名称、 数据类型、 列长度和源列名称。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="odbcType"><see cref="T:System.Data.Odbc.OdbcType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  列的长度。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列的名称。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(parameterName: string; odbcType: DNOdbcType; size: Int32; sourceColumn: string): DNOdbcParameter; overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  的末尾添加一个 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  值数组。
    ///</summary>
    ///  <param name="values">
    ///  一个数组 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  要添加到集合的对象。
    ///</param>
    procedure AddRange(values: TArray<DNOdbcParameter>); overload;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  是否在此 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  在集合中; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNOdbcParameter): Boolean; overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的所有元素复制到指定的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中，并以指定的目标索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中的元素的复制目标的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNOdbcParameter>; index: Int32); overload;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  集合中要查找的对象。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  在集合中。
    ///</returns>
    function IndexOf(value: DNOdbcParameter): Int32; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，应在该位置插入该对象。
    ///</param>
    ///  <param name="value">
    ///  要插入到 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  中的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DNOdbcParameter); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  从 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要从集合中移除的 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.InvalidCastException">
    ///  该参数不是 <see cref="T:System.Data.Odbc.OdbcParameter" />
    ///  。
    ///</exception><exception cref="T:System.SystemException">
    ///  集合中不存在该参数。
    ///</exception>
    procedure Remove(value: DNOdbcParameter); overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的末尾添加一个值数组。
    ///</summary>
    ///  <param name="values">
    ///  要添加的 <see cref="T:System.Array" />
    ///  值。
    ///</param>
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOdbcParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNOdbcParameter read get_Item write set_Item; default;
    ///<summary>
    ///  返回一个整数，包含中的元素数 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  。
    ///  只读。
    ///</summary>
    ///<returns>
    ///  以整数形式表示的 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  中的元素数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  是否具有固定大小。
    ///  只读。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  具有固定大小，则为 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  是否为只读。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  为只读，否则， <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  是否已同步。
    ///  只读。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  同步; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步对 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的访问的对象。
    ///  只读。
    ///</summary>
    ///<returns>
    ///  可用于同步对 <see cref="T:System.Data.Odbc.OdbcParameterCollection" />
    ///  的访问的对象。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNOdbcParameterCollection = class(TDNGenericImport<DNOdbcParameterCollectionClass, DNOdbcParameterCollection>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbParameterCollectionClass = interface(DNDbParameterCollectionClass)
  ['{EA4A22CE-3244-5F55-BDF5-9011B217D7C7}']
  end;

  ///<summary>
  ///  表示与 <see cref="T:System.Data.OleDb.OleDbCommand" />
  ///  相关的参数集合及其各自到 <see cref="T:System.Data.DataSet" />
  ///  中列的映射。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbParameterCollection')]
  DNOleDbParameterCollection = interface(DNDbParameterCollection)
  ['{24BFDD33-7845-3726-85E9-21FCB2802C80}']
  { getters & setters } 

    function get_Item(index: Int32): DNOleDbParameter; overload;
    procedure set_Item(index: Int32; value: DNOleDbParameter); overload;
    function get_Item(parameterName: string): DNOleDbParameter; overload;
    procedure set_Item(parameterName: string; value: DNOleDbParameter); overload;
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的 <see cref="T:System.String" />
    ///  是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.String" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  包含的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象添加到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的索引 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  集合中的对象。
    ///</returns>
    function Add(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  删除所有 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Object" />
    ///  是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  包含 <paramref name="value" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的所有元素复制到指定的一维 <see cref="T:System.Array" />
    ///  中，并以指定的目标 <see cref="T:System.Array" />
    ///  索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Array" />
    ///  中的元素的复制目标的一维 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Array" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.Generic.IEnumerator" />
    ///  的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取具有指定名称的指定 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的位置。
    ///</summary>
    ///  <param name="parameterName">
    ///  要查找的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的名称（区分大小写）。
    ///</param>
    ///<returns>
    ///  具有指定名称（区分大小写）的指定 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的位置（从零开始）。
    ///</returns>
    function IndexOf(parameterName: string): Int32; overload;
    ///<summary>
    ///  指定的位置 <see cref="T:System.Object" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value">
    ///  要查找的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  在集合中。
    ///</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  将插入 <see cref="T:System.Object" />
    ///  到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  应将值插入到的位置的索引（从零开始）。
    ///</param>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Object" />
    ///  中插入 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Object" />
    ///  对象从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  从删除 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</param>
    procedure Remove(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的指定索引处移除 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  要移除的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象的索引（从零开始）。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  从 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  中移除具有指定参数名称的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="parameterName">
    ///  名称 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  要移除对象。
    ///</param>
    procedure RemoveAt(parameterName: string); overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要添加到集合中的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  中指定 <paramref name="value" />
    ///  参数已添加到这个或其他 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  参数为 null。
    ///</exception>
    function Add(value: DNOleDbParameter): DNOleDbParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  给定参数名称和值。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="value"><see cref="P:System.Data.OleDb.OleDbParameter.Value" />
    ///  的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  要添加到集合。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象的索引。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException"><paramref name="value" />
    ///  参数不是 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  。
    ///</exception>
    function Add(parameterName: string; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的末尾添加一个值。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="value">
    ///  要添加的值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象。
    ///</returns>
    function AddWithValue(parameterName: string; value: DDN.mscorlib.DNObject): DNOleDbParameter;
    ///<summary>
    ///  添加 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  , ，给定参数名称和数据类型。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="oleDbType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(parameterName: string; oleDbType: DNOleDbType): DNOleDbParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  给定参数名称、 数据类型和列的长度。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="oleDbType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  列的长度。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(parameterName: string; oleDbType: DNOleDbType; size: Int32): DNOleDbParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  到 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  给定参数名称、 数据类型、 列长度和源列名称。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="oleDbType"><see cref="T:System.Data.OleDb.OleDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  列的长度。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列的名称。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(parameterName: string; oleDbType: DNOleDbType; size: Int32; sourceColumn: string): DNOleDbParameter; overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  的末尾添加一个 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  值数组。
    ///</summary>
    ///  <param name="values">
    ///  要添加的 <see cref="T:System.Data.OleDbParameter" />
    ///  值。
    ///</param>
    procedure AddRange(values: TArray<DNOleDbParameter>); overload;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  是否在此 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  值。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  位于集合中，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNOleDbParameter): Boolean; overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的所有元素复制到指定的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中，并以指定的目标索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中的元素的复制目标的 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNOleDbParameter>; index: Int32); overload;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  集合中要查找的对象。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  即 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  在集合中。
    ///</returns>
    function IndexOf(value: DNOleDbParameter): Int32; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  应将值插入到的位置的索引（从零开始）。
    ///</param>
    ///  <param name="value"><see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  中要插入对象 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; value: DNOleDbParameter); overload;
    ///<summary>
    ///  删除 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  从 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  要从集合中移除对象。
    ///</param>
    ///<exception cref="T:System.InvalidCastException">
    ///  该参数不是 <see cref="T:System.Data.OleDb.OleDbParameter" />
    ///  。
    ///</exception><exception cref="T:System.SystemException">
    ///  集合中不存在该参数。
    ///</exception>
    procedure Remove(value: DNOleDbParameter); overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的末尾添加一个值数组。
    ///</summary>
    ///  <param name="values">
    ///  要添加的 <see cref="T:System.Array" />
    ///  值。
    ///</param>
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOleDbParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNOleDbParameter read get_Item write set_Item; default;
    ///<summary>
    ///  返回一个整数，包含中的元素数 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  。
    ///  只读。
    ///</summary>
    ///<returns>
    ///  中的元素数 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  为整数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  是否具有固定大小。
    ///  只读。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  具有固定大小; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  是否为只读。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  ; 否则为读取 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  是否已同步。
    ///  只读。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  同步; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步对 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的访问的对象。
    ///  只读。
    ///</summary>
    ///<returns>
    ///  可用于同步对 <see cref="T:System.Data.OleDb.OleDbParameterCollection" />
    ///  的访问的对象。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNOleDbParameterCollection = class(TDNGenericImport<DNOleDbParameterCollectionClass, DNOleDbParameterCollection>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlParameterCollectionClass = interface(DNDbParameterCollectionClass)
  ['{A3F23AA6-9B07-5230-8AC8-1B5901EDF5D9}']
  end;

  ///<summary>
  ///  表示与 <see cref="T:System.Data.SqlClient.SqlCommand" />
  ///  关联的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" />
  ///  中列的映射。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlParameterCollection')]
  DNSqlParameterCollection = interface(DNDbParameterCollection)
  ['{AB5F7221-67BB-3AEF-91E1-AD345E07117E}']
  { getters & setters } 

    function get_Item(index: Int32): DNSqlParameter; overload;
    procedure set_Item(index: Int32; value: DNSqlParameter); overload;
    function get_Item(parameterName: string): DNSqlParameter; overload;
    procedure set_Item(parameterName: string; value: DNSqlParameter); overload;
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的参数名称是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.String" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  包含的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象的索引。
    ///</returns>
    function Add(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  从 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中移除所有的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Object" />
    ///  是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  包含的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的所有元素复制到指定的一维 <see cref="T:System.Array" />
    ///  中，并以指定的目标 <see cref="T:System.Array" />
    ///  索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Array" />
    ///  中的元素的复制目标的一维 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Array" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    ///<summary>
    ///  返回循环访问 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取具有指定名称的指定 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的位置。
    ///</summary>
    ///  <param name="parameterName">
    ///  要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的名称（区分大小写）。
    ///</param>
    ///<returns>
    ///  具有指定名称（区分大小写）的指定 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的位置（从零开始）。
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中不存在该对象，则返回 -1。
    ///</returns>
    function IndexOf(parameterName: string): Int32; overload;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Object" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value">
    ///  要查找的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Object" />
    ///  即 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  在集合中。
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中不存在该对象，则返回 -1。
    ///</returns>
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  在 <see cref="T:System.Object" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  应将值插入到的位置的索引（从零开始）。
    ///</param>
    ///  <param name="value">
    ///  要插入到 <see cref="T:System.Object" />
    ///  中的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要从集合中移除的对象。
    ///</param>
    procedure Remove(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的指定索引处移除 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象的索引（从零开始）。
    ///</param>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  从 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中移除具有指定参数名称的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="parameterName">
    ///  要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的名称。
    ///</param>
    procedure RemoveAt(parameterName: string); overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value">
    ///  要添加到集合中的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中指定 <paramref name="value" />
    ///  参数已添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  传递的参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  参数为 null。
    ///</exception>
    function Add(value: DNSqlParameter): DNSqlParameter; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="parameterName">
    ///  名称 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  要添加到集合。
    ///</param>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///  正在使用的此重载时要格外小心 <see langword="SqlParameterCollection.Add" />
    ///  方法，以便指定整数参数值。
    ///  因为此重载接受 <paramref name="value" />
    ///  类型的 <see cref="T:System.Object" />
    ///  , ，必须将转换整数值与 <see cref="T:System.Object" />
    ///  键入时的值为零，如下面的 C# 示例所示。
    ///  parameters.Add("@pname", Convert.ToInt32(0));
    ///  如果不执行此转换，则编译器假定您尝试调用 <see langword="SqlParameterCollection.Add" />
    ///  (<see langword="string" />
    ///  , ，<see langword="SqlDbType" />
    ///  ) 重载。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中指定 <paramref name="value" />
    ///  参数已添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  参数为 null。
    ///</exception>
    function Add(parameterName: string; value: DDN.mscorlib.DNObject): DNSqlParameter; overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的末尾添加一个值。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="value">
    ///  要添加的值。
    ///  使用 <see cref="F:System.DBNull.Value" />
    ///  而不是 null，以指示 null 值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</returns>
    function AddWithValue(parameterName: string; value: DDN.mscorlib.DNObject): DNSqlParameter;
    ///<summary>
    ///  在给定参数名称和数据类型时向 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中添加一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="sqlDbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</returns>
    function Add(parameterName: string; sqlDbType: DNSqlDbType): DNSqlParameter; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  , ，给出指定的参数名 <see cref="T:System.Data.SqlDbType" />
    ///  和大小。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="sqlDbType"><see cref="T:System.Data.SqlDbType" />
    ///  的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  要添加到集合。
    ///</param>
    ///  <param name="size">
    ///  大小作为 <see cref="T:System.Int32" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</returns>
    function Add(parameterName: string; sqlDbType: DNSqlDbType; size: Int32): DNSqlParameter; overload;
    ///<summary>
    ///  使用给定的参数名称、数据类型和列长度向 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中添加一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</summary>
    ///  <param name="parameterName">
    ///  参数的名称。
    ///</param>
    ///  <param name="sqlDbType"><see cref="T:System.Data.SqlDbType" />
    ///  值之一。
    ///</param>
    ///  <param name="size">
    ///  列的长度。
    ///</param>
    ///  <param name="sourceColumn">
    ///  源列名 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />
    ///  )（如果在调用 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" />
    ///  中使用了此 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  ）。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</returns>
    function Add(parameterName: string; sqlDbType: DNSqlDbType; size: Int32; sourceColumn: string): DNSqlParameter; overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  的末尾添加一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  值数组。
    ///</summary>
    ///  <param name="values">
    ///  要添加的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  值。
    ///</param>
    procedure AddRange(values: TArray<DNSqlParameter>); overload;
    ///<summary>
    ///  确定指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  包含的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNSqlParameter): Boolean; overload;
    ///<summary>
    ///  将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的所有元素复制到指定的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中，并以指定的目标索引位置作为复制到的起始位置。
    ///</summary>
    ///  <param name="array">
    ///  作为当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中的元素的复制目标的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中开始复制的位置的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNSqlParameter>; index: Int32); overload;
    ///<summary>
    ///  获取指定的位置 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  在集合中。
    ///</summary>
    ///  <param name="value">
    ///  要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</param>
    ///<returns>
    ///  指定的从零开始的位置 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  即 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  在集合中。
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中不存在该对象，则返回 -1。
    ///</returns>
    function IndexOf(value: DNSqlParameter): Int32; overload;
    ///<summary>
    ///  在 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中的指定索引处插入一个 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="index">
    ///  应将值插入到的位置的索引（从零开始）。
    ///</param>
    ///  <param name="value">
    ///  要插入到 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  中的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  对象。
    ///</param>
    procedure Insert(index: Int32; value: DNSqlParameter); overload;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要从集合中移除的 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.InvalidCastException">
    ///  该参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />
    ///  。
    ///</exception><exception cref="T:System.SystemException">
    ///  集合中不存在该参数。
    ///</exception>
    procedure Remove(value: DNSqlParameter); overload;
    ///<summary>
    ///  向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的末尾添加一个值数组。
    ///</summary>
    ///  <param name="values">
    ///  要添加的 <see cref="T:System.Array" />
    ///  值。
    ///</param>
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSqlParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNSqlParameter read get_Item write set_Item; default;
    ///<summary>
    ///  返回一个整数，包含中的元素数 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  。
    ///  只读。
    ///</summary>
    ///<returns>
    ///  以整数形式表示的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  中的元素数。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  是否具有固定大小。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  具有固定大小; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  是否为只读。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  ; 否则为读取 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  是否已同步。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  同步; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的访问的对象。
    ///</summary>
    ///<returns>
    ///  可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />
    ///  的访问的对象。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSqlParameterCollection = class(TDNGenericImport<DNSqlParameterCollectionClass, DNSqlParameterCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbTransactionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4FCB2B8F-4FAA-5D96-81E6-8ABFB11C4CD6}']
  end;

  ///<summary>
  ///  事务的基类。
  ///</summary>
  [DNTypeName('System.Data.Common.DbTransaction')]
  DNDbTransaction = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{D36E8E8B-BE81-3B90-A003-1A472606FDA4}']
  { getters & setters } 

    function get_Connection: DNDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    procedure Rollback;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指定 <see cref="T:System.Data.Common.DbConnection" />
    ///  与事务关联的对象。
    ///</summary>
    ///<returns><see cref="T:System.Data.Common.DbConnection" />
    ///  与事务关联的对象。
    ///</returns>
    property Connection: DNDbConnection read get_Connection;
    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNDbTransaction = class(TDNGenericImport<DNDbTransactionClass, DNDbTransaction>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcTransactionClass = interface(DNDbTransactionClass)
  ['{DD4F160B-7362-5ABC-B0B2-19E870F6EA3E}']
  end;

  ///<summary>
  ///  表示要在数据源进行的 SQL 事务。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcTransaction')]
  DNOdbcTransaction = interface(DNDbTransaction)
  ['{A9CBC7C8-F01C-3644-93C8-F6FCF7A2076B}']
  { getters & setters } 

    function get_Connection: DNOdbcConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  与该事务关联的对象或 <see langword="null" />
    ///  如果该事务将不再有效。
    ///</summary>
    ///<returns><see cref="T:System.Data.Odbc.OdbcConnection" />
    ///  与事务关联的对象。
    ///</returns>
    property Connection: DNOdbcConnection read get_Connection;
    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///  默认值取决于基础的 ODBC 驱动程序。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNOdbcTransaction = class(TDNGenericImport<DNOdbcTransactionClass, DNOdbcTransaction>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbTransactionClass = interface(DNDbTransactionClass)
  ['{C7A2649D-1ED1-5730-AC0F-5E744C071EFD}']
  end;

  ///<summary>
  ///  表示要在数据源进行的 SQL 事务。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbTransaction')]
  DNOleDbTransaction = interface(DNDbTransaction)
  ['{F538329B-0483-3A25-B7C8-92EDBBCF3717}']
  { getters & setters } 

    function get_Connection: DNOleDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  启动嵌套的数据库事务，并指定要用于新事务的隔离级别。
    ///</summary>
    ///  <param name="isolevel">
    ///  要用于该事务的隔离级别。
    ///</param>
    ///<returns>
    ///  嵌套的数据库事务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持嵌套的事务。
    ///</exception>
    function &Begin(isolevel: DNIsolationLevel): DNOleDbTransaction; overload;
    ///<summary>
    ///  启动嵌套的数据库事务。
    ///</summary>
    ///<returns>
    ///  嵌套的数据库事务。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不支持嵌套的事务。
    ///</exception>
    function &Begin: DNOleDbTransaction; overload;
    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback;
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  与该事务关联的对象或 <see langword="null" />
    ///  如果该事务将不再有效。
    ///</summary>
    ///<returns><see cref="T:System.Data.OleDb.OleDbConnection" />
    ///  与事务关联的对象。
    ///</returns>
    property Connection: DNOleDbConnection read get_Connection;
    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///  默认值为 <see langword="ReadCommitted" />
    ///  。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNOleDbTransaction = class(TDNGenericImport<DNOleDbTransactionClass, DNOleDbTransaction>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlTransactionClass = interface(DNDbTransactionClass)
  ['{A10EAAC5-D3CB-5942-A02A-969BD9445160}']
  end;

  ///<summary>
  ///  表示将在 SQL Server 数据库中进行的 Transact-SQL 事务。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlTransaction')]
  DNSqlTransaction = interface(DNDbTransaction)
  ['{824F20F8-D6D0-33E5-9A93-A12B97209D56}']
  { getters & setters } 

    function get_Connection: DNSqlConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    ///<summary>
    ///  提交数据库事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Commit;
    ///<summary>
    ///  从挂起状态回滚事务。
    ///</summary>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback; overload;
    ///<summary>
    ///  从挂起状态回滚事务，并指定在事务或保存点名称。
    ///</summary>
    ///  <param name="transactionName">
    ///  事务回滚或要回滚到保存点的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定没有事务名称。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Rollback(transactionName: string); overload;
    ///<summary>
    ///  可以用来回滚事务的一部分，并且指定的保存点名称的事务中创建一个保存点。
    ///</summary>
    ///  <param name="savePointName">
    ///  保存点的名称。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  在尝试提交事务时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  已提交或回滚事务。
    ///  - 或 -
    ///  连接已断开。
    ///</exception>
    procedure Save(savePointName: string);
    ///<summary>
    ///  释放 <see cref="T:System.Data.Common.DbTransaction" />
    ///  使用的非托管资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  与该事务关联的对象或 <see langword="null" />
    ///  如果该事务将不再有效。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlClient.SqlConnection" />
    ///  与事务关联的对象。
    ///</returns>
    property Connection: DNSqlConnection read get_Connection;
    ///<summary>
    ///  指定 <see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///</summary>
    ///<returns><see cref="T:System.Data.IsolationLevel" />
    ///  此事务。
    ///  默认值为 <see langword="ReadCommitted" />
    ///  。
    ///</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNSqlTransaction = class(TDNGenericImport<DNSqlTransactionClass, DNSqlTransaction>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlFileStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{E15792ED-276C-5C85-B3BA-8E7F5DC04892}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="path">
    ///  文件的逻辑路径。
    ///  可以通过使用表中基础 FILESTREAM 列中的 Transact-SQL Pathname 函数检索路径。
    ///</param>
    ///  <param name="transactionContext"><see langword="SqlFileStream" />
    ///  对象的事务上下文。
    ///  应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法返回的字节数组。
    ///</param>
    ///  <param name="access">
    ///  打开文件时要使用的访问模式。
    ///  支持的 <see cref="T:System.IO.FileAccess" />
    ///  枚举值为 <see cref="F:System.IO.FileAccess.Read" />
    ///  、<see cref="F:System.IO.FileAccess.Write" />
    ///  和 <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  。
    ///  当使用 <see langword="FileAccess.Read" />
    ///  时，<see langword="SqlFileStream" />
    ///  对象可以用于读取所有现有数据。
    ///  当使用 <see langword="FileAccess.Write" />
    ///  时，<see langword="SqlFileStream" />
    ///  指向零字节文件。
    ///  当关闭对象并提交事务时，会覆盖现有数据。
    ///  当使用 <see langword="FileAccess.ReadWrite" />
    ///  时，<see langword="SqlFileStream" />
    ///  指向其中包含所有现有数据的文件。
    ///  句柄位于文件的开头。
    ///  可以使用 <see langword="System.IO" />
    ///<see langword="Seek" />
    ///  方法之一在文件内移动句柄位置，以写入或追加新数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 null 引用，或者，<paramref name="transactionContext" />
    ///  为 null。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="path" />
    ///  是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。
    ///  <paramref name="path" />
    ///  以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。
    ///  通过调用 NTCreateFile 返回的句柄不属于类型 FILE_TYPE_DISK。
    ///  <paramref name="options" />
    ///  包含不支持的值。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  无法找到该文件。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  指定的 <paramref name="path" />
    ///  无效，例如在非映射驱动器上。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  指定的路径所对应的操作系统不允许请求的访问。
    ///  当指定 Write 或 ReadWrite 访问时发生这种情况，并且文件或目录设置为只读访问。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  NtCreateFile 失败，并且错误代码设置为 ERROR_SHARING_VIOLATION。
    ///</exception>
    {class} function init(path: string; transactionContext: TArray<Byte>; access: DDN.mscorlib.DNFileAccess): DNSqlFileStream; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="path">
    ///  文件的逻辑路径。
    ///  可以通过使用表中基础 FILESTREAM 列中的 Transact-SQL Pathname 函数检索路径。
    ///</param>
    ///  <param name="transactionContext"><see langword="SqlFileStream" />
    ///  对象的事务上下文。
    ///  当设置为 null 时，隐式事务将用于 <see langword="SqlFileStream" />
    ///  对象。
    ///  应用程序应返回通过调用 GET_FILESTREAM_TRANSACTION_CONTEXT 方法返回的字节数组。
    ///</param>
    ///  <param name="access">
    ///  打开文件时要使用的访问模式。
    ///  支持的 <see cref="T:System.IO.FileAccess" />
    ///  枚举值为 <see cref="F:System.IO.FileAccess.Read" />
    ///  、<see cref="F:System.IO.FileAccess.Write" />
    ///  和 <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  。
    ///  当使用 <see langword="FileAccess.Read" />
    ///  时，<see langword="SqlFileStream" />
    ///  对象可以用于读取所有现有数据。
    ///  当使用 <see langword="FileAccess.Write" />
    ///  时，<see langword="SqlFileStream" />
    ///  指向零字节文件。
    ///  当关闭对象并提交事务时，会覆盖现有数据。
    ///  当使用 <see langword="FileAccess.ReadWrite" />
    ///  时，<see langword="SqlFileStream" />
    ///  指向其中包含所有现有数据的文件。
    ///  句柄位于文件的开头。
    ///  可以使用 <see langword="System.IO" />
    ///<see langword="Seek" />
    ///  方法之一在文件内移动句柄位置，以写入或追加新数据。
    ///</param>
    ///  <param name="options">
    ///  指定打开文件时要使用的选项。
    ///  支持的 <see cref="T:System.IO.FileOptions" />
    ///  值为 <see cref="F:System.IO.FileOptions.Asynchronous" />
    ///  、<see cref="F:System.IO.FileOptions.WriteThrough" />
    ///  、<see cref="F:System.IO.FileOptions.SequentialScan" />
    ///  和 <see cref="F:System.IO.FileOptions.RandomAccess" />
    ///  。
    ///</param>
    ///  <param name="allocationSize">
    ///  创建文件时要使用的分配大小。
    ///  如果设置为 0，则使用默认值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 null 引用，或者，<paramref name="transactionContext" />
    ///  为 null。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="path" />
    ///  是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。
    ///  <paramref name="path" />
    ///  以“\\.\”开头，例如“\\.\PHYSICALDRIVE0”。
    ///  通过调用 NTCreateFile 返回的句柄不属于类型 FILE_TYPE_DISK。
    ///  <paramref name="options" />
    ///  包含不支持的值。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  无法找到该文件。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  出现 I/O 错误。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  指定的 <paramref name="path" />
    ///  无效，例如在非映射驱动器上。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  指定的路径所对应的操作系统不允许请求的访问。
    ///  当指定 Write 或 ReadWrite 访问时发生这种情况，并且文件或目录设置为只读访问。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  NtCreateFile 失败，并且错误代码设置为 ERROR_SHARING_VIOLATION。
    ///</exception>
    {class} function init(path: string; transactionContext: TArray<Byte>; access: DDN.mscorlib.DNFileAccess; options: DDN.mscorlib.DNFileOptions; allocationSize: Int64): DNSqlFileStream; overload;

  end;

  ///<summary>
  ///  公开与作为字节序列的 FILESTREAM 列属性存储的 SQL Server 数据。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlFileStream')]
  DNSqlFileStream = interface(DDN.mscorlib.DNStream)
  ['{88EB48AA-4903-354B-B4AF-B7943CD2BFA3}']
  { getters & setters } 

    function get_Name: string;
    function get_TransactionContext: TArray<Byte>;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  开始异步读操作。
    ///</summary>
    ///  <param name="buffer">
    ///  数据读入的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从该偏移量开始写入从流中读取的数据。
    ///</param>
    ///  <param name="count">
    ///  最多读取的字节数。
    ///</param>
    ///  <param name="callback">
    ///  可选的异步回调，在完成读取时调用。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将此特定的异步读取请求与其他请求区别开来
    ///</param>
    ///<returns>
    ///  表示异步读取的 <see cref="T:System.IAsyncResult" />
    ///  （可能仍处于挂起状态）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  不支持在流上读取数据。
    ///</exception>
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  等待挂起的异步读取完成。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对要完成的挂起异步请求的引用。
    ///</param>
    ///<returns>
    ///  从流中读取的字节数，介于零 (0) 和所请求的字节数之间。
    ///  流仅在流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.IAsyncResult" />
    ///  对象并非来自相应的 <see langword="BeginRead" />
    ///  方法。
    ///</exception>
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    ///<summary>
    ///  开始异步写操作。
    ///</summary>
    ///  <param name="buffer">
    ///  从中写入数据的缓冲区。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的字节偏移量，从此处开始写入。
    ///</param>
    ///  <param name="count">
    ///  最多写入的字节数。
    ///</param>
    ///  <param name="callback">
    ///  可选的异步回调，在完成写入时调用。
    ///</param>
    ///  <param name="state">
    ///  一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。
    ///</param>
    ///<returns>
    ///  表示异步写入的 <see cref="T:System.IAsyncResult" />
    ///  （可能仍处于挂起状态）。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  该流不支持写入数据。
    ///</exception>
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>
    ///  结束异步写操作。
    ///</summary>
    ///  <param name="asyncResult">
    ///  对未完成的异步 I/O 请求的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.IAsyncResult" />
    ///  对象并非来自相应的 <see langword="BeginWrite" />
    ///  方法。
    ///</exception>
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>
    ///  设置当前流中的位置。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  参数的字节偏移量
    ///</param>
    ///  <param name="origin"><see cref="T:System.IO.SeekOrigin" />
    ///  类型的值，指示用于获取新位置的参考点
    ///</param>
    ///<returns>
    ///  当前流中的新位置。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  设置当前流的长度。
    ///</summary>
    ///  <param name="value">
    ///  所需的当前流的长度（以字节表示）。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  对象不支持数据读取。
    ///</exception>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  从当前流读取字节序列，并将流中的位置向前移动读取的字节数。
    ///</summary>
    ///  <param name="buffer">
    ///  字节数组。
    ///  此方法返回时，该缓冲区包含指定的字节数组，该数组的偏移量和（偏移量 + 计数 - 1）之间的值由从当前源中读取的字节替换。
    ///</param>
    ///  <param name="offset">
    ///  缓冲区中从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。
    ///</param>
    ///  <param name="count">
    ///  要从当前流中最多读取的字节数。
    ///</param>
    ///<returns>
    ///  读入缓冲区中的总字节数。
    ///  如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  对象不支持数据读取。
    ///</exception>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  从流中读取一个字节，并将流内的位置向前提升一个字节，或者如果已到达流结尾，则返回 -1。
    ///</summary>
    ///<returns>
    ///  强制转换为 <see cref="T:System.Int32" />
    ///  的无符号字节，如果到达流的末尾，则为 -1。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  对象不支持数据读取。
    ///</exception>
    function ReadByte: Int32;
    ///<summary>
    ///  将字节序列写入当前流，并按写入的字节数向前调整流的当前位置。
    ///</summary>
    ///  <param name="buffer">
    ///  字节数组。
    ///  此方法将 <paramref name="count" />
    ///  个字节从 <paramref name="buffer" />
    ///  复制到当前流。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要写入当前流的字节数。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  对象不支持数据写入。
    ///</exception>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  将一个字节写入流内的当前位置，并将流内的位置向前提升一个字节。
    ///</summary>
    ///  <param name="value">
    ///  要写入流中的字节。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  对象不支持数据写入。
    ///</exception>
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取传递给构造函数的 <see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  的逻辑路径。
    ///</summary>
    ///<returns>
    ///  一个指示 <see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  的名称的字符串值。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  对象的事务上下文。
    ///</summary>
    ///<returns>
    ///  传递到此 <see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  对象的构造函数的 <paramref name="transactionContext" />
    ///  数组。
    ///</returns>
    property TransactionContext: TArray<Byte> read get_TransactionContext;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读取。
    ///</summary>
    ///<returns>
    ///  如果当前流支持读取，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找。
    ///</summary>
    ///<returns>
    ///  如果当前流支持查找，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取指示当前流是否可以超时的值。
    ///</summary>
    ///<returns>
    ///  如果当前流可以超时，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanTimeout: Boolean read get_CanTimeout;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写入。
    ///</summary>
    ///<returns>
    ///  如果当前流支持写入，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个指示当前流的长度的值（以字节为单位）。
    ///</summary>
    ///<returns>
    ///  一个指示当前流的长度的 <see cref="T:System.Int64" />
    ///  （以字节为单位）。
    ///</returns>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取或设置当前流中的位置。
    ///</summary>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlFileStream" />
    ///  中的当前位置。
    ///</returns>
    property Position: Int64 read get_Position write set_Position;
    ///<summary>
    ///  获取或设置一个值（以毫秒为单位），该值确定流在超时前将尝试读取的时间。
    ///</summary>
    ///<returns>
    ///  一个值（以毫秒为单位），该值确定流在超时前将尝试读取的时间。
    ///</returns>
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    ///<summary>
    ///  获取或设置一个值（以毫秒为单位），该值确定流在超时前将尝试写入多长时间。
    ///</summary>
    ///<returns>
    ///  一个确定流在超时前将尝试写入多长时间的值（以毫秒为单位）。
    ///</returns>
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNSqlFileStream = class(TDNGenericImport<DNSqlFileStreamClass, DNSqlFileStream>) end;

  //-------------namespace: System.Data.Common----------------
  DNDBDataPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{117B9E9F-10C2-584B-98C8-821ACA242541}']
  end;

  ///<summary>
  ///  启用.NET Framework 数据提供程序，以帮助确保用户具有足够用来访问数据的安全级别。
  ///</summary>
  [DNTypeName('System.Data.Common.DBDataPermission')]
  DNDBDataPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{BA3FEDB4-03B9-3044-BFB3-1C5076F9F317}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    ///<summary>
    ///  返回表示当前的权限对象和指定的权限对象的交集的新权限对象。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象相交的一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，它表示当前的权限对象和指定的权限对象的交集。
    ///  这个新的权限对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 如果交集为空。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数不是空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 并不是与当前权限对象相同的类的实例。
    ///</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回一个值，该值指示当前的权限对象是否为指定的权限对象的一个子集。
    ///</summary>
    ///  <param name="target">
    ///  测试子集关系权限对象。
    ///  此对象必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前的权限对象是指定的权限对象的一个子集否则 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  通过 XML 编码重新构造具有指定状态的安全对象。
    ///</summary>
    ///  <param name="securityElement">
    ///  用于重新构造安全对象的 XML 编码。
    ///</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    ///<summary>
    ///  创建安全对象及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  安全对象的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  将指定的连接字符串的访问权限添加到的现有状态 <see langword="DBDataPermission" />
    ///  。
    ///</summary>
    ///  <param name="connectionString">
    ///  允许的连接字符串。
    ///</param>
    ///  <param name="restrictions">
    ///  标识允许或禁止使用的连接字符串参数的字符串。
    ///</param>
    ///  <param name="behavior">
    ///  其中一个 <see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  属性。
    ///</param>
    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    ///<summary>
    ///  创建并返回当前的权限对象的相同副本。
    ///</summary>
    ///<returns>
    ///  当前权限对象的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回一个值，该值指示是否可以将权限表示为无限制权限语义任何不知情的情况下。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该权限可以表示为无限制。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  返回一个新的权限对象，是当前和指定权限对象的并集。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象组合在一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，表示当前的权限对象和指定的权限对象的并集。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  对象不是与当前权限对象相同的类型。
    ///</exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否允许使用空白密码。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许密码为空，否则， <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNDBDataPermission = class(TDNGenericImport<DNDBDataPermissionClass, DNDBDataPermission>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcPermissionClass = interface(DNDBDataPermissionClass)
  ['{0FB40B43-1157-522E-8351-8E5E390EC987}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcPermission" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOdbcPermission; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.Odbc.OdbcPermission" />
    ///  类之一 <see cref="T:System.Security.Permissions.PermissionState" />
    ///  值。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNOdbcPermission; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.Odbc.OdbcPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="state"><see langword="System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    ///  <param name="allowBlankPassword">
    ///  指示是否允许密码为空。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState; allowBlankPassword: Boolean): DNOdbcPermission; overload;

  end;

  ///<summary>
  ///  启用.NET Framework 数据提供程序用于 ODBC 来帮助确保用户具有足够的权限访问 ODBC 数据源的安全级别。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Data.Odbc.OdbcPermission')]
  DNOdbcPermission = interface(DNDBDataPermission)
  ['{2F3993E2-1392-3E28-B725-1D8A8A5FFE2B}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    ///<summary>
    ///  将指定的连接字符串的访问权限添加到现有的权限状态。
    ///</summary>
    ///  <param name="connectionString">
    ///  允许的连接字符串。
    ///</param>
    ///  <param name="restrictions">
    ///  标识允许或禁止使用的连接字符串参数的字符串。
    ///</param>
    ///  <param name="behavior"><see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  值之一。
    ///</param>
    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    ///<summary>
    ///  返回 <see cref="T:System.Data.Odbc.OdbcPermission" />
    ///  作为 <see cref="T:System.Security.IPermission" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前权限对象的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回表示当前的权限对象和指定的权限对象的交集的新权限对象。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象相交的一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，它表示当前的权限对象和指定的权限对象的交集。
    ///  这个新的权限对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 如果交集为空。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数不是空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 并不是与当前权限对象相同的类的实例。
    ///</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回一个值，该值指示当前的权限对象是否为指定的权限对象的一个子集。
    ///</summary>
    ///  <param name="target">
    ///  测试子集关系权限对象。
    ///  此对象必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前的权限对象是指定的权限对象的一个子集否则 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  通过 XML 编码重新构造具有指定状态的安全对象。
    ///</summary>
    ///  <param name="securityElement">
    ///  用于重新构造安全对象的 XML 编码。
    ///</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    ///<summary>
    ///  创建安全对象及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  安全对象的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  返回一个值，该值指示是否可以将权限表示为无限制权限语义任何不知情的情况下。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该权限可以表示为无限制。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  返回一个新的权限对象，是当前和指定权限对象的并集。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象组合在一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，表示当前的权限对象和指定的权限对象的并集。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  对象不是与当前权限对象相同的类型。
    ///</exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否允许使用空白密码。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许密码为空，否则， <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNOdbcPermission = class(TDNGenericImport<DNOdbcPermissionClass, DNOdbcPermission>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbPermissionClass = interface(DNDBDataPermissionClass)
  ['{AE164ED5-AB45-52C9-A772-DB8F2CE259A1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbPermission" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOleDbPermission; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNOleDbPermission; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.OleDb.OleDbPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    ///  <param name="allowBlankPassword">
    ///  指示是否允许密码为空。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState; allowBlankPassword: Boolean): DNOleDbPermission; overload;

  end;

  ///<summary>
  ///  启用.NET Framework 数据提供程序用于 OLE DB 来帮助确保用户具有足够的权限访问的 OLE DB 数据源的安全级别。
  ///</summary>
  [DNTypeName('System.Data.OleDb.OleDbPermission')]
  DNOleDbPermission = interface(DNDBDataPermission)
  ['{305402F3-83F5-34CD-922E-02CFFD8D2C37}']
  { getters & setters } 

    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Data.OleDb.OleDbPermission" />
    ///  作为 <see cref="T:System.Security.IPermission" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前权限对象的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回表示当前的权限对象和指定的权限对象的交集的新权限对象。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象相交的一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，它表示当前的权限对象和指定的权限对象的交集。
    ///  这个新的权限对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 如果交集为空。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数不是空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 并不是与当前权限对象相同的类的实例。
    ///</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回一个值，该值指示当前的权限对象是否为指定的权限对象的一个子集。
    ///</summary>
    ///  <param name="target">
    ///  测试子集关系权限对象。
    ///  此对象必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前的权限对象是指定的权限对象的一个子集否则 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  通过 XML 编码重新构造具有指定状态的安全对象。
    ///</summary>
    ///  <param name="securityElement">
    ///  用于重新构造安全对象的 XML 编码。
    ///</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    ///<summary>
    ///  创建安全对象及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  安全对象的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  将指定的连接字符串的访问权限添加到的现有状态 <see langword="DBDataPermission" />
    ///  。
    ///</summary>
    ///  <param name="connectionString">
    ///  允许的连接字符串。
    ///</param>
    ///  <param name="restrictions">
    ///  标识允许或禁止使用的连接字符串参数的字符串。
    ///</param>
    ///  <param name="behavior">
    ///  其中一个 <see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  属性。
    ///</param>
    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    ///<summary>
    ///  返回一个值，该值指示是否可以将权限表示为无限制权限语义任何不知情的情况下。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该权限可以表示为无限制。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  返回一个新的权限对象，是当前和指定权限对象的并集。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象组合在一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，表示当前的权限对象和指定的权限对象的并集。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  对象不是与当前权限对象相同的类型。
    ///</exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  此属性已被标记为过时。
    ///  将此属性设置将不起作用。
    ///</summary>
    ///<returns>
    ///  此属性已被标记为过时。
    ///  将此属性设置将不起作用。
    ///</returns>
    property Provider: string read get_Provider write set_Provider;
    ///<summary>
    ///  获取一个值，该值指示是否允许使用空白密码。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许密码为空，否则， <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNOleDbPermission = class(TDNGenericImport<DNOleDbPermissionClass, DNOleDbPermission>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientPermissionClass = interface(DNDBDataPermissionClass)
  ['{ED7E30C1-ACC9-504A-B5FE-4446A357779B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSqlClientPermission; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNSqlClientPermission; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    ///  <param name="allowBlankPassword">
    ///  指示是否允许密码为空。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState; allowBlankPassword: Boolean): DNSqlClientPermission; overload;

  end;

  ///<summary>
  ///  启用.NET Framework 数据提供程序 SQL Server，以帮助确保用户具有足够的权限访问数据源的安全级别。
  ///</summary>
  [DNTypeName('System.Data.SqlClient.SqlClientPermission')]
  DNSqlClientPermission = interface(DNDBDataPermission)
  ['{B17C70CA-A6C5-323E-A3AC-9E959F039538}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    ///<summary>
    ///  添加新的连接字符串和一组受限制的关键字为 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  对象。
    ///</summary>
    ///  <param name="connectionString">
    ///  连接字符串。
    ///</param>
    ///  <param name="restrictions">
    ///  键的限制。
    ///</param>
    ///  <param name="behavior">
    ///  其中一个 <see cref="T:System.Data.KeyRestrictionBehavior" />
    ///  枚举。
    ///</param>
    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    ///<summary>
    ///  返回 <see cref="T:System.Data.SqlClient.SqlClientPermission" />
    ///  作为 <see cref="T:System.Security.IPermission" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前权限对象的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回表示当前的权限对象和指定的权限对象的交集的新权限对象。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象相交的一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，它表示当前的权限对象和指定的权限对象的交集。
    ///  这个新的权限对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 如果交集为空。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数不是空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中) 并不是与当前权限对象相同的类的实例。
    ///</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  返回一个值，该值指示当前的权限对象是否为指定的权限对象的一个子集。
    ///</summary>
    ///  <param name="target">
    ///  测试子集关系权限对象。
    ///  此对象必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前的权限对象是指定的权限对象的一个子集否则 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  参数是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  通过 XML 编码重新构造具有指定状态的安全对象。
    ///</summary>
    ///  <param name="securityElement">
    ///  用于重新构造安全对象的 XML 编码。
    ///</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    ///<summary>
    ///  创建安全对象及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  安全对象的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  返回一个值，该值指示是否可以将权限表示为无限制权限语义任何不知情的情况下。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该权限可以表示为无限制。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  返回一个新的权限对象，是当前和指定权限对象的并集。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限对象组合在一个权限对象。
    ///  它必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns>
    ///  新权限对象，表示当前的权限对象和指定的权限对象的并集。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  对象不是与当前权限对象相同的类型。
    ///</exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否允许使用空白密码。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许密码为空，否则， <see langword="false" />
    ///  。
    ///</returns>
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNSqlClientPermission = class(TDNGenericImport<DNSqlClientPermissionClass, DNSqlClientPermission>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBinaryClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BC5F7805-404E-52E2-8980-17E05A908C45}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性设置为提供的字节数组的内容。
    ///</summary>
    ///  <param name="value">
    ///  要存储或检索的字节数组。
    ///</param>
    {class} function init(value: TArray<Byte>): DNSqlBinary;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlBinary;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlBinary read __fakeFieldGet_Null;

  { static methods } 

    ///<summary>
    ///  串联两个指定 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  x 的串联的值和 y。
    ///</returns>
    {class} function Add(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    ///<summary>
    ///  串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  串联的值 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  参数。
    ///</returns>
    {class} function Concat(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlBinary" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示要在存储中或从数据库中检索二进制数据的长度可变的流。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlBinary')]
  DNSqlBinary = interface(DDN.mscorlib.DNValueType)
  ['{786A4E29-6E12-387C-B5BF-64828EB757E4}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: TArray<Byte>;
    function get_Item(index: Int32): Byte;
    function get_Length: Int32;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象与字符串。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  为的 null 则字符串将包含"null"。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToSqlGuid: DNSqlGuid;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象传递给所提供的对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  与此比较的对象 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构和对象。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是小于的对象。
    ///  零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是对象相同。
    ///  大于零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是否大于对象。
    ///  - 或 -
    ///  该对象为 null 引用。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象进行比较的这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，它指示此相对值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构和对象。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是小于的对象。
    ///  零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是对象相同。
    ///  大于零
    ///  这 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象是否大于对象。
    ///  - 或 -
    ///  该对象为 null 引用。
    ///</returns>
    function CompareTo(value: DNSqlBinary): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构是否为 null。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  如果是 <see langword="null" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException"><see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性只读的属性时包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />
    ///  。
    ///</exception>
    property Value: TArray<Byte> read get_Value;
    property Item[index: Int32]: Byte read get_Item; default;
    ///<summary>
    ///  获取用字节表示长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  中的二进制数据的长度 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException"><see cref="P:System.Data.SqlTypes.SqlBinary.Length" />
    ///  属性为只读时 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />
    ///  属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />
    ///  。
    ///</exception>
    property Length: Int32 read get_Length;
  end;

  TDNSqlBinary = class(TDNGenericImport<DNSqlBinaryClass, DNSqlBinary>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBooleanClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BCB78FA4-2432-5072-AF33-969F663AA254}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，使用提供的布尔值。
    ///</summary>
    ///  <param name="value">
    ///  为新值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构; 两个 <see langword="true" />
    ///  或 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(value: Boolean): DNSqlBoolean; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，使用指定的整数值。
    ///</summary>
    ///  <param name="value">
    ///  其值是要用于新的整数 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    {class} function init(value: Int32): DNSqlBoolean; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_True: DNSqlBoolean;
   function __fakeFieldGet_False: DNSqlBoolean;
   function __fakeFieldGet_Null: DNSqlBoolean;
   function __fakeFieldGet_Zero: DNSqlBoolean;
   function __fakeFieldGet_One: DNSqlBoolean;

  { static fields } 

    ///<summary>
    ///  表示一个 true 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property True: DNSqlBoolean read __fakeFieldGet_True;
    ///<summary>
    ///  表示一个 false 值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property False: DNSqlBoolean read __fakeFieldGet_False;
    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlBoolean read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlBoolean read __fakeFieldGet_Zero;
    ///<summary>
    ///  表示一个值，可以分配给 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    {class} property One: DNSqlBoolean read __fakeFieldGet_One;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  到一个逻辑值的表示形式及其 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  等效。
    ///</summary>
    ///  <param name="s">
    ///  要转换的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，其中包含已分析的值。
    ///</returns>
    {class} function Parse(s: string): DNSqlBoolean;
    ///<summary>
    ///  执行对一个值的求补运算对提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  二进制反码所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</returns>
    {class} function OnesComplement(x: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  计算两个指定的按位与运算 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  逻辑与运算的结果。
    ///</returns>
    {class} function &And(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  执行按位或运算，对两个指定 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构，其值为按位或运算的结果。
    ///</returns>
    {class} function &Or(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  逻辑异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  两个实例是否相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  如果两个实例是否不相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function Equals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  的第一个实例是否大于第二个实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  如果第一个实例小于第二个实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  的第一个实例是否大于或等于第二个实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see langword="true" />
    ///  如果第一个实例小于或等于第二个实例，; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function LessThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示一个整数值，为 1 或 0，则存储在或者从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlBoolean')]
  DNSqlBoolean = interface(DDN.mscorlib.DNValueType)
  ['{B8E24A3F-FC08-3838-9051-1F1CA4323B29}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Boolean;
    function get_IsTrue: Boolean;
    function get_IsFalse: Boolean;
    function get_ByteValue: Byte;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  为字符串的结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///  如果值为 null，则字符串将包含"null"。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的值为 1。
    ///  否则为新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值为 1。
    ///  否则为新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt16" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构的值为 1。
    ///  否则为新 <see langword="SqlInt16" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt32" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构的值为 1。
    ///  否则为新 <see langword="SqlInt32" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt64" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构的值为 1。
    ///  否则为新 <see langword="SqlInt64" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值为 1。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="false" />
    ///  , ，新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值为 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值不是 1 或 0，新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  值是 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值为 1。
    ///  否则为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的值为 1; 否则为新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其值为 1 或 0。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值等于 <see langword="true" />
    ///  ，那么 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构的值为 1。
    ///  否则，新的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构的值为 0。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构与指定对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较对象，则为 null 引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</param>
    ///<returns>
    ///  有符号的数字，该值指示此实例和值的相对值。
    ///  值
    ///  描述
    ///  负整数
    ///  此实例小于 <paramref name="value" />
    ///  。
    ///  零
    ///  此实例等于 <paramref name="value" />
    ///  。
    ///  正整数
    ///  此实例大于 <paramref name="value" />
    ///  。
    ///  - 或 -
    ///  <paramref name="value" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  对象与所提供 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  要比较对象，则为 null 引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</param>
    ///<returns>
    ///  有符号的数字，该值指示此实例和值的相对值。
    ///  值
    ///  描述
    ///  负整数
    ///  此实例小于 <paramref name="value" />
    ///  。
    ///  零
    ///  此实例等于 <paramref name="value" />
    ///  。
    ///  正整数
    ///  此实例大于 <paramref name="value" />
    ///  。
    ///  - 或 -
    ///  <paramref name="value" />
    ///  为空引用（在 Visual Basic 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    function CompareTo(value: DNSqlBoolean): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构为空; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值。
    ///  此属性是只读的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  该属性设置为 null。
    ///</exception>
    property Value: Boolean read get_Value;
    ///<summary>
    ///  指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Value" />
    ///  是 <see langword="True" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsTrue: Boolean read get_IsTrue;
    ///<summary>
    ///  指示是否当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="Value" />
    ///  是 <see langword="False" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFalse: Boolean read get_IsFalse;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  字节形式的结构。
    ///</summary>
    ///<returns>
    ///  一个字节表示的值的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///</returns>
    property ByteValue: Byte read get_ByteValue;
  end;

  TDNSqlBoolean = class(TDNGenericImport<DNSqlBooleanClass, DNSqlBoolean>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlByteClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B0043E6D-8C6A-5CFA-A00A-FC20DBA97B83}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，使用指定的字节值。
    ///</summary>
    ///  <param name="value">
    ///  要存储在一个字节值 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性的新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    {class} function init(value: Byte): DNSqlByte;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlByte;
   function __fakeFieldGet_Zero: DNSqlByte;
   function __fakeFieldGet_MinValue: DNSqlByte;
   function __fakeFieldGet_MaxValue: DNSqlByte;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlByte read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlByte read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlByte read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    {class} property MaxValue: DNSqlByte read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 8 位无符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，其中包含所表示的 8 位数字 <see langword="String" />
    ///  参数。
    ///</returns>
    {class} function Parse(s: string): DNSqlByte;
    ///<summary>
    ///  二进制反码运算符执行按位码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性包含与补数 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  参数。
    ///</returns>
    {class} function OnesComplement(x: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  属性包含添加的结果。
    ///</returns>
    {class} function Add(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  从第一个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  从第一个操作数。
    ///</returns>
    {class} function Subtract(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性包含相乘的积。
    ///</returns>
    {class} function Multiply(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  按位与运算的结果。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  按位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlByte" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示一个 8 位无符号的整数，0 和 255 之间，范围中要存储中或从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlByte')]
  DNSqlByte = interface(DDN.mscorlib.DNValueType)
  ['{4D1AFAD7-1431-3AFC-8960-D2DE9BE53DE6}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Byte;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///  如果 <see langword="Value" />
    ///  为 null， <see langword="String" />
    ///  将是一个空字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlDouble" />
    ///  具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlInt16" />
    ///  具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlInt32" />
    ///  具有与此相同的值结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlInt64" />
    ///  结构人员 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlSingle" />
    ///  具有相同的结构 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  如下 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlString" />
    ///  ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  将与所提供的此实例进行比较 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  将与所提供的此实例进行比较 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  对象进行比较。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlByte): Int32; overload;
    ///<summary>
    ///  比较提供 <see cref="T:System.Object" />
    ///  参数 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///  此属性是只读的
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构。
    ///</returns>
    property Value: Byte read get_Value;
  end;

  TDNSqlByte = class(TDNGenericImport<DNSqlByteClass, DNSqlByte>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDateTimeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CFD65AA2-B683-5C7D-8EE2-F2E470823769}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用指定 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see langword="DateTime" />
    ///  结构。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNDateTime): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日。
    ///</summary>
    ///  <param name="year">
    ///  一个整数，表示的年份的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟和第二个新的结构。
    ///</summary>
    ///  <param name="year">
    ///  一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="hour">
    ///  一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="minute">
    ///  一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="second">
    ///  一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫秒，新的结构。
    ///</summary>
    ///  <param name="year">
    ///  一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的每月天数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="hour">
    ///  一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="minute">
    ///  一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="second">
    ///  一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="millisecond">
    ///  一个 double 值，表示最新的毫秒 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Double): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用所提供的参数初始化年、 月、 日、 小时、 分钟、 秒和毫新结构。
    ///</summary>
    ///  <param name="year">
    ///  一个整数值，表示新的年 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="month">
    ///  表示新的月份的整数值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="day">
    ///  一个整数值，表示新的一天 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="hour">
    ///  一个整数值表示的小时部分新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="minute">
    ///  一个整数值表示时间的分钟数新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="second">
    ///  一个整数值表示的第二个新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="bilisecond">
    ///  一个整数值表示毫第二个） 的新 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; bilisecond: Int32): DNSqlDateTime; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，使用提供的参数。
    ///</summary>
    ///  <param name="dayTicks">
    ///  一个整数值，表示为刻度数的日期。
    ///</param>
    ///  <param name="timeTicks">
    ///  一个整数值，表示为刻度数的时间。
    ///</param>
    {class} function init(dayTicks: Int32; timeTicks: Int32): DNSqlDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SQLTicksPerSecond: Int32;
   function __fakeFieldGet_SQLTicksPerMinute: Int32;
   function __fakeFieldGet_SQLTicksPerHour: Int32;
   function __fakeFieldGet_MinValue: DNSqlDateTime;
   function __fakeFieldGet_MaxValue: DNSqlDateTime;
   function __fakeFieldGet_Null: DNSqlDateTime;

  { static fields } 

    ///<summary>
    ///  其值为等效于 1 秒的刻度数的常数。
    ///</summary>
    {class} property SQLTicksPerSecond: Int32 read __fakeFieldGet_SQLTicksPerSecond;
    ///<summary>
    ///  一个常数，其值是等效为一分钟的刻度数。
    ///</summary>
    {class} property SQLTicksPerMinute: Int32 read __fakeFieldGet_SQLTicksPerMinute;
    ///<summary>
    ///  其值为等效于一小时的刻度数的常数。
    ///</summary>
    {class} property SQLTicksPerHour: Int32 read __fakeFieldGet_SQLTicksPerHour;
    ///<summary>
    ///  表示的最小有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    {class} property MinValue: DNSqlDateTime read __fakeFieldGet_MinValue;
    ///<summary>
    ///  表示的最大有效日期值 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlDateTime read __fakeFieldGet_MaxValue;
    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlDateTime read __fakeFieldGet_Null;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  日期和时间表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  等效。
    ///</summary>
    ///  <param name="s"><see langword="string" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构等于的日期和时间指定表示 <see langword="string" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlDateTime;
    ///<summary>
    ///  添加 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  到指定 <see langword="TimeSpan" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</param>
    ///  <param name="t">
    ///  一个 <see langword="Timespan" />
    ///  值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</returns>
    {class} function Add(x: DNSqlDateTime; t: DDN.mscorlib.DNTimeSpan): DNSqlDateTime;
    ///<summary>
    ///  中减去指定 <see langword="Timespan" />
    ///  从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  实例。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</param>
    ///  <param name="t">
    ///  一个 <see langword="Timespan" />
    ///  值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  值。
    ///</returns>
    {class} function Subtract(x: DNSqlDateTime; t: DDN.mscorlib.DNTimeSpan): DNSqlDateTime;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较的两个实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示数值范围从 1753 年 1 月 1 日至 12 月 31 日，精确到 3.33 毫秒要存储中或从数据库中检索到 9999 的日期和时间数据。
  ///<see cref="T:System.Data.SqlTypes.SqlDateTime" />
  ///  结构都有其对应的.NET Framework 类型，从不同的基础数据结构 <see cref="T:System.DateTime" />
  ///  , ，该类型可表示 12:00:00 AM 之间任何时间 0001 年 1 月 1 日和 11:59:59 PM 12/31/9999，100 纳秒的准确性。
  ///<see cref="T:System.Data.SqlTypes.SqlDateTime" />
  ///  实际上都存储到 00:00:00 AM 的相对差值 1900 年 1 月 1 日。
  ///  因此，从转换"00:00:00 AM 1/1/1900年"为整数，则将返回 0。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlDateTime')]
  DNSqlDateTime = interface(DDN.mscorlib.DNValueType)
  ['{C599278A-B83C-358D-96B1-56EA21FCF240}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDateTime;
    function get_DayTicks: Int32;
    function get_TimeTicks: Int32;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="String" />
    ///  表示 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlString" />
    ///  其值是一个字符串，表示日期和时间的结构是否包含在此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  与所提供的结构 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  为 Visual Basic)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构，并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构进行比较。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///  零
    ///  此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  相同。
    ///  大于零
    ///  此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  - 或 -
    ///<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  为空引用 (<see langword="Nothing " />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlDateTime): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  此值<see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  当 <see langword="Value" />
    ///  结构的 <see cref="N:System.Data.SqlTypes" />
    ///  属性设置为 null 时所引发的异常。
    ///</exception>
    property Value: DDN.mscorlib.DNDateTime read get_Value;
    ///<summary>
    ///  获取表示此日期的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  表示日期中包含的计时周期数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  当 <see langword="Value" />
    ///  结构的 <see cref="N:System.Data.SqlTypes" />
    ///  属性设置为 null 时所引发的异常。
    ///</exception>
    property DayTicks: Int32 read get_DayTicks;
    ///<summary>
    ///  获取表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  表示此时间的计时周期数 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  结构。
    ///</returns>
    property TimeTicks: Int32 read get_TimeTicks;
  end;

  TDNSqlDateTime = class(TDNGenericImport<DNSqlDateTimeClass, DNSqlDateTime>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDecimalClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{9F2819B0-E2F3-575A-964E-F4FE05261A86}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用所提供 <see cref="T:System.Decimal" />
    ///  值。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Decimal" />
    ///  值存储为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNDecimal): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的整数值。
    ///</summary>
    ///  <param name="value">
    ///  提供的整数值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(value: Int32): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的长整型值。
    ///</summary>
    ///  <param name="value">
    ///  提供的长整型值，它将用作新值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(value: Int64): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的参数。
    ///</summary>
    ///  <param name="bPrecision">
    ///  最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="bScale">
    ///  小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="fPositive">
    ///  一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构表示正数或负数。
    ///</param>
    ///  <param name="bits">
    ///  提供的新值的 128 位无符号的整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</param>
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; bits: TArray<Int32>): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的参数。
    ///</summary>
    ///  <param name="bPrecision">
    ///  最大数字位数，可以用于以表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性的新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="bScale">
    ///  小数位数数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性将解析为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="fPositive">
    ///  一个布尔值，该值指示是否新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构表示正数或负数。
    ///</param>
    ///  <param name="data1">
    ///  一个 32 位无符号的整数，它将结合 data2、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    ///  <param name="data2">
    ///  一个 32 位无符号的整数，它将结合 data1、 data3 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    ///  <param name="data3">
    ///  一个 32 位无符号的整数，它将结合 data1、 data2 和 data4 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    ///  <param name="data4">
    ///  一个 32 位无符号的整数，它将结合 data1、 data2 和 data3 以组成的 128 位无符号整数，表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构值。
    ///</param>
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; data1: Int32; data2: Int32; data3: Int32; data4: Int32): DNSqlDecimal; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，使用提供的双精度型参数。
    ///</summary>
    ///  <param name="dVal">
    ///  双精度，这表示的值为新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    {class} function init(dVal: Double): DNSqlDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxPrecision: Byte;
   function __fakeFieldGet_MaxScale: Byte;
   function __fakeFieldGet_Null: DNSqlDecimal;
   function __fakeFieldGet_MinValue: DNSqlDecimal;
   function __fakeFieldGet_MaxValue: DNSqlDecimal;

  { static fields } 

    ///<summary>
    ///  一个常数，表示的最大可能值为 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" />
    ///  属性。
    ///</summary>
    {class} property MaxPrecision: Byte read __fakeFieldGet_MaxPrecision;
    ///<summary>
    ///  一个常数，表示的最大值 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" />
    ///  属性。
    ///</summary>
    {class} property MaxScale: Byte read __fakeFieldGet_MaxScale;
    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  类。
    ///</summary>
    {class} property Null: DNSqlDecimal read __fakeFieldGet_Null;
    ///<summary>
    ///  一个常数，表示最小值为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</summary>
    {class} property MinValue: DNSqlDecimal read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlDecimal read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等效。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlDecimal;
    ///<summary>
    ///  小数位数为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数将调整为数字参数指示的数字个数。
    ///  根据 fRound 参数的值，值将被舍入到相应的数字或截断。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构来进行调整。
    ///</param>
    ///  <param name="digits">
    ///  调整后的结构中的数字个数。
    ///</param>
    ///  <param name="fRound">
    ///  如果此参数为 <see langword="true" />
    ///  , ，新值将舍入，如果 <see langword="false" />
    ///  , ，则该值将被截断。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含调整后的数字。
    ///</returns>
    {class} function AdjustScale(n: DNSqlDecimal; digits: Int32; fRound: Boolean): DNSqlDecimal;
    ///<summary>
    ///  值调整 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数指定的精度和小数位数。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其值进行调整。
    ///</param>
    ///  <param name="precision">
    ///  新的精度 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="scale">
    ///  新的小数位数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数中指定其值已调整到的精度和小数位数的结构。
    ///</returns>
    {class} function ConvertToPrecScale(n: DNSqlDecimal; precision: Int32; scale: Int32): DNSqlDecimal;
    ///<summary>
    ///  计算两个总和 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  运算符。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含的总和。
    ///</returns>
    {class} function Add(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  计算的结果中减去第二个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  从第一个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其 Value 属性包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含相乘的积。
    ///</returns>
    {class} function Multiply(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  除法运算符计算除以第一个结果 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  操作数以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null、 的值 <see langword="SqlDecimal" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    ///<summary>
    ///  Abs 方法获取数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数。
    ///</summary>
    ///  <param name="n">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性包含该无符号的数值表示数值的绝对值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  参数。
    ///</returns>
    {class} function Abs(n: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  返回大于或等于指定的最小整数 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构为其上限值进行计算。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  表示最小整数大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    {class} function Ceiling(n: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  指定将舍入 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  数字到下一个较小的整数。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  为其最小值是要计算的结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其中包含此的整数部分 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    {class} function Floor(n: DNSqlDecimal): DNSqlDecimal;
    ///<summary>
    ///  获取一个值，表示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  其符号的计算结果的结构。
    ///</param>
    ///<returns>
    ///  一个数字，指示的符号 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    {class} function Sign(n: DNSqlDecimal): DNSqlInt32;
    ///<summary>
    ///  获取最接近指定的数字 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值与指定的精度。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构要舍入。
    ///</param>
    ///  <param name="position">
    ///  返回值中的有效小数位数 （精度） 数。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，其中包含舍入运算的结果。
    ///</returns>
    {class} function Round(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    ///<summary>
    ///  将截断指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值与您希望的位置。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构被截断。
    ///</param>
    ///  <param name="position">
    ///  数字将被截断的十进制位置。
    ///</param>
    ///<returns>
    ///  提供一个负值 <paramref name="position" />
    ///  为了截断到小数点左侧的相应位置的值的参数。
    ///</returns>
    {class} function Truncate(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    ///<summary>
    ///  引发指定的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的指定指数幂。
    ///</summary>
    ///  <param name="n"><see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  要乘幂的结构。
    ///</param>
    ///  <param name="exp">
    ///  双精度值，该值指示数应乘到其中的幂。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它包含的结果。
    ///</returns>
    {class} function Power(n: DNSqlDecimal; exp: Double): DNSqlDecimal;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示数值之间-10 ^38 + 1 和 10 ^38-1，具有固定的精度和小数位数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlDecimal')]
  DNSqlDecimal = interface(DDN.mscorlib.DNValueType)
  ['{BDCFC99C-77C5-3116-BD41-6BE948F47914}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDecimal;
    function get_IsPositive: Boolean;
    function get_Precision: Byte;
    function get_Scale: Byte;
    function get_Data: TArray<Int32>;
    function get_BinData: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.String" />
    ///  对象，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  返回的内容的双精度等于 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  的此实例的属性。
    ///</summary>
    ///<returns>
    ///  十进制表示形式 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</returns>
    function ToDouble: Double;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值是 <see langword="true" />
    ///  , 、 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 1。
    ///  否则为 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 0。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  具有与此实例相同的值结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其值一个字符串，表示在此所包含的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  对象并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlDecimal): Int32; overload;
    ///<summary>
    ///  比较提供 <see cref="T:System.Object" />
    ///  参数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  实例。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  和两个是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  范围-79228162514264337593543950335 到 79,228,162,514,162,514,264,337,593,543,950,335 内的数字。
    ///</returns>
    property Value: DDN.mscorlib.DNDecimal read get_Value;
    ///<summary>
    ///  指示是否 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构是大于零。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  赋 null 值。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPositive: Boolean read get_IsPositive;
    ///<summary>
    ///  获取用于表示的数字的最大数目 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  用来表示的数字的最大数 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    property Precision: Byte read get_Precision;
    ///<summary>
    ///  获取到的小数位数 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />
    ///  得到解决。
    ///</summary>
    ///<returns>
    ///  小数位数数 <see langword="Value" />
    ///  属性是否已解决。
    ///</returns>
    property Scale: Byte read get_Scale;
    ///<summary>
    ///  获取的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  作为一个整数数组的结构。
    ///</summary>
    ///<returns>
    ///  整数数组，其中包含的二进制表示形式这 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构。
    ///</returns>
    property Data: TArray<Int32> read get_Data;
    ///<summary>
    ///  获取此值的二进制表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  作为字节数组的结构。
    ///</summary>
    ///<returns>
    ///  一个包含二进制表示形式的字节数组 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构的值。
    ///</returns>
    property BinData: TArray<Byte> read get_BinData;
  end;

  TDNSqlDecimal = class(TDNGenericImport<DNSqlDecimalClass, DNSqlDecimal>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDoubleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6CF2800B-3833-5F2C-82F5-D52E4986C67A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构提供的双精度型参数用于设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  属性。
    ///</summary>
    ///  <param name="value">
    ///  一个双精度值，其值将用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</param>
    {class} function init(value: Double): DNSqlDouble;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlDouble;
   function __fakeFieldGet_Zero: DNSqlDouble;
   function __fakeFieldGet_MinValue: DNSqlDouble;
   function __fakeFieldGet_MaxValue: DNSqlDouble;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlDouble read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlDouble read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlDouble read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlDouble read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为它的等效双精度浮点数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  ，其中包含所表示的值 <see langword="String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlDouble;
    ///<summary>
    ///  加法运算符计算这两个和 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  这两个 sum <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</returns>
    {class} function Add(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  减法运算符第二个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  从第一个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  这两个产品 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数。
    ///</returns>
    {class} function Multiply(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构，其中包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    ///<summary>
    ///  对两个实例执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean; overload;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定它们是否不等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示一个浮点数字中范围在-1.79 e + 308 到 1.79 e + 308 之间要存储中或从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlDouble')]
  DNSqlDouble = interface(DDN.mscorlib.DNValueType)
  ['{15948ECF-16E5-35C7-AB50-F8B22FC235CA}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Double;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为字符串的结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlBoolean" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  为非零 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  为零和 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构是 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />
    ///  。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see langword="Value" />
    ///  等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see langword="Value" />
    ///  等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see langword="Value" />
    ///  等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构的值。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  是否等于此值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDecimal" />
    ///  它的已转换的值等于此舍入的值的结构 <see langword="SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlSingle" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  是否等同于 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlString" />
    ///  表示 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing " />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlDouble): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  structre。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  实例为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构。
    ///</returns>
    property Value: Double read get_Value;
  end;

  TDNSqlDouble = class(TDNGenericImport<DNSqlDoubleClass, DNSqlDouble>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlGuidClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B91E024B-C566-5CF3-8C05-3B4D709225DC}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用提供的字节数组参数。
    ///</summary>
    ///  <param name="value">
    ///  字节数组。
    ///</param>
    {class} function init(value: TArray<Byte>): DNSqlGuid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用指定 <see cref="T:System.String" />
    ///  参数。
    ///</summary>
    ///  <param name="s">
    ///  一个 <see cref="T:System.String" />
    ///  对象。
    ///</param>
    {class} function init(s: string): DNSqlGuid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用指定 <see cref="T:System.Guid" />
    ///  参数。
    ///</summary>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Guid" />
    ///</param>
    {class} function init(g: DDN.mscorlib.DNGuid): DNSqlGuid; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，使用指定的值。
    ///</summary>
    ///  <param name="a">
    ///  前四个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="b">
    ///  接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="c">
    ///  接下来的两个字节的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="d">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="e">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="f">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="g">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="h">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="i">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="j">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///  <param name="k">
    ///  下一个字节 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNSqlGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlGuid;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlGuid read __fakeFieldGet_Null;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlGuid;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlGuid" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean; overload;
    ///<summary>
    ///  对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示要在存储或从数据库中检索一个 GUID。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlGuid')]
  DNSqlGuid = interface(DDN.mscorlib.DNValueType)
  ['{F0D806DB-2E99-384B-8436-4F44230A9344}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  到字节数组的结构。
    ///</summary>
    ///<returns>
    ///  表示的字节数组 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToByteArray: TArray<Byte>;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其中包含的字符串表示形式 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBinary" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="SqlBinary" />
    ///  结构，其中包含的字节数 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</returns>
    function ToSqlBinary: DNSqlBinary;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构与所提供的对象并返回对其相对值的指示。
    ///  比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例小于对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  对象为 null 引用 (<see langword="Nothing" />
    ///  )
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  与所提供的结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  并返回对其相对值的指示。
    ///  比较多个最后 6 个字节，但将视为最重要的比较中的最后 6 个字节。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例小于对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  对象为 null 引用 (<see langword="Nothing" />
    ///  )。
    ///</returns>
    function CompareTo(value: DNSqlGuid): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此哈希代码<see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="null" />
    ///  。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取的值 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构。
    ///</returns>
    property Value: DDN.mscorlib.DNGuid read get_Value;
  end;

  TDNSqlGuid = class(TDNGenericImport<DNSqlGuidClass, DNSqlGuid>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt16Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{3BF5CA4B-7F76-5731-9FD3-C8C0A300D610}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，使用提供的短整型参数。
    ///</summary>
    ///  <param name="value">
    ///  短整数。
    ///</param>
    {class} function init(value: Int16): DNSqlInt16;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt16;
   function __fakeFieldGet_Zero: DNSqlInt16;
   function __fakeFieldGet_MinValue: DNSqlInt16;
   function __fakeFieldGet_MaxValue: DNSqlInt16;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlInt16 read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlInt16 read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlInt16 read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    {class} property MaxValue: DNSqlInt16 read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 16 位有符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  包含的值等效的 16 位有符号的整数指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlInt16;
    ///<summary>
    ///  ~ 运算符都将执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含指定的求补 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    {class} function OnesComplement(x: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含两个和 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</returns>
    {class} function Add(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  包含两个参数的乘积。
    ///</returns>
    {class} function Multiply(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算其第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数除以第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  值。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含结果的按位 and。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性包含位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，其中包含异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlInt16" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示要存储中或从数据库中检索的 16 位有符号的整数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlInt16')]
  DNSqlInt16 = interface(DDN.mscorlib.DNValueType)
  ['{20F45935-DA99-3C1C-9580-217119B0F859}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int16;

  { methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  对象，表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  等于 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///  如果值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  小于 0 或大于 255， <see cref="T:System.OverflowException" />
    ///  时发生。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，它的 <see langword="Value" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  的此实例的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  对象为 null 引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlInt16): Int32; overload;
    ///<summary>
    ///  比较指定的对象和 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///  有关详细信息，请参阅处理 Null 值。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此实例的值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个短整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  结构。
    ///</returns>
    property Value: Int16 read get_Value;
  end;

  TDNSqlInt16 = class(TDNGenericImport<DNSqlInt16Class, DNSqlInt16>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt32Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CF5049B8-ABB5-5D6A-A82C-3A5F655687CF}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，使用提供的整数值。
    ///</summary>
    ///  <param name="value">
    ///  要转换的整数。
    ///</param>
    {class} function init(value: Int32): DNSqlInt32;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt32;
   function __fakeFieldGet_Zero: DNSqlInt32;
   function __fakeFieldGet_MinValue: DNSqlInt32;
   function __fakeFieldGet_MaxValue: DNSqlInt32;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  类。
    ///</summary>
    {class} property Null: DNSqlInt32 read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlInt32 read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    {class} property MinValue: DNSqlInt32 read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    {class} property MaxValue: DNSqlInt32 read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 32 位有符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see cref="T:System.String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  包含的值等效的 32 位有符号的整数指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlInt32;
    ///<summary>
    ///  执行按位二进制反码对指定的运算 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含求补运算的结果。
    ///</returns>
    {class} function OnesComplement(x: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性包含指定的总和 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</returns>
    {class} function Add(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  包含两个参数的乘积。
    ///</returns>
    {class} function Multiply(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  从第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  其 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  值。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含按位与运算的结果。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  计算指定的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含按位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  执行对指定位异或运算 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构，其中包含按位异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlInt32" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果任一实例<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果任一实例<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  比较两个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示要存储中或从数据库中检索的 32 位有符号的整数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlInt32')]
  DNSqlInt32 = interface(DDN.mscorlib.DNValueType)
  ['{4BDFEF65-38A3-3B4D-A409-223E7AFFA172}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int32;

  { methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///  如果值 <see langword="SqlInt32" />
    ///  小于 0 或大于 255， <see cref="T:System.OverflowException" />
    ///  时发生。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  等于此值的结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlInt32): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构为 null。
    ///</summary>
    ///<returns>
    ///  此属性是 <see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />
    ///  为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此值<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个整数，表示此值<see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  属性包含<see cref="F:System.Data.SqlTypes.SqlInt32.Null" />
    ///  。
    ///</exception>
    property Value: Int32 read get_Value;
  end;

  TDNSqlInt32 = class(TDNGenericImport<DNSqlInt32Class, DNSqlInt32>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt64Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{12B1DB76-156F-5305-93FE-EE0D0D4FAFE8}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，使用提供的长整型。
    ///</summary>
    ///  <param name="value">
    ///  一个长整型。
    ///</param>
    {class} function init(value: Int64): DNSqlInt64;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt64;
   function __fakeFieldGet_Zero: DNSqlInt64;
   function __fakeFieldGet_MinValue: DNSqlInt64;
   function __fakeFieldGet_MaxValue: DNSqlInt64;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlInt64 read __fakeFieldGet_Null;
    ///<summary>
    ///  表示一个零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property Zero: DNSqlInt64 read __fakeFieldGet_Zero;
    ///<summary>
    ///  一个常数，表示的最小可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property MinValue: DNSqlInt64 read __fakeFieldGet_MinValue;
    ///<summary>
    ///  一个常数，表示的最大可能值为 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</summary>
    {class} property MaxValue: DNSqlInt64 read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  为其等效的 64 位有符号整数的数字表示形式。
    ///</summary>
    ///  <param name="s"><see cref="T:System.String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  包含的值等效的 64 位有符号的整数指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlInt64;
    ///<summary>
    ///  执行按位二进制反码运算上其 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  是否等同于的二进制反码 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</returns>
    {class} function OnesComplement(x: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算两个和 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  等于这两种合计 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</returns>
    {class} function Add(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性值等于减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  是否等同于这两个产品 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数。
    ///</returns>
    {class} function Multiply(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算第一个相除的余数 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性包含其余部分。
    ///</returns>
    {class} function &Mod(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  将两个划分 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值并返回余数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  值。
    ///</param>
    ///<returns>
    ///  得到的余数后在执行除法运算 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Modulus(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算的按位 AND 其 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，其中包含按位与运算的结果。
    ///</returns>
    {class} function BitwiseAnd(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  计算其两个的按位 OR <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，其中包含按位或运算的结果。
    ///</returns>
    {class} function BitwiseOr(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  执行按位异或运算对提供的参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构，其中包含按位异或运算的结果。
    ///</returns>
    {class} function &Xor(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlInt64" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean; overload;
    ///<summary>
    ///  对以确定它们是否不相等的两个 SqlInt64 参数执行逻辑比较。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  对两个执行逻辑比较 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否小于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示要存储在或从数据库中检索 64 位带符号的整数。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlInt64')]
  DNSqlInt64 = interface(DDN.mscorlib.DNValueType)
  ['{00CBD4D3-846A-301B-B4E5-3C8A0F0F8A22}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int64;

  { methods } 

    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示的值的这 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing " />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DNSqlInt64): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个长整型，表示此值 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  结构。
    ///</returns>
    property Value: Int64 read get_Value;
  end;

  TDNSqlInt64 = class(TDNGenericImport<DNSqlInt64Class, DNSqlInt64>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlMoneyClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{8BEB8FFC-8B77-5B40-862E-C38062667DEE}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类，具有指定的整数值。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: Int32): DNSqlMoney; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类，具有指定的长整型值。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: Int64): DNSqlMoney; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Decimal" />
    ///  值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNDecimal): DNSqlMoney; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类，具有指定的双精度值。
    ///</summary>
    ///  <param name="value">
    ///  要初始化的货币值。
    ///</param>
    {class} function init(value: Double): DNSqlMoney; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlMoney;
   function __fakeFieldGet_Zero: DNSqlMoney;
   function __fakeFieldGet_MinValue: DNSqlMoney;
   function __fakeFieldGet_MaxValue: DNSqlMoney;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property Null: DNSqlMoney read __fakeFieldGet_Null;
    ///<summary>
    ///  表示零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property Zero: DNSqlMoney read __fakeFieldGet_Zero;
    ///<summary>
    ///  表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property MinValue: DNSqlMoney read __fakeFieldGet_MinValue;
    ///<summary>
    ///  表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  类。
    ///</summary>
    {class} property MaxValue: DNSqlMoney read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到数字表示形式及其 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等效。
    ///</summary>
    ///  <param name="s"><see langword="String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlMoney;
    ///<summary>
    ///  计算两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  包含两个总和 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数。
    ///</returns>
    {class} function Add(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  减法运算符中减去第二个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  从第一个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，其中包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  乘法运算符计算这两个产品 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  包含相乘的积。
    ///</returns>
    {class} function Multiply(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlMoney" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定第一个是否大于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  参数，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet">
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  ，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示货币值，范围从-2 63 （或-922337203685，477.5808） 到 2 63 精度为千分之十个货币单位要存储中或从数据库中检索为-1 （或 + 922337203685，477.5807）。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlMoney')]
  DNSqlMoney = interface(DDN.mscorlib.DNValueType)
  ['{9DE6EE1A-043D-37A7-A54E-A5541A181DEF}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDecimal;

  { methods } 

    ///<summary>
    ///  将此实例的值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  作为 <see cref="T:System.Decimal" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Decimal" />
    ///  结构，其值等于 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将此值转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 64 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToInt64: Int64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 32 位整数，其值等于的整数部分 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToInt32: Int32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个双精度型值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    function ToDouble: Double;
    ///<summary>
    ///  将此实例的转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  为字符串。
    ///</summary>
    ///<returns>
    ///  一个字符串，其值的字符串表示形式的数 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构。
    ///  如果值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构为零， <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，其值为一个字符串，表示此值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlMoney): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns>
    ///  相等比较将返回 <see langword="true" />
    ///  的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回一个布尔值，该值指示是否此 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  实例的货币值 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  该属性设置为 null。
    ///</exception>
    property Value: DDN.mscorlib.DNDecimal read get_Value;
  end;

  TDNSqlMoney = class(TDNGenericImport<DNSqlMoneyClass, DNSqlMoney>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlSingleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{37F2DDC7-3D28-5A2D-A6B9-B1261DE01D9B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的新实例。
    ///</summary>
    ///  <param name="value">
    ///  浮点数，它将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    {class} function init(value: Single): DNSqlSingle; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，使用提供的双精度型参数。
    ///</summary>
    ///  <param name="value">
    ///  一个双精度值，该值将用作 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    {class} function init(value: Double): DNSqlSingle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlSingle;
   function __fakeFieldGet_Zero: DNSqlSingle;
   function __fakeFieldGet_MinValue: DNSqlSingle;
   function __fakeFieldGet_MaxValue: DNSqlSingle;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlSingle read __fakeFieldGet_Null;
    ///<summary>
    ///  表示零值，可以分配给<see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  实例的属性<see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  类。
    ///</summary>
    {class} property Zero: DNSqlSingle read __fakeFieldGet_Zero;
    ///<summary>
    ///  表示可分配给最小值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  类。
    ///</summary>
    {class} property MinValue: DNSqlSingle read __fakeFieldGet_MinValue;
    ///<summary>
    ///  表示可分配给最大值 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  属性的一个实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  类。
    ///</summary>
    {class} property MaxValue: DNSqlSingle read __fakeFieldGet_MaxValue;

  { static methods } 

    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    ///  <param name="s"><see cref="T:System.String" />
    ///  要进行分析。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  等效于包含的值中指定 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function Parse(s: string): DNSqlSingle;
    ///<summary>
    ///  计算两个指定的和 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其中包含两个指定的总和 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</returns>
    {class} function Add(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  值中减去第二个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  从第一个结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其中包含该减法运算的结果。
    ///</returns>
    {class} function Subtract(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  计算两个指定的积 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，其中包含乘法的乘积。
    ///</returns>
    {class} function Multiply(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see langword="SqlInt64" />
    ///  结构，其中包含除法运算的结果。
    ///</returns>
    {class} function Divide(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数，以确定它们是否相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlSingle" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数，以确定它们是否不相等。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  以确定第一个是否大于第二个操作数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构，以确定第一个是否大于或等于第二个。
    ///</summary>
    ///  <param name="x">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示浮点数，范围在-3.40 e + 38 到 3.40 e + 38 之间要存储中或从数据库中检索。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlSingle')]
  DNSqlSingle = interface(DDN.mscorlib.DNValueType)
  ['{276F2119-1904-3B1B-8463-F19AF694D94A}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Single;

  { methods } 

    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="String" />
    ///  对象，表示此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构，它的 <see langword="Value" />
    ///  等于 <see langword="Value" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///  如果 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构的值是 <see langword="true" />
    ///  , 、 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 1。
    ///  否则为 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  结构的 <see langword="Value" />
    ///  将为 0。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDouble " />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlInt16" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDecimal" />
    ///  等于此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  表示的值的这 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</returns>
    function ToSqlString: DNSqlString;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  实例与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DNSqlSingle): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象的实例 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  和两个是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果为 null。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取此值 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  一个浮点值范围在-3.40 e + 38 到 3.40 e + 38。
    ///</returns>
    property Value: Single read get_Value;
  end;

  TDNSqlSingle = class(TDNGenericImport<DNSqlSingleClass, DNSqlSingle>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlStringClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{16539F8A-13D9-5E3B-AC40-2AC7238A19B8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="compareOptions">
    ///  指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="data">
    ///  要存储的数据数组。
    ///</param>
    ///  <param name="index">
    ///  该数组内的起始索引。
    ///</param>
    ///  <param name="count">
    ///  从索引复制的字符数。
    ///</param>
    ///  <param name="fUnicode"><see langword="true" />
    ///  如果 Unicode 编码。
    ///  否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; index: Int32; count: Int32; fUnicode: Boolean): DNSqlString; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="compareOptions">
    ///  指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="data">
    ///  要存储的数据数组。
    ///</param>
    ///  <param name="fUnicode"><see langword="true" />
    ///  如果 Unicode 编码。
    ///  否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; fUnicode: Boolean): DNSqlString; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="compareOptions">
    ///  指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="data">
    ///  要存储的数据数组。
    ///</param>
    ///  <param name="index">
    ///  该数组内的起始索引。
    ///</param>
    ///  <param name="count">
    ///  从索引复制的字符数。
    ///</param>
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; index: Int32; count: Int32): DNSqlString; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构使用指定的区域设置 id，请比较选项和数据。
    ///</summary>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="compareOptions">
    ///  指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="data">
    ///  要存储的数据数组。
    ///</param>
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>): DNSqlString; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，使用指定的字符串、 区域设置 id 和比较选项值。
    ///</summary>
    ///  <param name="data">
    ///  要存储的字符串。
    ///</param>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///  <param name="compareOptions">
    ///  指定新的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    {class} function init(data: string; lcid: Int32; compareOptions: DNSqlCompareOptions): DNSqlString; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，使用指定的字符串和区域设置 id 值。
    ///</summary>
    ///  <param name="data">
    ///  要存储的字符串。
    ///</param>
    ///  <param name="lcid">
    ///  指定地理区域设置和语言新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    {class} function init(data: string; lcid: Int32): DNSqlString; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构，使用指定的字符串。
    ///</summary>
    ///  <param name="data">
    ///  要存储的字符串。
    ///</param>
    {class} function init(data: string): DNSqlString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlString;
   function __fakeFieldGet_IgnoreCase: Int32;
   function __fakeFieldGet_IgnoreWidth: Int32;
   function __fakeFieldGet_IgnoreNonSpace: Int32;
   function __fakeFieldGet_IgnoreKanaType: Int32;
   function __fakeFieldGet_BinarySort: Int32;
   function __fakeFieldGet_BinarySort2: Int32;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.DBNull" />
    ///  ，可以将其分配到此实例的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    {class} property Null: DNSqlString read __fakeFieldGet_Null;
    ///<summary>
    ///  指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  比较应忽略大小写。
    ///</summary>
    {class} property IgnoreCase: Int32 read __fakeFieldGet_IgnoreCase;
    ///<summary>
    ///  指定的字符串比较必须忽略字符宽度。
    ///</summary>
    {class} property IgnoreWidth: Int32 read __fakeFieldGet_IgnoreWidth;
    ///<summary>
    ///  指定的字符串比较必须忽略非空格组合字符，如标注字符。
    ///</summary>
    {class} property IgnoreNonSpace: Int32 read __fakeFieldGet_IgnoreNonSpace;
    ///<summary>
    ///  指定的字符串比较必须忽略假名类型。
    ///</summary>
    {class} property IgnoreKanaType: Int32 read __fakeFieldGet_IgnoreKanaType;
    ///<summary>
    ///  指定的排序应基于字符的数字值而不是其字母数字值。
    ///</summary>
    {class} property BinarySort: Int32 read __fakeFieldGet_BinarySort;
    ///<summary>
    ///  指定的排序应基于字符的数字值，而不是其字母数字值。
    ///</summary>
    {class} property BinarySort2: Int32 read __fakeFieldGet_BinarySort2;

  { static methods } 

    ///<summary>
    ///  串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  ，其中包含新串联的值表示两个内容 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  参数。
    ///</returns>
    {class} function Concat(x: DNSqlString; y: DNSqlString): DNSqlString;
    ///<summary>
    ///  串联两个指定 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  值以创建一个新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  的串联的值，它是 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  。
    ///</returns>
    {class} function Add(x: DNSqlString; y: DNSqlString): DNSqlString;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  操作数以确定它们是否相等。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个值是否相等。
    ///  否则为 <see langword="false" />
    ///  。
    ///  如果任一实例为 null，则 <see langword="SqlString" />
    ///  将为 null。
    ///</returns>
    {class} function Equals(x: DNSqlString; y: DNSqlString): DNSqlBoolean; overload;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  操作数以确定它们是否不相等。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果两个实例是否不相等或 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  的两个实例是否相等。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function NotEquals(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  操作数以确定第一个是否小于第二个。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以确定第一个是否大于第二个操作数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个<see cref="T:System.Data.SqlTypes.SqlString" />
    ///  确定第一个是否小于或等于第二个操作数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  A<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  如果第一个实例小于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果任一实例<see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null，<see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的<see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function LessThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  执行逻辑比较两个 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以确定第一个是否大于或等于第二个操作数。
    ///</summary>
    ///  <param name="x"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  即 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />
    ///  的第一个实例是否大于或等于第二个实例。
    ///  否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />
    ///  。
    ///  如果的任一实例 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  为 null， <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />
    ///  的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  将 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />
    ///  。
    ///</returns>
    {class} function GreaterThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    ///<summary>
    ///  获取 <see cref="T:System.Globalization.CompareOptions" />
    ///  枚举等效的指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" />
    ///  值。
    ///</summary>
    ///  <param name="compareOptions">
    ///  一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" />
    ///  值，该值描述的比较选项 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  一个 <see langword="CompareOptions" />
    ///  对应于值 <see langword="SqlCompareOptions" />
    ///  此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    {class} function CompareOptionsFromSqlCompareOptions(compareOptions: DNSqlCompareOptions): DDN.mscorlib.DNCompareOptions;
    ///<summary>
    ///  返回指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  值，该值指示指定的 XSD <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  ///<summary>
  ///  表示存储在中或从数据库中检索的字符的长度可变的流。
  ///<see cref="T:System.Data.SqlTypes.SqlString" />
  ///  具有不同的基础数据结构从其相应的.NET Framework <see cref="T:System.String" />
  ///  数据类型。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlString')]
  DNSqlString = interface(DDN.mscorlib.DNValueType)
  ['{304E7F9C-A851-379F-A730-C4555C05BF33}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;
    function get_LCID: Int32;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_CompareInfo: DDN.mscorlib.DNCompareInfo;
    function get_SqlCompareOptions: DNSqlCompareOptions;

  { methods } 

    ///<summary>
    ///  将转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象传递给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  与此相同的值与 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 Unicode 格式。
    ///</summary>
    ///<returns>
    ///  一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 Unicode 格式。
    ///</returns>
    function GetUnicodeBytes: TArray<Byte>;
    ///<summary>
    ///  获取字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 ANSI 格式。
    ///</summary>
    ///<returns>
    ///  一个字节数组，包含内容的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  以 ANSI 格式。
    ///</returns>
    function GetNonUnicodeBytes: TArray<Byte>;
    ///<summary>
    ///  会创建一份 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  中所有属性值是与原始对象相同的对象。
    ///</returns>
    function Clone: DNSqlString;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlBoolean" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  为非零; <see langword="false" />
    ///  如果零; 否则为 Null。
    ///</returns>
    function ToSqlBoolean: DNSqlBoolean;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlByte" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlByte" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />
    ///  等于所表示的数 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    function ToSqlByte: DNSqlByte;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDateTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see langword="SqlDateTime" />
    ///  结构，其中包含由此表示的日期值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlDateTime: DNSqlDateTime;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlDouble: DNSqlDouble;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt16" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlInt16: DNSqlInt16;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlInt32: DNSqlInt32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlInt64: DNSqlInt64;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlMoney: DNSqlMoney;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" />
    ///  ，其中包含此值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</returns>
    function ToSqlDecimal: DNSqlDecimal;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" />
    ///  ，它等于此数值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  ...
    ///</returns>
    function ToSqlSingle: DNSqlSingle;
    ///<summary>
    ///  将此转换 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" />
    ///  结构，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />
    ///  是 <see langword="Guid" />
    ///  由此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    function ToSqlGuid: DNSqlGuid;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象与所提供 <see cref="T:System.Object" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)
    ///</returns>
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  比较此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  实例与所提供 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  并返回对其相对值的指示。
    ///</summary>
    ///  <param name="value">
    ///  要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个有符号的数字，指示实例和对象的相对值。
    ///  返回值
    ///  条件
    ///  小于零
    ///  此实例是早于该对象。
    ///  零
    ///  此实例与对象相同。
    ///  大于零
    ///  此实例大于对象
    ///  - 或 -
    ///  该对象为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</returns>
    function CompareTo(value: DNSqlString): Int32; overload;
    ///<summary>
    ///  将提供的对象参数 <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  属性 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns>
    ///  相等比较将返回 <see langword="true" />
    ///  的实例的对象是否 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  安全以及需要两个相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  指示是否此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构为 null。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />
    ///  。
    ///  否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNull: Boolean read get_IsNull;
    ///<summary>
    ///  获取存储在此字符串 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///  此属性是只读的。
    ///</summary>
    ///<returns>
    ///  用于存储的字符串。
    ///</returns>
    ///<exception cref="T:System.Data.SqlTypes.SqlNullValueException">
    ///  该字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />
    ///  。
    ///</exception>
    property Value: string read get_Value;
    ///<summary>
    ///  指定的地理区域设置和语言 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  中存储的字符串的区域设置 id <see cref="P:System.Data.SqlTypes.SqlString.Value" />
    ///  属性。
    ///</returns>
    property LCID: Int32 read get_LCID;
    ///<summary>
    ///  获取 <see cref="T:System.Globalization.CultureInfo" />
    ///  结构，它表示此有关区域性的信息 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  介绍有关区域性的信息包括区域性、 书写系统，以及所使用的日历，名称此 SqlString 结构的结构，还提供用于常见的操作，如设置日期格式和排序字符串的方法的特定于区域性的对象的访问。
    ///</returns>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    ///<summary>
    ///  获取 <see cref="T:System.Globalization.CompareInfo" />
    ///  对象，它定义如何为此执行字符串比较 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="CompareInfo" />
    ///  定义此字符串比较的对象 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    property CompareInfo: DDN.mscorlib.DNCompareInfo read get_CompareInfo;
    ///<summary>
    ///  一个或多个组合 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" />
    ///  这些关键字表示此方法的枚举值 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  应与其他比较 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  值，该值指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  应与其他比较 <see cref="T:System.Data.SqlTypes.SqlString" />
    ///  结构。
    ///</returns>
    property SqlCompareOptions: DNSqlCompareOptions read get_SqlCompareOptions;
  end;

  TDNSqlString = class(TDNGenericImport<DNSqlStringClass, DNSqlString>) end;

  //-------------namespace: System.Data----------------
  DNDataSetSchemaImporterExtensionClass = interface(DNObjectClass)
  ['{9B98207D-45B6-5354-A53F-3FD2DADAF8CE}']
  { constructors } 

    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    {class} function init: DNDataSetSchemaImporterExtension;

  end;

  ///<summary>
  ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
  ///</summary>
  [DNTypeName('System.Data.DataSetSchemaImporterExtension')]
  DNDataSetSchemaImporterExtension = interface(DNObject)
  ['{09512958-649F-3854-81C0-DE4795F78BA5}']
  { methods } 

    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="schemaNamespace"><paramref name="schemaNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</returns>
    function ImportSchemaType(name: string; schemaNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataSetSchemaImporterExtension = class(TDNGenericImport<DNDataSetSchemaImporterExtensionClass, DNDataSetSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTypesSchemaImporterExtensionHelperClass = interface(DNObjectClass)
  ['{772F90DC-D0E9-5CEA-8A42-CB6A96EE37D8}']
  { constructors } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串形式的名称。
    ///</param>
    ///  <param name="targetNamespace">
    ///  目标命名空间。
    ///</param>
    ///  <param name="references">
    ///  引用的字符串数组。
    ///</param>
    ///  <param name="namespaceImports">
    ///  CodeNamespaceImport 对象的数组。
    ///</param>
    ///  <param name="destinationType">
    ///  字符串形式的目标类型。
    ///</param>
    ///  <param name="direct">
    ///  适用于直接一个布尔值。
    ///</param>
    {class} function init(name: string; targetNamespace: string; references: TArray<string>; namespaceImports: TArray<DDN.System.DNCodeNamespaceImport>; destinationType: string; direct: Boolean): DNSqlTypesSchemaImporterExtensionHelper; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串形式的名称。
    ///</param>
    ///  <param name="destinationType">
    ///  字符串形式的目标类型。
    ///</param>
    {class} function init(name: string; destinationType: string): DNSqlTypesSchemaImporterExtensionHelper; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串形式的名称。
    ///</param>
    ///  <param name="destinationType">
    ///  字符串形式的目标类型。
    ///</param>
    ///  <param name="direct">
    ///  一个布尔值。
    ///</param>
    {class} function init(name: string; destinationType: string; direct: Boolean): DNSqlTypesSchemaImporterExtensionHelper; overload;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper')]
  DNSqlTypesSchemaImporterExtensionHelper = interface(DNObject)
  ['{E248171A-002A-3035-B308-FFB78E02542C}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlTypesSchemaImporterExtensionHelper = class(TDNGenericImport<DNSqlTypesSchemaImporterExtensionHelperClass, DNSqlTypesSchemaImporterExtensionHelper>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeBigIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{26BEA8BD-158C-53A9-B7EE-D060BD30C4D2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeBigIntSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeBigIntSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeBigIntSchemaImporterExtension')]
  DNTypeBigIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{5A57403F-FBB5-345F-BF23-1C5EA5EC1213}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeBigIntSchemaImporterExtension = class(TDNGenericImport<DNTypeBigIntSchemaImporterExtensionClass, DNTypeBigIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeBinarySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{FE1ED156-DC9B-52EA-B144-84DEE1AF5F7A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeBinarySchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeBinarySchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeBinarySchemaImporterExtension')]
  DNTypeBinarySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{0E34EF0C-E4B6-3941-9344-F22EDE85CB7B}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeBinarySchemaImporterExtension = class(TDNGenericImport<DNTypeBinarySchemaImporterExtensionClass, DNTypeBinarySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeBitSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{15E6F105-2477-5349-BC3B-7BC2B0E47274}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeBitSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeBitSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeBitSchemaImporterExtension')]
  DNTypeBitSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{18E6AD5E-3E67-3FD2-99F7-EAD80E856B11}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeBitSchemaImporterExtension = class(TDNGenericImport<DNTypeBitSchemaImporterExtensionClass, DNTypeBitSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{BE943EA8-D0E6-5EC8-B5AC-D97E3C20B633}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeCharSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeCharSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeCharSchemaImporterExtension')]
  DNTypeCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{41798B65-28F3-3CB2-A8DF-36503C29D85F}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeCharSchemaImporterExtension = class(TDNGenericImport<DNTypeCharSchemaImporterExtensionClass, DNTypeCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeDateTimeSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{81236AE8-49B5-5B32-A1C0-133BA0BCD8E9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeDateTimeSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension')]
  DNTypeDateTimeSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{23535402-D07C-3B55-83EB-779096C82858}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDateTimeSchemaImporterExtension = class(TDNGenericImport<DNTypeDateTimeSchemaImporterExtensionClass, DNTypeDateTimeSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeDecimalSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{5E4AA0CC-0783-5264-9BA3-8D71E3A45B13}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeDecimalSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeDecimalSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeDecimalSchemaImporterExtension')]
  DNTypeDecimalSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{BE5D3EA5-6DE2-3CCD-8116-23D29C5386FA}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDecimalSchemaImporterExtension = class(TDNGenericImport<DNTypeDecimalSchemaImporterExtensionClass, DNTypeDecimalSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeFloatSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{D5151541-292C-5FD9-804F-583363C9B0AD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeFloatSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeFloatSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeFloatSchemaImporterExtension')]
  DNTypeFloatSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{C4D7C601-D1C2-3DC6-AE2C-29E4C782AE8D}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeFloatSchemaImporterExtension = class(TDNGenericImport<DNTypeFloatSchemaImporterExtensionClass, DNTypeFloatSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{84287612-FDBC-561F-8281-AD8B4B81BE9E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeIntSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeIntSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeIntSchemaImporterExtension')]
  DNTypeIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{95B2DA6A-6F7B-348D-8101-C3FDFB1BD15D}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeIntSchemaImporterExtension = class(TDNGenericImport<DNTypeIntSchemaImporterExtensionClass, DNTypeIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeMoneySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{2A5F94A5-928C-55C9-9683-481828356671}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeMoneySchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeMoneySchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeMoneySchemaImporterExtension')]
  DNTypeMoneySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{F7AA49CD-DEC5-37B9-B1C9-0EB7CE366204}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeMoneySchemaImporterExtension = class(TDNGenericImport<DNTypeMoneySchemaImporterExtensionClass, DNTypeMoneySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{C9A5B743-CF6D-5B32-86D7-AA88B7BE7282}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeNCharSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeNCharSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeNCharSchemaImporterExtension')]
  DNTypeNCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{F6134327-DE16-3E69-B9A3-891E39F7CA67}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNCharSchemaImporterExtension = class(TDNGenericImport<DNTypeNCharSchemaImporterExtensionClass, DNTypeNCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNTextSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{EB6B57AD-74AE-57CC-BFE3-6883AE29082E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeNTextSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeNTextSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeNTextSchemaImporterExtension')]
  DNTypeNTextSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{49F51A5F-F01A-3684-A8C9-1658E36F97A2}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNTextSchemaImporterExtension = class(TDNGenericImport<DNTypeNTextSchemaImporterExtensionClass, DNTypeNTextSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNumericSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{F7EB5407-6309-58EE-9705-D12DFC656577}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeNumericSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeNumericSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeNumericSchemaImporterExtension')]
  DNTypeNumericSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{31E614F6-BFA5-3265-A868-BBFC1105D235}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNumericSchemaImporterExtension = class(TDNGenericImport<DNTypeNumericSchemaImporterExtensionClass, DNTypeNumericSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNVarCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{FC1192F0-2512-5427-AC65-E3C0B2399207}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeNVarCharSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension')]
  DNTypeNVarCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{0910F4A0-B56F-3570-98FA-14450A435273}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNVarCharSchemaImporterExtension = class(TDNGenericImport<DNTypeNVarCharSchemaImporterExtensionClass, DNTypeNVarCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeRealSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{D573A8CF-3BDA-5E04-97CE-9C038240AB59}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeRealSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeRealSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeRealSchemaImporterExtension')]
  DNTypeRealSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{9F3DECBE-49D6-3F91-BE6F-AA123454C482}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeRealSchemaImporterExtension = class(TDNGenericImport<DNTypeRealSchemaImporterExtensionClass, DNTypeRealSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeSmallDateTimeSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{7B3CA223-7412-54C1-8717-4E653716A485}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 TypeSmallDateTimeSchemaImporterExtension 类。
    ///</summary>
    {class} function init: DNTypeSmallDateTimeSchemaImporterExtension;

  end;

  ///<summary>
  ///  TypeSmallDateTimeSchemaImporterExtension 类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension')]
  DNTypeSmallDateTimeSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{A004AEFC-5A6F-3B84-BC99-80DD80AC76D1}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeSmallDateTimeSchemaImporterExtension = class(TDNGenericImport<DNTypeSmallDateTimeSchemaImporterExtensionClass, DNTypeSmallDateTimeSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeSmallIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{708DDCC5-2477-5548-9E5B-7EBCF44F51D4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeSmallIntSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension')]
  DNTypeSmallIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{7252A0B8-4B5E-3DA0-B7F2-A58347820406}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeSmallIntSchemaImporterExtension = class(TDNGenericImport<DNTypeSmallIntSchemaImporterExtensionClass, DNTypeSmallIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeSmallMoneySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{915E709E-8CAF-5D5C-AA44-A1927030A130}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeSmallMoneySchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension')]
  DNTypeSmallMoneySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{F1BBE8BB-B092-31A4-A430-7AAB3A5F2216}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeSmallMoneySchemaImporterExtension = class(TDNGenericImport<DNTypeSmallMoneySchemaImporterExtensionClass, DNTypeSmallMoneySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeTextSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{06ABEA7C-275F-5351-9D48-165FFCC7AD07}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeTextSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeTextSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeTextSchemaImporterExtension')]
  DNTypeTextSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{D54564DE-2B62-3498-A0AB-92261965FC56}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeTextSchemaImporterExtension = class(TDNGenericImport<DNTypeTextSchemaImporterExtensionClass, DNTypeTextSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeTinyIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{5CDC7732-C71F-5AC4-8AF9-7FDF5DFCA47A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeTinyIntSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension')]
  DNTypeTinyIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{1AB7C3CF-702F-319A-8FE6-52AFD18E2D82}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeTinyIntSchemaImporterExtension = class(TDNGenericImport<DNTypeTinyIntSchemaImporterExtensionClass, DNTypeTinyIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeUniqueIdentifierSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{D0B2E25E-2F1D-55A8-A017-D220C48800CA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeUniqueIdentifierSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension')]
  DNTypeUniqueIdentifierSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{7B665635-1499-355C-88CD-F15BCADA9B05}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeUniqueIdentifierSchemaImporterExtension = class(TDNGenericImport<DNTypeUniqueIdentifierSchemaImporterExtensionClass, DNTypeUniqueIdentifierSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeVarBinarySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{78787E14-D5C9-517C-AA73-C1CEE1F6003D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeVarBinarySchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension')]
  DNTypeVarBinarySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{273D2569-6B44-3406-A108-6B549002E767}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeVarBinarySchemaImporterExtension = class(TDNGenericImport<DNTypeVarBinarySchemaImporterExtensionClass, DNTypeVarBinarySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeVarCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{F259F2D7-EB66-53CE-B122-5ED21BD0380F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeVarCharSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeVarCharSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeVarCharSchemaImporterExtension')]
  DNTypeVarCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{A58311F8-456D-3371-BDA7-8DAE7C278BF7}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeVarCharSchemaImporterExtension = class(TDNGenericImport<DNTypeVarCharSchemaImporterExtensionClass, DNTypeVarCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeVarImageSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{AAC1F414-2EAE-5F05-B0AC-4902363C375E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTypeVarImageSchemaImporterExtension;

  end;

  ///<summary><see cref="T:System.Data.SqlTypes.TypeVarImageSchemaImporterExtension" />
  ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
  ///</summary>
  [DNTypeName('System.Data.SqlTypes.TypeVarImageSchemaImporterExtension')]
  DNTypeVarImageSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{E9BBF708-3896-3482-9184-04DDCC7F6550}']
  { methods } 

    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="name"><paramref name="name" />
    ///</param>
    ///  <param name="xmlNamespace"><paramref name="xmlNamespace" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</summary>
    ///  <param name="type"><paramref name="type" />
    ///</param>
    ///  <param name="context"><paramref name="context" />
    ///</param>
    ///  <param name="schemas"><paramref name="schemas" />
    ///</param>
    ///  <param name="importer"><paramref name="importer" />
    ///</param>
    ///  <param name="compileUnit"><paramref name="compileUnit" />
    ///</param>
    ///  <param name="mainNamespace"><paramref name="mainNamespace" />
    ///</param>
    ///  <param name="options"><paramref name="options" />
    ///</param>
    ///  <param name="codeProvider"><paramref name="codeProvider" />
    ///</param>
    ///<returns><see cref="T:System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper" />
    ///  类不适用于作为独立的组件，而应用作其他类从中派生标准功能的类。
    ///</returns>
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeVarImageSchemaImporterExtension = class(TDNGenericImport<DNTypeVarImageSchemaImporterExtensionClass, DNTypeVarImageSchemaImporterExtension>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDataDocumentClass = interface(DNObjectClass)
  ['{F2F4E07B-104C-5753-BAC3-7255B3949AAC}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DDN.System.Xml.DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlDataDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlDataDocument; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlDataDocument" />
    ///  初始化 <see cref="T:System.Data.DataSet" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataset"><see langword="DataSet" />
    ///  加载到 <see langword="XmlDataDocument" />
    ///  。
    ///</param>
    {class} function init(dataset: DNDataSet): DNXmlDataDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DDN.System.Xml.DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  ///<summary>
  ///  可以将结构化的数据存储、 检索和操作通过相关 <see cref="T:System.Data.DataSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.XmlDataDocument')]
  DNXmlDataDocument = interface(DNObject)
  ['{03C271EC-6EF3-3EB2-8C52-28C9AF77C24B}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    function get_NodeType: DDN.System.Xml.DNXmlNodeType;
    function get_ParentNode: DDN.System.Xml.DNXmlNode;
    function get_DocumentType: DDN.System.Xml.DNXmlDocumentType;
    function get_Implementation: DDN.System.Xml.DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DDN.System.Xml.DNXmlElement;
    function get_OwnerDocument: DDN.System.Xml.DNXmlDocument;
    function get_Schemas: DDN.System.Xml.DNXmlSchemaSet;
    procedure set_Schemas(value: DDN.System.Xml.DNXmlSchemaSet);
    procedure set_XmlResolver(value: DDN.System.Xml.DNXmlResolver);
    function get_NameTable: DDN.System.Xml.DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DDN.System.Xml.DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DDN.System.Xml.DNXmlNodeList;
    function get_PreviousSibling: DDN.System.Xml.DNXmlNode;
    function get_NextSibling: DDN.System.Xml.DNXmlNode;
    function get_Attributes: DDN.System.Xml.DNXmlAttributeCollection;
    function get_FirstChild: DDN.System.Xml.DNXmlNode;
    function get_LastChild: DDN.System.Xml.DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DDN.System.Xml.DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DDN.System.Xml.DNXmlElement; overload;
    function get_PreviousText: DDN.System.Xml.DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);

  { methods } 

    ///<summary>
    ///  创建具有指定的元素 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  , ，<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  , ，和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="prefix">
    ///  新元素的前缀。
    ///  如果 String.Empty 或 <see langword="null" />
    ///  , ，没有前缀。
    ///</param>
    ///  <param name="localName">
    ///  新元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间统一资源标识符 (URI) 将新元素。
    ///  如果 String.Empty 或 <see langword="null" />
    ///  , ，没有任何 namespaceURI。
    ///</param>
    ///<returns>
    ///  一个新的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DDN.System.Xml.DNXmlElement; overload;
    ///<summary>
    ///  创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlEntityReference" />
    ///  具有指定名称。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  调用此方法。
    ///</exception>
    function CreateEntityReference(name: string): DDN.System.Xml.DNXmlEntityReference;
    ///<summary>
    ///  检索 <see cref="T:System.Data.DataRow" />
    ///  关联的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///  <param name="e"><see langword="XmlElement" />
    ///  其关联 <see langword="DataRow" />
    ///  您想要检索。
    ///</param>
    ///<returns><see langword="DataRow" />
    ///  包含表示形式 <see langword="XmlElement" />
    ///  ; <see langword="null" />
    ///  是否存在任何 <see langword="DataRow" />
    ///  与关联 <see langword="XmlElement" />
    ///  。
    ///</returns>
    function GetRowFromElement(e: DDN.System.Xml.DNXmlElement): DNDataRow;
    ///<summary>
    ///  检索 <see cref="T:System.Xml.XmlElement" />
    ///  关联的 <see cref="T:System.Data.DataRow" />
    ///  。
    ///</summary>
    ///  <param name="r"><see langword="DataRow" />
    ///  其关联 <see langword="XmlElement" />
    ///  您想要检索。
    ///</param>
    ///<returns><see langword="XmlElement" />
    ///  包含表示形式指定 <see langword="DataRow" />
    ///  。
    ///</returns>
    function GetElementFromRow(r: DNDataRow): DDN.System.Xml.DNXmlElement;
    ///<summary>
    ///  创建当前节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DDN.System.Xml.DNXmlNode;
    ///<summary>
    ///  加载 <see langword="XmlDataDocument" />
    ///  使用指定的 URL。
    ///</summary>
    ///  <param name="filename">
    ///  要加载包含 XML 文档的文件的 URL。
    ///</param>
    procedure Load(filename: string); overload;
    ///<summary>
    ///  加载 <see langword="XmlDataDocument" />
    ///  从指定的流。
    ///</summary>
    ///  <param name="inStream">
    ///  包含要加载的 XML 文档的流。
    ///</param>
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  加载 <see langword="XmlDataDocument" />
    ///  从指定 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="txtReader">
    ///  用于将 XML 数据输送到文档中的 <see langword="TextReader" />
    ///  。
    ///</param>
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  加载 <see langword="XmlDataDocument" />
    ///  从指定 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  包含要加载的 XML 文档。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  所加载的 XML 包含实体引用，并将读取器不能解析实体。
    ///</exception>
    procedure Load(reader: DDN.System.Xml.DNXmlReader); overload;
    ///<summary>
    ///  获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///  此方法不受 <see cref="T:System.Xml.XmlDataDocument" />
    ///  类。
    ///  调用此方法将引发异常。
    ///</summary>
    ///  <param name="elemId">
    ///  要匹配的属性 ID。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlElement" />
    ///  替换为指定的 id。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  调用此方法。
    ///</exception>
    function GetElementById(elemId: string): DDN.System.Xml.DNXmlElement;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="name">
    ///  要匹配的限定名称。
    ///  它针对匹配节点的 <see cref="P:System.Xml.XmlDocument.Name" />
    ///  属性进行匹配。
    ///  特殊值“*”匹配所有标记。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///</returns>
    function GetElementsByTagName(name: string): DDN.System.Xml.DNXmlNodeList; overload;
    function CreateAttribute(name: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DDN.System.Xml.DNXmlCDataSection;
    function CreateComment(data: string): DDN.System.Xml.DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DDN.System.Xml.DNXmlDocumentType;
    function CreateDocumentFragment: DDN.System.Xml.DNXmlDocumentFragment;
    function CreateElement(name: string): DDN.System.Xml.DNXmlElement; overload;
    function CreateProcessingInstruction(target: string; data: string): DDN.System.Xml.DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DDN.System.Xml.DNXmlDeclaration;
    function CreateTextNode(text: string): DDN.System.Xml.DNXmlText;
    function CreateSignificantWhitespace(text: string): DDN.System.Xml.DNXmlSignificantWhitespace;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function CreateWhitespace(text: string): DDN.System.Xml.DNXmlWhitespace;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DDN.System.Xml.DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DDN.System.Xml.DNXmlNodeList; overload;
    function ImportNode(node: DDN.System.Xml.DNXmlNode; deep: Boolean): DDN.System.Xml.DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    function CreateNode(&type: DDN.System.Xml.DNXmlNodeType; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    function ReadNode(reader: DDN.System.Xml.DNXmlReader): DDN.System.Xml.DNXmlNode;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteTo(w: DDN.System.Xml.DNXmlWriter);
    procedure WriteContentTo(xw: DDN.System.Xml.DNXmlWriter);
    procedure Validate(validationEventHandler: DDN.System.Xml.DNValidationEventHandler); overload;
    function CreateNode(&type: DDN.System.Xml.DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    procedure Save(w: DDN.System.Xml.DNXmlWriter); overload;
    procedure Validate(validationEventHandler: DDN.System.Xml.DNValidationEventHandler; nodeToValidate: DDN.System.Xml.DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DDN.System.Xml.DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DDN.System.Xml.DNXmlNamespaceManager): DDN.System.Xml.DNXmlNode; overload;
    function SelectNodes(xpath: string): DDN.System.Xml.DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DDN.System.Xml.DNXmlNamespaceManager): DDN.System.Xml.DNXmlNodeList; overload;
    function InsertBefore(newChild: DDN.System.Xml.DNXmlNode; refChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function InsertAfter(newChild: DDN.System.Xml.DNXmlNode; refChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function ReplaceChild(newChild: DDN.System.Xml.DNXmlNode; oldChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function RemoveChild(oldChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function PrependChild(newChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function AppendChild(newChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    procedure Normalize;
    function Clone: DDN.System.Xml.DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Data.DataSet" />
    ///  ，它提供的关系表示形式中的数据 <see langword="XmlDataDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="DataSet" />
    ///  可用来访问中的数据 <see langword="XmlDataDocument" />
    ///  使用关系模型。
    ///</returns>
    property DataSet: DNDataSet read get_DataSet;
    property NodeType: DDN.System.Xml.DNXmlNodeType read get_NodeType;
    property ParentNode: DDN.System.Xml.DNXmlNode read get_ParentNode;
    property DocumentType: DDN.System.Xml.DNXmlDocumentType read get_DocumentType;
    property &Implementation: DDN.System.Xml.DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DDN.System.Xml.DNXmlElement read get_DocumentElement;
    property OwnerDocument: DDN.System.Xml.DNXmlDocument read get_OwnerDocument;
    property Schemas: DDN.System.Xml.DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DDN.System.Xml.DNXmlResolver write set_XmlResolver;
    property NameTable: DDN.System.Xml.DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DDN.System.Xml.DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DDN.System.Xml.DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DDN.System.Xml.DNXmlNode read get_PreviousSibling;
    property NextSibling: DDN.System.Xml.DNXmlNode read get_NextSibling;
    property Attributes: DDN.System.Xml.DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DDN.System.Xml.DNXmlNode read get_FirstChild;
    property LastChild: DDN.System.Xml.DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DDN.System.Xml.DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DDN.System.Xml.DNXmlElement read get_Item; default;
    property PreviousText: DDN.System.Xml.DNXmlNode read get_PreviousText;
  end;

  TDNXmlDataDocument = class(TDNGenericImport<DNXmlDataDocumentClass, DNXmlDataDocument>) end;


implementation


initialization
  LoadAssemblyModule('System.Data.dll', True);

finalization

end.
