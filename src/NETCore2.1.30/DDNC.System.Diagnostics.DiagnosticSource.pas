//----------------------------------------------------------------------------
//  System.Diagnostics.DiagnosticSource.dll: System.Diagnostics.DiagnosticSource, Version=4.0.3.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Diagnostics.DiagnosticSource
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMDIAGNOSTICSDIAGNOSTICSOURCE}
unit DDNC.System.Diagnostics.DiagnosticSource;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type


{ declares }

  DNActivity = interface; // type: System.Diagnostics.Activity, namespace: System.Diagnostics
  DNDiagnosticSource = interface; // type: System.Diagnostics.DiagnosticSource, namespace: System.Diagnostics
  DNDiagnosticListener = interface; // type: System.Diagnostics.DiagnosticListener, namespace: System.Diagnostics


{ objects }

  //-------------namespace: System.Diagnostics----------------
  DNActivityClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{ED45CC2F-CEEA-590B-92DB-1CFDB722EA08}']
  { static getter & setter } 

    {class} function get_Current: DNActivity;

  { constructors } 

    {class} function init(operationName: string): DNActivity;

  { static propertys } 

    {class} property Current: DNActivity read get_Current;
  end;

  [DNTypeName('System.Diagnostics.Activity')]
  DNActivity = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{48EC6D83-721A-302B-AE2B-C0A8C216E7EE}']
  { getters & setters } 

    function get_OperationName: string;
    function get_Id: string;
    function get_StartTimeUtc: DDNC.System.Private.CoreLib.DNDateTime;
    function get_Parent: DNActivity;
    function get_ParentId: string;
    function get_RootId: string;
    function get_Tags: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<string, string>>;
    function get_Baggage: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<string, string>>;
    function get_Duration: DDNC.System.Private.CoreLib.DNTimeSpan;

  { methods } 

    function GetBaggageItem(key: string): string;
    function AddTag(key: string; value: string): DNActivity;
    function AddBaggage(key: string; value: string): DNActivity;
    function SetParentId(parentId: string): DNActivity;
    function SetStartTime(startTimeUtc: DDNC.System.Private.CoreLib.DNDateTime): DNActivity;
    function SetEndTime(endTimeUtc: DDNC.System.Private.CoreLib.DNDateTime): DNActivity;
    function Start: DNActivity;
    procedure Stop;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property OperationName: string read get_OperationName;
    property Id: string read get_Id;
    property StartTimeUtc: DDNC.System.Private.CoreLib.DNDateTime read get_StartTimeUtc;
    property Parent: DNActivity read get_Parent;
    property ParentId: string read get_ParentId;
    property RootId: string read get_RootId;
    property Tags: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<string, string>> read get_Tags;
    property Baggage: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<string, string>> read get_Baggage;
    property Duration: DDNC.System.Private.CoreLib.DNTimeSpan read get_Duration;
  end;

  TDNActivity = class(TDNGenericImport<DNActivityClass, DNActivity>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDiagnosticSourceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{FE226D25-F166-5CFF-8D2D-6D1D307F3775}']
  end;

  [DNTypeName('System.Diagnostics.DiagnosticSource')]
  DNDiagnosticSource = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B4743064-5333-35B0-B41E-E5D04F8D6E67}']
  { methods } 

    procedure Write(name: string; value: DDNC.System.Private.CoreLib.DNObject);
    function IsEnabled(name: string): Boolean; overload;
    function IsEnabled(name: string; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function StartActivity(activity: DNActivity; args: DDNC.System.Private.CoreLib.DNObject): DNActivity;
    procedure StopActivity(activity: DNActivity; args: DDNC.System.Private.CoreLib.DNObject);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDiagnosticSource = class(TDNGenericImport<DNDiagnosticSourceClass, DNDiagnosticSource>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDiagnosticListenerClass = interface(DNDiagnosticSourceClass)
  ['{F0F58E19-25D6-52F4-8BD1-981C5289F620}']
  { static getter & setter } 

    {class} function get_AllListeners: DDNC.System.Private.CoreLib.DNIObservable<DNDiagnosticListener>;

  { constructors } 

    {class} function init(name: string): DNDiagnosticListener;

  { static propertys } 

    {class} property AllListeners: DDNC.System.Private.CoreLib.DNIObservable<DNDiagnosticListener> read get_AllListeners;
  end;

  [DNTypeName('System.Diagnostics.DiagnosticListener')]
  DNDiagnosticListener = interface(DNDiagnosticSource)
  ['{DD24BDE4-4A91-3FF4-9D91-227DFAB4E7DF}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function Subscribe(observer: DDNC.System.Private.CoreLib.DNIObserver<DDNC.System.Private.CoreLib.DNKeyValuePair<string, DDNC.System.Private.CoreLib.DNObject>>; isEnabled: DDNC.System.Private.CoreLib.DNPredicate<string>): DDNC.System.Private.CoreLib.DNIDisposable; overload;
    function Subscribe(observer: DDNC.System.Private.CoreLib.DNIObserver<DDNC.System.Private.CoreLib.DNKeyValuePair<string, DDNC.System.Private.CoreLib.DNObject>>; isEnabled: DDNC.System.Private.CoreLib.DNFunc<string, DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject, Boolean>): DDNC.System.Private.CoreLib.DNIDisposable; overload;
    function Subscribe(observer: DDNC.System.Private.CoreLib.DNIObserver<DDNC.System.Private.CoreLib.DNKeyValuePair<string, DDNC.System.Private.CoreLib.DNObject>>): DDNC.System.Private.CoreLib.DNIDisposable; overload;
    procedure Dispose;
    function ToString: string;
    function IsEnabled: Boolean; overload;
    function IsEnabled(name: string): Boolean; overload;
    function IsEnabled(name: string; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    procedure Write(name: string; value: DDNC.System.Private.CoreLib.DNObject);
    function StartActivity(activity: DNActivity; args: DDNC.System.Private.CoreLib.DNObject): DNActivity;
    procedure StopActivity(activity: DNActivity; args: DDNC.System.Private.CoreLib.DNObject);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNDiagnosticListener = class(TDNGenericImport<DNDiagnosticListenerClass, DNDiagnosticListener>) end;


implementation


initialization
  LoadAssemblyModule('System.Diagnostics.DiagnosticSource.dll', True, 'System.Diagnostics.DiagnosticSource, Version=4.0.3.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51');

finalization

end.
