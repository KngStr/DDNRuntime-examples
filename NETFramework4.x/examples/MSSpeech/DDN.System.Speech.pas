//----------------------------------------------------------------------------
//  System.Speech.dll: System.Speech, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Speech
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Speech;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml;

type

{ enums }

  //-------------namespace: System.Speech.AudioFormat----------------
  ///<summary>
  ///  枚举描述音频格式每个样本位数特性的值。
  ///</summary>
  [DNTypeName('System.Speech.AudioFormat.AudioBitsPerSample')]
  DNAudioBitsPerSample = type Integer;
  DNAudioBitsPerSampleHelper = record helper for DNAudioBitsPerSample
  public const
    ///<summary>
    ///  音频格式为每个样本 8 位。
    ///</summary>
    Eight = 8;
    ///<summary>
    ///  音频格式为每个样本 16 位。
    ///</summary>
    Sixteen = 16;
  end;


  //-------------namespace: System.Speech.AudioFormat----------------
  ///<summary>
  ///  枚举指示音频格式的通道数的值。
  ///</summary>
  [DNTypeName('System.Speech.AudioFormat.AudioChannel')]
  DNAudioChannel = type Integer;
  DNAudioChannelHelper = record helper for DNAudioChannel
  public const
    ///<summary>
    ///  音频格式有一个通道。
    ///</summary>
    Mono = 1;
    ///<summary>
    ///  音频格式有两个通道。
    ///</summary>
    Stereo = 2;
  end;


  //-------------namespace: System.Speech.AudioFormat----------------
  ///<summary>
  ///  枚举描述音频编码格式的值。
  ///</summary>
  [DNTypeName('System.Speech.AudioFormat.EncodingFormat')]
  DNEncodingFormat = type Integer;
  DNEncodingFormatHelper = record helper for DNEncodingFormat
  public const
    ///<summary>
    ///  音频的编码格式为脉冲编码调制 (PCM)。
    ///</summary>
    Pcm = 1;
    ///<summary>
    ///  音频的编码格式是 ALaw。
    ///</summary>
    ALaw = 6;
    ///<summary>
    ///  音频的编码格式是 ULaw。
    ///</summary>
    ULaw = 7;
  end;


  //-------------namespace: System.Speech.Recognition----------------
  ///<summary>
  ///  包含转向了语音识别引擎的音频信号可能存在的问题的列表。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.AudioSignalProblem')]
  DNAudioSignalProblem = type Integer;
  DNAudioSignalProblemHelper = record helper for DNAudioSignalProblem
  public const
    ///<summary>
    ///  音频输入没有问题。
    ///</summary>
    None = 0;
    ///<summary>
    ///  音频输入具有背景噪音过多。
    ///</summary>
    TooNoisy = 1;
    ///<summary>
    ///  未检测到音频输入。
    ///</summary>
    NoSignal = 2;
    ///<summary>
    ///  音频输入太大。
    ///</summary>
    TooLoud = 3;
    ///<summary>
    ///  音频输入太小。
    ///</summary>
    TooSoft = 4;
    ///<summary>
    ///  音频输入速度太快。
    ///</summary>
    TooFast = 5;
    ///<summary>
    ///  音频输入速度太慢。
    ///</summary>
    TooSlow = 6;
  end;


  //-------------namespace: System.Speech.Recognition----------------
  ///<summary>
  ///  包含有关语音识别引擎的音频输入的可能状态的列表。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.AudioState')]
  DNAudioState = type Integer;
  DNAudioStateHelper = record helper for DNAudioState
  public const
    ///<summary>
    ///  不处理音频输入。
    ///</summary>
    Stopped = 0;
    ///<summary>
    ///  接收静默或非语音背景噪音。
    ///</summary>
    Silence = 1;
    ///<summary>
    ///  接收语音输入。
    ///</summary>
    Speech = 2;
  end;


  //-------------namespace: System.Speech.Recognition----------------
  ///<summary>
  ///  列出的选项， <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  对象可用于指定单词或标点符号的显示的空白区域。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.DisplayAttributes')]
  DNDisplayAttributes = type Integer;
  DNDisplayAttributesHelper = record helper for DNDisplayAttributes
  public const
    ///<summary>
    ///  该项目没有指定如何处理空白。
    ///</summary>
    None = 0;
    ///<summary>
    ///  项具有没有空格。
    ///</summary>
    ZeroTrailingSpaces = 2;
    ///<summary>
    ///  项都有一个空格跟在它后面。
    ///</summary>
    OneTrailingSpace = 4;
    ///<summary>
    ///  项具有跟在它后面的两个空格。
    ///</summary>
    TwoTrailingSpaces = 8;
    ///<summary>
    ///  项具有前不能包含空格。
    ///</summary>
    ConsumeLeadingSpaces = 16;
  end;


  //-------------namespace: System.Speech.Recognition----------------
  ///<summary>
  ///  枚举值的识别模式。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizeMode')]
  DNRecognizeMode = type Integer;
  DNRecognizeModeHelper = record helper for DNRecognizeMode
  public const
    ///<summary>
    ///  指定在完成后终止识别。
    ///</summary>
    Single = 0;
    ///<summary>
    ///  指定识别不会在完成后终止。
    ///</summary>
    Multiple = 1;
  end;


  //-------------namespace: System.Speech.Recognition----------------
  ///<summary>
  ///  枚举识别器状态的值。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizerState')]
  DNRecognizerState = type Integer;
  DNRecognizerStateHelper = record helper for DNRecognizerState
  public const
    ///<summary>
    ///  识别引擎不接收或分析音频输入。
    ///</summary>
    Stopped = 0;
    ///<summary>
    ///  识别引擎可接收和分析音频输入。
    ///</summary>
    Listening = 1;
  end;


  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  ///<summary>
  ///  指示该语法定义的输入类型 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  ///  , ，将匹配。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode')]
  DNSrgsGrammarMode = type Integer;
  DNSrgsGrammarModeHelper = record helper for DNSrgsGrammarMode
  public const
    ///<summary><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象将与匹配的语言输入。
    ///</summary>
    Voice = 0;
    ///<summary><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象将匹配类似于上一部电话，而不是语音找到 DTMF 铃音。
    ///</summary>
    Dtmf = 1;
  end;


  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  ///<summary>
  ///  枚举支持的音标字母。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet')]
  DNSrgsPhoneticAlphabet = type Integer;
  DNSrgsPhoneticAlphabetHelper = record helper for DNSrgsPhoneticAlphabet
  public const
    ///<summary>
    ///  语音 API 音素组。
    ///</summary>
    Sapi = 0;
    ///<summary>
    ///  国际音标音素组。
    ///</summary>
    Ipa = 1;
    ///<summary>
    ///  通用电话设置音素集，这是 ASCII 编码 IPA 的音素。
    ///</summary>
    Ups = 2;
  end;


  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  ///<summary>
  ///  枚举值的范围 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsRuleScope')]
  DNSrgsRuleScope = type Integer;
  DNSrgsRuleScopeHelper = record helper for DNSrgsRuleScope
  public const
    ///<summary>
    ///  该规则可以是从外部语法，可以使用规则执行识别该规则引用的目标。
    ///  公共规则始终可以识别的激活。
    ///</summary>
    Public_ = 0;
    ///<summary>
    ///  该规则不能是语法的从外部语法规则引用的目标，除非它是语法的其包含的根规则。
    ///</summary>
    Private_ = 1;
  end;


  //-------------namespace: System.Speech.Recognition----------------
  ///<summary>
  ///  枚举值的匹配模式的子集。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SubsetMatchingMode')]
  DNSubsetMatchingMode = type Integer;
  DNSubsetMatchingModeHelper = record helper for DNSubsetMatchingMode
  public const
    ///<summary>
    ///  指示该子集匹配模式是 子序列。
    ///</summary>
    Subsequence = 0;
    ///<summary>
    ///  指示该子集匹配模式是 OrderedSubset。
    ///</summary>
    OrderedSubset = 1;
    ///<summary>
    ///  指示该子集匹配模式是 SubsequenceContentRequired。
    ///</summary>
    SubsequenceContentRequired = 2;
    ///<summary>
    ///  指示该子集匹配模式是 OrderedSubsetContentRequired。
    ///</summary>
    OrderedSubsetContentRequired = 3;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举字边界之间韵律分离（中断）间隔的值。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptBreak')]
  DNPromptBreak = type Integer;
  DNPromptBreakHelper = record helper for DNPromptBreak
  public const
    ///<summary>
    ///  指示不中断。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指示超小型中断。
    ///</summary>
    ExtraSmall = 1;
    ///<summary>
    ///  指示小型中断。
    ///</summary>
    Small = 2;
    ///<summary>
    ///  指示中型中断。
    ///</summary>
    Medium = 3;
    ///<summary>
    ///  指示大型中断。
    ///</summary>
    Large = 4;
    ///<summary>
    ///  指示超大型中断。
    ///</summary>
    ExtraLarge = 5;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举值的强调在提示中的级别。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptEmphasis')]
  DNPromptEmphasis = type Integer;
  DNPromptEmphasisHelper = record helper for DNPromptEmphasis
  public const
    ///<summary>
    ///  指示指定没有强调值。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  指示强调级别较强。
    ///</summary>
    Strong = 1;
    ///<summary>
    ///  指示强调了中等。
    ///</summary>
    Moderate = 2;
    ///<summary>
    ///  指示没有强调。
    ///</summary>
    None = 3;
    ///<summary>
    ///  指示强调的下降。
    ///</summary>
    Reduced = 4;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举提示的语速的值。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptRate')]
  DNPromptRate = type Integer;
  DNPromptRateHelper = record helper for DNPromptRate
  public const
    ///<summary>
    ///  指示指定没有速率。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  指示超快的速率。
    ///</summary>
    ExtraFast = 1;
    ///<summary>
    ///  指示较快的速率。
    ///</summary>
    Fast = 2;
    ///<summary>
    ///  指示中等速率。
    ///</summary>
    Medium = 3;
    ///<summary>
    ///  指示较慢的速率。
    ///</summary>
    Slow = 4;
    ///<summary>
    ///  指示超速度慢的速率。
    ///</summary>
    ExtraSlow = 5;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  在提示中枚举值 （响度） 的音量级别。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptVolume')]
  DNPromptVolume = type Integer;
  DNPromptVolumeHelper = record helper for DNPromptVolume
  public const
    ///<summary>
    ///  指示未设置音量级别。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  指示静音的音量级别。
    ///</summary>
    Silent = 1;
    ///<summary>
    ///  指示额外软音量级别。
    ///</summary>
    ExtraSoft = 2;
    ///<summary>
    ///  指示软音量级别。
    ///</summary>
    Soft = 3;
    ///<summary>
    ///  指示介质音量级别。
    ///</summary>
    Medium = 4;
    ///<summary>
    ///  指示大音量级别。
    ///</summary>
    Loud = 5;
    ///<summary>
    ///  指示额外嘈杂的音量级别。
    ///</summary>
    ExtraLoud = 6;
    ///<summary>
    ///  指示引擎特定的默认音量级别。
    ///</summary>
    Default_ = 7;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  说到元素如时间、 日期和货币的枚举的内容类型。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SayAs')]
  DNSynthesis_SayAs = type Integer;
  DNSynthesis_SayAsHelper = record helper for DNSynthesis_SayAs
  public const
    ///<summary>
    ///  拼写的单词或短语。
    ///  例如，假设"时钟"作为"C L O C K"。
    ///</summary>
    SpellOut = 0;
    ///<summary>
    ///  作为第几个号码讲一个数字。
    ///  例如，说"第三"作为"第三个"。
    ///</summary>
    NumberOrdinal = 1;
    ///<summary>
    ///  关键数字的形式进行通信很多。
    ///  例如，说"3"作为"三个"。
    ///</summary>
    NumberCardinal = 2;
    ///<summary>
    ///  说出一个编号序列作为日期。
    ///  例如，如"可能第十九个 2 千位 4 个"说话"2004-05-19"或"19.5.2004"。
    ///</summary>
    Date = 3;
    ///<summary>
    ///  说出一个编号序列作为包括日、 月和年的日期。
    ///  例如，如"可能第十二个 2 千位 4 个"说话"12/05/2004"。
    ///</summary>
    DayMonthYear = 4;
    ///<summary>
    ///  说出一个编号序列作为包括日、 月和年的日期。
    ///  例如，"年 12 月第五个 2 千位 4 个"说话"12/05/2004"。
    ///</summary>
    MonthDayYear = 5;
    ///<summary>
    ///  说出一个编号序列作为包括日、 月和年的日期。
    ///  例如，如"可能第十二个 2 千位 4 个"说话"2004年/05/12"。
    ///</summary>
    YearMonthDay = 6;
    ///<summary>
    ///  说出一个编号序列作为年份和月份。
    ///  例如，如"可能两个千位四个"说话"2004年/05"。
    ///</summary>
    YearMonth = 7;
    ///<summary>
    ///  说出一个编号序列作为月份和年份。
    ///  例如，如"可能两个千位四个"说话"05/2004"。
    ///</summary>
    MonthYear = 8;
    ///<summary>
    ///  说出一个编号序列作为月份和日期。
    ///  例如，说"05/12"作为"月第 12 个"，并告知"12/5"作为"年 12 月 5 日"。
    ///</summary>
    MonthDay = 9;
    ///<summary>
    ///  说出一个编号序列的日期和月份作为。
    ///  例如，说"12/05"为"5 月第 12 个"，并告知"05/12"作为"年 12 月 5 日"。
    ///</summary>
    DayMonth = 10;
    ///<summary>
    ///  一个数字作为年份进行通信。
    ///  例如，"nineteen ninety-eight"说话"1998"。
    ///</summary>
    Year = 11;
    ///<summary>
    ///  为每个月讲一个单词。
    ///  例如，"June"说话"June"。
    ///</summary>
    Month = 12;
    ///<summary>
    ///  作为在日期中的天讲一个数字。
    ///  例如，说"第三"作为"第三个"。
    ///</summary>
    Day = 13;
    ///<summary>
    ///  说出一个编号序列作为一次。
    ///  例如，说话"9:45"作为"九 forty-five"，并告知"上午 9:45"作为"九 forty-five M"。
    ///</summary>
    Time = 14;
    ///<summary>
    ///  说出一个编号序列作为使用 24 小时制时钟的时间。
    ///  例如，说"18:00"作为"十八一百个小时"。
    ///</summary>
    Time24 = 15;
    ///<summary>
    ///  说出一个编号序列作为使用 12 小时制时钟的时间。
    ///  例如，说"03:25"作为"三 25"。
    ///</summary>
    Time12 = 16;
    ///<summary>
    ///  说出一个编号序列作为美国电话号码。
    ///  例如，说"(306) 555-1212"作为"区号三个零六个五个五个五个一个两个一个两个"。
    ///</summary>
    Telephone = 17;
    ///<summary>
    ///  以文本形式进行通信的单词或短语。
    ///  例如，"时间线"说话"时间线"。
    ///</summary>
    Text = 18;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举类型的媒体文件。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SynthesisMediaType')]
  DNSynthesisMediaType = type Integer;
  DNSynthesisMediaTypeHelper = record helper for DNSynthesisMediaType
  public const
    ///<summary>
    ///  该值指示的媒体类型是文本。
    ///</summary>
    Text = 0;
    ///<summary>
    ///  指示媒体类型为 SSML。
    ///</summary>
    Ssml = 1;
    ///<summary>
    ///  指示媒体类型为 WaveAudio。
    ///</summary>
    WaveAudio = 2;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举类型的文本格式，可用于构造 <see cref="T:System.Speech.Synthesis.Prompt" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SynthesisTextFormat')]
  DNSynthesisTextFormat = type Integer;
  DNSynthesisTextFormatHelper = record helper for DNSynthesisTextFormat
  public const
    ///<summary>
    ///  该值指示文本格式是文本。
    ///</summary>
    Text = 0;
    ///<summary>
    ///  指示文本格式 SSML。
    ///</summary>
    Ssml = 1;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举的合成器强调的级别。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SynthesizerEmphasis')]
  DNSynthesizerEmphasis = type Integer;
  DNSynthesizerEmphasisHelper = record helper for DNSynthesizerEmphasis
  public const
    ///<summary>
    ///  指示合成器强调程度高。
    ///</summary>
    Stressed = 1;
    ///<summary>
    ///  指示合成器强调较低级别。
    ///</summary>
    Emphasized = 2;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  枚举值的状态 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SynthesizerState')]
  DNSynthesizerState = type Integer;
  DNSynthesizerStateHelper = record helper for DNSynthesizerState
  public const
    ///<summary>
    ///  指示 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  已准备好在提示符下生成语音。
    ///</summary>
    Ready = 0;
    ///<summary>
    ///  指示 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  说到。
    ///</summary>
    Speaking = 1;
    ///<summary>
    ///  指示 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  已暂停。
    ///</summary>
    Paused = 2;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值的类型 <see langword="ContourPoint" />
  ///  更改。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ContourPointChangeType')]
  DNContourPointChangeType = type Integer;
  DNContourPointChangeTypeHelper = record helper for DNContourPointChangeType
  public const
    ///<summary>
    ///  指示 pitch 值的更改。
    ///</summary>
    Hz = 0;
    ///<summary>
    ///  指示时间值的更改。
    ///</summary>
    Percentage = 1;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值的长度 <see langword="EmphasisBreak" />
  ///  之间说出来的字词。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.EmphasisBreak')]
  DNEmphasisBreak = type Integer;
  DNEmphasisBreakHelper = record helper for DNEmphasisBreak
  public const
    ///<summary>
    ///  普通字符间距。
    ///</summary>
    Default_ = -7;
    ///<summary>
    ///  最长 word 分页符。
    ///</summary>
    ExtraStrong = -6;
    ///<summary>
    ///  长的单词中断。
    ///</summary>
    Strong = -5;
    ///<summary>
    ///  中等 word 分页符。
    ///</summary>
    Medium = -4;
    ///<summary>
    ///  小写字符间距。
    ///</summary>
    Weak = -3;
    ///<summary>
    ///  非常小的 word 分页符。
    ///</summary>
    ExtraWeak = -2;
    ///<summary>
    ///  Word 不换行。
    ///</summary>
    None = -1;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举的值 <see langword="EmphasisWord" />
  ///  特定 <see langword="TextFragment" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.EmphasisWord')]
  DNEmphasisWord = type Integer;
  DNEmphasisWordHelper = record helper for DNEmphasisWord
  public const
    ///<summary>
    ///  指示强调引擎特定的默认级别。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指示不遗余力地加强。
    ///</summary>
    Strong = 1;
    ///<summary>
    ///  表示中等强调。
    ///</summary>
    Moderate = 2;
    ///<summary>
    ///  指示指定没有强调。
    ///</summary>
    None = 3;
    ///<summary>
    ///  指示降低的强调。
    ///</summary>
    Reduced = 4;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举数据指针传递给语音合成事件的类型。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.EventParameterType')]
  DNEventParameterType = type Integer;
  DNEventParameterTypeHelper = record helper for DNEventParameterType
  public const
    ///<summary>
    ///  指示 <paramref name="param2" />
    ///  参数 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  是不确定的。
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  指示 <paramref name="param2" />
    ///  参数 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  是
    ///</summary>
    Token = 1;
    ///<summary>
    ///  当前不支持。
    ///</summary>
    Object_ = 2;
    ///<summary>
    ///  当前不支持。
    ///</summary>
    Pointer = 3;
    ///<summary>
    ///  指示 <paramref name="param2" />
    ///  参数 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  是 <see langword="System.IntPtr" />
    ///  使用创建 <see langword="System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni" />
    ///  引用 <see langword="System.String" />
    ///  对象; <paramref name="param1" />
    ///  可能需要对任何值。
    ///</summary>
    String_ = 4;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值 <see langword="Pitch" />
  ///  属性 <see langword="Prosody" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ProsodyPitch')]
  DNProsodyPitch = type Integer;
  DNProsodyPitchHelper = record helper for DNProsodyPitch
  public const
    ///<summary>
    ///  表示正常音调范围。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  表示超低俯仰范围。
    ///</summary>
    ExtraLow = 1;
    ///<summary>
    ///  表示低俯仰范围。
    ///</summary>
    Low = 2;
    ///<summary>
    ///  表示中等俯仰范围。
    ///</summary>
    Medium = 3;
    ///<summary>
    ///  表示高音调范围。
    ///</summary>
    High = 4;
    ///<summary>
    ///  表示额外高音调范围。
    ///</summary>
    ExtraHigh = 5;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值 <see langword="Range" />
  ///  属性 <see langword="Prosody" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ProsodyRange')]
  DNProsodyRange = type Integer;
  DNProsodyRangeHelper = record helper for DNProsodyRange
  public const
    ///<summary>
    ///  表示正常 prosody 范围。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  表示额外低 prosody 范围。
    ///</summary>
    ExtraLow = 1;
    ///<summary>
    ///  表示低 prosody 范围。
    ///</summary>
    Low = 2;
    ///<summary>
    ///  表示中等 prosody 范围。
    ///</summary>
    Medium = 3;
    ///<summary>
    ///  指示高 prosody 之间的范围。
    ///</summary>
    High = 4;
    ///<summary>
    ///  表示极高 prosody 范围。
    ///</summary>
    ExtraHigh = 5;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值 <see langword="Rate" />
  ///  属性 <see langword="Prosody" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ProsodyRate')]
  DNProsodyRate = type Integer;
  DNProsodyRateHelper = record helper for DNProsodyRate
  public const
    ///<summary>
    ///  指示引擎特定的默认速率。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指示超速度慢的速率。
    ///</summary>
    ExtraSlow = 1;
    ///<summary>
    ///  指示较慢的速率。
    ///</summary>
    Slow = 2;
    ///<summary>
    ///  指示中等速率。
    ///</summary>
    Medium = 3;
    ///<summary>
    ///  指示较快的速率。
    ///</summary>
    Fast = 4;
    ///<summary>
    ///  指示超快的速率。
    ///</summary>
    ExtraFast = 5;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值 <see langword="Unit" />
  ///  属性 <see langword="Prosody" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ProsodyUnit')]
  DNProsodyUnit = type Integer;
  DNProsodyUnitHelper = record helper for DNProsodyUnit
  public const
    ///<summary>
    ///  指示引擎特定的默认值。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指示的单元值是 Hz。
    ///</summary>
    Hz = 1;
    ///<summary>
    ///  指示半音的单位值。
    ///</summary>
    Semitone = 2;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举值 <see langword="Volume" />
  ///  属性 <see langword="Prosody" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ProsodyVolume')]
  DNProsodyVolume = type Integer;
  DNProsodyVolumeHelper = record helper for DNProsodyVolume
  public const
    ///<summary>
    ///  最大的卷。
    ///</summary>
    ExtraLoud = -7;
    ///<summary>
    ///  约为 80%的最大的卷。
    ///</summary>
    Loud = -6;
    ///<summary>
    ///  大约 60%的最大的卷。
    ///</summary>
    Medium = -5;
    ///<summary>
    ///  大约 40%的最大的卷。
    ///</summary>
    Soft = -4;
    ///<summary>
    ///  约为 20%的最大的卷。
    ///</summary>
    ExtraSoft = -3;
    ///<summary>
    ///  关闭音量
    ///</summary>
    Silent = -2;
    ///<summary>
    ///  当前默认音量值，返回的值相同 <see cref="P:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.Volume" />
    ///  属性 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
    ///  提供给该引擎的站点。
    ///</summary>
    Default_ = -1;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举语音输出格式的类型。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.SpeakOutputFormat')]
  DNSpeakOutputFormat = type Integer;
  DNSpeakOutputFormatHelper = record helper for DNSpeakOutputFormat
  public const
    ///<summary>
    ///  指示批 （音频） 输出。
    ///</summary>
    WaveFormat = 0;
    ///<summary>
    ///  指示文本输出。
    ///</summary>
    Text = 1;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  指定在呈现时采取的语音合成标记语言 (SSML) 操作给定 <see langword="TextFragment" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.TtsEngineAction')]
  DNTtsEngineAction = type Integer;
  DNTtsEngineActionHelper = record helper for DNTtsEngineAction
  public const
    ///<summary>
    ///  将请求关联 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  应处理并说出。
    ///</summary>
    Speak = 0;
    ///<summary>
    ///  指示 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  包含要呈现为语音的文本。
    ///</summary>
    Silence = 1;
    ///<summary>
    ///  输入的请求 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  文本将被解释为音素。
    ///</summary>
    Pronounce = 2;
    ///<summary>
    ///  指示 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  用作书签的内容。
    ///</summary>
    Bookmark = 3;
    ///<summary>
    ///  指示文本值提供通过 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  通过其 <see cref="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
    ///  属性是作为单个字符合成。
    ///</summary>
    SpellOut = 4;
    ///<summary>
    ///  指示句子开始。
    ///</summary>
    StartSentence = 5;
    ///<summary>
    ///  指示段落的状态。
    ///</summary>
    StartParagraph = 6;
    ///<summary>
    ///  表示已从 SSML 输入已确定执行任何操作。
    ///</summary>
    ParseUnknownTag = 7;
  end;


  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  枚举类型的语音合成事件。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.TtsEventId')]
  DNTtsEventId = type Integer;
  DNTtsEventIdHelper = record helper for DNTtsEventId
  public const
    ///<summary>
    ///  标识生成事件时的语音合成引擎开始说流。
    ///</summary>
    StartInputStream = 1;
    ///<summary>
    ///  标识生成事件时的语音合成引擎中讲话时遇到其输入流的末尾。
    ///</summary>
    EndInputStream = 2;
    ///<summary>
    ///  标识生成事件时的语音合成引擎中遇到讲话时语音的更改。
    ///</summary>
    VoiceChange = 3;
    ///<summary>
    ///  标识生成事件时的语音合成引擎中讲话时遇到一个书签。
    ///</summary>
    Bookmark = 4;
    ///<summary>
    ///  标识所生成的事件引擎时语音合成讲话时完成一个单词。
    ///</summary>
    WordBoundary = 5;
    ///<summary>
    ///  标识生成事件时语音合成引擎会说话的同时完成音素。
    ///</summary>
    Phoneme = 6;
    ///<summary>
    ///  标识生成事件时语音合成引擎会说话的同时完成一个句子。
    ///</summary>
    SentenceBoundary = 7;
    ///<summary>
    ///  标识生成事件语音合成引擎完成 viseme 讲话时。
    ///</summary>
    Viseme = 8;
    ///<summary>
    ///  标识生成事件时的语音合成引擎完成谈话的同时音频级别更改。
    ///</summary>
    AudioLevel = 9;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  合成语音的年龄为定义的值。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.VoiceAge')]
  DNVoiceAge = type Integer;
  DNVoiceAgeHelper = record helper for DNVoiceAge
  public const
    ///<summary>
    ///  指示指定了任何语音的年龄。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  指示子语音 （年龄 10）。
    ///</summary>
    Child = 10;
    ///<summary>
    ///  指示青春期语音 （年龄 15）。
    ///</summary>
    Teen = 15;
    ///<summary>
    ///  指示成人语音 （年龄 30）。
    ///</summary>
    Adult = 30;
    ///<summary>
    ///  指示高级语音 （年龄 65）。
    ///</summary>
    Senior = 65;
  end;


  //-------------namespace: System.Speech.Synthesis----------------
  ///<summary>
  ///  定义合成语音的性别的值。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.VoiceGender')]
  DNVoiceGender = type Integer;
  DNVoiceGenderHelper = record helper for DNVoiceGender
  public const
    ///<summary>
    ///  指示没有语音的性别规范。
    ///</summary>
    NotSet = 0;
    ///<summary>
    ///  指示男性声音。
    ///</summary>
    Male = 1;
    ///<summary>
    ///  指示女性声音。
    ///</summary>
    Female = 2;
    ///<summary>
    ///  指示 gender-neutral 语音。
    ///</summary>
    Neutral = 3;
  end;




type


{ declares }

  DNITtsEngineSite = interface; // type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite, namespace: System.Speech.Synthesis.TtsEngine
  DNSrgsRulesCollection = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection, namespace: System.Speech.Recognition.SrgsGrammar
  DNEmulateRecognizeCompletedEventArgs = interface; // type: System.Speech.Recognition.EmulateRecognizeCompletedEventArgs, namespace: System.Speech.Recognition
  DNLoadGrammarCompletedEventArgs = interface; // type: System.Speech.Recognition.LoadGrammarCompletedEventArgs, namespace: System.Speech.Recognition
  DNRecognizeCompletedEventArgs = interface; // type: System.Speech.Recognition.RecognizeCompletedEventArgs, namespace: System.Speech.Recognition
  DNPromptEventArgs = interface; // type: System.Speech.Synthesis.PromptEventArgs, namespace: System.Speech.Synthesis
  DNBookmarkReachedEventArgs = interface; // type: System.Speech.Synthesis.BookmarkReachedEventArgs, namespace: System.Speech.Synthesis
  DNPhonemeReachedEventArgs = interface; // type: System.Speech.Synthesis.PhonemeReachedEventArgs, namespace: System.Speech.Synthesis
  DNSpeakCompletedEventArgs = interface; // type: System.Speech.Synthesis.SpeakCompletedEventArgs, namespace: System.Speech.Synthesis
  DNSpeakProgressEventArgs = interface; // type: System.Speech.Synthesis.SpeakProgressEventArgs, namespace: System.Speech.Synthesis
  DNSpeakStartedEventArgs = interface; // type: System.Speech.Synthesis.SpeakStartedEventArgs, namespace: System.Speech.Synthesis
  DNVisemeReachedEventArgs = interface; // type: System.Speech.Synthesis.VisemeReachedEventArgs, namespace: System.Speech.Synthesis
  DNVoiceChangeEventArgs = interface; // type: System.Speech.Synthesis.VoiceChangeEventArgs, namespace: System.Speech.Synthesis
  DNAudioLevelUpdatedEventArgs = interface; // type: System.Speech.Recognition.AudioLevelUpdatedEventArgs, namespace: System.Speech.Recognition
  DNAudioSignalProblemOccurredEventArgs = interface; // type: System.Speech.Recognition.AudioSignalProblemOccurredEventArgs, namespace: System.Speech.Recognition
  DNAudioStateChangedEventArgs = interface; // type: System.Speech.Recognition.AudioStateChangedEventArgs, namespace: System.Speech.Recognition
  DNRecognitionEventArgs = interface; // type: System.Speech.Recognition.RecognitionEventArgs, namespace: System.Speech.Recognition
  DNSpeechHypothesizedEventArgs = interface; // type: System.Speech.Recognition.SpeechHypothesizedEventArgs, namespace: System.Speech.Recognition
  DNSpeechRecognitionRejectedEventArgs = interface; // type: System.Speech.Recognition.SpeechRecognitionRejectedEventArgs, namespace: System.Speech.Recognition
  DNSpeechRecognizedEventArgs = interface; // type: System.Speech.Recognition.SpeechRecognizedEventArgs, namespace: System.Speech.Recognition
  DNRecognizerUpdateReachedEventArgs = interface; // type: System.Speech.Recognition.RecognizerUpdateReachedEventArgs, namespace: System.Speech.Recognition
  DNSpeechDetectedEventArgs = interface; // type: System.Speech.Recognition.SpeechDetectedEventArgs, namespace: System.Speech.Recognition
  DNRecognition_StateChangedEventArgs = interface; // type: System.Speech.Recognition.StateChangedEventArgs, namespace: System.Speech.Recognition
  DNSynthesis_StateChangedEventArgs = interface; // type: System.Speech.Synthesis.StateChangedEventArgs, namespace: System.Speech.Synthesis
  DNSrgsElement = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsElement, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsItem = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsItem, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsNameValueTag = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsOneOf = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsOneOf, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsRuleRef = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsRuleRef, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsSemanticInterpretationTag = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsSubset = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsSubset, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsText = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsText, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsToken = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsToken, namespace: System.Speech.Recognition.SrgsGrammar
  DNSpeechAudioFormatInfo = interface; // type: System.Speech.AudioFormat.SpeechAudioFormatInfo, namespace: System.Speech.AudioFormat
  DNChoices = interface; // type: System.Speech.Recognition.Choices, namespace: System.Speech.Recognition
  DNGrammar = interface; // type: System.Speech.Recognition.Grammar, namespace: System.Speech.Recognition
  DNDictationGrammar = interface; // type: System.Speech.Recognition.DictationGrammar, namespace: System.Speech.Recognition
  DNGrammarBuilder = interface; // type: System.Speech.Recognition.GrammarBuilder, namespace: System.Speech.Recognition
  DNRecognizedAudio = interface; // type: System.Speech.Recognition.RecognizedAudio, namespace: System.Speech.Recognition
  DNRecognizedPhrase = interface; // type: System.Speech.Recognition.RecognizedPhrase, namespace: System.Speech.Recognition
  DNRecognitionResult = interface; // type: System.Speech.Recognition.RecognitionResult, namespace: System.Speech.Recognition
  DNRecognizedWordUnit = interface; // type: System.Speech.Recognition.RecognizedWordUnit, namespace: System.Speech.Recognition
  DNRecognizerInfo = interface; // type: System.Speech.Recognition.RecognizerInfo, namespace: System.Speech.Recognition
  DNReplacementText = interface; // type: System.Speech.Recognition.ReplacementText, namespace: System.Speech.Recognition
  DNSemanticResultKey = interface; // type: System.Speech.Recognition.SemanticResultKey, namespace: System.Speech.Recognition
  DNSemanticResultValue = interface; // type: System.Speech.Recognition.SemanticResultValue, namespace: System.Speech.Recognition
  DNSemanticValue = interface; // type: System.Speech.Recognition.SemanticValue, namespace: System.Speech.Recognition
  DNSpeechRecognitionEngine = interface; // type: System.Speech.Recognition.SpeechRecognitionEngine, namespace: System.Speech.Recognition
  DNSpeechRecognizer = interface; // type: System.Speech.Recognition.SpeechRecognizer, namespace: System.Speech.Recognition
  DNSpeechUI = interface; // type: System.Speech.Recognition.SpeechUI, namespace: System.Speech.Recognition
  DNSrgsDocument = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsDocument, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsGrammarCompiler = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler, namespace: System.Speech.Recognition.SrgsGrammar
  DNSrgsRule = interface; // type: System.Speech.Recognition.SrgsGrammar.SrgsRule, namespace: System.Speech.Recognition.SrgsGrammar
  DNInstalledVoice = interface; // type: System.Speech.Synthesis.InstalledVoice, namespace: System.Speech.Synthesis
  DNPrompt = interface; // type: System.Speech.Synthesis.Prompt, namespace: System.Speech.Synthesis
  DNFilePrompt = interface; // type: System.Speech.Synthesis.FilePrompt, namespace: System.Speech.Synthesis
  DNPromptBuilder = interface; // type: System.Speech.Synthesis.PromptBuilder, namespace: System.Speech.Synthesis
  DNPromptStyle = interface; // type: System.Speech.Synthesis.PromptStyle, namespace: System.Speech.Synthesis
  DNSpeechSynthesizer = interface; // type: System.Speech.Synthesis.SpeechSynthesizer, namespace: System.Speech.Synthesis
  DNProsody = interface; // type: System.Speech.Synthesis.TtsEngine.Prosody, namespace: System.Speech.Synthesis.TtsEngine
  DNTtsEngine_SayAs = interface; // type: System.Speech.Synthesis.TtsEngine.SayAs, namespace: System.Speech.Synthesis.TtsEngine
  DNSkipInfo = interface; // type: System.Speech.Synthesis.TtsEngine.SkipInfo, namespace: System.Speech.Synthesis.TtsEngine
  DNTextFragment = interface; // type: System.Speech.Synthesis.TtsEngine.TextFragment, namespace: System.Speech.Synthesis.TtsEngine
  DNTtsEngineSsml = interface; // type: System.Speech.Synthesis.TtsEngine.TtsEngineSsml, namespace: System.Speech.Synthesis.TtsEngine
  DNVoiceInfo = interface; // type: System.Speech.Synthesis.VoiceInfo, namespace: System.Speech.Synthesis
  DNContourPoint = interface; // type: System.Speech.Synthesis.TtsEngine.ContourPoint, namespace: System.Speech.Synthesis.TtsEngine
  DNFragmentState = interface; // type: System.Speech.Synthesis.TtsEngine.FragmentState, namespace: System.Speech.Synthesis.TtsEngine
  DNProsodyNumber = interface; // type: System.Speech.Synthesis.TtsEngine.ProsodyNumber, namespace: System.Speech.Synthesis.TtsEngine
  DNSpeechEventInfo = interface; // type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo, namespace: System.Speech.Synthesis.TtsEngine


{ objects }

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  ///<summary>
  ///  提供用于写入音频数据和事件的方法。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ITtsEngineSite')]
  DNITtsEngineSite = interface(DDN.mscorlib.DNObject)
  ['{9FDED17D-152B-353C-9041-2E64EFD93C09}']
  { getters & setters } 

    function get_EventInterest: Int32;
    function get_Actions: Int32;
    function get_Rate: Int32;
    function get_Volume: Int32;

  { methods } 

    ///<summary>
    ///  将添加一个或多个事件，以便将 <see langword="EventInterest" />
    ///  属性。
    ///</summary>
    ///  <param name="events">
    ///  一个 <see langword="SpeechEventInfo" />
    ///  对象数组。
    ///</param>
    ///  <param name="count">
    ///  数组大小。
    ///</param>
    procedure AddEvents(events: TArray<DNSpeechEventInfo>; count: Int32);
    ///<summary>
    ///  输出音频数据。
    ///</summary>
    ///  <param name="data">
    ///  输出音频数据的位置。
    ///</param>
    ///  <param name="count">
    ///  输出音频流中的项的数目。
    ///</param>
    function Write(data: IntPtr; count: Int32): Int32;
    ///<summary>
    ///  返回要跳过的数量和类型的项目。
    ///</summary>
    function GetSkipInfo: DNSkipInfo;
    ///<summary>
    ///  返回跳过的项数。
    ///</summary>
    ///  <param name="skipped">
    ///  跳过的项目数。
    ///</param>
    procedure CompleteSkip(skipped: Int32);
    ///<summary>
    ///  加载指定的 URI 处的资源。
    ///</summary>
    ///  <param name="uri">
    ///  资源的 URI。
    ///</param>
    ///  <param name="mediaType">
    ///  资源的媒体类型。
    ///</param>
    function LoadResource(uri: DDN.System.DNUri; mediaType: string): DDN.mscorlib.DNStream;

  { propertys } 

    ///<summary>
    ///  确定引擎应引发的事件。
    ///</summary>
    ///<returns><see langword="int" />
    ///  包含的一个或多个成员的总和 <see langword="TtsEventId" />
    ///  枚举。
    ///</returns>
    property EventInterest: Int32 read get_EventInterest;
    ///<summary>
    ///  确定引擎应该执行的操作。
    ///</summary>
    ///<returns><see langword="int" />
    ///  包含的一个或多个成员的总和 <see langword="TtsEngineAction" />
    ///  枚举。
    ///</returns>
    property Actions: Int32 read get_Actions;
    ///<summary>
    ///  获取引擎的语速。
    ///</summary>
    ///<returns><see langword="int" />
    ///  包含谈到速率。
    ///</returns>
    property Rate: Int32 read get_Rate;
    ///<summary>
    ///  获取引擎的朗读音量。
    ///</summary>
    ///<returns><see langword="int" />
    ///  包含的朗读音量。
    ///</returns>
    property Volume: Int32 read get_Volume;
  end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsRulesCollectionClass = interface(DDN.mscorlib.DNKeyedCollectionClass<string, DNSrgsRule>)
  ['{238D32DF-792E-5B8D-A43E-1E930FE56FDD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSrgsRulesCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
  ///  对象集合。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection')]
  DNSrgsRulesCollection = interface(DDN.mscorlib.DNKeyedCollection<string, DNSrgsRule>)
  ['{748BCA0D-42FF-3129-862D-CD38EA7929CF}']
  { getters & setters } 

    function get_Comparer: DDN.mscorlib.DNIEqualityComparer<string>;
    function get_Item(key: string): DNSrgsRule;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将数组的内容添加 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  对象添加到 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
    ///  对象。
    ///</summary>
    ///  <param name="rules">
    ///  要添加到的规则对象的数组 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rules" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  任何 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  对象在 <paramref name="rules" />
    ///  数组是 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(rules: TArray<DNSrgsRule>);
    function &Contains(key: string): Boolean; overload;
    function Remove(key: string): Boolean;
    procedure CopyTo(&array: TArray<DNSrgsRule>; index: Int32);
    function &Contains(item: DNSrgsRule): Boolean; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSrgsRule>;
    function IndexOf(item: DNSrgsRule): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNSrgsRule);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Comparer: DDN.mscorlib.DNIEqualityComparer<string> read get_Comparer;
    property Item[key: string]: DNSrgsRule read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNSrgsRulesCollection = class(TDNGenericImport<DNSrgsRulesCollectionClass, DNSrgsRulesCollection>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNEmulateRecognizeCompletedEventArgsClass = interface(DNObjectClass)
  ['{66C94992-6970-5E8A-9364-C3F913A5D1FE}']
  end;

  ///<summary>
  ///  将提供数据供 <see langword="EmulateRecognizeCompleted" />
  ///  事件 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  和 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.EmulateRecognizeCompletedEventArgs')]
  DNEmulateRecognizeCompletedEventArgs = interface(DNObject)
  ['{199C78C2-6017-31CC-B0F4-3092DB407787}']
  { getters & setters } 

    function get_Result: DNRecognitionResult;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取模拟识别的结果。
    ///</summary>
    ///<returns>
    ///  有关识别的结果的详细信息或 <see langword="null" />
    ///  是否发生了错误。
    ///</returns>
    property Result: DNRecognitionResult read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNEmulateRecognizeCompletedEventArgs = class(TDNGenericImport<DNEmulateRecognizeCompletedEventArgsClass, DNEmulateRecognizeCompletedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNLoadGrammarCompletedEventArgsClass = interface(DNObjectClass)
  ['{41A2B6EF-D313-5DAF-95D3-DE56ABF16980}']
  end;

  ///<summary>
  ///  将提供数据供 <see langword="LoadGrammarCompleted" />
  ///  事件 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.LoadGrammarCompletedEventArgs')]
  DNLoadGrammarCompletedEventArgs = interface(DNObject)
  ['{AFC9FCDE-E7B1-3EC8-A3DE-72D50615E67B}']
  { getters & setters } 

    function get_Grammar: DNGrammar;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><see cref="T:System.Speech.Recognition.Grammar" />
    ///  已完成加载的对象。
    ///</summary>
    ///<returns><see cref="T:System.Speech.Recognition.Grammar" />
    ///  识别器已加载的。
    ///</returns>
    property Grammar: DNGrammar read get_Grammar;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNLoadGrammarCompletedEventArgs = class(TDNGenericImport<DNLoadGrammarCompletedEventArgsClass, DNLoadGrammarCompletedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognizeCompletedEventArgsClass = interface(DNObjectClass)
  ['{A8472A6A-BB9C-59FF-B54C-71777759A18F}']
  end;

  ///<summary>
  ///  将提供数据供 <see langword="RecognizeCompleted" />
  ///  事件由引发 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizeCompletedEventArgs')]
  DNRecognizeCompletedEventArgs = interface(DNObject)
  ['{E5B96E61-90E6-31B6-9BCE-81E1AFF52E09}']
  { getters & setters } 

    function get_Result: DNRecognitionResult;
    function get_InitialSilenceTimeout: Boolean;
    function get_BabbleTimeout: Boolean;
    function get_InputStreamEnded: Boolean;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取识别结果。
    ///</summary>
    ///<returns>
    ///  如果识别操作成功，则识别结果否则为 <see langword="null" />
    ///  。
    ///</returns>
    property Result: DNRecognitionResult read get_Result;
    ///<summary>
    ///  获取一个值，该值指示是否生成初始静音超时 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
    ///  事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  已检测到是更长的时间超过指定值的仅静默其 <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
    ///  属性; 否则为 <see langword="false." />
    ///</returns>
    property InitialSilenceTimeout: Boolean read get_InitialSilenceTimeout;
    ///<summary>
    ///  获取一个值，该值指示是否生成干扰超时 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
    ///  事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  已检测到超过指定值更长时间的唯一背景噪音其 <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
    ///  属性; 否则为 <see langword="false." />
    ///</returns>
    property BabbleTimeout: Boolean read get_BabbleTimeout;
    ///<summary>
    ///  获取一个值，该值指示是否对输入的流已结束。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果识别器不会再有音频输入;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property InputStreamEnded: Boolean read get_InputStreamEnded;
    ///<summary>
    ///  获取与关联的输入的设备的音频流中的位置 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  与相关联的输入的设备的音频流中的位置 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
    ///  事件。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNRecognizeCompletedEventArgs = class(TDNGenericImport<DNRecognizeCompletedEventArgsClass, DNRecognizeCompletedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNPromptEventArgsClass = interface(DNObjectClass)
  ['{6BD0C842-578A-5EB5-90D7-165FEF1B1C10}']
  end;

  ///<summary>
  ///  表示类的基类 <see langword="EventArgs" />
  ///  中的类 <see cref="N:System.Speech.Synthesis" />
  ///  命名空间。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptEventArgs')]
  DNPromptEventArgs = interface(DNObject)
  ['{DB0E0CD4-47BA-31BE-919A-7ADBA5A9F8E9}']
  { getters & setters } 

    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNPromptEventArgs = class(TDNGenericImport<DNPromptEventArgsClass, DNPromptEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNBookmarkReachedEventArgsClass = interface(DNPromptEventArgsClass)
  ['{AC923FE4-15CB-53EB-9CEA-598E594B3F15}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.BookmarkReachedEventArgs')]
  DNBookmarkReachedEventArgs = interface(DNPromptEventArgs)
  ['{92407FAB-AF8B-3DAC-8AD8-99E7AA556EDB}']
  { getters & setters } 

    function get_Bookmark: string;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取已达到该书签的名称。
    ///</summary>
    ///<returns>
    ///  返回一个值为书签的名称。
    ///</returns>
    property Bookmark: string read get_Bookmark;
    ///<summary>
    ///  获取偏移量已达到该书签的时间。
    ///</summary>
    ///<returns>
    ///  引发事件时，请在合成引擎的音频输入流中返回的位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNBookmarkReachedEventArgs = class(TDNGenericImport<DNBookmarkReachedEventArgsClass, DNBookmarkReachedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNPhonemeReachedEventArgsClass = interface(DNPromptEventArgsClass)
  ['{31C6CCF8-BB64-5CEA-835C-2A4EA9B60433}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PhonemeReachedEventArgs')]
  DNPhonemeReachedEventArgs = interface(DNPromptEventArgs)
  ['{AF2667B5-E2FE-30FB-828B-12B97ED0BFA5}']
  { getters & setters } 

    function get_Phoneme: string;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_Duration: DDN.mscorlib.DNTimeSpan;
    function get_Emphasis: DNSynthesizerEmphasis;
    function get_NextPhoneme: string;
    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><see cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
    ///  事件所关联的音素。
    ///</summary>
    ///<returns>
    ///  包含音素的字符串。
    ///</returns>
    property Phoneme: string read get_Phoneme;
    ///<summary>
    ///  获取音素的音频位置。
    ///</summary>
    ///<returns>
    ///  指示音频位置的 <see langword="TimeSpan" />
    ///  对象。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取音素的持续时间。
    ///</summary>
    ///<returns>
    ///  指示持续时间的 <see langword="TimeSpan" />
    ///  对象。
    ///</returns>
    property Duration: DDN.mscorlib.DNTimeSpan read get_Duration;
    ///<summary>
    ///  获取音素的强调。
    ///</summary>
    ///<returns>
    ///  指示强调级别的 <see langword="SynthesizerEmphasis" />
    ///  成员。
    ///</returns>
    property Emphasis: DNSynthesizerEmphasis read get_Emphasis;
    ///<summary>
    ///  获取 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
    ///  事件所关联音素随后的音素。
    ///</summary>
    ///<returns>
    ///  包含下一个音素的字符串。
    ///</returns>
    property NextPhoneme: string read get_NextPhoneme;
    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNPhonemeReachedEventArgs = class(TDNGenericImport<DNPhonemeReachedEventArgsClass, DNPhonemeReachedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNSpeakCompletedEventArgsClass = interface(DNPromptEventArgsClass)
  ['{449473BA-E581-5242-BEC3-C831E2151336}']
  end;

  ///<summary>
  ///  返回来自通知 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SpeakCompletedEventArgs')]
  DNSpeakCompletedEventArgs = interface(DNPromptEventArgs)
  ['{F7AC5265-2371-3F5D-B775-89899C2B04BF}']
  { getters & setters } 

    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNSpeakCompletedEventArgs = class(TDNGenericImport<DNSpeakCompletedEventArgsClass, DNSpeakCompletedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNSpeakProgressEventArgsClass = interface(DNPromptEventArgsClass)
  ['{99FD39A9-9E57-56A0-A308-FA9FD2C711F9}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SpeakProgressEventArgs')]
  DNSpeakProgressEventArgs = interface(DNPromptEventArgs)
  ['{FF4C759D-F2D4-317B-AADC-ABA4495B015F}']
  { getters & setters } 

    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_CharacterPosition: Int32;
    function get_CharacterCount: Int32;
    function get_Text: string;
    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件的音频位置。
    ///</summary>
    ///<returns>
    ///  返回在音频输出流中事件的位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  到之前的第一个字母的单词的只是说出的位置，请在提示符下从头中获取字符和空格的数。
    ///</summary>
    ///<returns>
    ///  到之前的第一个字母的单词的只是说出的位置的提示从头返回字符和空格的数。
    ///</returns>
    property CharacterPosition: Int32 read get_CharacterPosition;
    ///<summary>
    ///  获取引发该事件之前在讲话 word 中的字符数。
    ///</summary>
    ///<returns>
    ///  在 word 中在讲话之前引发该事件时返回字符的数。
    ///</returns>
    property CharacterCount: Int32 read get_CharacterCount;
    ///<summary>
    ///  只需在讲话时引发该事件的文本。
    ///</summary>
    ///<returns>
    ///  返回只是在讲话时引发该事件的文本。
    ///</returns>
    property Text: string read get_Text;
    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNSpeakProgressEventArgs = class(TDNGenericImport<DNSpeakProgressEventArgsClass, DNSpeakProgressEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNSpeakStartedEventArgsClass = interface(DNPromptEventArgsClass)
  ['{72F0A4F3-FCD7-59D8-8266-9B15E9387858}']
  end;

  ///<summary>
  ///  返回来自通知 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SpeakStartedEventArgs')]
  DNSpeakStartedEventArgs = interface(DNPromptEventArgs)
  ['{5C8792B0-FB78-34B8-87EB-F1E131428BA0}']
  { getters & setters } 

    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNSpeakStartedEventArgs = class(TDNGenericImport<DNSpeakStartedEventArgsClass, DNSpeakStartedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNVisemeReachedEventArgsClass = interface(DNPromptEventArgsClass)
  ['{C196C06C-4A4F-528A-9137-3105032EE3B6}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.VisemeReachedEventArgs')]
  DNVisemeReachedEventArgs = interface(DNPromptEventArgs)
  ['{91533B36-1445-3FA3-A30A-185D4BD8D869}']
  { getters & setters } 

    function get_Viseme: Int32;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_Duration: DDN.mscorlib.DNTimeSpan;
    function get_Emphasis: DNSynthesizerEmphasis;
    function get_NextViseme: Int32;
    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 viseme 的值。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  对象，其中包含 viseme 的值。
    ///</returns>
    property Viseme: Int32 read get_Viseme;
    ///<summary>
    ///  获取 viseme 音频流中的位置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  对象，表示 viseme 的位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取 viseme 的持续时间。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  表示 viseme 的持续时间的对象。
    ///</returns>
    property Duration: DDN.mscorlib.DNTimeSpan read get_Duration;
    ///<summary>
    ///  获取 <see cref="T:System.Speech.Synthesis.SynthesizerEmphasis" />
    ///  对象，它描述 viseme 的重点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Synthesis.SynthesizerEmphasis" />
    ///  对象，表示 viseme 的重点。
    ///</returns>
    property Emphasis: DNSynthesizerEmphasis read get_Emphasis;
    ///<summary>
    ///  获取下一步 viseme 的值。
    ///</summary>
    ///<returns><see cref="T:System.Int32" />
    ///  对象，其中包含下一步 viseme 的值。
    ///</returns>
    property NextViseme: Int32 read get_NextViseme;
    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNVisemeReachedEventArgs = class(TDNGenericImport<DNVisemeReachedEventArgsClass, DNVisemeReachedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNVoiceChangeEventArgsClass = interface(DNPromptEventArgsClass)
  ['{C292A17D-0A46-5A58-95DA-C21BA75FEB90}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.VoiceChangeEventArgs')]
  DNVoiceChangeEventArgs = interface(DNPromptEventArgs)
  ['{DF8B6456-2EFC-3DE9-BB4F-48D6A3B5569E}']
  { getters & setters } 

    function get_Voice: DNVoiceInfo;
    function get_Prompt: DNPrompt;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Speech.Synthesis.VoiceInfo" />
    ///  新语音的对象。
    ///</summary>
    ///<returns>
    ///  返回描述并标识新的语音的信息。
    ///</returns>
    property Voice: DNVoiceInfo read get_Voice;
    ///<summary>
    ///  获取与事件关联的提示。
    ///</summary>
    ///<returns><see langword="Prompt" />
    ///  与事件关联的对象。
    ///</returns>
    property Prompt: DNPrompt read get_Prompt;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNVoiceChangeEventArgs = class(TDNGenericImport<DNVoiceChangeEventArgsClass, DNVoiceChangeEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNAudioLevelUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A6429FA1-FC1B-5017-8EFF-5C86BA84F7F3}']
  end;

  ///<summary>
  ///  将提供数据供 <see langword="AudioLevelUpdated" />
  ///  事件 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.AudioLevelUpdatedEventArgs')]
  DNAudioLevelUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F0038F81-DCFE-3ABD-8D39-603E6E68F4F1}']
  { getters & setters } 

    function get_AudioLevel: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取音频输入之后的新级别 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
    ///  或 <see cref="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
    ///  引发事件。
    ///</summary>
    ///<returns>
    ///  音频输入新级别。
    ///</returns>
    property AudioLevel: Int32 read get_AudioLevel;
  end;

  TDNAudioLevelUpdatedEventArgs = class(TDNGenericImport<DNAudioLevelUpdatedEventArgsClass, DNAudioLevelUpdatedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNAudioSignalProblemOccurredEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E04CB4BB-C2E0-54AA-8A6E-F19B78516E55}']
  end;

  ///<summary>
  ///  将提供数据供 AudioSignalProblemOccurred 事件 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.AudioSignalProblemOccurredEventArgs')]
  DNAudioSignalProblemOccurredEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C329A897-9347-39FC-A98E-E27B245D0535}']
  { getters & setters } 

    function get_AudioSignalProblem: DNAudioSignalProblem;
    function get_AudioLevel: Int32;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_RecognizerAudioPosition: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取音频信号问题。
    ///</summary>
    ///<returns>
    ///  音频信号导致的问题的 AudioSignalProblemOccurred 事件被引发。
    ///</returns>
    property AudioSignalProblem: DNAudioSignalProblem read get_AudioSignalProblem;
    ///<summary>
    ///  获取与事件关联的音频级别。
    ///</summary>
    ///<returns>
    ///  音频级别输入时 AudioSignalProblemOccurred 引发事件。
    ///</returns>
    property AudioLevel: Int32 read get_AudioLevel;
    ///<summary>
    ///  获取指示问题的发生位置的输入的设备的音频流中的位置。
    ///</summary>
    ///<returns>
    ///  输入设备中的位置的音频流 AudioSignalProblemOccurred 引发事件。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取指示问题的发生位置识别器已收到的音频输入中的位置。
    ///</summary>
    ///<returns>
    ///  识别器已收到时的位置中的音频输入 AudioSignalProblemOccurred 引发事件。
    ///</returns>
    property RecognizerAudioPosition: DDN.mscorlib.DNTimeSpan read get_RecognizerAudioPosition;
  end;

  TDNAudioSignalProblemOccurredEventArgs = class(TDNGenericImport<DNAudioSignalProblemOccurredEventArgsClass, DNAudioSignalProblemOccurredEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNAudioStateChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{46A70BFE-37D9-5D6E-A890-744202FDC2ED}']
  end;

  ///<summary>
  ///  将提供数据供 <see langword="AudioStateChanged" />
  ///  事件 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.AudioStateChangedEventArgs')]
  DNAudioStateChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{3BB10173-AA22-3A00-B018-DF0D9361C651}']
  { getters & setters } 

    function get_AudioState: DNAudioState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取识别器的音频输入的新状态。
    ///</summary>
    ///<returns>
    ///  音频输入之后的状态 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
    ///  或 <see cref="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
    ///  引发事件。
    ///</returns>
    property AudioState: DNAudioState read get_AudioState;
  end;

  TDNAudioStateChangedEventArgs = class(TDNGenericImport<DNAudioStateChangedEventArgsClass, DNAudioStateChangedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognitionEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3FFC0C2E-637E-59AA-A930-C198ADACA4A6}']
  end;

  ///<summary>
  ///  介绍有关语音识别事件。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognitionEventArgs')]
  DNRecognitionEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{DBFF5C2F-CDD5-3320-9B33-735AA74B1FEE}']
  { getters & setters } 

    function get_Result: DNRecognitionResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与语音识别事件相关联的识别结果数据。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
    ///  属性将返回 <see cref="T:System.Speech.Recognition.RecognitionResult" />
    ///  ，包含有关内容的识别信息。
    ///</returns>
    property Result: DNRecognitionResult read get_Result;
  end;

  TDNRecognitionEventArgs = class(TDNGenericImport<DNRecognitionEventArgsClass, DNRecognitionEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechHypothesizedEventArgsClass = interface(DNRecognitionEventArgsClass)
  ['{0CAEF78C-A890-5E63-B16F-5F45BA11E97E}']
  end;

  ///<summary>
  ///  返回来自通知 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
  ///  或 <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
  ///  事件。
  ///  此类支持.NET Framework 基础结构，不是为了应用程序代码中直接使用。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechHypothesizedEventArgs')]
  DNSpeechHypothesizedEventArgs = interface(DNRecognitionEventArgs)
  ['{2391D408-AB08-32F8-AD51-16478D125C7C}']
  { getters & setters } 

    function get_Result: DNRecognitionResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与语音识别事件相关联的识别结果数据。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
    ///  属性将返回 <see cref="T:System.Speech.Recognition.RecognitionResult" />
    ///  ，包含有关内容的识别信息。
    ///</returns>
    property Result: DNRecognitionResult read get_Result;
  end;

  TDNSpeechHypothesizedEventArgs = class(TDNGenericImport<DNSpeechHypothesizedEventArgsClass, DNSpeechHypothesizedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechRecognitionRejectedEventArgsClass = interface(DNRecognitionEventArgsClass)
  ['{27286D58-FE15-57F4-BC4C-0588730F25C1}']
  end;

  ///<summary>
  ///  提供有关的信息 <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
  ///  和 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechRecognitionRejectedEventArgs')]
  DNSpeechRecognitionRejectedEventArgs = interface(DNRecognitionEventArgs)
  ['{64FB7D33-56E6-3B7B-8FA0-DBF0491E520E}']
  { getters & setters } 

    function get_Result: DNRecognitionResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与语音识别事件相关联的识别结果数据。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
    ///  属性将返回 <see cref="T:System.Speech.Recognition.RecognitionResult" />
    ///  ，包含有关内容的识别信息。
    ///</returns>
    property Result: DNRecognitionResult read get_Result;
  end;

  TDNSpeechRecognitionRejectedEventArgs = class(TDNGenericImport<DNSpeechRecognitionRejectedEventArgsClass, DNSpeechRecognitionRejectedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechRecognizedEventArgsClass = interface(DNRecognitionEventArgsClass)
  ['{8A65FA94-5AEE-5A5F-AA43-F9E41DB8516A}']
  end;

  ///<summary>
  ///  提供有关的信息 <see cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
  ///  , ，<see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
  ///  , ，和 <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechRecognizedEventArgs')]
  DNSpeechRecognizedEventArgs = interface(DNRecognitionEventArgs)
  ['{514EFF7E-63B7-385A-AADC-CFBA69187AC8}']
  { getters & setters } 

    function get_Result: DNRecognitionResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与语音识别事件相关联的识别结果数据。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.RecognitionEventArgs.Result" />
    ///  属性将返回 <see cref="T:System.Speech.Recognition.RecognitionResult" />
    ///  ，包含有关内容的识别信息。
    ///</returns>
    property Result: DNRecognitionResult read get_Result;
  end;

  TDNSpeechRecognizedEventArgs = class(TDNGenericImport<DNSpeechRecognizedEventArgsClass, DNSpeechRecognizedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognizerUpdateReachedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F0A18C35-481D-52AD-AE0D-ECCFB1D579D0}']
  end;

  ///<summary>
  ///  返回从数据 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
  ///  或 <see cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizerUpdateReachedEventArgs')]
  DNRecognizerUpdateReachedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{009EE2D4-FA3D-3819-92A7-EB31D86CB0E6}']
  { getters & setters } 

    function get_UserToken: DDN.mscorlib.DNObject;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 UserToken 传递到系统，当应用程序调用 <see cref="Overload:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
    ///  或 <see cref="Overload:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回一个对象，包含 UserToken。
    ///</returns>
    property UserToken: DDN.mscorlib.DNObject read get_UserToken;
    ///<summary>
    ///  获取与事件关联的音频位置。
    ///</summary>
    ///<returns>
    ///  返回的语音缓冲区中的位置 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  时，它可以暂停并引发 RecognizerUpdateReached 事件。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
  end;

  TDNRecognizerUpdateReachedEventArgs = class(TDNGenericImport<DNRecognizerUpdateReachedEventArgsClass, DNRecognizerUpdateReachedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechDetectedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{129ABCF2-EEEA-5325-B977-FA49C6A5BC66}']
  end;

  ///<summary>
  ///  返回从数据 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
  ///  或 <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechDetectedEventArgs')]
  DNSpeechDetectedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{917A1E12-E132-32EA-9897-6AB69AF0C246}']
  { getters & setters } 

    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取在其中检测到语音的音频流中的位置。
    ///</summary>
    ///<returns>
    ///  返回识别引擎的语音缓冲区内检测到短语的位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
  end;

  TDNSpeechDetectedEventArgs = class(TDNGenericImport<DNSpeechDetectedEventArgsClass, DNSpeechDetectedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognition_StateChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F95E4C6A-AD8E-52AB-832B-D4560F67D59A}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.StateChangedEventArgs')]
  DNRecognition_StateChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B1FB438B-A246-3DAA-AA70-76860A46B597}']
  { getters & setters } 

    function get_RecognizerState: DNRecognizerState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 Windows 中的共享语音识别引擎的当前状态。
    ///</summary>
    ///<returns>
    ///  指示共享语音识别引擎的状态是 <see langword="Listening" />
    ///  还是 <see langword="Stopped" />
    ///  的 <see cref="T:System.Speech.Recognition.RecognizerState" />
    ///  实例。
    ///</returns>
    property RecognizerState: DNRecognizerState read get_RecognizerState;
  end;

  TDNRecognition_StateChangedEventArgs = class(TDNGenericImport<DNRecognition_StateChangedEventArgsClass, DNRecognition_StateChangedEventArgs>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNSynthesis_StateChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{152EB17F-3355-5DD1-A3A3-ED59D42E1B59}']
  end;

  ///<summary>
  ///  从 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
  ///  事件返回数据。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.StateChangedEventArgs')]
  DNSynthesis_StateChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C2AB55F4-0250-3286-B559-BF6F2A25ABFB}']
  { getters & setters } 

    function get_State: DNSynthesizerState;
    function get_PreviousState: DNSynthesizerState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取状态 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  之前 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  合成器的状态发生更改后的状态。
    ///</returns>
    property State: DNSynthesizerState read get_State;
    ///<summary>
    ///  获取状态 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  之前 <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  之前的状态发生更改，则返回合成器的状态。
    ///</returns>
    property PreviousState: DNSynthesizerState read get_PreviousState;
  end;

  TDNSynthesis_StateChangedEventArgs = class(TDNGenericImport<DNSynthesis_StateChangedEventArgsClass, DNSynthesis_StateChangedEventArgs>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsElementClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{9DA9AD51-4525-533A-B13B-8F8596A8BD45}']
  end;

  ///<summary>
  ///  定义中的类的基类 <see cref="N:System.Speech.Recognition.SrgsGrammar" />
  ///  对应于 SRGS 语法中的元素的命名空间。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsElement')]
  DNSrgsElement = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{74A6534A-6FEB-3EA4-B0EC-7EA2FA9413B7}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSrgsElement = class(TDNGenericImport<DNSrgsElementClass, DNSrgsElement>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsItemClass = interface(DNSrgsElementClass)
  ['{49D8C6AF-1EF2-56D6-A0D6-FDABC8376667}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSrgsItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类，并指定其文本内容。
    ///</summary>
    ///  <param name="text">
    ///  与项关联的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="text" />
    ///  是一个空字符串。
    ///</exception>
    {class} function init(text: string): DNSrgsItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类，并指定的数组 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  要添加到此实例对象。
    ///</summary>
    ///  <param name="elements">
    ///  要添加到对象的数组 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="elements" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  任何成员 <paramref name="elements" />
    ///  数组是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(elements: TArray<DNSrgsElement>): DNSrgsItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类，并指定必须说出其内容的次数。
    ///</summary>
    ///  <param name="repeatCount">
    ///  该项目必须要发言次数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="repeatCount" />
    ///  为负数或大于 255。
    ///</exception>
    {class} function init(repeatCount: Int32): DNSrgsItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类，并指定最小值和最大重复计数。
    ///</summary>
    ///  <param name="min">
    ///  在该项目中的文本必须重复执行最小次数。
    ///</param>
    ///  <param name="max">
    ///  可重复的项中的文本的最大次数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min" />
    ///  为负数或大于 255。
    ///  <paramref name="max" />
    ///  为负数或大于 255。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="min" />
    ///  大于 <paramref name="max" />
    ///  。
    ///</exception>
    {class} function init(min: Int32; max: Int32): DNSrgsItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类中，指定该项目，与关联的文本，并指定最小值和最大重复计数。
    ///</summary>
    ///  <param name="min">
    ///  必须重复项最小次数。
    ///</param>
    ///  <param name="max">
    ///  项可以重复最大次数。
    ///</param>
    ///  <param name="text">
    ///  与项关联的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min" />
    ///  为负数或大于 255。
    ///  <paramref name="max" />
    ///  为负数或大于 255。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="min" />
    ///  大于 <paramref name="max" />
    ///  。
    ///</exception>
    {class} function init(min: Int32; max: Int32; text: string): DNSrgsItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  类中，指定的数组 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  对象将添加到此实例中，并设置最小值和最大重复计数。
    ///</summary>
    ///  <param name="min">
    ///  最小的次数的内容 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  必须重复对象。
    ///</param>
    ///  <param name="max">
    ///  最大的次数的内容 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  对象可以重复。
    ///</param>
    ///  <param name="elements">
    ///  要添加到对象的数组 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="elements" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  任何成员 <paramref name="elements" />
    ///  数组是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(min: Int32; max: Int32; elements: TArray<DNSrgsElement>): DNSrgsItem; overload;

  end;

  ///<summary>
  ///  表示一个包含短语，或者用户可进行通信以生成成功识别其他实体的语法元素。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsItem')]
  DNSrgsItem = interface(DNSrgsElement)
  ['{39297572-4111-3374-85D4-04FCBC35B96F}']
  { getters & setters } 

    function get_Elements: DDN.mscorlib.DNCollection<DNSrgsElement>;
    function get_RepeatProbability: Single;
    procedure set_RepeatProbability(value: Single);
    function get_MinRepeat: Int32;
    function get_MaxRepeat: Int32;
    function get_Weight: Single;
    procedure set_Weight(value: Single);

  { methods } 

    ///<summary>
    ///  设置的次数的内容 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  必须要发言。
    ///</summary>
    ///  <param name="count">
    ///  该项目必须要发言次数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />
    ///  为小于 0 或大于 255。
    ///</exception>
    procedure SetRepeat(count: Int32); overload;
    ///<summary>
    ///  设置最小次数和项可以说出最大次数。
    ///</summary>
    ///  <param name="minRepeat">
    ///  该项目必须说出最小次数。
    ///</param>
    ///  <param name="maxRepeat">
    ///  该项可以说出最大次数。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minRepeat" />
    ///  小于零或大于 255。
    ///  <paramref name="maxRepeat" />
    ///  小于零或大于 255。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="minRepeat" />
    ///  大于 <paramref name="maxRepeat" />
    ///  。
    ///</exception>
    procedure SetRepeat(minRepeat: Int32; maxRepeat: Int32); overload;
    ///<summary>
    ///  将对象添加到包含在此对象的集合 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  实例。
    ///</summary>
    ///  <param name="element">
    ///  要添加的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="element" />
    ///  是<see langword=" null" />
    ///  。
    ///</exception>
    procedure Add(element: DNSrgsElement);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取包含的对象的集合 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  包含的对象的集合 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  实例。
    ///</returns>
    property Elements: DDN.mscorlib.DNCollection<DNSrgsElement> read get_Elements;
    ///<summary>
    ///  获取或设置用户的此内容将重复的概率 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  概率，以浮点值，将重复说出此项的内容。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsItem.RepeatProbability" />
    ///  为负数或大于 1.0 的值。
    ///</exception>
    property RepeatProbability: Single read get_RepeatProbability write set_RepeatProbability;
    ///<summary>
    ///  获取用户都必须讲的内容的最小次数 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用户可以说出项的内容的最小次数。
    ///</returns>
    property MinRepeat: Int32 read get_MinRepeat;
    ///<summary>
    ///  获取用户可进行通信的内容的最大次数 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用户可以说出项的内容的最大次数。
    ///</returns>
    property MaxRepeat: Int32 read get_MaxRepeat;
    ///<summary>
    ///  获取或设置调整可能性的乘法因子， <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  中 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsOneOf" />
    ///  将使用对象。
    ///</summary>
    ///<returns>
    ///  一个浮点值，该值调整生成的谈话此项的可能性。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsItem.Weight" />
    ///  为负值。
    ///</exception>
    property Weight: Single read get_Weight write set_Weight;
  end;

  TDNSrgsItem = class(TDNGenericImport<DNSrgsItemClass, DNSrgsItem>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsNameValueTagClass = interface(DNSrgsElementClass)
  ['{CDFD1D3A-D677-5F8F-8D0D-BE1A4ABFD6A8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSrgsNameValueTag; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  类，同时指定实例的值。
    ///</summary>
    ///  <param name="value">
    ///  用于设置的值 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
    ///  属性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(value: DDN.mscorlib.DNObject): DNSrgsNameValueTag; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  类，同时指定一个名称和实例值。
    ///</summary>
    ///  <param name="name">
    ///  用来设置的字符串 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />
    ///  属性 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  对象。
    ///</param>
    ///  <param name="value">
    ///  该对象用于设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
    ///  属性 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  是一个空字符串。
    ///</exception>
    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNSrgsNameValueTag; overload;

  end;

  ///<summary>
  ///  表示将语义值与在语法中的短语相关联的元素。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag')]
  DNSrgsNameValueTag = interface(DNSrgsElement)
  ['{D43D810E-D290-399F-A575-7AE775A0C13D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  实例的名称。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含名称 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Name" />
    ///  为空字符串。
    ///</exception>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置中包含的值 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  中包含的值 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag.Value" />
    ///  到无效的类型。
    ///</exception>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNSrgsNameValueTag = class(TDNGenericImport<DNSrgsNameValueTagClass, DNSrgsNameValueTag>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsOneOfClass = interface(DNSrgsElementClass)
  ['{84B1D712-88C7-5A35-8E91-FEF8D620E842}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsOneOf" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSrgsOneOf; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsOneOf" />
    ///  数组中的类 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="items">
    ///  要添加的替代项。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="items" />
    ///  为 <see langword="null" />
    ///  。
    ///  中的任何元素 <paramref name="items" />
    ///  数组是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(items: TArray<string>): DNSrgsOneOf; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsOneOf" />
    ///  数组中的类 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  对象。
    ///</summary>
    ///  <param name="items">
    ///  要添加的替代项。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="items" />
    ///  为 <see langword="null" />
    ///  。
    ///  中的任何元素 <paramref name="items" />
    ///  数组是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(items: TArray<DNSrgsItem>): DNSrgsOneOf; overload;

  end;

  ///<summary>
  ///  表示替换单词或短语，其中的任何一个可用于匹配语音输入的列表。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsOneOf')]
  DNSrgsOneOf = interface(DNSrgsElement)
  ['{AACE0F0C-F8DC-3366-86AA-F879AD47B094}']
  { getters & setters } 

    function get_Items: DDN.mscorlib.DNCollection<DNSrgsItem>;

  { methods } 

    ///<summary>
    ///  将添加<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsItem" />
    ///  包含词或短语的替代项的列表。
    ///</summary>
    ///  <param name="item">
    ///  要添加到替代项列表的项。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="item" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(item: DNSrgsItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取列表中包含的所有备选方法 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsOneOf" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  返回替代项的列表。
    ///</returns>
    property Items: DDN.mscorlib.DNCollection<DNSrgsItem> read get_Items;
  end;

  TDNSrgsOneOf = class(TDNGenericImport<DNSrgsOneOfClass, DNSrgsOneOf>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsRuleRefClass = interface(DNSrgsElementClass)
  ['{CAB3748E-FAB4-51E8-A843-2D8BCB7B6684}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，并指定要引用的外部语法文件的位置。
    ///</summary>
    ///  <param name="uri">
    ///  包含语法之外的语法文件的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(uri: DDN.System.DNUri): DNSrgsRuleRef; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，同时指定外部语法文件的位置和规则，以引用的标识符。
    ///</summary>
    ///  <param name="uri">
    ///  包含语法之外的语法文件的位置。
    ///</param>
    ///  <param name="rule">
    ///  若要引用的规则的标识符。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="rule" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rule" />
    ///  为空。
    ///</exception>
    {class} function init(uri: DDN.System.DNUri; rule: string): DNSrgsRuleRef; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，同时指定位置的外部语法文件，该规则的标识符和语义字典中的字符串别名。
    ///</summary>
    ///  <param name="uri">
    ///  包含语法之外的语法文件的位置。
    ///</param>
    ///  <param name="rule">
    ///  若要引用的规则的标识符。
    ///</param>
    ///  <param name="semanticKey">
    ///  语义字典别名字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="semanticKey" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="semanticKey" />
    ///  为空。
    ///</exception>
    {class} function init(uri: DDN.System.DNUri; rule: string; semanticKey: string): DNSrgsRuleRef; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，同时指定外部语法位置文件的规则的标识符、 字符串别名的语义词典和初始化参数。
    ///</summary>
    ///  <param name="uri">
    ///  包含语法之外的语法文件的位置。
    ///</param>
    ///  <param name="rule">
    ///  若要引用的规则的标识符。
    ///</param>
    ///  <param name="semanticKey">
    ///  语义的键。
    ///</param>
    ///  <param name="parameters">
    ///  初始化参数的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  对象。
    ///</param>
    {class} function init(uri: DDN.System.DNUri; rule: string; semanticKey: string; parameters: string): DNSrgsRuleRef; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，并指定要引用的规则。
    ///</summary>
    ///  <param name="rule">
    ///  要引用的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rule" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(rule: DNSrgsRule): DNSrgsRuleRef; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，同时指定规则应用于引用和一个字符串，包含语义的密钥。
    ///</summary>
    ///  <param name="rule">
    ///  要引用的对象。
    ///</param>
    ///  <param name="semanticKey">
    ///  语义的键。
    ///</param>
    {class} function init(rule: DNSrgsRule; semanticKey: string): DNSrgsRuleRef; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  类，同时指定要引用的语义字典和初始化参数的字符串别名的规则。
    ///</summary>
    ///  <param name="rule">
    ///  要引用的对象。
    ///</param>
    ///  <param name="semanticKey">
    ///  语义的键。
    ///</param>
    ///  <param name="parameters">
    ///  初始化参数的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  对象。
    ///</param>
    {class} function init(rule: DNSrgsRule; semanticKey: string; parameters: string): DNSrgsRuleRef; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSrgsRuleRef;
   function __fakeFieldGet_Void: DNSrgsRuleRef;
   function __fakeFieldGet_Garbage: DNSrgsRuleRef;
   function __fakeFieldGet_Dictation: DNSrgsRuleRef;
   function __fakeFieldGet_MnemonicSpelling: DNSrgsRuleRef;

  { static fields } 

    ///<summary>
    ///  定义自动匹配规则中缺少任何音频输入。
    ///</summary>
    {class} property Null: DNSrgsRuleRef read __fakeFieldGet_Null;
    ///<summary>
    ///  定义永远不会进行朗读的规则。
    ///  VOID 自动插入一个序列，使该序列 unspeakable。
    ///</summary>
    {class} property Void: DNSrgsRuleRef read __fakeFieldGet_Void;
    ///<summary>
    ///  定义规则，可匹配任何语音直至下一步规则匹配下, 一个令牌，或直至语音输入的末尾。
    ///</summary>
    {class} property Garbage: DNSrgsRuleRef read __fakeFieldGet_Garbage;
    ///<summary>
    ///  定义可以匹配语音的输入，此语法与关联的听写主题按照定义的规则。
    ///</summary>
    {class} property Dictation: DNSrgsRuleRef read __fakeFieldGet_Dictation;
    ///<summary>
    ///  表示语音输入可包含的单词的拼写出字母，该拼写出字母将被视为一个单词。
    ///</summary>
    {class} property MnemonicSpelling: DNSrgsRuleRef read __fakeFieldGet_MnemonicSpelling;

  end;

  ///<summary>
  ///  表示指定对规则的引用的语法元素。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsRuleRef')]
  DNSrgsRuleRef = interface(DNSrgsElement)
  ['{75081706-BADD-3246-8D0A-7A7E9FF8DCD9}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    function get_SemanticKey: string;
    function get_Params: string;

  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  该规则获取的 URI 这 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  规则，以引用的位置。
    ///</returns>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>
    ///  获取语义字典别名字符串。
    ///</summary>
    ///<returns>
    ///  语义字典别名字符串。
    ///</returns>
    property SemanticKey: string read get_SemanticKey;
    ///<summary>
    ///  获取的初始化参数 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  初始化参数的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef" />
    ///  元素。
    ///</returns>
    property Params: string read get_Params;
  end;

  TDNSrgsRuleRef = class(TDNGenericImport<DNSrgsRuleRefClass, DNSrgsRuleRef>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsSemanticInterpretationTagClass = interface(DNSrgsElementClass)
  ['{35427AD5-8414-5523-A15C-04B921DB7378}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNSrgsSemanticInterpretationTag; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />
    ///  类，同时指定标记的脚本内容。
    ///</summary>
    ///  <param name="script">
    ///  一个字符串，包含 ECMAScript 标记。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="script" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(script: string): DNSrgsSemanticInterpretationTag; overload;

  end;

  ///<summary>
  ///  表示包含一个标记 ECMAScript 匹配规则时运行。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag')]
  DNSrgsSemanticInterpretationTag = interface(DNSrgsElement)
  ['{3806C094-713A-38F5-87C8-E2CE7C68DB57}']
  { getters & setters } 

    function get_Script: string;
    procedure set_Script(value: string);

  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 ECMAScript 标记。
    ///</summary>
    ///<returns>
    ///  一个包含标记的语义解释脚本的字符串。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 脚本 到 <see langword="null" />
    ///  。
    ///</exception>
    property Script: string read get_Script write set_Script;
  end;

  TDNSrgsSemanticInterpretationTag = class(TDNGenericImport<DNSrgsSemanticInterpretationTagClass, DNSrgsSemanticInterpretationTag>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsSubsetClass = interface(DNSrgsElementClass)
  ['{01E639E4-97D5-553E-A57B-04D48A53B0CF}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSubset" />
    ///  类，同时指定要匹配的短语的部分。
    ///</summary>
    ///  <param name="text">
    ///  要匹配的短语的一部分。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(text: string): DNSrgsSubset; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSubset" />
    ///  类，同时指定要匹配的部分，因此应匹配文本的模式。
    ///</summary>
    ///  <param name="text">
    ///  要匹配的短语的一部分。
    ///</param>
    ///  <param name="matchingMode">
    ///  采用的模式 <paramref name="text" />
    ///  应与所说短语匹配。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="text" />
    ///  为空。
    ///  <paramref name="text" />
    ///  只包含空白字符 (即，' '，'\t'、 '\n'、 '\r')。
    ///  <paramref name="matchingMode" />
    ///  设置中的值为 <see cref="T:System.Speech.Recognition.SubsetMatchingMode" />
    ///  枚举。
    ///</exception>
    {class} function init(text: string; matchingMode: DNSubsetMatchingMode): DNSrgsSubset; overload;

  end;

  ///<summary>
  ///  定义方法和属性可以用于匹配说短语使用给定的字符串。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsSubset')]
  DNSrgsSubset = interface(DNSrgsElement)
  ['{BB23F47D-5021-3616-8B78-AC30EBDBE5EF}']
  { getters & setters } 

    function get_MatchingMode: DNSubsetMatchingMode;
    procedure set_MatchingMode(value: DNSubsetMatchingMode);
    function get_Text: string;
    procedure set_Text(value: string);

  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置匹配的模式的子集。
    ///</summary>
    ///<returns><see cref="T:System.Speech.Recognition.SubsetMatchingMode" />
    ///  枚举的一个成员。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsSubset.MatchingMode" />
    ///  为不是成员的值 <see cref="T:System.Speech.Recognition.SubsetMatchingMode" />
    ///  枚举。
    ///</exception>
    property MatchingMode: DNSubsetMatchingMode read get_MatchingMode write set_MatchingMode;
    ///<summary>
    ///  获取或设置为字符串，其中包含要匹配说短语的部分。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含要匹配说短语的部分。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsSubset.Text" />
    ///  到 <see langword="null" />
    ///  或为空字符串。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsSubset.Text" />
    ///  使用只包含空白字符的字符串 (' '，'\t'、 '\n'、 '\r')。
    ///</exception>
    property Text: string read get_Text write set_Text;
  end;

  TDNSrgsSubset = class(TDNGenericImport<DNSrgsSubsetClass, DNSrgsSubset>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsTextClass = interface(DNSrgsElementClass)
  ['{CA32993C-F995-59D4-BD52-44C46F6CDCC3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsText" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSrgsText; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsText" />
    ///  类，同时指定该实例的文本。
    ///</summary>
    ///  <param name="text">
    ///  用于设置的值 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsText.Text" />
    ///  属性 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsText" />
    ///  实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(text: string): DNSrgsText; overload;

  end;

  ///<summary>
  ///  表示由 World Wide Web 联合会 (W3C) 定义的语法元素的文本内容 Speech Recognition Grammar Specification (SRGS) Version 1.0。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsText')]
  DNSrgsText = interface(DNSrgsElement)
  ['{3DFC612E-9414-327A-AD87-CADF9E113EBA}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);

  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置中包含的文本 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsText" />
    ///  类实例。
    ///</summary>
    ///<returns>
    ///  中包含的文本 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsText" />
    ///  实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsText.Text" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception>
    property Text: string read get_Text write set_Text;
  end;

  TDNSrgsText = class(TDNGenericImport<DNSrgsTextClass, DNSrgsText>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsTokenClass = interface(DNSrgsElementClass)
  ['{F1B31DC1-46F9-51FA-A22F-8D46113492B1}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
    ///  类，并指定要识别的文本。
    ///</summary>
    ///  <param name="text">
    ///  新的文本 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
    ///  类实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="text" />
    ///  为空。
    ///</exception>
    {class} function init(text: string): DNSrgsToken;

  end;

  ///<summary>
  ///  表示一个单词或能够识别的短语。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsToken')]
  DNSrgsToken = interface(DNSrgsElement)
  ['{741CB8AB-F7A1-343C-AF61-AA685CD02CAA}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Pronunciation: string;
    procedure set_Pronunciation(value: string);
    function get_Display: string;
    procedure set_Display(value: string);

  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置写入的形式应使用的单词。
    ///</summary>
    ///<returns>
    ///  中包含的文本 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
    ///  类实例。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试分配到一个空字符串 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  尝试为将分配一个字符串，包含引号 （"） <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
    ///  。
    ///</exception>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  获取或设置用于定义的令牌的发音的字符串。
    ///</summary>
    ///<returns>
    ///  返回一个包含手机中指定音标字母字符串 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试分配到一个空字符串 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
    ///  。
    ///</exception>
    property Pronunciation: string read get_Pronunciation write set_Pronunciation;
    ///<summary>
    ///  获取或设置要发言文本的显示形式。
    ///</summary>
    ///<returns>
    ///  此时应显示的表示形式作为它的令牌。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
    ///  到 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  尝试分配到一个空字符串 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
    ///  。
    ///</exception>
    property Display: string read get_Display write set_Display;
  end;

  TDNSrgsToken = class(TDNGenericImport<DNSrgsTokenClass, DNSrgsToken>) end;

  //-------------namespace: System.Speech.AudioFormat----------------
  DNSpeechAudioFormatInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89BC0D07-5A05-597E-98BB-D31599C71122}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
    ///  类，并指定的编码格式，每秒的示例、 示例、 通道的数量、 平均字节数 / 秒，块对齐值数组，其中包含特定格式的数据每位。
    ///</summary>
    ///  <param name="encodingFormat">
    ///  编码格式。
    ///</param>
    ///  <param name="samplesPerSecond">
    ///  每秒样本的值。
    ///</param>
    ///  <param name="bitsPerSample">
    ///  每个样本的位值。
    ///</param>
    ///  <param name="channelCount">
    ///  通道计数的值。
    ///</param>
    ///  <param name="averageBytesPerSecond">
    ///  每秒的平均字节数的值。
    ///</param>
    ///  <param name="blockAlign">
    ///  BlockAlign 的值。
    ///</param>
    ///  <param name="formatSpecificData">
    ///  包含特定格式的数据的字节数组。
    ///</param>
    {class} function init(encodingFormat: DNEncodingFormat; samplesPerSecond: Int32; bitsPerSample: Int32; channelCount: Int32; averageBytesPerSecond: Int32; blockAlign: Int32; formatSpecificData: TArray<Byte>): DNSpeechAudioFormatInfo; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
    ///  类，并指定这些示例 / 秒，每个样本，位的通道数。
    ///</summary>
    ///  <param name="samplesPerSecond">
    ///  每秒样本的值。
    ///</param>
    ///  <param name="bitsPerSample">
    ///  每个样本的位值。
    ///</param>
    ///  <param name="channel">
    ///  成员 <see cref="T:System.Speech.AudioFormat.AudioChannel" />
    ///  枚举 (指示 <paramref name="Mono" />
    ///  或 <paramref name="Stereo" />
    ///  )。
    ///</param>
    {class} function init(samplesPerSecond: Int32; bitsPerSample: DNAudioBitsPerSample; channel: DNAudioChannel): DNSpeechAudioFormatInfo; overload;

  end;

  ///<summary>
  ///  表示有关音频格式的信息。
  ///</summary>
  [DNTypeName('System.Speech.AudioFormat.SpeechAudioFormatInfo')]
  DNSpeechAudioFormatInfo = interface(DDN.mscorlib.DNObject)
  ['{DF6F8A69-E227-3930-931D-2D348F772782}']
  { getters & setters } 

    function get_AverageBytesPerSecond: Int32;
    function get_BitsPerSample: Int32;
    function get_BlockAlign: Int32;
    function get_EncodingFormat: DNEncodingFormat;
    function get_ChannelCount: Int32;
    function get_SamplesPerSecond: Int32;

  { methods } 

    ///<summary>
    ///  返回的音频格式的特定格式的数据。
    ///</summary>
    ///<returns>
    ///  包含特定格式的数据的字节数组。
    ///</returns>
    function FormatSpecificData: TArray<Byte>;
    ///<summary>
    ///  返回给定的对象是否为的一个实例 <see cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
    ///  和的当前实例等于 <see cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较的对象。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果的当前实例 <see cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
    ///  并从获取 <paramref name="obj" />
    ///  参数是否相等，否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回的音频格式的哈希代码。
    ///</summary>
    ///<returns>
    ///  值的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取每秒的音频的平均字节数。
    ///</summary>
    ///<returns>
    ///  每秒的平均字节数的值。
    ///</returns>
    property AverageBytesPerSecond: Int32 read get_AverageBytesPerSecond;
    ///<summary>
    ///  获取每个样本的音频的位。
    ///</summary>
    ///<returns>
    ///  每个样本的位值。
    ///</returns>
    property BitsPerSample: Int32 read get_BitsPerSample;
    ///<summary>
    ///  获取和设置以字节为单位的块对齐方式。
    ///</summary>
    ///<returns>
    ///  对于块对齐值。
    ///</returns>
    property BlockAlign: Int32 read get_BlockAlign;
    ///<summary>
    ///  获取音频的编码格式。
    ///</summary>
    ///<returns>
    ///  音频编码格式。
    ///</returns>
    property EncodingFormat: DNEncodingFormat read get_EncodingFormat;
    ///<summary>
    ///  获取音频通道数。
    ///</summary>
    ///<returns>
    ///  通道计数的值。
    ///</returns>
    property ChannelCount: Int32 read get_ChannelCount;
    ///<summary>
    ///  获取每秒的音频格式的示例。
    ///</summary>
    ///<returns>
    ///  每秒样本的值。
    ///</returns>
    property SamplesPerSecond: Int32 read get_SamplesPerSecond;
  end;

  TDNSpeechAudioFormatInfo = class(TDNGenericImport<DNSpeechAudioFormatInfoClass, DNSpeechAudioFormatInfo>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNChoicesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54CA2C8C-2F60-5348-BBC3-4E437FD250C3}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Choices" />
    ///  类，该类包含一组空的替代项。
    ///</summary>
    {class} function init: DNChoices; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Choices" />
    ///  类的数组，其中包含一个或多个 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="phrases">
    ///  该数组包含的可选项。
    ///</param>
    {class} function init(phrases: TArray<string>): DNChoices; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Choices" />
    ///  类的数组，其中包含一个或多个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="alternateChoices">
    ///  该数组包含的可选项。
    ///</param>
    {class} function init(alternateChoices: TArray<DNGrammarBuilder>): DNChoices; overload;

  end;

  ///<summary>
  ///  表示一组语音识别语法的约束的备选项。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.Choices')]
  DNChoices = interface(DDN.mscorlib.DNObject)
  ['{E14FD64A-FCFB-38A4-A390-4AB10261F761}']
  { methods } 

    ///<summary>
    ///  添加数组，其中包含一个或多个 <see cref="T:System.String" />
    ///  对象的可选项。
    ///</summary>
    ///  <param name="phrases">
    ///  要添加到此字符串 <see cref="T:System.Speech.Recognition.Choices" />
    ///  对象。
    ///</param>
    procedure Add(phrases: TArray<string>); overload;
    ///<summary>
    ///  添加数组，其中包含一个或多个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象的可选项。
    ///</summary>
    ///  <param name="alternateChoices"><see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象要添加到此 <see cref="T:System.Speech.Recognition.Choices" />
    ///  对象。
    ///</param>
    procedure Add(alternateChoices: TArray<DNGrammarBuilder>); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  从此对象 <see cref="T:System.Speech.Recognition.Choices" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  匹配这 <see cref="T:System.Speech.Recognition.Choices" />
    ///  对象。
    ///</returns>
    function ToGrammarBuilder: DNGrammarBuilder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChoices = class(TDNGenericImport<DNChoicesClass, DNChoices>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNGrammarClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65B85C40-6135-5939-9728-B3C7DE55638B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  文件中的类。
    ///</summary>
    ///  <param name="path">
    ///  描述在受支持的格式中语音识别语法的文件的路径。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  包含空字符串 ("")，或此文件描述了某个不包含根规则的语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  该文件不包含有效的描述，或描述某个包含无法解析的规则引用的语法。
    ///</exception>
    {class} function init(path: string): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类从文件，并指定根规则。
    ///</summary>
    ///  <param name="path">
    ///  描述在受支持的格式中语音识别语法的文件的路径。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="ruleName" />
    ///  无法解析或者不是公共的 <paramref name="path" />
    ///  为空字符串 ("")，或 <paramref name="ruleName" />
    ///  是 <see langword="null" />
    ///  且语法说明未定义根规则。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  该文件不包含有效的描述或说明某个包含无法解析的规则引用的语法。
    ///</exception>
    {class} function init(path: string; ruleName: string): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  包含语法定义，并指定一个规则以将该语法的入口点的名称的文件中的类...
    ///</summary>
    ///  <param name="path">
    ///  文件的路径，包括 Dll、 包含语法规范。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///  <param name="parameters">
    ///  传递到由指定初始化处理程序参数 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" />
    ///  的入口点或的根规则属性 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  要创建。
    ///  此参数可以为 null。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  任一参数包含无效的值。
    ///  指定的文件 <paramref name="path" />
    ///  不包含有效的语法或在指定的规则 <paramref name="ruleName" />
    ///  。
    ///  数组参数的内容不匹配的任何规则的初始化处理程序的参数。
    ///  该语法有无法解决的默认基的相对规则引用 <see cref="T:System.Uri" />
    ///  的语法规则。
    ///</exception>
    {class} function init(path: string; ruleName: string; parameters: TArray<DDN.mscorlib.DNObject>): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象。
    ///</summary>
    ///  <param name="srgsDocument">
    ///  语音识别语法的约束。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="srgsDocument" />
    ///  不包含根规则。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="srgsDocument" />
    ///  包含无法解析的规则引用。
    ///</exception>
    {class} function init(srgsDocument: DNSrgsDocument): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象，并指定根规则。
    ///</summary>
    ///  <param name="srgsDocument">
    ///  语音识别语法的约束。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的默认根规则 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="ruleName" />
    ///  无法解析或者不是公共的或 <paramref name="ruleName" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="srgsDocument" />
    ///  不包含根规则。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="srgsDocument" />
    ///  包含无法解析的规则引用。
    ///</exception>
    {class} function init(srgsDocument: DNSrgsDocument; ruleName: string): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类的实例从 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  , ，并指定一个规则以将该语法的入口点的名称。
    ///</summary>
    ///  <param name="srgsDocument">
    ///  一个实例 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  ，它包含语音识别语法的约束。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///  <param name="parameters">
    ///  传递到由指定初始化处理程序参数 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" />
    ///  的入口点或的根规则属性 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  要创建。
    ///  此参数可以为 null。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  任一参数包含无效的值。
    ///<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  由指定 <paramref name="srgsDocument" />
    ///  不包含由指定的规则 <paramref name="ruleName" />
    ///  。
    ///  数组参数的内容不匹配的任何规则的初始化处理程序的参数。
    ///</exception>
    {class} function init(srgsDocument: DNSrgsDocument; ruleName: string; parameters: TArray<DDN.mscorlib.DNObject>): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象，指定根规则，并且定义基统一资源标识符 (URI) 来解析相对规则引用。
    ///</summary>
    ///  <param name="srgsDocument">
    ///  语音识别语法的约束。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的默认根规则 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</param>
    ///  <param name="baseUri">
    ///  用来解析中的任何相对规则引用的基 URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  , ，或 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="ruleName" />
    ///  无法解析或者不是公共的或 <paramref name="ruleName" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="srgsDocument" />
    ///  不包含根规则。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="srgsDocument" />
    ///  包含无法解析的规则引用。
    ///</exception>
    {class} function init(srgsDocument: DNSrgsDocument; ruleName: string; baseUri: DDN.System.DNUri): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类的实例从 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  , ，并指定要在语法和解析相对引用的基 URI 的入口点规则的名称。
    ///</summary>
    ///  <param name="srgsDocument">
    ///  一个实例 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  ，它包含语音识别语法的约束。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///  <param name="baseUri">
    ///  要用于解析在语法说明中，任何相对规则引用的基 URI 或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="parameters">
    ///  传递到由指定初始化处理程序参数 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" />
    ///  的入口点或的根规则属性 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  要创建。此参数可能为 null。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  任一参数包含无效的值。
    ///<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  由指定 <paramref name="srgsDocument" />
    ///  不包含在指定的规则 <paramref name="ruleName" />
    ///  。
    ///  数组参数的内容不匹配的任何规则的初始化处理程序的参数。
    ///  该语法有无法解决的默认基的相对规则引用 <see cref="T:System.Uri" />
    ///  语法或所提供的 URI 规则 <paramref name="baseUri" />
    ///  。
    ///</exception>
    {class} function init(srgsDocument: DNSrgsDocument; ruleName: string; baseUri: DDN.System.DNUri; parameters: TArray<DDN.mscorlib.DNObject>): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个流，介绍语音识别语法支持的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  描述某个不包含根规则的语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  流不包含有效的描述的语法，或描述某个包含无法解析的规则引用的语法。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.IO.Stream" />
    ///  ，并指定根规则。
    ///</summary>
    ///  <param name="stream">
    ///  一个流，介绍语音识别语法支持的格式。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="ruleName" />
    ///  无法解析或者不是公共的或 <paramref name="ruleName" />
    ///  是 <see langword="null" />
    ///  且语法说明未定义根规则。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  流不包含有效的描述或说明某个包含无法解析的规则引用的语法。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; ruleName: string): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.IO.Stream" />
    ///  ，并指定根规则。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  连接到一个包含语法规范的输入/输出对象 （包括文件、 visual Studio 资源和 Dll）。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///  <param name="parameters">
    ///  传递到由指定初始化处理程序参数 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" />
    ///  的入口点或的根规则属性 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  要创建。
    ///  此参数可以为 null。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  连接到某个语法的︰
    ///  不包含在指定的规则 <paramref name="ruleName" />
    ///  需要初始化参数中指定的那些不同 <paramref name="parameters" />
    ///  包含一个相对的规则引用，它无法解决的默认基 <see cref="T:System.Uri" />
    ///  的语法规则
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; ruleName: string; parameters: TArray<DDN.mscorlib.DNObject>): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类从流中，指定根规则，并定义基统一资源标识符 (URI) 来解析相对规则引用。
    ///</summary>
    ///  <param name="stream">
    ///  一个流，介绍语音识别语法支持的格式。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///  <param name="baseUri">
    ///  要用于解析在语法说明中，任何相对规则引用的基 URI 或 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="ruleName" />
    ///  无法解析或者不是公共的或 <paramref name="ruleName" />
    ///  是 <see langword="null" />
    ///  且语法说明未定义根规则。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  流不包含有效的描述或说明某个包含无法解析的规则引用的语法。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; ruleName: string; baseUri: DDN.System.DNUri): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.IO.Stream" />
    ///  ，并指定根规则和解析相对引用的基 URI。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  连接到一个包含语法规范的输入/输出对象 （包括文件、 visual Studio 资源和 Dll）。
    ///</param>
    ///  <param name="ruleName">
    ///  要使用的语音识别语法的入口点的规则的标识符或 <see langword="null" />
    ///  若要使用的语法说明的默认根规则。
    ///</param>
    ///  <param name="baseUri">
    ///  要用于解析在语法说明中，任何相对规则引用的基 URI 或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="parameters">
    ///  传递到由指定初始化处理程序参数 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" />
    ///  的入口点或的根规则属性 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  要创建。
    ///  此参数可以为 null。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  任一参数包含无效的值。
    ///  <paramref name="stream" />
    ///  连接到某个不包含由指定的规则的语法 <paramref name="ruleName" />
    ///  。
    ///  数组参数的内容不匹配的任何规则的初始化处理程序的参数。
    ///  该语法包含一个相对的规则引用，它无法解决的默认基 <see cref="T:System.Uri" />
    ///  语法或所提供的 URI 规则 <paramref name="baseUri" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; ruleName: string; baseUri: DDN.System.DNUri; parameters: TArray<DDN.mscorlib.DNObject>): DNGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  类 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="builder">
    ///  一个实例 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，它包含语音识别语法的约束。
    ///</param>
    {class} function init(builder: DNGrammarBuilder): DNGrammar; overload;

  { static methods } 

    ///<summary><see langword="LoadLocalizedGrammarFromType" />
    ///  方法返回的本地化的实例 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象派生自 <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  在组件中， <see cref="T:System.Type" />
    ///  的基于对象的 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  。
    ///</param>
    ///  <param name="onInitParameters">
    ///  参数传递给 localizedobject 初始化方法基于 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  。
    ///  此参数可以为 null。
    ///</param>
    ///<returns><see langword="LoadLocalizedGrammarFromType" />
    ///  方法返回基于的有效对象 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  , ，或 <see langword="null" />
    ///  如果错误。
    ///</returns>
    {class} function LoadLocalizedGrammarFromType(&type: DDN.mscorlib.DNType; onInitParameters: TArray<DDN.mscorlib.DNObject>): DNGrammar;

  end;

  ///<summary>
  ///  运行时对象，可引用语音识别语法，应用程序可以用来定义用于语音识别的约束。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.Grammar')]
  DNGrammar = interface(DDN.mscorlib.DNObject)
  ['{F5BBCCB8-6BE5-39EE-BEB9-8FA0A5725151}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Weight: Single;
    procedure set_Weight(value: Single);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RuleName: string;
    function get_Loaded: Boolean;

  { events } 

    procedure add_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);
    procedure remove_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，用于控制是否 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  语音识别器可以用于执行识别。
    ///</summary>
    ///<returns><see langword="Enabled" />
    ///  属性将返回 <see langword="true" />
    ///  如果语音识别器可以执行识别使用语音识别语法; 否则为该属性返回 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置权重值为 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="Weight" />
    ///  属性将返回一个浮点值，该值指示在处理语音输入时识别引擎实例应将分配给该语法的相对权重。
    ///  范围为从 0.0 到 1.0 （含)。
    ///  默认值为 1.0。
    ///</returns>
    property Weight: Single read get_Weight write set_Weight;
    ///<summary>
    ///  获取或设置的优先级值 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="Priority" />
    ///  属性返回一个整数值，表示特定的相对优先级 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  。
    ///  范围是从-128 到 127 （含)。
    ///  默认值为 0。
    ///</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    ///<summary>
    ///  获取或设置的名称 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="Name" />
    ///  属性返回的名称 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取根规则或入口点的名称 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="RuleName" />
    ///  属性将返回引用的语音识别语法根规则的标识符。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property RuleName: string read get_RuleName;
    ///<summary>
    ///  获取是否 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  已加载，由语音识别器。
    ///</summary>
    ///<returns><see langword="Loaded" />
    ///  属性将返回 <see langword="true" />
    ///  如果被引用的语音识别语法当前已加载在语音识别器; 否则为该属性返回 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Loaded: Boolean read get_Loaded;
  end;

  TDNGrammar = class(TDNGenericImport<DNGrammarClass, DNGrammar>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNDictationGrammarClass = interface(DNGrammarClass)
  ['{9FC6157B-C6BA-5B73-99AD-EB3D925F10EE}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.DictationGrammar" />
    ///  默认听写语法提供的 Windows 桌面语音技术的类。
    ///</summary>
    {class} function init: DNDictationGrammar; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.DictationGrammar" />
    ///  类，具有特定听写语法。
    ///</summary>
    ///  <param name="topic">
    ///  符合 XML 的通用资源标识符 (URI)，或者指定听写语法 <paramref name="grammar:dictation" />
    ///  或 <paramref name="grammar:dictation#spelling" />
    ///  。
    ///</param>
    {class} function init(topic: string): DNDictationGrammar; overload;

  end;

  ///<summary>
  ///  表示用于普通听写语音识别语法。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.DictationGrammar')]
  DNDictationGrammar = interface(DNGrammar)
  ['{0382748C-BAB9-3127-865B-193EC336AAC5}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Weight: Single;
    procedure set_Weight(value: Single);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RuleName: string;
    function get_Loaded: Boolean;

  { events } 

    procedure add_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);
    procedure remove_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);

  { methods } 

    ///<summary>
    ///  将一个上下文添加到已加载，由某个听写语法 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  对象。
    ///</summary>
    ///  <param name="precedingText">
    ///  指示听写上下文的开头的文本。
    ///</param>
    ///  <param name="subsequentText">
    ///  指示听写上下文的末尾的文本。
    ///</param>
    procedure SetDictationContext(precedingText: string; subsequentText: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，用于控制是否 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  语音识别器可以用于执行识别。
    ///</summary>
    ///<returns><see langword="Enabled" />
    ///  属性将返回 <see langword="true" />
    ///  如果语音识别器可以执行识别使用语音识别语法; 否则为该属性返回 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置权重值为 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="Weight" />
    ///  属性将返回一个浮点值，该值指示在处理语音输入时识别引擎实例应将分配给该语法的相对权重。
    ///  范围为从 0.0 到 1.0 （含)。
    ///  默认值为 1.0。
    ///</returns>
    property Weight: Single read get_Weight write set_Weight;
    ///<summary>
    ///  获取或设置的优先级值 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="Priority" />
    ///  属性返回一个整数值，表示特定的相对优先级 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  。
    ///  范围是从-128 到 127 （含)。
    ///  默认值为 0。
    ///</returns>
    property Priority: Int32 read get_Priority write set_Priority;
    ///<summary>
    ///  获取或设置的名称 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="Name" />
    ///  属性返回的名称 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取根规则或入口点的名称 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///<returns><see langword="RuleName" />
    ///  属性将返回引用的语音识别语法根规则的标识符。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property RuleName: string read get_RuleName;
    ///<summary>
    ///  获取是否 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  已加载，由语音识别器。
    ///</summary>
    ///<returns><see langword="Loaded" />
    ///  属性将返回 <see langword="true" />
    ///  如果被引用的语音识别语法当前已加载在语音识别器; 否则为该属性返回 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Loaded: Boolean read get_Loaded;
  end;

  TDNDictationGrammar = class(TDNGenericImport<DNDictationGrammarClass, DNDictationGrammar>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNGrammarBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06814EEE-D5B1-5F11-A74E-D88909120845}']
  { constructors } 

    ///<summary>
    ///  初始化新的空实例 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  类。
    ///</summary>
    {class} function init: DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  序列中的单词的类。
    ///</summary>
    ///  <param name="phrase">
    ///  单词的序列。
    ///</param>
    {class} function init(phrase: string): DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  子集的一组单词的类。
    ///</summary>
    ///  <param name="phrase">
    ///  单词的序列。
    ///</param>
    ///  <param name="subsetMatchingCriteria">
    ///  语音识别语法用于识别短语匹配模式。
    ///</param>
    {class} function init(phrase: string; subsetMatchingCriteria: DNSubsetMatchingMode): DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  类从序列中的字数 <see cref="T:System.String" />
    ///  ，并指定多少次 <see cref="T:System.String" />
    ///  可以重复。
    ///</summary>
    ///  <param name="phrase">
    ///  重复的单词的序列。
    ///</param>
    ///  <param name="minRepeat">
    ///  输入匹配的短语最小次数必须进行以构成一个匹配项。
    ///</param>
    ///  <param name="maxRepeat">
    ///  输入匹配的短语的最大次数会以构成一个匹配项。
    ///</param>
    {class} function init(phrase: string; minRepeat: Int32; maxRepeat: Int32): DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  从重复元素的类。
    ///</summary>
    ///  <param name="builder">
    ///  重复的元素。
    ///</param>
    ///  <param name="minRepeat">
    ///  输入匹配的元素定义的最小次数 <paramref name="builder" />
    ///  必须发生以构成一个匹配项。
    ///</param>
    ///  <param name="maxRepeat">
    ///  输入匹配的元素定义的最大次数 <paramref name="builder" />
    ///  可能以构成一个匹配项。
    ///</param>
    {class} function init(builder: DNGrammarBuilder; minRepeat: Int32; maxRepeat: Int32): DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  类从一组备选方案。
    ///</summary>
    ///  <param name="alternateChoices">
    ///  组备选方案。
    ///</param>
    {class} function init(alternateChoices: DNChoices): DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  从语义的注册表项的类。
    ///</summary>
    ///  <param name="key">
    ///  语义的键。
    ///</param>
    {class} function init(key: DNSemanticResultKey): DNGrammarBuilder; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  语义值中的类。
    ///</summary>
    ///  <param name="value">
    ///  语义的值或名称/值对。
    ///</param>
    {class} function init(value: DNSemanticResultValue): DNGrammarBuilder; overload;

  { static methods } 

    ///<summary>
    ///  创建一个新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，其中包含后跟一个短语 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="phrase">
    ///  第一个语法元素，它表示一组单词。
    ///</param>
    ///  <param name="builder">
    ///  第二个语法元素。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  为一系列的 <paramref name="phrase" />
    ///  元素后跟 <paramref name="builder" />
    ///  元素。
    ///</returns>
    {class} function Add(phrase: string; builder: DNGrammarBuilder): DNGrammarBuilder; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，其中包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象后跟一个短语。
    ///</summary>
    ///  <param name="builder">
    ///  第一个的语法元素。
    ///</param>
    ///  <param name="phrase">
    ///  第二个语法元素，它表示一组单词。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  为一系列的 <paramref name="builder" />
    ///  元素后跟 <paramref name="phrase" />
    ///  元素。
    ///</returns>
    {class} function Add(builder: DNGrammarBuilder; phrase: string): DNGrammarBuilder; overload;
    ///<summary>
    ///  创建一个新的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，其中包含一个 <see cref="T:System.Speech.Recognition.Choices" />
    ///  对象以及跟随在此对象后面的一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="choices">
    ///  第一个语法元素，表示一组替代项。
    ///</param>
    ///  <param name="builder">
    ///  第二个语法元素。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，顺序为 <paramref name="choices" />
    ///  元素后面跟随一个 <paramref name="builder" />
    ///  元素。
    ///</returns>
    {class} function Add(choices: DNChoices; builder: DNGrammarBuilder): DNGrammarBuilder; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，其中包含 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象后跟 <see cref="T:System.Speech.Recognition.Choices" />
    ///  对象。
    ///</summary>
    ///  <param name="builder">
    ///  第一个的语法元素。
    ///</param>
    ///  <param name="choices">
    ///  第二个语法元素，它表示一组备选方案。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  为一系列的 <paramref name="builder" />
    ///  元素后跟 <paramref name="choices" />
    ///  元素。
    ///</returns>
    {class} function Add(builder: DNGrammarBuilder; choices: DNChoices): DNGrammarBuilder; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  ，其中包含两个序列 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="builder1">
    ///  第一个的语法元素。
    ///</param>
    ///  <param name="builder2">
    ///  第二个语法元素。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  为一系列的 <paramref name="builder1" />
    ///  元素后跟 <paramref name="builder2" />
    ///  元素。
    ///</returns>
    {class} function Add(builder1: DNGrammarBuilder; builder2: DNGrammarBuilder): DNGrammarBuilder; overload;

  end;

  ///<summary>
  ///  提供用于以编程方式生成语音识别语法的约束的机制。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.GrammarBuilder')]
  DNGrammarBuilder = interface(DDN.mscorlib.DNObject)
  ['{5902BF62-A4DF-3576-B38A-AFE8263F954F}']
  { getters & setters } 

    function get_DebugShowPhrases: string;
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);

  { methods } 

    ///<summary>
    ///  语法元素的当前序列中追加一个短语。
    ///</summary>
    ///  <param name="phrase">
    ///  要追加的单词的序列。
    ///</param>
    procedure Append(phrase: string); overload;
    ///<summary>
    ///  语法元素的当前序列中追加一个元素，其中一个短语的子集。
    ///</summary>
    ///  <param name="phrase">
    ///  要追加的单词的序列。
    ///</param>
    ///  <param name="subsetMatchingCriteria">
    ///  该语法用来识别短语匹配模式。
    ///</param>
    procedure Append(phrase: string; subsetMatchingCriteria: DNSubsetMatchingMode); overload;
    ///<summary>
    ///  将重复的短语追加到当前的语法元素序列。
    ///</summary>
    ///  <param name="phrase">
    ///  要追加的单词的重复的序列。
    ///</param>
    ///  <param name="minRepeat">
    ///  输入匹配的最小次数 <paramref name="phrase" />
    ///  必须发生以构成一个匹配项。
    ///</param>
    ///  <param name="maxRepeat">
    ///  输入匹配的最大次数 <paramref name="phrase" />
    ///  可能以构成一个匹配项。
    ///</param>
    procedure Append(phrase: string; minRepeat: Int32; maxRepeat: Int32); overload;
    ///<summary>
    ///  语法元素的当前序列中追加语法元素。
    ///</summary>
    ///  <param name="builder">
    ///  要追加的语法元素。
    ///</param>
    procedure Append(builder: DNGrammarBuilder); overload;
    ///<summary>
    ///  将追加一组备选方案的语法元素的当前序列。
    ///</summary>
    ///  <param name="alternateChoices">
    ///  要追加的替代项集。
    ///</param>
    procedure Append(alternateChoices: DNChoices); overload;
    ///<summary>
    ///  语法元素的当前序列中追加语义的密钥。
    ///</summary>
    ///  <param name="key">
    ///  要追加的语义键。
    ///</param>
    procedure Append(key: DNSemanticResultKey); overload;
    ///<summary>
    ///  将语义值追加到当前的语法元素序列。
    ///</summary>
    ///  <param name="value">
    ///  要追加的语义值。
    ///</param>
    procedure Append(value: DNSemanticResultValue); overload;
    ///<summary>
    ///  将重复的语法元素追加到当前的语法元素序列。
    ///</summary>
    ///  <param name="builder">
    ///  要追加的重复的语法元素。
    ///</param>
    ///  <param name="minRepeat">
    ///  输入匹配的元素定义的最小次数 <paramref name="builder" />
    ///  必须发生以构成一个匹配项。
    ///</param>
    ///  <param name="maxRepeat">
    ///  输入匹配的元素定义的最大次数 <paramref name="builder" />
    ///  可能以构成一个匹配项。
    ///</param>
    procedure Append(builder: DNGrammarBuilder; minRepeat: Int32; maxRepeat: Int32); overload;
    ///<summary>
    ///  将默认听写语法追加到当前的语法元素序列。
    ///</summary>
    procedure AppendDictation; overload;
    ///<summary>
    ///  将指定的听写语法追加到当前的语法元素序列。
    ///</summary>
    ///  <param name="category">
    ///  要追加的听写语法的类别。
    ///</param>
    procedure AppendDictation(category: string); overload;
    ///<summary>
    ///  追加与任何输入的语法元素的当前序列匹配的识别语法元素。
    ///</summary>
    procedure AppendWildcard;
    ///<summary>
    ///  语法元素的当前序列中追加语法定义文件。
    ///</summary>
    ///  <param name="path">
    ///  路径或通用资源标识符 (URI) 描述在受支持的格式中语音识别语法的文件。
    ///</param>
    procedure AppendRuleReference(path: string); overload;
    ///<summary>
    ///  语法元素的当前序列中追加的语法定义文件指定的规则。
    ///</summary>
    ///  <param name="path">
    ///  文件路径或通用资源标识符 (URI) 描述在受支持的格式中语音识别语法的文件中。
    ///</param>
    ///  <param name="rule">
    ///  要追加的规则的标识符或 <see langword="null" />
    ///  要追加的语法文件的默认根规则。
    ///</param>
    procedure AppendRuleReference(path: string; rule: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个字符串，显示的内容和结构所包含的语法 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前的内容和结构的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  。
    ///</returns>
    property DebugShowPhrases: string read get_DebugShowPhrases;
    ///<summary>
    ///  获取或设置语音识别语法的区域性。
    ///</summary>
    ///<returns>
    ///  区域性的 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  。
    ///  默认值是正在执行的线程 <see cref="P:System.Threading.Thread.CurrentUICulture" />
    ///  属性。
    ///</returns>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
  end;

  TDNGrammarBuilder = class(TDNGenericImport<DNGrammarBuilderClass, DNGrammarBuilder>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognizedAudioClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C758AB1B-9EA4-5C72-AE14-2F81189F7981}']
  end;

  ///<summary>
  ///  与关联表示音频输入，它是 <see cref="T:System.Speech.Recognition.RecognitionResult" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizedAudio')]
  DNRecognizedAudio = interface(DDN.mscorlib.DNObject)
  ['{F7C98CE4-5C2D-3FB6-8851-B0E57A9707AF}']
  { getters & setters } 

    function get_Format: DNSpeechAudioFormatInfo;
    function get_StartTime: DDN.mscorlib.DNDateTime;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_Duration: DDN.mscorlib.DNTimeSpan;

  { methods } 

    ///<summary>
    ///  将音频写入到流中波形格式。
    ///</summary>
    ///  <param name="outputStream">
    ///  将接收音频数据的流。
    ///</param>
    procedure WriteToWaveStream(outputStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  将整个音频作为原始数据写入流。
    ///</summary>
    ///  <param name="outputStream">
    ///  将接收音频数据的流。
    ///</param>
    procedure WriteToAudioStream(outputStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  选择并返回识别当前的某一部分音频作为二进制数据。
    ///</summary>
    ///  <param name="audioPosition">
    ///  要返回的音频数据的起点。
    ///</param>
    ///  <param name="duration">
    ///  要返回的段的长度。
    ///</param>
    ///<returns>
    ///  按照定义返回的子部分的已识别的音频、 <paramref name="audioPosition" />
    ///  和 <paramref name="duration" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="audioPosition" />
    ///  和 <paramref name="duration" />
    ///  定义的当前段的范围之外的音频段。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前识别音频不包含任何数据。
    ///</exception>
    function GetRange(audioPosition: DDN.mscorlib.DNTimeSpan; duration: DDN.mscorlib.DNTimeSpan): DNRecognizedAudio;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取由识别引擎处理的音频格式。
    ///</summary>
    ///<returns>
    ///  由语音识别器处理的音频格式。
    ///</returns>
    property Format: DNSpeechAudioFormatInfo read get_Format;
    ///<summary>
    ///  在识别操作的开始处获取的系统时间。
    ///</summary>
    ///<returns>
    ///  识别操作开始时系统时间。
    ///</returns>
    property StartTime: DDN.mscorlib.DNDateTime read get_StartTime;
    ///<summary>
    ///  获取开始识别音频输入音频流中的位置。
    ///</summary>
    ///<returns>
    ///  在开始输入音频流的已识别的音频的位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取已识别的音频输入音频流的持续时间。
    ///</summary>
    ///<returns>
    ///  已识别的音频持续时间内输入音频流。
    ///</returns>
    property Duration: DDN.mscorlib.DNTimeSpan read get_Duration;
  end;

  TDNRecognizedAudio = class(TDNGenericImport<DNRecognizedAudioClass, DNRecognizedAudio>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognizedPhraseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BBFC25A-1284-558E-9326-710711B130F8}']
  end;

  ///<summary>
  ///  包含由语音识别器生成的有关识别的输入的详细信息。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizedPhrase')]
  DNRecognizedPhrase = interface(DDN.mscorlib.DNObject)
  ['{D61898F0-54DB-39CD-B353-47B025971BAE}']
  { getters & setters } 

    function get_Text: string;
    function get_Confidence: Single;
    function get_Words: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedWordUnit>;
    function get_Semantics: DNSemanticValue;
    function get_Homophones: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedPhrase>;
    function get_Grammar: DNGrammar;
    function get_ReplacementWordUnits: DDN.mscorlib.DNCollection<DNReplacementText>;
    function get_HomophoneGroupId: Int32;

  { methods } 

    ///<summary>
    ///  为 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  对象中的语义信息返回语义标记语言 (SML) 文档。
    ///</summary>
    ///<returns>
    ///  返回的语义的 SML 描述 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  作为 XPath 可导航对象。
    ///</returns>
    function ConstructSmlFromSemantics: DDN.System.Xml.DNIXPathNavigable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取语音识别器从识别的输入生成的规范化文本。
    ///</summary>
    ///<returns>
    ///  语音识别器从识别的输入生成的规范化文本。
    ///</returns>
    property Text: string read get_Text;
    ///<summary>
    ///  获取识别器分配的值，此值表示 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  与给定输入匹配的可能性。
    ///</summary>
    ///<returns>
    ///  对正确识别语法的确定性的相对度量。
    ///  该值分别为从 0.0 到 1.0，从低到高置信。
    ///</returns>
    property Confidence: Single read get_Confidence;
    ///<summary>
    ///  获取语音识别器从识别的输入生成的词语。
    ///</summary>
    ///<returns>
    ///  语音识别器针对识别的输入生成的 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />
    ///  对象的集合。
    ///</returns>
    property Words: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedWordUnit> read get_Words;
    ///<summary>
    ///  获取与所识别的短语相关的语义信息。
    ///</summary>
    ///<returns>
    ///  与所识别的短语相关的语义信息。
    ///</returns>
    property Semantics: DNSemanticValue read get_Semantics;
    ///<summary>
    ///  获取识别备用项的集合，这些备用项具有与此识别语法一样的发音。
    ///</summary>
    ///<returns>
    ///  只读识别备用项的集合，这些备用项具有与此识别语法一样的发音。
    ///</returns>
    property Homophones: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedPhrase> read get_Homophones;
    ///<summary>
    ///  获取语音识别器用于返回 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  的 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  。
    ///</summary>
    ///<returns>
    ///  语音识别器用于标识输入的语法对象。
    ///</returns>
    property Grammar: DNGrammar read get_Grammar;
    ///<summary>
    ///  获取语音识别器作为语音到文本规范化一部分更改的文本的相关信息。
    ///</summary>
    ///<returns><see cref="T:System.Speech.Recognition.ReplacementText" />
    ///  对象的集合，这些对象描述在语音识别器规范化已识别输入时所替换的文本部分。
    ///</returns>
    property ReplacementWordUnits: DDN.mscorlib.DNCollection<DNReplacementText> read get_ReplacementWordUnits;
    ///<summary>
    ///  获取短语同音字组的标识符。
    ///</summary>
    ///<returns>
    ///  短语同音字组的标识符。
    ///</returns>
    property HomophoneGroupId: Int32 read get_HomophoneGroupId;
  end;

  TDNRecognizedPhrase = class(TDNGenericImport<DNRecognizedPhraseClass, DNRecognizedPhrase>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognitionResultClass = interface(DNRecognizedPhraseClass)
  ['{F5D88BB8-DF16-5D53-83D2-4B556AE727F8}']
  end;

  ///<summary>
  ///  包含有关的实例已识别的输入的详细的信息 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognitionResult')]
  DNRecognitionResult = interface(DNRecognizedPhrase)
  ['{B2425F6F-95FA-33F8-B5A0-A9349DC5525D}']
  { getters & setters } 

    function get_Audio: DNRecognizedAudio;
    function get_Alternates: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedPhrase>;
    function get_Text: string;
    function get_Confidence: Single;
    function get_Words: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedWordUnit>;
    function get_Semantics: DNSemanticValue;
    function get_Homophones: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedPhrase>;
    function get_Grammar: DNGrammar;
    function get_ReplacementWordUnits: DDN.mscorlib.DNCollection<DNReplacementText>;
    function get_HomophoneGroupId: Int32;

  { methods } 

    ///<summary>
    ///  获取与特定的词识别结果的范围相关联的音频部分。
    ///</summary>
    ///  <param name="firstWord">
    ///  范围中的第一个单词。
    ///</param>
    ///  <param name="lastWord">
    ///  范围中的最后一个单词。
    ///</param>
    ///<returns>
    ///  与 word 范围关联的音频部分。
    ///</returns>
    ///<exception cref="T:System.NullReferenceException">
    ///  识别器通过调用生成结果 <see langword="EmulateRecognize" />
    ///  或 <see langword="EmulateRecognizeAsync" />
    ///  方法 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  对象。
    ///</exception>
    function GetAudioForWordRange(firstWord: DNRecognizedWordUnit; lastWord: DNRecognizedWordUnit): DNRecognizedAudio;
    ///<summary>
    ///  为 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  对象中的语义信息返回语义标记语言 (SML) 文档。
    ///</summary>
    ///<returns>
    ///  返回的语义的 SML 描述 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  作为 XPath 可导航对象。
    ///</returns>
    function ConstructSmlFromSemantics: DDN.System.Xml.DNIXPathNavigable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与识别结果相关联的音频。
    ///</summary>
    ///<returns>
    ///  与识别结果相关联的音频或 <see langword="null" />
    ///  如果识别器通过调用生成结果 <see langword="EmulateRecognize" />
    ///  或 <see langword="EmulateRecognizeAsync" />
    ///  方法 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  实例。
    ///</returns>
    property Audio: DNRecognizedAudio read get_Audio;
    ///<summary>
    ///  获取语音识别器的输入的可能匹配项的集合。
    ///</summary>
    ///<returns>
    ///  只读识别备用项的集合。
    ///</returns>
    property Alternates: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedPhrase> read get_Alternates;
    ///<summary>
    ///  获取语音识别器从识别的输入生成的规范化文本。
    ///</summary>
    ///<returns>
    ///  语音识别器从识别的输入生成的规范化文本。
    ///</returns>
    property Text: string read get_Text;
    ///<summary>
    ///  获取识别器分配的值，此值表示 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  与给定输入匹配的可能性。
    ///</summary>
    ///<returns>
    ///  对正确识别语法的确定性的相对度量。
    ///  该值分别为从 0.0 到 1.0，从低到高置信。
    ///</returns>
    property Confidence: Single read get_Confidence;
    ///<summary>
    ///  获取语音识别器从识别的输入生成的词语。
    ///</summary>
    ///<returns>
    ///  语音识别器针对识别的输入生成的 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />
    ///  对象的集合。
    ///</returns>
    property Words: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedWordUnit> read get_Words;
    ///<summary>
    ///  获取与所识别的短语相关的语义信息。
    ///</summary>
    ///<returns>
    ///  与所识别的短语相关的语义信息。
    ///</returns>
    property Semantics: DNSemanticValue read get_Semantics;
    ///<summary>
    ///  获取识别备用项的集合，这些备用项具有与此识别语法一样的发音。
    ///</summary>
    ///<returns>
    ///  只读识别备用项的集合，这些备用项具有与此识别语法一样的发音。
    ///</returns>
    property Homophones: DDN.mscorlib.DNReadOnlyCollection<DNRecognizedPhrase> read get_Homophones;
    ///<summary>
    ///  获取语音识别器用于返回 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />
    ///  的 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  。
    ///</summary>
    ///<returns>
    ///  语音识别器用于标识输入的语法对象。
    ///</returns>
    property Grammar: DNGrammar read get_Grammar;
    ///<summary>
    ///  获取语音识别器作为语音到文本规范化一部分更改的文本的相关信息。
    ///</summary>
    ///<returns><see cref="T:System.Speech.Recognition.ReplacementText" />
    ///  对象的集合，这些对象描述在语音识别器规范化已识别输入时所替换的文本部分。
    ///</returns>
    property ReplacementWordUnits: DDN.mscorlib.DNCollection<DNReplacementText> read get_ReplacementWordUnits;
    ///<summary>
    ///  获取短语同音字组的标识符。
    ///</summary>
    ///<returns>
    ///  短语同音字组的标识符。
    ///</returns>
    property HomophoneGroupId: Int32 read get_HomophoneGroupId;
  end;

  TDNRecognitionResult = class(TDNGenericImport<DNRecognitionResultClass, DNRecognitionResult>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognizedWordUnitClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67AE60BA-3717-59FF-979A-AEBC0CC41624}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="text">
    ///  被识别的单词规范化的文本。
    ///  此值可为 <see langword="null" />
    ///  , ，""，或 <see cref="F:System.String.Empty" />
    ///  。
    ///</param>
    ///  <param name="confidence">
    ///  一个 <see langword="float" />
    ///  从 0.0 到 1.0，该值指示 word 识别的确定性值。
    ///</param>
    ///  <param name="pronunciation">
    ///  拼音被识别的单词。
    ///  此值可为 <see langword="null" />
    ///  , ，""，或 <see cref="F:System.String.Empty" />
    ///  。
    ///</param>
    ///  <param name="lexicalForm">
    ///  被识别的单词规范化的文本。
    ///  此参数是必需的且不能 <see langword="null" />
    ///  , ，""，或 <see cref="F:System.String.Empty" />
    ///  。
    ///</param>
    ///  <param name="displayAttributes">
    ///  定义空白区域以显示识别的字的用途。
    ///</param>
    ///  <param name="audioPosition">
    ///  音频输入流中被识别的单词的位置。
    ///  此值可为 <see cref="F:System.TimeSpan.Zero" />
    ///  。
    ///</param>
    ///  <param name="audioDuration">
    ///  音频输入对应的被识别的单词的长度。
    ///  此值可为 <see cref="F:System.TimeSpan.Zero" />
    ///  。
    ///</param>
    {class} function init(text: string; confidence: Single; pronunciation: string; lexicalForm: string; displayAttributes: DNDisplayAttributes; audioPosition: DDN.mscorlib.DNTimeSpan; audioDuration: DDN.mscorlib.DNTimeSpan): DNRecognizedWordUnit;

  end;

  ///<summary>
  ///  提供了识别语音的原子单元。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizedWordUnit')]
  DNRecognizedWordUnit = interface(DDN.mscorlib.DNObject)
  ['{C8782AA7-6CD7-3464-874C-A962070A2383}']
  { getters & setters } 

    function get_Text: string;
    function get_Confidence: Single;
    function get_Pronunciation: string;
    function get_LexicalForm: string;
    function get_DisplayAttributes: DNDisplayAttributes;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取被识别的单词的规范化的文本。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含给定的输入单词的规范化的文本输出。
    ///</returns>
    property Text: string read get_Text;
    ///<summary>
    ///  获取一个值，，，表示被识别的单词与给定的输入匹配的可能性识别器分配。
    ///</summary>
    ///<returns>
    ///  对正确识别的单词的确定性的相对度量。
    ///  该值分别为从 0.0 到 1.0，从低到高置信。
    ///</returns>
    property Confidence: Single read get_Confidence;
    ///<summary>
    ///  获取被识别的单词的拼音。
    ///</summary>
    ///<returns>
    ///  一个受支持的音标字母，例如国际音标 (IPA) 或通用电话设置 (UPS) 中的字符的字符串。
    ///</returns>
    property Pronunciation: string read get_Pronunciation;
    ///<summary>
    ///  获取被识别的单词的规范化的文本。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.String" />
    ///  包含被识别的单词，而无需任何规范化文本。
    ///</returns>
    property LexicalForm: string read get_LexicalForm;
    ///<summary>
    ///  获取格式设置信息用于从当前创建的文本输出 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  指定要显示的内容的空白空间使用情况的 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />
    ///  对象。
    ///</returns>
    property DisplayAttributes: DNDisplayAttributes read get_DisplayAttributes;
  end;

  TDNRecognizedWordUnit = class(TDNGenericImport<DNRecognizedWordUnitClass, DNRecognizedWordUnit>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNRecognizerInfoClass = interface(DNObjectClass)
  ['{5E556195-6D9E-5C09-9103-F87C0B4468BF}']
  end;

  ///<summary>
  ///  表示有关的信息 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
  ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  ///  实例。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.RecognizerInfo')]
  DNRecognizerInfo = interface(DDN.mscorlib.DNIDisposable)
  ['{126015BA-82AD-3A73-889A-A2D558200564}']
  { getters & setters } 

    function get_Id: string;
    function get_Name: string;
    function get_Description: string;
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    function get_SupportedAudioFormats: DDN.mscorlib.DNReadOnlyCollection<DNSpeechAudioFormatInfo>;
    function get_AdditionalInfo: DDN.mscorlib.DNIDictionary<string, string>;

  { methods } 

    ///<summary>
    ///  释放 RecognizerInfo 对象。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的标识符 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回特定的标识符 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</returns>
    property Id: string read get_Id;
    ///<summary>
    ///  获取的友好名称 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回特定的友好名称 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取说明 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="string" />
    ///  描述的特定配置 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取支持的区域性 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回有关支持的区域性信息给定 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</returns>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture;
    ///<summary>
    ///  获取支持的音频格式 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回由特定支持的音频格式的列表 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</returns>
    property SupportedAudioFormats: DDN.mscorlib.DNReadOnlyCollection<DNSpeechAudioFormatInfo> read get_SupportedAudioFormats;
    ///<summary>
    ///  获取有关的其他信息 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回的实例 <see cref="T:System.Collections.Generic.IDictionary`2" />
    ///  包含的配置信息 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  对象。
    ///</returns>
    property AdditionalInfo: DDN.mscorlib.DNIDictionary<string, string> read get_AdditionalInfo;
  end;

  TDNRecognizerInfo = class(TDNGenericImport<DNRecognizerInfoClass, DNRecognizerInfo>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNReplacementTextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7CAA5297-3DB4-5322-BE15-B174192959C0}']
  end;

  ///<summary>
  ///  包含有关已对识别结果执行语音规范化过程的信息。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.ReplacementText')]
  DNReplacementText = interface(DDN.mscorlib.DNObject)
  ['{5CF6BCB9-79BB-3C52-9010-5CE253F998E0}']
  { getters & setters } 

    function get_DisplayAttributes: DNDisplayAttributes;
    function get_Text: string;
    function get_FirstWordIndex: Int32;
    function get_CountOfWords: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取由语音规范化过程替换的文本有关前导和尾随空格的信息。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Speech.Recognition.DisplayAttributes" />
    ///  对象，它指定显示文本替换为标准化的空白空间使用情况。
    ///</returns>
    property DisplayAttributes: DNDisplayAttributes read get_DisplayAttributes;
    ///<summary>
    ///  获取已识别的文本替换为语音规范化过程。
    ///</summary>
    ///<returns>
    ///  返回已识别的文本替换为语音规范化过程。
    ///</returns>
    property Text: string read get_Text;
    ///<summary>
    ///  获取语音规范化过程替换为第一个被识别的单词的位置。
    ///</summary>
    ///<returns>
    ///  返回由语音规范化过程替换为第一个被识别的单词的位置。
    ///</returns>
    property FirstWordIndex: Int32 read get_FirstWordIndex;
    ///<summary>
    ///  获取识别语音规范化过程替换为的字的数目。
    ///</summary>
    ///<returns>
    ///  返回识别语音规范化过程替换为的字的数目。
    ///</returns>
    property CountOfWords: Int32 read get_CountOfWords;
  end;

  TDNReplacementText = class(TDNGenericImport<DNReplacementTextClass, DNReplacementText>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSemanticResultKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F017CE6-5481-5E3D-977C-CE42DA71206D}']
  { constructors } 

    ///<summary>
    ///  将语义密钥分配给一个或多个 <see cref="T:System.String" />
    ///  用来创建语音识别语法的实例。
    ///</summary>
    ///  <param name="semanticResultKey">
    ///  标记可用于访问 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  与关联实例 <see cref="T:System.String" />
    ///  指定的对象 <paramref name="phrases" />
    ///  参数。
    ///</param>
    ///  <param name="phrases">
    ///  一个或多个 <see cref="T:System.String" />
    ///  对象，其串联的文本将关联的 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  对象中定义的标记与访问 <paramref name="semanticResultKey" />
    ///  。
    ///</param>
    {class} function init(semanticResultKey: string; phrases: TArray<string>): DNSemanticResultKey; overload;
    ///<summary>
    ///  将语义密钥分配给一个或多个 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  用于创建语音识别语法的对象。
    ///</summary>
    ///  <param name="semanticResultKey">
    ///  标记要用作语义键来访问 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  与关联实例 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  指定的对象 <paramref name="builders" />
    ///  参数。
    ///</param>
    ///  <param name="builders">
    ///  将与之关联的语法组件的数组 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  对象中定义的标记与访问 <paramref name="semanticResultKey" />
    ///  。
    ///</param>
    {class} function init(semanticResultKey: string; builders: TArray<DNGrammarBuilder>): DNSemanticResultKey; overload;

  end;

  ///<summary>
  ///  将相关联的密钥字符串 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
  ///  值以定义 <see cref="T:System.Speech.Recognition.SemanticValue" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SemanticResultKey')]
  DNSemanticResultKey = interface(DDN.mscorlib.DNObject)
  ['{FC84D12C-6D62-364F-AEFB-DAC7FFAEE4A5}']
  { methods } 

    ///<summary>
    ///  返回的实例 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  构造从当前 <see cref="T:System.Speech.Recognition.SemanticResultKey" />
    ///  实例。
    ///</summary>
    function ToGrammarBuilder: DNGrammarBuilder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSemanticResultKey = class(TDNGenericImport<DNSemanticResultKeyClass, DNSemanticResultKey>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSemanticResultValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C51139F1-7D10-591D-9F2F-2645DC84BEE6}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  类，并指定语义的值。
    ///</summary>
    ///  <param name="value">
    ///  由管理的值 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  。
    ///  类型必须为 <see langword="bool" />
    ///  , ，<see langword="int" />
    ///  , ，<see langword="float" />
    ///  , ，或 <see langword="string" />
    ///  。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNObject): DNSemanticResultValue; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  类，并将与语义值相关联 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="phrase">
    ///  用于识别短语。
    ///</param>
    ///  <param name="value">
    ///  由管理的值 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  。
    ///  类型必须为 <see langword="bool" />
    ///  , ，<see langword="int" />
    ///  , ，<see langword="float" />
    ///  , ，或 <see langword="string" />
    ///  。
    ///</param>
    {class} function init(phrase: string; value: DDN.mscorlib.DNObject): DNSemanticResultValue; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  类，并将与语义值相关联 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="builder">
    ///  要识别中使用的语法组件。
    ///</param>
    ///  <param name="value">
    ///  由管理的值 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  。
    ///  类型必须为 <see langword="bool" />
    ///  , ，<see langword="int" />
    ///  , ，<see langword="float" />
    ///  , ，或 <see langword="string" />
    ///  。
    ///</param>
    {class} function init(builder: DNGrammarBuilder; value: DDN.mscorlib.DNObject): DNSemanticResultValue; overload;

  end;

  ///<summary>
  ///  表示语义值并根据需要将值与语音识别语法的一个组件相关联。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SemanticResultValue')]
  DNSemanticResultValue = interface(DDN.mscorlib.DNObject)
  ['{52555CBB-7278-3EFC-9737-D2549CE3E9B2}']
  { methods } 

    ///<summary>
    ///  返回的实例 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  构造从当前 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  返回的实例 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  构造从当前 <see cref="T:System.Speech.Recognition.SemanticResultValue" />
    ///  实例。
    ///</returns>
    function ToGrammarBuilder: DNGrammarBuilder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSemanticResultValue = class(TDNGenericImport<DNSemanticResultValueClass, DNSemanticResultValue>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSemanticValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70105A02-3C2E-50D8-8421-EE336D7E1184}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  类并指定语义值、 一个键的名称，以及置信度。
    ///</summary>
    ///  <param name="keyName">
    ///  可用于引用此键 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  实例。
    ///</param>
    ///  <param name="value">
    ///  一个对象，包含信息存储在 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  对象。
    ///</param>
    ///  <param name="confidence">
    ///  一个 <see langword="float" />
    ///  包含语义分析确定性的估计值。
    ///</param>
    {class} function init(keyName: string; value: DDN.mscorlib.DNObject; confidence: Single): DNSemanticValue; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  类，并指定语义的值。
    ///</summary>
    ///  <param name="value">
    ///  信息存储在 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  对象。
    ///</param>
    {class} function init(value: DDN.mscorlib.DNObject): DNSemanticValue; overload;

  end;

  ///<summary>
  ///  表示已识别的短语的语义组织。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SemanticValue')]
  DNSemanticValue = interface(DDN.mscorlib.DNObject)
  ['{61E931A7-FEB2-3052-A328-C94255A87EDC}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    function get_Confidence: Single;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  确定指定的对象是否是实例 SemanticValue 和的当前实例等于 SemanticValue。
    ///</summary>
    ///  <param name="obj">
    ///  要评估的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是否等于当前对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供的哈希代码 SemanticValue 对象。
    ///</summary>
    ///<returns>
    ///  当前的哈希代码 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DNSemanticValue>): Boolean;
    ///<summary>
    ///  指示是否当前 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  实例集合包含的子 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  具有给定键的字符串实例。
    ///</summary>
    ///  <param name="key"><see cref="T:System.String" />
    ///  包含用来标识的子实例的密钥字符串 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  下当前 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回 <see langword="bool" />
    ///  , ，<see langword="true" />
    ///  如果子实例 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  标记与字符串 <paramref name="key" />
    ///  找到，则 <see langword="false" />
    ///  如果不是。
    ///</returns>
    function ContainsKey(key: string): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  返回在当前包含的信息的只读属性 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Object" />
    ///  实例，包含在当前存储的信息 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  实例。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  返回有关的语义分析返回的当前实例的正确性确定性的相对度量值 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="float" />
    ///  ，它是返回的当前实例的语义分析的确定性的相对度量 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  。
    ///</returns>
    property Confidence: Single read get_Confidence;
    ///<summary>
    ///  返回子数目 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  下当前的对象 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  数量的子 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  下当前的对象 <see cref="T:System.Speech.Recognition.SemanticValue" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNSemanticValue = class(TDNGenericImport<DNSemanticValueClass, DNSemanticValue>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechRecognitionEngineClass = interface(DNObjectClass)
  ['{C38D283E-AFCD-56EC-B6F7-6B2D3C33FCCA}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  类使用的系统默认的语音识别器。
    ///</summary>
    {class} function init: DNSpeechRecognitionEngine; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  类用于指定区域设置默认的语音识别器。
    ///</summary>
    ///  <param name="culture">
    ///  语音识别器必须支持的区域设置。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  任何已安装的语音识别器均不支持指定的区域设置，或 <paramref name="culture" />
    ///  是固定的区域性。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="Culture" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(culture: DDN.mscorlib.DNCultureInfo): DNSpeechRecognitionEngine; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  带指定名称的识别器使用字符串参数的类。
    ///</summary>
    ///  <param name="recognizerId">
    ///  语音识别器使用令牌名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  安装使用该令牌的名称没有语音识别器，或 <paramref name="recognizerId" />
    ///  为空字符串 ("")。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="recognizerId" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(recognizerId: string): DNSpeechRecognitionEngine; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  使用中的信息 <see cref="T:System.Speech.Recognition.RecognizerInfo" />
    ///  对象以指定的识别器使用。
    ///</summary>
    ///  <param name="recognizerInfo">
    ///  有关特定的语音识别器的信息。
    ///</param>
    {class} function init(recognizerInfo: DNRecognizerInfo): DNSpeechRecognitionEngine; overload;

  { static methods } 

    ///<summary>
    ///  返回当前的系统上的所有已安装的语音识别器的信息。
    ///</summary>
    ///<returns>
    ///  只读集合 <see cref="T:System.Speech.Recognition.RecognizerInfo" />
    ///  描述已安装的识别器的对象。
    ///</returns>
    {class} function InstalledRecognizers: DDN.mscorlib.DNReadOnlyCollection<DNRecognizerInfo>;

  end;

  ///<summary>
  ///  提供一种方法来访问和管理过程中语音识别引擎。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechRecognitionEngine')]
  DNSpeechRecognitionEngine = interface(DDN.mscorlib.DNIDisposable)
  ['{F2FEEE7A-3FA5-3F20-9A0E-47C427942366}']
  { getters & setters } 

    function get_InitialSilenceTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_InitialSilenceTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_BabbleTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_BabbleTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_EndSilenceTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_EndSilenceTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_EndSilenceTimeoutAmbiguous: DDN.mscorlib.DNTimeSpan;
    procedure set_EndSilenceTimeoutAmbiguous(value: DDN.mscorlib.DNTimeSpan);
    function get_Grammars: DDN.mscorlib.DNReadOnlyCollection<DNGrammar>;
    function get_RecognizerInfo: DNRecognizerInfo;
    function get_AudioState: DNAudioState;
    function get_AudioLevel: Int32;
    function get_RecognizerAudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_AudioFormat: DNSpeechAudioFormatInfo;
    function get_MaxAlternates: Int32;
    procedure set_MaxAlternates(value: Int32);

  { events } 

    procedure add_RecognizeCompleted(value: DDN.mscorlib.DNEventHandler<DNRecognizeCompletedEventArgs>);
    procedure remove_RecognizeCompleted(value: DDN.mscorlib.DNEventHandler<DNRecognizeCompletedEventArgs>);
    procedure add_EmulateRecognizeCompleted(value: DDN.mscorlib.DNEventHandler<DNEmulateRecognizeCompletedEventArgs>);
    procedure remove_EmulateRecognizeCompleted(value: DDN.mscorlib.DNEventHandler<DNEmulateRecognizeCompletedEventArgs>);
    procedure add_LoadGrammarCompleted(value: DDN.mscorlib.DNEventHandler<DNLoadGrammarCompletedEventArgs>);
    procedure remove_LoadGrammarCompleted(value: DDN.mscorlib.DNEventHandler<DNLoadGrammarCompletedEventArgs>);
    procedure add_SpeechDetected(value: DDN.mscorlib.DNEventHandler<DNSpeechDetectedEventArgs>);
    procedure remove_SpeechDetected(value: DDN.mscorlib.DNEventHandler<DNSpeechDetectedEventArgs>);
    procedure add_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);
    procedure remove_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);
    procedure add_SpeechRecognitionRejected(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognitionRejectedEventArgs>);
    procedure remove_SpeechRecognitionRejected(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognitionRejectedEventArgs>);
    procedure add_RecognizerUpdateReached(value: DDN.mscorlib.DNEventHandler<DNRecognizerUpdateReachedEventArgs>);
    procedure remove_RecognizerUpdateReached(value: DDN.mscorlib.DNEventHandler<DNRecognizerUpdateReachedEventArgs>);
    procedure add_SpeechHypothesized(value: DDN.mscorlib.DNEventHandler<DNSpeechHypothesizedEventArgs>);
    procedure remove_SpeechHypothesized(value: DDN.mscorlib.DNEventHandler<DNSpeechHypothesizedEventArgs>);
    procedure add_AudioSignalProblemOccurred(value: DDN.mscorlib.DNEventHandler<DNAudioSignalProblemOccurredEventArgs>);
    procedure remove_AudioSignalProblemOccurred(value: DDN.mscorlib.DNEventHandler<DNAudioSignalProblemOccurredEventArgs>);
    procedure add_AudioLevelUpdated(value: DDN.mscorlib.DNEventHandler<DNAudioLevelUpdatedEventArgs>);
    procedure remove_AudioLevelUpdated(value: DDN.mscorlib.DNEventHandler<DNAudioLevelUpdatedEventArgs>);
    procedure add_AudioStateChanged(value: DDN.mscorlib.DNEventHandler<DNAudioStateChangedEventArgs>);
    procedure remove_AudioStateChanged(value: DDN.mscorlib.DNEventHandler<DNAudioStateChangedEventArgs>);

  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  对象。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  对象可以接收输入波形音频格式 (.wav) 文件。
    ///</summary>
    ///  <param name="path">
    ///  要用作输入的文件的路径。
    ///</param>
    procedure SetInputToWaveFile(path: string);
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  要接收来自包含波形音频格式 (.wav) 数据的流的输入对象。
    ///</summary>
    ///  <param name="audioSource">
    ///  包含音频数据的流。
    ///</param>
    procedure SetInputToWaveStream(audioSource: DDN.mscorlib.DNStream);
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  要接收来自音频流的输入对象。
    ///</summary>
    ///  <param name="audioSource">
    ///  音频输入的流。
    ///</param>
    ///  <param name="audioFormat">
    ///  音频输入的格式。
    ///</param>
    procedure SetInputToAudioStream(audioSource: DDN.mscorlib.DNStream; audioFormat: DNSpeechAudioFormatInfo);
    ///<summary>
    ///  禁用对语音识别器的输入。
    ///</summary>
    procedure SetInputToNull;
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  对象以从默认音频设备接收输入。
    ///</summary>
    procedure SetInputToDefaultAudioDevice;
    ///<summary>
    ///  执行同步的语音识别操作。
    ///</summary>
    ///<returns>
    ///  对于输入，识别结果或 <see langword="null" />
    ///  如果操作不成功或未启用识别器。
    ///</returns>
    function Recognize: DNRecognitionResult; overload;
    ///<summary>
    ///  执行指定的初始静音超时期间内同步语音识别操作。
    ///</summary>
    ///  <param name="initialSilenceTimeout">
    ///  语音识别器接受的时间间隔输入最终确定识别之前包含唯一静音。
    ///</param>
    ///<returns>
    ///  对于输入，识别结果或 <see langword="null" />
    ///  如果操作不成功或未启用识别器。
    ///</returns>
    function Recognize(initialSilenceTimeout: DDN.mscorlib.DNTimeSpan): DNRecognitionResult; overload;
    ///<summary>
    ///  执行单一、 异步语音识别操作。
    ///</summary>
    procedure RecognizeAsync; overload;
    ///<summary>
    ///  执行一个或多个异步语音识别操作。
    ///</summary>
    ///  <param name="mode">
    ///  指示是否执行一个或多个标识操作。
    ///</param>
    procedure RecognizeAsync(mode: DNRecognizeMode); overload;
    ///<summary>
    ///  终止异步识别，而无需等待当前识别操作完成。
    ///</summary>
    procedure RecognizeAsyncCancel;
    ///<summary>
    ///  当前的识别操作完成后，将停止异步识别。
    ///</summary>
    procedure RecognizeAsyncStop;
    ///<summary>
    ///  返回的识别器的设置的值。
    ///</summary>
    ///  <param name="settingName">
    ///  要返回的设置的名称。
    ///</param>
    ///<returns>
    ///  设置的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="settingName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="settingName" />
    ///  为空字符串 ("")。
    ///</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">
    ///  识别器不具有该名称的一种设置。
    ///</exception>
    function QueryRecognizerSetting(settingName: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用指定的字符串值更新指定的语音识别引擎设置。
    ///</summary>
    ///  <param name="settingName">
    ///  要更新的设置的名称。
    ///</param>
    ///  <param name="updatedValue">
    ///  设置新值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="settingName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="settingName" />
    ///  为空字符串 ("")。
    ///</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">
    ///  识别器不具有该名称的一种设置。
    ///</exception>
    procedure UpdateRecognizerSetting(settingName: string; updatedValue: string); overload;
    ///<summary>
    ///  更新为与指定的设置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  与指定的整数值。
    ///</summary>
    ///  <param name="settingName">
    ///  要更新的设置的名称。
    ///</param>
    ///  <param name="updatedValue">
    ///  设置新值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="settingName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="settingName" />
    ///  为空字符串 ("")。
    ///</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">
    ///  识别器不具有该名称的一种设置。
    ///</exception>
    procedure UpdateRecognizerSetting(settingName: string; updatedValue: Int32); overload;
    ///<summary>
    ///  以同步方式加载 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象。
    ///</summary>
    ///  <param name="grammar">
    ///  要加载的语法对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Grammar" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="Grammar" />
    ///  未处于有效状态。
    ///</exception>
    procedure LoadGrammar(grammar: DNGrammar);
    ///<summary>
    ///  异步加载语音识别语法。
    ///</summary>
    ///  <param name="grammar">
    ///  若要加载语音识别语法。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Grammar" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="Grammar" />
    ///  未处于有效状态。
    ///</exception><exception cref="T:System.OperationCanceledException">
    ///  异步操作已取消。
    ///</exception>
    procedure LoadGrammarAsync(grammar: DNGrammar);
    ///<summary>
    ///  卸载指定 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象从 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///  <param name="grammar">
    ///  要卸载的语法对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="Grammar" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该语法不会加载此识别器，或此识别器当前以异步方式加载的语法。
    ///</exception>
    procedure UnloadGrammar(grammar: DNGrammar);
    ///<summary>
    ///  卸载所有 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  来自识别器的对象。
    ///</summary>
    procedure UnloadAllGrammars;
    ///<summary>
    ///  适配器会模拟语音识别器，用于同步的语音识别的音频位置的文本的短语的输入。
    ///</summary>
    ///  <param name="inputText">
    ///  有关识别操作输入。
    ///</param>
    ///<returns>
    ///  识别操作的结果或 <see langword="null" />
    ///  如果操作不成功或未启用识别器。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  识别器具有加载任何语音识别语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="inputText" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="inputText" />
    ///  为空字符串 ("")。
    ///</exception>
    function EmulateRecognize(inputText: string): DNRecognitionResult; overload;
    ///<summary>
    ///  模拟语音识别器，用于同步的语音识别，使用音频位置的文本的短语的输入，并指定如何识别器处理之间的短语，然后加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="inputText">
    ///  识别操作输入的短语。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  识别操作的结果或 <see langword="null" />
    ///  如果操作不成功或未启用识别器。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  识别器具有加载任何语音识别语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="inputText" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="inputText" />
    ///  为空字符串 ("")。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="compareOptions" />
    ///  包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />
    ///  , ，<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />
    ///  , ，或 <see cref="F:System.Globalization.CompareOptions.StringSort" />
    ///  标志。
    ///</exception>
    function EmulateRecognize(inputText: string; compareOptions: DDN.mscorlib.DNCompareOptions): DNRecognitionResult; overload;
    ///<summary>
    ///  模拟特定单词的语音识别器，用于同步的语音识别，使用音频位置的文本的输入，并指定如何识别器处理之间的单词，并且加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="wordUnits">
    ///  包含有关识别操作的输入 word 单位的数组。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  识别操作的结果或 <see langword="null" />
    ///  如果操作不成功或未启用识别器。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  识别器具有加载任何语音识别语法。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="wordUnits" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="wordUnits" />
    ///  包含一个或多个 <see langword="null" />
    ///  元素。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="compareOptions" />
    ///  包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />
    ///  , ，<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />
    ///  , ，或 <see cref="F:System.Globalization.CompareOptions.StringSort" />
    ///  标志。
    ///</exception>
    function EmulateRecognize(wordUnits: TArray<DNRecognizedWordUnit>; compareOptions: DDN.mscorlib.DNCompareOptions): DNRecognitionResult; overload;
    ///<summary>
    ///  适配器会模拟语音识别器，用于异步语音识别的文本来代替音频短语的输入。
    ///</summary>
    ///  <param name="inputText">
    ///  有关识别操作输入。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  识别器已加载，没有语音识别语法或识别器有一个尚未完成的异步识别操作。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="inputText" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="inputText" />
    ///  为空字符串 ("")。
    ///</exception>
    procedure EmulateRecognizeAsync(inputText: string); overload;
    ///<summary>
    ///  模拟语音识别器，用于异步语音识别，使用音频位置的文本的短语的输入，并指定如何识别器处理之间的短语，然后加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="inputText">
    ///  识别操作输入的短语。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  识别器已加载，没有语音识别语法或识别器有一个尚未完成的异步识别操作。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="inputText" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="inputText" />
    ///  为空字符串 ("")。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="compareOptions" />
    ///  包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />
    ///  , ，<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />
    ///  , ，或 <see cref="F:System.Globalization.CompareOptions.StringSort" />
    ///  标志。
    ///</exception>
    procedure EmulateRecognizeAsync(inputText: string; compareOptions: DDN.mscorlib.DNCompareOptions); overload;
    ///<summary>
    ///  模拟语音识别器，使用数组的特定词的输入 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />
    ///  代替音频异步语音识别的对象，并指定如何识别器处理之间的单词，并且加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="wordUnits">
    ///  包含有关识别操作的输入 word 单位的数组。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  识别器已加载，没有语音识别语法或识别器有一个尚未完成的异步识别操作。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="wordUnits" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="wordUnits" />
    ///  包含一个或多个 <see langword="null" />
    ///  元素。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="compareOptions" />
    ///  包含 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />
    ///  , ，<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />
    ///  , ，或 <see cref="F:System.Globalization.CompareOptions.StringSort" />
    ///  标志。
    ///</exception>
    procedure EmulateRecognizeAsync(wordUnits: TArray<DNRecognizedWordUnit>; compareOptions: DDN.mscorlib.DNCompareOptions); overload;
    ///<summary>
    ///  识别器暂停以更新其状态的请求。
    ///</summary>
    procedure RequestRecognizerUpdate; overload;
    ///<summary>
    ///  识别器暂停以更新其状态，并提供用于关联的事件的用户令牌的请求。
    ///</summary>
    ///  <param name="userToken">
    ///  用户定义的信息，其中包含操作的信息。
    ///</param>
    procedure RequestRecognizerUpdate(userToken: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  识别器暂停以更新其状态，并为关联的事件提供某一偏移量和用户令牌的请求。
    ///</summary>
    ///  <param name="userToken">
    ///  用户定义的信息，其中包含操作的信息。
    ///</param>
    ///  <param name="audioPositionAheadToRaiseUpdate">
    ///  从当前的偏移量 <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
    ///  延迟该请求。
    ///</param>
    procedure RequestRecognizerUpdate(userToken: DDN.mscorlib.DNObject; audioPositionAheadToRaiseUpdate: DDN.mscorlib.DNTimeSpan); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置在此期间的时间间隔 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  在最终确定识别之前接受输入包含唯一静音。
    ///</summary>
    ///<returns>
    ///  指定静默间隔持续时间。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  此属性设置为小于 0 秒。
    ///</exception>
    property InitialSilenceTimeout: DDN.mscorlib.DNTimeSpan read get_InitialSilenceTimeout write set_InitialSilenceTimeout;
    ///<summary>
    ///  获取或设置在此期间的时间间隔 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  接受输入包含唯一背景噪音之前完成识别。
    ///</summary>
    ///<returns>
    ///  时间间隔持续时间。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  此属性设置为小于 0 秒。
    ///</exception>
    property BabbleTimeout: DDN.mscorlib.DNTimeSpan read get_BabbleTimeout write set_BabbleTimeout;
    ///<summary>
    ///  获取或设置时的无声间隔 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  最终确定识别操作之前将接受明确输入的末尾。
    ///</summary>
    ///<returns>
    ///  指定静默间隔持续时间。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  此属性设置为小于 0 秒或大于 10 秒。
    ///</exception>
    property EndSilenceTimeout: DDN.mscorlib.DNTimeSpan read get_EndSilenceTimeout write set_EndSilenceTimeout;
    ///<summary>
    ///  获取或设置时的无声间隔 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  最终确定识别操作之前将接受不明确的输入的末尾。
    ///</summary>
    ///<returns>
    ///  指定静默间隔持续时间。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  此属性设置为小于 0 秒或大于 10 秒。
    ///</exception>
    property EndSilenceTimeoutAmbiguous: DDN.mscorlib.DNTimeSpan read get_EndSilenceTimeoutAmbiguous write set_EndSilenceTimeoutAmbiguous;
    ///<summary>
    ///  获取一套 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象在此加载 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象的集合。
    ///</returns>
    property Grammars: DDN.mscorlib.DNReadOnlyCollection<DNGrammar> read get_Grammars;
    ///<summary>
    ///  获取有关当前实例的信息 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前的语音识别器有关的信息。
    ///</returns>
    property RecognizerInfo: DNRecognizerInfo read get_RecognizerInfo;
    ///<summary>
    ///  获取在接收音频的状态 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  。
    ///</summary>
    ///<returns>
    ///  语音识别器的音频输入的状态。
    ///</returns>
    property AudioState: DNAudioState read get_AudioState;
    ///<summary>
    ///  获取正在接收的音频级别 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  。
    ///</summary>
    ///<returns>
    ///  语音识别器，从 0 到 100 之间的输入音频级别。
    ///</returns>
    property AudioLevel: Int32 read get_AudioLevel;
    ///<summary>
    ///  获取当前的位置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  中正在处理的音频输入。
    ///</summary>
    ///<returns>
    ///  它正在处理的音频输入中的识别器位置。
    ///</returns>
    property RecognizerAudioPosition: DDN.mscorlib.DNTimeSpan read get_RecognizerAudioPosition;
    ///<summary>
    ///  获取在生成的提供的输入设备的音频流的当前位置 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中生成的输入设备的音频流的当前位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取正在接收的音频格式 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在对输入的音频格式 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  实例，或 <see langword="null" />
    ///  如果输入未配置或设置为 null 的输入。
    ///</returns>
    property AudioFormat: DNSpeechAudioFormatInfo read get_AudioFormat;
    ///<summary>
    ///  获取或设置备用识别结果的最大数 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    ///  返回为每个识别操作。
    ///</summary>
    ///<returns>
    ///  备用要返回的结果数。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
    ///  设置为小于 0 的值。
    ///</exception>
    property MaxAlternates: Int32 read get_MaxAlternates write set_MaxAlternates;
  end;

  TDNSpeechRecognitionEngine = class(TDNGenericImport<DNSpeechRecognitionEngineClass, DNSpeechRecognitionEngine>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechRecognizerClass = interface(DNObjectClass)
  ['{BACCC693-588E-5C71-A7E4-73DDF34C5279}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSpeechRecognizer;

  end;

  ///<summary>
  ///  在 Windows 桌面上提供对共享的语音识别服务可用的访问。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechRecognizer')]
  DNSpeechRecognizer = interface(DDN.mscorlib.DNIDisposable)
  ['{55961FA0-F1C5-32E9-A907-14B44AEF8ECE}']
  { getters & setters } 

    function get_State: DNRecognizerState;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_PauseRecognizerOnRecognition: Boolean;
    procedure set_PauseRecognizerOnRecognition(value: Boolean);
    function get_Grammars: DDN.mscorlib.DNReadOnlyCollection<DNGrammar>;
    function get_RecognizerInfo: DNRecognizerInfo;
    function get_AudioState: DNAudioState;
    function get_AudioLevel: Int32;
    function get_AudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_RecognizerAudioPosition: DDN.mscorlib.DNTimeSpan;
    function get_AudioFormat: DNSpeechAudioFormatInfo;
    function get_MaxAlternates: Int32;
    procedure set_MaxAlternates(value: Int32);

  { events } 

    procedure add_StateChanged(value: DDN.mscorlib.DNEventHandler<DNRecognition_StateChangedEventArgs>);
    procedure remove_StateChanged(value: DDN.mscorlib.DNEventHandler<DNRecognition_StateChangedEventArgs>);
    procedure add_EmulateRecognizeCompleted(value: DDN.mscorlib.DNEventHandler<DNEmulateRecognizeCompletedEventArgs>);
    procedure remove_EmulateRecognizeCompleted(value: DDN.mscorlib.DNEventHandler<DNEmulateRecognizeCompletedEventArgs>);
    procedure add_LoadGrammarCompleted(value: DDN.mscorlib.DNEventHandler<DNLoadGrammarCompletedEventArgs>);
    procedure remove_LoadGrammarCompleted(value: DDN.mscorlib.DNEventHandler<DNLoadGrammarCompletedEventArgs>);
    procedure add_SpeechDetected(value: DDN.mscorlib.DNEventHandler<DNSpeechDetectedEventArgs>);
    procedure remove_SpeechDetected(value: DDN.mscorlib.DNEventHandler<DNSpeechDetectedEventArgs>);
    procedure add_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);
    procedure remove_SpeechRecognized(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognizedEventArgs>);
    procedure add_SpeechRecognitionRejected(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognitionRejectedEventArgs>);
    procedure remove_SpeechRecognitionRejected(value: DDN.mscorlib.DNEventHandler<DNSpeechRecognitionRejectedEventArgs>);
    procedure add_RecognizerUpdateReached(value: DDN.mscorlib.DNEventHandler<DNRecognizerUpdateReachedEventArgs>);
    procedure remove_RecognizerUpdateReached(value: DDN.mscorlib.DNEventHandler<DNRecognizerUpdateReachedEventArgs>);
    procedure add_SpeechHypothesized(value: DDN.mscorlib.DNEventHandler<DNSpeechHypothesizedEventArgs>);
    procedure remove_SpeechHypothesized(value: DDN.mscorlib.DNEventHandler<DNSpeechHypothesizedEventArgs>);
    procedure add_AudioSignalProblemOccurred(value: DDN.mscorlib.DNEventHandler<DNAudioSignalProblemOccurredEventArgs>);
    procedure remove_AudioSignalProblemOccurred(value: DDN.mscorlib.DNEventHandler<DNAudioSignalProblemOccurredEventArgs>);
    procedure add_AudioLevelUpdated(value: DDN.mscorlib.DNEventHandler<DNAudioLevelUpdatedEventArgs>);
    procedure remove_AudioLevelUpdated(value: DDN.mscorlib.DNEventHandler<DNAudioLevelUpdatedEventArgs>);
    procedure add_AudioStateChanged(value: DDN.mscorlib.DNEventHandler<DNAudioStateChangedEventArgs>);
    procedure remove_AudioStateChanged(value: DDN.mscorlib.DNEventHandler<DNAudioStateChangedEventArgs>);

  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  对象。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  加载语音识别语法。
    ///</summary>
    ///  <param name="grammar">
    ///  若要加载语音识别语法。
    ///</param>
    procedure LoadGrammar(grammar: DNGrammar);
    ///<summary>
    ///  异步加载语音识别语法。
    ///</summary>
    ///  <param name="grammar">
    ///  若要加载语音识别语法。
    ///</param>
    procedure LoadGrammarAsync(grammar: DNGrammar);
    ///<summary>
    ///  卸载共享的识别器从指定的语言识别语法。
    ///</summary>
    ///  <param name="grammar">
    ///  若要卸载该语法。
    ///</param>
    procedure UnloadGrammar(grammar: DNGrammar);
    ///<summary>
    ///  卸载共享的识别器从外的所有语音识别语法。
    ///</summary>
    procedure UnloadAllGrammars;
    ///<summary>
    ///  适配器会模拟共享的语音识别器，使用文本而不音频进行同步的语音识别的短语的输入。
    ///</summary>
    ///  <param name="inputText">
    ///  有关识别操作输入。
    ///</param>
    ///<returns>
    ///  对于识别操作中，识别结果或 <see langword="null" />
    ///  , ，如果该操作不成功或 Windows 语音识别中 休眠 状态。
    ///</returns>
    function EmulateRecognize(inputText: string): DNRecognitionResult; overload;
    ///<summary>
    ///  模拟共享的语音识别器，用于同步的语音识别，而不音频使用文本短语的输入，并指定如何识别器处理之间的短语，然后加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="inputText">
    ///  识别操作输入的短语。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  对于识别操作中，识别结果或 <see langword="null" />
    ///  , ，如果该操作不成功或 Windows 语音识别中 休眠 状态。
    ///</returns>
    function EmulateRecognize(inputText: string; compareOptions: DDN.mscorlib.DNCompareOptions): DNRecognitionResult; overload;
    ///<summary>
    ///  模拟特定单词的共享的语音识别器，使用文本而不音频进行同步的语音识别的输入，并指定如何识别器处理之间的单词，并且加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="wordUnits">
    ///  包含有关识别操作的输入 word 单位的数组。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  对于识别操作中，识别结果或 <see langword="null" />
    ///  , ，如果该操作不成功或 Windows 语音识别中 休眠 状态。
    ///</returns>
    function EmulateRecognize(wordUnits: TArray<DNRecognizedWordUnit>; compareOptions: DDN.mscorlib.DNCompareOptions): DNRecognitionResult; overload;
    ///<summary>
    ///  适配器会模拟共享的语音识别器，使用文本而不音频异步语音识别的短语的输入。
    ///</summary>
    ///  <param name="inputText">
    ///  有关识别操作输入。
    ///</param>
    procedure EmulateRecognizeAsync(inputText: string); overload;
    ///<summary>
    ///  模拟共享的语音识别器，用于异步语音识别，而不音频使用文本短语的输入，并指定如何识别器处理之间的短语，然后加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="inputText">
    ///  识别操作输入的短语。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    procedure EmulateRecognizeAsync(inputText: string; compareOptions: DDN.mscorlib.DNCompareOptions); overload;
    ///<summary>
    ///  模拟特定单词的共享的语音识别器，用于异步语音识别，而不音频使用文本的输入，并指定如何识别器处理之间的单词，并且加载的语音识别语法的 Unicode 比较。
    ///</summary>
    ///  <param name="wordUnits">
    ///  包含有关识别操作的输入 word 单位的数组。
    ///</param>
    ///  <param name="compareOptions">
    ///  描述要用于模拟的识别操作的比较类型的枚举值的按位组合。
    ///</param>
    procedure EmulateRecognizeAsync(wordUnits: TArray<DNRecognizedWordUnit>; compareOptions: DDN.mscorlib.DNCompareOptions); overload;
    ///<summary>
    ///  请求共享的识别暂停，并更新其状态。
    ///</summary>
    procedure RequestRecognizerUpdate; overload;
    ///<summary>
    ///  共享的识别器暂停并更新其状态和关联的事件提供的用户令牌的请求。
    ///</summary>
    ///  <param name="userToken">
    ///  用户定义的信息，其中包含操作的信息。
    ///</param>
    procedure RequestRecognizerUpdate(userToken: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  共享的识别器暂停并更新其状态和关联的事件提供偏移量和用户令牌的请求。
    ///</summary>
    ///  <param name="userToken">
    ///  用户定义的信息，其中包含操作的信息。
    ///</param>
    ///  <param name="audioPositionAheadToRaiseUpdate">
    ///  从当前的偏移量 <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
    ///  延迟该请求。
    ///</param>
    procedure RequestRecognizerUpdate(userToken: DDN.mscorlib.DNObject; audioPositionAheadToRaiseUpdate: DDN.mscorlib.DNTimeSpan); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取状态 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///   篈 <see langword="SpeechRecognizer" />
    ///  对象。
    ///</returns>
    property State: DNRecognizerState read get_State;
    ///<summary>
    ///  获取或设置一个值，该值指示是否此 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  对象已准备好处理语音。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  对象在语音识别执行; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置一个值，该值指示是否共享的识别时会暂停识别操作应用程序处理 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    ///  事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果等待处理输入，而处理任何应用程序共享的识别 <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    ///  事件; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property PauseRecognizerOnRecognition: Boolean read get_PauseRecognizerOnRecognition write set_PauseRecognizerOnRecognition;
    ///<summary>
    ///  获取一套 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  对象在此加载 <see cref="T:System.Speech.Recognition.SpeechRecognizer" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  一套 <see cref="T:System.Speech.Recognition.Grammar" />
    ///  应用程序加载到共享的识别器的当前实例的对象。
    ///</returns>
    property Grammars: DDN.mscorlib.DNReadOnlyCollection<DNGrammar> read get_Grammars;
    ///<summary>
    ///  获取共享的语音识别器有关的信息。
    ///</summary>
    ///<returns>
    ///  有关共享的语音识别器的信息。
    ///</returns>
    property RecognizerInfo: DNRecognizerInfo read get_RecognizerInfo;
    ///<summary>
    ///  获取语音识别器正在接收音频的状态。
    ///</summary>
    ///<returns>
    ///  语音识别器的音频输入的状态。
    ///</returns>
    property AudioState: DNAudioState read get_AudioState;
    ///<summary>
    ///  获取语音识别器正在接收的音频级别。
    ///</summary>
    ///<returns>
    ///  语音识别器，从 0 到 100 之间的输入音频级别。
    ///</returns>
    property AudioLevel: Int32 read get_AudioLevel;
    ///<summary>
    ///  获取生成的提供给语音识别器的输入设备的音频流的当前位置。
    ///</summary>
    ///<returns>
    ///  音频语音识别器通过其接收输入的输入流中的当前位置。
    ///</returns>
    property AudioPosition: DDN.mscorlib.DNTimeSpan read get_AudioPosition;
    ///<summary>
    ///  获取正在处理的音频输入中的识别器的当前位置。
    ///</summary>
    ///<returns>
    ///  它正在处理的音频输入中的识别器位置。
    ///</returns>
    property RecognizerAudioPosition: DDN.mscorlib.DNTimeSpan read get_RecognizerAudioPosition;
    ///<summary>
    ///  获取语音识别器正在接收的音频格式。
    ///</summary>
    ///<returns>
    ///  语音识别器的音频输入的格式或 <see langword="null" />
    ///  如果未配置为识别器的输入。
    ///</returns>
    property AudioFormat: DNSpeechAudioFormatInfo read get_AudioFormat;
    ///<summary>
    ///  获取或设置共享的识别器返回的每个识别操作的备用识别结果最大数目。
    ///</summary>
    ///<returns>
    ///  语音识别器返回的每个识别操作的备用结果最大数量。
    ///</returns>
    property MaxAlternates: Int32 read get_MaxAlternates write set_MaxAlternates;
  end;

  TDNSpeechRecognizer = class(TDNGenericImport<DNSpeechRecognizerClass, DNSpeechRecognizer>) end;

  //-------------namespace: System.Speech.Recognition----------------
  DNSpeechUIClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59830B4A-8EED-5C0F-8E14-6471B1DBC974}']
  { static methods } 

    ///<summary>
    ///  将有关识别操作状态的状态和描述性文本发送到语音平台用户界面。
    ///</summary>
    ///  <param name="result">
    ///  有效的 <see cref="T:System.Speech.Recognition.RecognitionResult" />
    ///  实例。
    ///</param>
    ///  <param name="feedback">
    ///  一个 <see cref="T:System.String" />
    ///  包含有关生成的识别操作的注释 <see cref="T:System.Speech.Recognition.RecognitionResult" />
    ///  <paramref name="result" />
    ///  。
    ///</param>
    ///  <param name="isSuccessfulAction">
    ///  指示应用程序是否将标识操作视为成功操作的 <see langword="bool" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果提供给方法（<paramref name="Feedback" />
    ///  和 <paramref name="isSuccessfulAction" />
    ///  的信息成功用于语音平台用户界面，则为 <see langword="true" />
    ///  ，如果操作失败，则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function SendTextFeedback(result: DNRecognitionResult; feedback: string; isSuccessfulAction: Boolean): Boolean;

  end;

  ///<summary>
  ///  在语音平台用户界面中显示的标识操作提供文本和状态信息。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SpeechUI')]
  DNSpeechUI = interface(DDN.mscorlib.DNObject)
  ['{BDA7F10E-A7AD-3066-A4DE-C1862E589238}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSpeechUI = class(TDNGenericImport<DNSpeechUIClass, DNSpeechUI>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1B8F995-4B70-5AEE-A451-6B3B25CD0298}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSrgsDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类指定的位置的 xml 文档，用于填写 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</summary>
    ///  <param name="path">
    ///  SRGS XML 文件的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  是一个空字符串。
    ///</exception>
    {class} function init(path: string): DNSrgsDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类的实例从 <see cref="T:System.Xml.XmlReader" />
    ///  引用 XML 格式语法文件。
    ///</summary>
    ///  <param name="srgsGrammar"><see cref="T:System.Xml.XmlReader" />
    ///  已创建对象， <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  XML 实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(srgsGrammar: DDN.System.Xml.DNXmlReader): DNSrgsDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类 <see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="builder"><see cref="T:System.Speech.Recognition.GrammarBuilder" />
    ///  用于创建对象 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="builder" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(builder: DNGrammarBuilder): DNSrgsDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类，并指定 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  对象为根的语法规则。
    ///</summary>
    ///  <param name="grammarRootRule"><see langword="root rule" />
    ///  中 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(grammarRootRule: DNSrgsRule): DNSrgsDocument; overload;

  end;

  ///<summary>
  ///  定义用于生成强类型化的运行时遵循的语法的设计时对象 Speech Recognition Grammar Specification (SRGS) Version 1.0。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsDocument')]
  DNSrgsDocument = interface(DDN.mscorlib.DNObject)
  ['{B7BF4B01-2EB8-3E2B-A7D8-24748240B062}']
  { getters & setters } 

    function get_XmlBase: DDN.System.DNUri;
    procedure set_XmlBase(value: DDN.System.DNUri);
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_Root: DNSrgsRule;
    procedure set_Root(value: DNSrgsRule);
    function get_Mode: DNSrgsGrammarMode;
    procedure set_Mode(value: DNSrgsGrammarMode);
    function get_PhoneticAlphabet: DNSrgsPhoneticAlphabet;
    procedure set_PhoneticAlphabet(value: DNSrgsPhoneticAlphabet);
    function get_Rules: DNSrgsRulesCollection;
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_CodeBehind: DDN.mscorlib.DNCollection<string>;
    function get_Debug: Boolean;
    procedure set_Debug(value: Boolean);
    function get_Script: string;
    procedure set_Script(value: string);
    function get_ImportNamespaces: DDN.mscorlib.DNCollection<string>;
    function get_AssemblyReferences: DDN.mscorlib.DNCollection<string>;

  { methods } 

    ///<summary>
    ///  内容写入 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象传递给一个 XML 格式语法文件，符合 Speech Recognition Grammar Specification (SRGS) Version 1.0。
    ///</summary>
    ///  <param name="srgsGrammar"><see cref="T:System.Xml.XmlWriter" />
    ///  用来写入 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure WriteSrgs(srgsGrammar: DDN.System.Xml.DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置基 URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  当前基 URI <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</returns>
    property XmlBase: DDN.System.DNUri read get_XmlBase write set_XmlBase;
    ///<summary>
    ///  获取或设置的区域性信息<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Globalization.CultureInfo" />
    ///  对象，其中包含的当前区域性信息<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  分配给的值<see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
    ///  是<see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  分配给的值<see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
    ///  是<see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
    ///  。
    ///</exception>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    ///<summary>
    ///  获取或设置的根规则 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  返回指定为的根规则的规则 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</returns>
    property Root: DNSrgsRule read get_Root write set_Root;
    ///<summary>
    ///  获取或设置的模式 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  识别模式 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</returns>
    property Mode: DNSrgsGrammarMode read get_Mode write set_Mode;
    ///<summary>
    ///  获取或设置的音标字母 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  返回必须用于指定在自定义发音音标字母 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
    ///  对象。
    ///</returns>
    property PhoneticAlphabet: DNSrgsPhoneticAlphabet read get_PhoneticAlphabet write set_PhoneticAlphabet;
    ///<summary>
    ///  获取当前为定义的规则的集合 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  返回为定义的规则 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  对象。
    ///</returns>
    property Rules: DNSrgsRulesCollection read get_Rules;
    ///<summary>
    ///  获取或设置用于中的内联代码的编程语言 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
    ///  属性返回的编程语言的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  当前设置。
    ///</returns>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  获取或设置的命名空间 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
    ///  属性返回当前的命名空间 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取的代码隐藏信息 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
    ///  属性返回一个字符串集合包含的代码隐藏文档列表。
    ///</returns>
    property CodeBehind: DDN.mscorlib.DNCollection<string> read get_CodeBehind;
    ///<summary>
    ///  获取或设置是否应将行号添加到内联脚本。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
    ///  属性将返回 <see langword="true" />
    ///  如果行号应添加以便进行调试; 否则为该属性返回 <see langword="false" />
    ///  。
    ///</returns>
    property Debug: Boolean read get_Debug write set_Debug;
    ///<summary>
    ///  获取或设置.NET 脚本编写语言的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</summary>
    ///<returns><see langword="Script" />
    ///  属性返回的当前.NET 脚本编写语言 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  类。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
    ///  属性设置为 null。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  尝试设置 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
    ///  属性设置为一个空字符串。
    ///</exception>
    property Script: string read get_Script write set_Script;
    ///<summary>
    ///  获取当前相关的命名空间 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
    ///  属性将返回包含列表中的相关命名空间的字符串集合 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</returns>
    property ImportNamespaces: DDN.mscorlib.DNCollection<string> read get_ImportNamespaces;
    ///<summary>
    ///  获取程序集引用的信息 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  实例。
    ///</summary>
    ///<returns><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
    ///  属性返回一个字符串集合，其中包含的程序集引用列表。
    ///</returns>
    property AssemblyReferences: DDN.mscorlib.DNCollection<string> read get_AssemblyReferences;
  end;

  TDNSrgsDocument = class(TDNGenericImport<DNSrgsDocumentClass, DNSrgsDocument>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsGrammarCompilerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{806684BA-6D7A-5915-BAD0-855C22DCB85A}']
  { static methods } 

    ///<summary>
    ///  将 XML 格式语法文件编译为一个二进制语法文件.cfg 扩展名，将输出发送到流。
    ///</summary>
    ///  <param name="inputPath">
    ///  要编译的文件的路径。
    ///</param>
    ///  <param name="outputStream">
    ///  接收的编译结果流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputPath" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="outputStream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="inputPath" />
    ///  是一个空字符串。
    ///</exception>
    {class} procedure Compile(inputPath: string; outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  编译 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  的对象置于.cfg 扩展名的二进制语法文件，并将输出发送到流。
    ///</summary>
    ///  <param name="srgsGrammar">
    ///  若要编译该语法。
    ///</param>
    ///  <param name="outputStream">
    ///  接收的编译结果流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="outputStream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Compile(srgsGrammar: DNSrgsDocument; outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  编译数据的引用的 XML 格式语法文件 <see cref="T:System.Xml.XmlReader" />
    ///  到.cfg 扩展名的二进制语法文件，并将输出发送到流。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  读取该语法。
    ///  语法可位于物理文件中或在内存中。
    ///</param>
    ///  <param name="outputStream">
    ///  将接收的编译结果流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="outputStream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure Compile(reader: DDN.System.Xml.DNXmlReader; outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  将多个 SRGS 语法编译成 DLL。
    ///</summary>
    ///  <param name="inputPaths">
    ///  若要编译的语法的列表。
    ///</param>
    ///  <param name="outputPath">
    ///  输出 DLL 的路径。
    ///</param>
    ///  <param name="referencedAssemblies">
    ///  从输入的语法引用的程序集的列表。
    ///</param>
    ///  <param name="keyFile">
    ///  包含一对密钥，从而能够输出 DLL 进行签名的文件的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputPaths" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="outputPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="outputPath" />
    ///  是一个空字符串。
    ///  中的任何元素 <paramref name="inputPaths" />
    ///  数组是 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure CompileClassLibrary(inputPaths: TArray<string>; outputPath: string; referencedAssemblies: TArray<string>; keyFile: string); overload;
    ///<summary>
    ///  将 SRGS 文档编译成 DLL。
    ///</summary>
    ///  <param name="srgsGrammar"><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    ///  ，其中包含要编译的语法。
    ///</param>
    ///  <param name="outputPath">
    ///  输出 DLL 的路径。
    ///</param>
    ///  <param name="referencedAssemblies">
    ///  从输入的语法引用的程序集的列表。
    ///</param>
    ///  <param name="keyFile">
    ///  包含一对密钥，从而能够输出 DLL 进行签名的文件的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="outputPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="outputPath" />
    ///  是一个空字符串。
    ///</exception>
    {class} procedure CompileClassLibrary(srgsGrammar: DNSrgsDocument; outputPath: string; referencedAssemblies: TArray<string>; keyFile: string); overload;
    ///<summary>
    ///  将 SRGS 语法编译成 DLL。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  读取该语法。
    ///</param>
    ///  <param name="outputPath">
    ///  输出 DLL 的路径。
    ///</param>
    ///  <param name="referencedAssemblies">
    ///  从输入的语法引用的程序集的列表。
    ///</param>
    ///  <param name="keyFile">
    ///  包含一对密钥，从而能够输出 DLL 进行签名的文件的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="outputPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="outputPath" />
    ///  是一个空字符串。
    ///</exception>
    {class} procedure CompileClassLibrary(reader: DDN.System.Xml.DNXmlReader; outputPath: string; referencedAssemblies: TArray<string>; keyFile: string); overload;

  end;

  ///<summary>
  ///  编译 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  ///  和 XML 格式语法文件为二进制语法.cfg 扩展名的文件，并将输出发送到流。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler')]
  DNSrgsGrammarCompiler = interface(DDN.mscorlib.DNObject)
  ['{FC8F69D6-82FC-3077-B31F-FE90832F3964}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSrgsGrammarCompiler = class(TDNGenericImport<DNSrgsGrammarCompilerClass, DNSrgsGrammarCompiler>) end;

  //-------------namespace: System.Speech.Recognition.SrgsGrammar----------------
  DNSrgsRuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{936502DD-2CE5-524C-AE9D-F3A1330E7541}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  类，并指定该规则的标识符。
    ///</summary>
    ///  <param name="id">
    ///  规则的标识符。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id" />
    ///  为空。
    ///</exception><exception cref="T:System.FormatException"><paramref name="id" />
    ///  不正确的规则标识符。
    ///</exception>
    {class} function init(id: string): DNSrgsRule; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  数组中的类 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  对象。
    ///</summary>
    ///  <param name="id">
    ///  规则的标识符。
    ///</param>
    ///  <param name="elements">
    ///  一个数组 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  元素。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///  <paramref name="elements" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id" />
    ///  为空。
    ///</exception><exception cref="T:System.FormatException"><paramref name="id" />
    ///  不正确的规则标识符。
    ///</exception>
    {class} function init(id: string; elements: TArray<DNSrgsElement>): DNSrgsRule; overload;

  end;

  ///<summary>
  ///  表示语法规则。
  ///</summary>
  [DNTypeName('System.Speech.Recognition.SrgsGrammar.SrgsRule')]
  DNSrgsRule = interface(DDN.mscorlib.DNObject)
  ['{4C27DA5F-22FB-3055-BF3C-6E52FC782F00}']
  { getters & setters } 

    function get_Elements: DDN.mscorlib.DNCollection<DNSrgsElement>;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Scope: DNSrgsRuleScope;
    procedure set_Scope(value: DNSrgsRuleScope);
    function get_BaseClass: string;
    procedure set_BaseClass(value: string);
    function get_Script: string;
    procedure set_Script(value: string);
    function get_OnInit: string;
    procedure set_OnInit(value: string);
    function get_OnParse: string;
    procedure set_OnParse(value: string);
    function get_OnError: string;
    procedure set_OnError(value: string);
    function get_OnRecognition: string;
    procedure set_OnRecognition(value: string);

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  到 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  对象。
    ///</summary>
    ///  <param name="element">
    ///  一个对象，继承自 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  ，并指定可以识别什么。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="element" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(element: DNSrgsElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的集合 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsElement" />
    ///  中的对象 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  在规则中的元素的集合。
    ///</returns>
    property Elements: DDN.mscorlib.DNCollection<DNSrgsElement> read get_Elements;
    ///<summary>
    ///  获取或设置规则的标识符。
    ///</summary>
    ///<returns>
    ///  规则的标识符。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  尝试将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id" />
    ///  设置为无效值。
    ///</exception>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置是否可以激活规则，用于识别和其他规则，可以引用该规则。
    ///</summary>
    ///<returns>
    ///  一个值设置为该规则的作用域。
    ///</returns>
    property Scope: DNSrgsRuleScope read get_Scope write set_Scope;
    ///<summary>
    ///  目前不支持此属性。
    ///</summary>
    ///<returns>
    ///  不支持。
    ///</returns>
    property BaseClass: string read get_BaseClass write set_BaseClass;
    ///<summary>
    ///  目前不支持此属性。
    ///</summary>
    ///<returns>
    ///  不支持。
    ///</returns>
    property Script: string read get_Script write set_Script;
    ///<summary>
    ///  目前不支持此属性。
    ///</summary>
    ///<returns>
    ///  不支持。
    ///</returns>
    property OnInit: string read get_OnInit write set_OnInit;
    ///<summary>
    ///  目前不支持此属性。
    ///</summary>
    ///<returns>
    ///  不支持。
    ///</returns>
    property OnParse: string read get_OnParse write set_OnParse;
    ///<summary>
    ///  目前不支持此属性。
    ///</summary>
    ///<returns>
    ///  不支持。
    ///</returns>
    property OnError: string read get_OnError write set_OnError;
    ///<summary>
    ///  目前不支持此属性。
    ///</summary>
    ///<returns>
    ///  不支持。
    ///</returns>
    property OnRecognition: string read get_OnRecognition write set_OnRecognition;
  end;

  TDNSrgsRule = class(TDNGenericImport<DNSrgsRuleClass, DNSrgsRule>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNInstalledVoiceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F3938146-2A1A-5F4F-A10B-CC94D856127B}']
  end;

  ///<summary>
  ///  包含有关 Windows 中安装的语音合成的声音的信息。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.InstalledVoice')]
  DNInstalledVoice = interface(DDN.mscorlib.DNObject)
  ['{3B96E379-6DCD-3D97-AC03-41A6B44A4A42}']
  { getters & setters } 

    function get_VoiceInfo: DNVoiceInfo;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    ///<summary>
    ///  确定给定对象是否为 <see cref="T:System.Speech.Synthesis.InstalledVoice" />
    ///  的实例且等于 <see cref="T:System.Speech.Synthesis.InstalledVoice" />
    ///  的当前实例。
    ///</summary>
    ///  <param name="obj">
    ///  可强制转换为 <see cref="T:System.Speech.Synthesis.InstalledVoice" />
    ///  的实例的对象。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Speech.Synthesis.InstalledVoice" />
    ///  的当前实例等于从 <paramref name="obj" />
    ///  参数中获取的实例，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供 InstalledVoice 对象的哈希代码。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Speech.Synthesis.InstalledVoice" />
    ///  对象的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取有关语音的信息，例如区域性、名称、性别和年龄。
    ///</summary>
    ///<returns>
    ///  有关已安装语音的信息。
    ///</returns>
    property VoiceInfo: DNVoiceInfo read get_VoiceInfo;
    ///<summary>
    ///  获取或设置某个声音是否可用来生成语音。
    ///</summary>
    ///<returns>
    ///  返回表示声音的启用状态的 <see langword="bool" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNInstalledVoice = class(TDNGenericImport<DNInstalledVoiceClass, DNInstalledVoice>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNPromptClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8361B87-257D-519B-9CEA-304FFE503BC8}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  类的新实例，并指定要朗读的文本。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  要朗读的文本。
    ///</param>
    {class} function init(textToSpeak: string): DNPrompt; overload;
    ///<summary>
    ///  从 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象创建 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="promptBuilder">
    ///  要讲述的内容。
    ///</param>
    {class} function init(promptBuilder: DNPromptBuilder): DNPrompt; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  类的新实例，并指定要朗读的文本以及其格式是纯文本还是标记语言。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  要朗读的文本。
    ///</param>
    ///  <param name="media">
    ///  用来指定文本格式的值。
    ///</param>
    {class} function init(textToSpeak: string; media: DNSynthesisTextFormat): DNPrompt; overload;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
  ///  可以呈现的内容（文本或音频文件）的相关信息。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.Prompt')]
  DNPrompt = interface(DDN.mscorlib.DNObject)
  ['{0E5E20DF-F951-3932-AF44-AE2B15F941DF}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  是否播放完毕的信息。
    ///</summary>
    ///<returns>
    ///  如果提示播放完毕，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNPrompt = class(TDNGenericImport<DNPromptClass, DNPrompt>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNFilePromptClass = interface(DNPromptClass)
  ['{59C35C7B-65A0-5E1B-94DC-7667610ED31E}']
  { constructors } 

    ///<summary>
    ///  创建的新实例 <see cref="T:System.Speech.Synthesis.FilePrompt" />
    ///  类，并指定该文件和其媒体类型的路径。
    ///</summary>
    ///  <param name="path">
    ///  将包含提示的内容文件的路径。
    ///</param>
    ///  <param name="media">
    ///  该文件的媒体类型。
    ///</param>
    {class} function init(path: string; media: DNSynthesisMediaType): DNFilePrompt; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Speech.Synthesis.FilePrompt" />
    ///  类，并指定位置的文件和其媒体类型。
    ///</summary>
    ///  <param name="promptFile">
    ///  将包含提示的内容文件的 URI。
    ///</param>
    ///  <param name="media">
    ///  该文件的媒体类型。
    ///</param>
    {class} function init(promptFile: DDN.System.DNUri; media: DNSynthesisMediaType): DNFilePrompt; overload;

  end;

  ///<summary>
  ///  表示从文件创建的提示。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.FilePrompt')]
  DNFilePrompt = interface(DNPrompt)
  ['{F422D9CF-2F0A-3FE2-8ADA-0BF552D16F9E}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  是否播放完毕的信息。
    ///</summary>
    ///<returns>
    ///  如果提示播放完毕，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNFilePrompt = class(TDNGenericImport<DNFilePromptClass, DNFilePrompt>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNPromptBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{691A97B3-BDC8-5D94-BEEC-A92840A6657E}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPromptBuilder; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  类的新实例并指定区域性。
    ///</summary>
    ///  <param name="culture">
    ///  提供有关特定区域性的信息，如其语言、区域性的名称、写入系统、使用的日历以及如何设置日期和排序字符串。
    ///</param>
    {class} function init(culture: DDN.mscorlib.DNCultureInfo): DNPromptBuilder; overload;

  end;

  ///<summary>
  ///  创建空的 <see cref="T:System.Speech.Synthesis.Prompt" />
  ///  对象，并为添加内容、选择语音、控件语音属性和控件朗读单词的发音提供方法。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptBuilder')]
  DNPromptBuilder = interface(DDN.mscorlib.DNObject)
  ['{C6CB7F85-CC43-30F8-815E-291781340168}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);

  { methods } 

    ///<summary>
    ///  清除 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的内容。
    ///</summary>
    procedure ClearContent;
    ///<summary>
    ///  指定要追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象的文本。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含要发言文本的字符串。
    ///</param>
    procedure AppendText(textToSpeak: string); overload;
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并为该文本指定语速。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含要发言文本的字符串。
    ///</param>
    ///  <param name="rate">
    ///  应用于文本的语速的值。
    ///</param>
    procedure AppendText(textToSpeak: string; rate: DNPromptRate); overload;
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并指定朗读该文本的音量。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含要发言文本的字符串。
    ///</param>
    ///  <param name="volume">
    ///  应用于文本的朗读音量的值（响度）。
    ///</param>
    procedure AppendText(textToSpeak: string; volume: DNPromptVolume); overload;
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并为该文本指定强调程度。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含要发言文本的字符串。
    ///</param>
    ///  <param name="emphasis">
    ///  要应用于文本的强调或重音的值。
    ///</param>
    procedure AppendText(textToSpeak: string; emphasis: DNPromptEmphasis); overload;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的样式开始。
    ///</summary>
    ///  <param name="style">
    ///  要开始的样式。
    ///</param>
    procedure StartStyle(style: DNPromptStyle);
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的样式结束。
    ///</summary>
    procedure EndStyle;
    ///<summary>
    ///  指示合成器更改 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音并为新的语音指定条件。
    ///</summary>
    ///  <param name="voice">
    ///  要使用的语音的条件。
    ///</param>
    procedure StartVoice(voice: DNVoiceInfo); overload;
    ///<summary>
    ///  指示合成器更改 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音并指定要使用的语音的名称。
    ///</summary>
    ///  <param name="name">
    ///  要使用的语音的名称。
    ///</param>
    procedure StartVoice(name: string); overload;
    ///<summary>
    ///  指示合成器更改 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音并指定要使用的语音的性别。
    ///</summary>
    ///  <param name="gender">
    ///  要使用的语音的性别。
    ///</param>
    procedure StartVoice(gender: DNVoiceGender); overload;
    ///<summary>
    ///  指示合成器更改 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音并指定新语音的性别和年龄。
    ///</summary>
    ///  <param name="gender">
    ///  要使用的新语音的性别。
    ///</param>
    ///  <param name="age">
    ///  要使用的语音的年龄。
    ///</param>
    procedure StartVoice(gender: DNVoiceGender; age: DNVoiceAge); overload;
    ///<summary>
    ///  指示合成器更改 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音并指定其性别、年龄以及与指定的性别和年龄匹配的首选语音。
    ///</summary>
    ///  <param name="gender">
    ///  要使用的语音的性别。
    ///</param>
    ///  <param name="age">
    ///  要使用的语音的年龄。
    ///</param>
    ///  <param name="voiceAlternate">
    ///  在多个语音与 <paramref name="gender" />
    ///  和 <paramref name="age" />
    ///  参数相匹配时指定首选语音的整数。
    ///</param>
    procedure StartVoice(gender: DNVoiceGender; age: DNVoiceAge; voiceAlternate: Int32); overload;
    ///<summary>
    ///  指示合成器更改 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音并指定要使用的语音的区域性。
    ///</summary>
    ///  <param name="culture">
    ///  提供有关特定区域性的信息，如语言、区域性的名称、写入系统、使用的日历以及如何设置日期和排序字符串。
    ///</param>
    procedure StartVoice(culture: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的语音使用结束。
    ///</summary>
    procedure EndVoice;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的段落开始。
    ///</summary>
    procedure StartParagraph; overload;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中指定区域性中的段落开始。
    ///</summary>
    ///  <param name="culture">
    ///  提供有关特定区域性的信息，如语言、区域性的名称、写入系统、使用的日历以及如何设置日期和排序字符串。
    ///</param>
    procedure StartParagraph(culture: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的段落结束。
    ///</summary>
    procedure EndParagraph;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的句子开始。
    ///</summary>
    procedure StartSentence; overload;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中指定区域性中的句子开始。
    ///</summary>
    ///  <param name="culture">
    ///  提供有关特定区域性的信息，如语言、区域性的名称、写入系统、使用的日历以及如何设置日期和排序字符串。
    ///</param>
    procedure StartSentence(culture: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  指定 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象中的句子结束。
    ///</summary>
    procedure EndSentence;
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并使用 <see cref="T:System.Speech.Synthesis.SayAs" />
    ///  枚举的成员指定内容类型。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含要发言文本的字符串。
    ///</param>
    ///  <param name="sayAs">
    ///  文本的内容类型。
    ///</param>
    procedure AppendTextWithHint(textToSpeak: string; sayAs: DNSynthesis_SayAs); overload;
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象本，<see cref="T:System.String" />
    ///  指定该文本的内容类型。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含要发言文本的字符串。
    ///</param>
    ///  <param name="sayAs">
    ///  文本的内容类型。
    ///</param>
    procedure AppendTextWithHint(textToSpeak: string; sayAs: string); overload;
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并为该文本指定发音。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含使用语言传统字母表写入形式的单词的字符串。
    ///</param>
    ///  <param name="pronunciation">
    ///  包含要以国际音标 (IPA) 进行朗读的电话的字符串。
    ///</param>
    procedure AppendTextWithPronunciation(textToSpeak: string; pronunciation: string);
    ///<summary>
    ///  将文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并指定在该追加的文本位置处朗读的别名文本。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  包含文本表示形式的字符串。
    ///</param>
    ///  <param name="substitute">
    ///  包含要发言文本的字符串。
    ///</param>
    procedure AppendTextWithAlias(textToSpeak: string; substitute: string);
    ///<summary>
    ///  将中断添加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    procedure AppendBreak; overload;
    ///<summary>
    ///  将中断添加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象，并指定其强度（持续时间）。
    ///</summary>
    ///  <param name="strength">
    ///  指示中断的持续时间，使用以下增加值：
    ///</param>
    procedure AppendBreak(strength: DNPromptBreak); overload;
    ///<summary>
    ///  将指定持续时间的中断追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="duration">
    ///  在计时周期的时间，一个刻度等于 100 纳秒。
    ///</param>
    procedure AppendBreak(duration: DDN.mscorlib.DNTimeSpan); overload;
    ///<summary>
    ///  将指定的音频文件追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  。
    ///</summary>
    ///  <param name="path">
    ///  音频文件的完全限定路径。
    ///</param>
    procedure AppendAudio(path: string); overload;
    ///<summary>
    ///  将指定 URI 中的音频文件追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  。
    ///</summary>
    ///  <param name="audioFile">
    ///  音频文件的 URI。
    ///</param>
    procedure AppendAudio(audioFile: DDN.System.DNUri); overload;
    ///<summary>
    ///  将指定的音频文件和替代文本追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  。
    ///</summary>
    ///  <param name="audioFile">
    ///  音频文件的 URI。
    ///</param>
    ///  <param name="alternateText">
    ///  包含表示音频的替代文本的字符串。
    ///</param>
    procedure AppendAudio(audioFile: DDN.System.DNUri; alternateText: string); overload;
    ///<summary>
    ///  将书签追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  。
    ///</summary>
    ///  <param name="bookmarkName">
    ///  一个包含追加书签名称的字符串。
    ///</param>
    procedure AppendBookmark(bookmarkName: string);
    ///<summary>
    ///  将一个 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象追加到另一个 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="promptBuilder">
    ///  要追加的内容。
    ///</param>
    procedure AppendPromptBuilder(promptBuilder: DNPromptBuilder);
    ///<summary>
    ///  将指定路径中的 SSML 文件追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="path">
    ///  要追加的 SSML 文件的完全限定路径。
    ///</param>
    procedure AppendSsml(path: string); overload;
    ///<summary>
    ///  将指定 URL 中的 SSML 文件追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="ssmlFile">
    ///  要追加的 SSML 文件的完全限定 URI。
    ///</param>
    procedure AppendSsml(ssmlFile: DDN.System.DNUri); overload;
    ///<summary>
    ///  追加一个 XMLReader 对象，它引用 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象的 SSML 提示。
    ///</summary>
    ///  <param name="ssmlFile">
    ///  要追加的 XML 文件的完全限定名称。
    ///</param>
    procedure AppendSsml(ssmlFile: DDN.System.Xml.DNXmlReader); overload;
    ///<summary>
    ///  将包含 SSML 标记的指定字符串追加到 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="ssmlMarkup">
    ///  一个包含 SSML 标记的字符串。
    ///</param>
    procedure AppendSsmlMarkup(ssmlMarkup: string);
    ///<summary>
    ///  返回从 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象生成的 SSML。
    ///</summary>
    ///<returns>
    ///  返回从 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象生成的作为单个行的 SSML。
    ///</returns>
    function ToXml: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  是否为空。
    ///</summary>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象的区域性信息。
    ///</summary>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
  end;

  TDNPromptBuilder = class(TDNGenericImport<DNPromptBuilderClass, DNPromptBuilder>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNPromptStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BFCAA7C-9D5C-5610-8D61-9F231CB6CE09}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Synthesis.PromptStyle" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPromptStyle; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Synthesis.PromptStyle" />
    ///  类，并指定该样式的语速的设置。
    ///</summary>
    ///  <param name="rate">
    ///  语速的样式设置。
    ///</param>
    {class} function init(rate: DNPromptRate): DNPromptStyle; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Synthesis.PromptStyle" />
    ///  类，并指定该样式的朗读音量的设置。
    ///</summary>
    ///  <param name="volume">
    ///  卷 （响度） 的样式的设置。
    ///</param>
    {class} function init(volume: DNPromptVolume): DNPromptStyle; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Speech.Synthesis.PromptStyle" />
    ///  类，并指定该样式的强调的设置。
    ///</summary>
    ///  <param name="emphasis">
    ///  表示样式的强调设置。
    ///</param>
    {class} function init(emphasis: DNPromptEmphasis): DNPromptStyle; overload;

  end;

  ///<summary>
  ///  定义包含的强调、 速率和卷设置谈到提示样式。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.PromptStyle')]
  DNPromptStyle = interface(DDN.mscorlib.DNObject)
  ['{82EEF0A9-F45D-33AE-8CD7-9ECFE00AB1D3}']
  { getters & setters } 

    function get_Rate: DNPromptRate;
    procedure set_Rate(value: DNPromptRate);
    function get_Volume: DNPromptVolume;
    procedure set_Volume(value: DNPromptVolume);
    function get_Emphasis: DNPromptEmphasis;
    procedure set_Emphasis(value: DNPromptEmphasis);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置样式的语速的设置。
    ///</summary>
    ///<returns>
    ///  返回样式的语速的设置。
    ///</returns>
    property Rate: DNPromptRate read get_Rate write set_Rate;
    ///<summary>
    ///  获取或设置样式的卷 （响度） 的设置。
    ///</summary>
    ///<returns>
    ///  返回为卷 （响度） 的样式设置。
    ///</returns>
    property Volume: DNPromptVolume read get_Volume write set_Volume;
    ///<summary>
    ///  获取或设置样式的强调的设置。
    ///</summary>
    ///<returns>
    ///  返回表示样式的强调的设置。
    ///</returns>
    property Emphasis: DNPromptEmphasis read get_Emphasis write set_Emphasis;
  end;

  TDNPromptStyle = class(TDNGenericImport<DNPromptStyleClass, DNPromptStyle>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNSpeechSynthesizerClass = interface(DNObjectClass)
  ['{CC4869AC-395C-522A-8ACF-6CBB54CC9E34}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSpeechSynthesizer;

  end;

  ///<summary>
  ///  提供对已安装的语音合成引擎的功能的访问。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.SpeechSynthesizer')]
  DNSpeechSynthesizer = interface(DDN.mscorlib.DNIDisposable)
  ['{A0D7143C-6953-369F-A166-70A7FF5C7915}']
  { getters & setters } 

    function get_State: DNSynthesizerState;
    function get_Rate: Int32;
    procedure set_Rate(value: Int32);
    function get_Volume: Int32;
    procedure set_Volume(value: Int32);
    function get_Voice: DNVoiceInfo;

  { events } 

    procedure add_SpeakStarted(value: DDN.mscorlib.DNEventHandler<DNSpeakStartedEventArgs>);
    procedure remove_SpeakStarted(value: DDN.mscorlib.DNEventHandler<DNSpeakStartedEventArgs>);
    procedure add_SpeakCompleted(value: DDN.mscorlib.DNEventHandler<DNSpeakCompletedEventArgs>);
    procedure remove_SpeakCompleted(value: DDN.mscorlib.DNEventHandler<DNSpeakCompletedEventArgs>);
    procedure add_SpeakProgress(value: DDN.mscorlib.DNEventHandler<DNSpeakProgressEventArgs>);
    procedure remove_SpeakProgress(value: DDN.mscorlib.DNEventHandler<DNSpeakProgressEventArgs>);
    procedure add_BookmarkReached(value: DDN.mscorlib.DNEventHandler<DNBookmarkReachedEventArgs>);
    procedure remove_BookmarkReached(value: DDN.mscorlib.DNEventHandler<DNBookmarkReachedEventArgs>);
    procedure add_VoiceChange(value: DDN.mscorlib.DNEventHandler<DNVoiceChangeEventArgs>);
    procedure remove_VoiceChange(value: DDN.mscorlib.DNEventHandler<DNVoiceChangeEventArgs>);
    procedure add_PhonemeReached(value: DDN.mscorlib.DNEventHandler<DNPhonemeReachedEventArgs>);
    procedure remove_PhonemeReached(value: DDN.mscorlib.DNEventHandler<DNPhonemeReachedEventArgs>);
    procedure add_VisemeReached(value: DDN.mscorlib.DNEventHandler<DNVisemeReachedEventArgs>);
    procedure remove_VisemeReached(value: DDN.mscorlib.DNEventHandler<DNVisemeReachedEventArgs>);
    procedure add_StateChanged(value: DDN.mscorlib.DNEventHandler<DNSynthesis_StateChangedEventArgs>);
    procedure remove_StateChanged(value: DDN.mscorlib.DNEventHandler<DNSynthesis_StateChangedEventArgs>);

  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  在会话期间使用的对象并释放资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  按名称选择特定的语音。
    ///</summary>
    ///  <param name="name">
    ///  要选择的语音的名称。
    ///</param>
    procedure SelectVoice(name: string);
    ///<summary>
    ///  选择了特定性别语音。
    ///</summary>
    ///  <param name="gender">
    ///  要选择的语音的性别。
    ///</param>
    procedure SelectVoiceByHints(gender: DNVoiceGender); overload;
    ///<summary>
    ///  选择了特定的性别和年龄语音。
    ///</summary>
    ///  <param name="gender">
    ///  要选择的语音的性别。
    ///</param>
    ///  <param name="age">
    ///  要选择的语音的年龄。
    ///</param>
    procedure SelectVoiceByHints(gender: DNVoiceGender; age: DNVoiceAge); overload;
    ///<summary>
    ///  选择了特定性别和年龄、 语音基于语音有序的位置。
    ///</summary>
    ///  <param name="gender">
    ///  要选择的语音的性别。
    ///</param>
    ///  <param name="age">
    ///  要选择的语音的年龄。
    ///</param>
    ///  <param name="voiceAlternate">
    ///  要选择的语音的位置。
    ///</param>
    procedure SelectVoiceByHints(gender: DNVoiceGender; age: DNVoiceAge; voiceAlternate: Int32); overload;
    ///<summary>
    ///  选择与特定的性别、 年龄和区域设置，基于已进行排序的语音的位置的声音。
    ///</summary>
    ///  <param name="gender">
    ///  要选择的语音的性别。
    ///</param>
    ///  <param name="age">
    ///  要选择的语音的年龄。
    ///</param>
    ///  <param name="voiceAlternate">
    ///  要选择的语音的位置。
    ///</param>
    ///  <param name="culture">
    ///  要选择的语音的区域设置。
    ///</param>
    procedure SelectVoiceByHints(gender: DNVoiceGender; age: DNVoiceAge; voiceAlternate: Int32; culture: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  以异步方式说出字符串的内容。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  要说的文本。
    ///</param>
    ///<returns>
    ///  返回对象，其中包含要讲的内容。
    ///</returns>
    function SpeakAsync(textToSpeak: string): DNPrompt; overload;
    ///<summary>
    ///  以异步方式说出的内容 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  对象。
    ///</summary>
    ///  <param name="prompt">
    ///  要讲的内容。
    ///</param>
    procedure SpeakAsync(prompt: DNPrompt); overload;
    ///<summary>
    ///  以异步方式发言 <see cref="T:System.String" />
    ///  ，其中包含 SSML 标记。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  为朗读 SMML 标记。
    ///</param>
    function SpeakSsmlAsync(textToSpeak: string): DNPrompt;
    ///<summary>
    ///  以异步方式说出的内容 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="promptBuilder">
    ///  要讲的内容。
    ///</param>
    ///<returns>
    ///  返回对象，其中包含要讲的内容。
    ///</returns>
    function SpeakAsync(promptBuilder: DNPromptBuilder): DNPrompt; overload;
    ///<summary>
    ///  以同步方式说出字符串的内容。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  要说的文本。
    ///</param>
    procedure Speak(textToSpeak: string); overload;
    ///<summary>
    ///  以同步方式说出的内容 <see cref="T:System.Speech.Synthesis.Prompt" />
    ///  对象。
    ///</summary>
    ///  <param name="prompt">
    ///  要讲的内容。
    ///</param>
    procedure Speak(prompt: DNPrompt); overload;
    ///<summary>
    ///  以同步方式说出的内容 <see cref="T:System.Speech.Synthesis.PromptBuilder" />
    ///  对象。
    ///</summary>
    ///  <param name="promptBuilder">
    ///  要讲的内容。
    ///</param>
    procedure Speak(promptBuilder: DNPromptBuilder); overload;
    ///<summary>
    ///  以同步方式的发言 <see cref="T:System.String" />
    ///  ，其中包含 SSML 标记。
    ///</summary>
    ///  <param name="textToSpeak">
    ///  要说的 SSML 字符串。
    ///</param>
    procedure SpeakSsml(textToSpeak: string);
    ///<summary>
    ///  暂停 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    procedure Pause;
    ///<summary>
    ///  恢复 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象后已暂停。
    ///</summary>
    procedure Resume;
    ///<summary>
    ///  取消异步合成操作排队的提示。
    ///</summary>
    ///  <param name="prompt">
    ///  若要取消说话操作内容。
    ///</param>
    procedure SpeakAsyncCancel(prompt: DNPrompt);
    ///<summary>
    ///  取消所有排队、 异步语音合成操作。
    ///</summary>
    procedure SpeakAsyncCancelAll;
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象将输出追加到包含波形音频格式的文件。
    ///</summary>
    ///  <param name="path">
    ///  文件的路径。
    ///</param>
    procedure SetOutputToWaveFile(path: string); overload;
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象将输出追加到指定的格式的波形音频格式文件。
    ///</summary>
    ///  <param name="path">
    ///  文件的路径。
    ///</param>
    ///  <param name="formatInfo">
    ///  音频格式的信息。
    ///</param>
    procedure SetOutputToWaveFile(path: string; formatInfo: DNSpeechAudioFormatInfo); overload;
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  要将输出追加到包含波形音频格式的流对象。
    ///</summary>
    ///  <param name="audioDestination">
    ///  要向其追加合成输出流。
    ///</param>
    procedure SetOutputToWaveStream(audioDestination: DDN.mscorlib.DNStream);
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  要将输出追加到一个音频流对象。
    ///</summary>
    ///  <param name="audioDestination">
    ///  要向其追加合成输出流。
    ///</param>
    ///  <param name="formatInfo">
    ///  要用于合成输出的格式。
    ///</param>
    procedure SetOutputToAudioStream(audioDestination: DDN.mscorlib.DNStream; formatInfo: DNSpeechAudioFormatInfo);
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象将输出发送到默认音频设备。
    ///</summary>
    procedure SetOutputToDefaultAudioDevice;
    ///<summary>
    ///  配置 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象将从合成操作的输出不发送到设备、 文件或流。
    ///</summary>
    procedure SetOutputToNull;
    ///<summary>
    ///  获取提示 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  说到。
    ///</summary>
    ///<returns>
    ///  返回生成当前的谈话的提示对象。
    ///</returns>
    function GetCurrentlySpokenPrompt: DNPrompt;
    ///<summary>
    ///  返回所有已安装语音合成 （文本到语音） 的声音。
    ///</summary>
    ///<returns>
    ///  返回当前安装在系统上的语音只读集合。
    ///</returns>
    function GetInstalledVoices: DDN.mscorlib.DNReadOnlyCollection<DNInstalledVoice>; overload;
    ///<summary>
    ///  返回所有已安装的语音合成 （文本到语音转换） 语音支持特定的区域设置。
    ///</summary>
    ///  <param name="culture">
    ///  语音必须支持的区域设置。
    ///</param>
    ///<returns>
    ///  返回当前安装在系统上的语音支持指定的区域设置的只读集合。
    ///</returns>
    function GetInstalledVoices(culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNReadOnlyCollection<DNInstalledVoice>; overload;
    ///<summary>
    ///  将添加到词典 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    ///  <param name="uri">
    ///  词典信息的位置。
    ///</param>
    ///  <param name="mediaType">
    ///  媒体类型的字典。
    ///  媒体类型的值不区分大小写。
    ///</param>
    procedure AddLexicon(uri: DDN.System.DNUri; mediaType: string);
    ///<summary>
    ///  从字典中移除 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    ///  <param name="uri">
    ///  词典文档的位置。
    ///</param>
    procedure RemoveLexicon(uri: DDN.System.DNUri);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前语速  篈 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回当前说话状态 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</returns>
    property State: DNSynthesizerState read get_State;
    ///<summary>
    ///  获取或设置的语速 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回的语速 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象，从-10 到 10。
    ///</returns>
    property Rate: Int32 read get_Rate write set_Rate;
    ///<summary>
    ///  获取或设置输出量 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回的卷 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  , ，从 0 到 100 之间。
    ///</returns>
    property Volume: Int32 read get_Volume write set_Volume;
    ///<summary>
    ///  获取当前语音的有关信息 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回有关当前语音的信息 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />
    ///  对象。
    ///</returns>
    property Voice: DNVoiceInfo read get_Voice;
  end;

  TDNSpeechSynthesizer = class(TDNGenericImport<DNSpeechSynthesizerClass, DNSpeechSynthesizer>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNProsodyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7BADB5EB-8344-5B13-B70C-6C305E132508}']
  { constructors } 

    ///<summary>
    ///  构造的新实例 <see langword="Prosody" />
    ///  类。
    ///</summary>
    {class} function init: DNProsody;

  end;

  ///<summary>
  ///  表示语音属性设置的集合，如 <see langword="Pitch" />
  ///  , ，<see langword="Rate" />
  ///  和 <see langword="Volume" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.Prosody')]
  DNProsody = interface(DDN.mscorlib.DNObject)
  ['{F5BD8D17-2919-3623-B6B7-353B53476851}']
  { getters & setters } 

    function get_Pitch: DNProsodyNumber;
    procedure set_Pitch(value: DNProsodyNumber);
    function get_Range: DNProsodyNumber;
    procedure set_Range(value: DNProsodyNumber);
    function get_Rate: DNProsodyNumber;
    procedure set_Rate(value: DNProsodyNumber);
    function get_Duration: Int32;
    procedure set_Duration(value: Int32);
    function get_Volume: DNProsodyNumber;
    procedure set_Volume(value: DNProsodyNumber);

  { methods } 

    ///<summary>
    ///  返回一个数组，包含 <see langword="ContourPoints" />
    ///  的 <see langword="TextFragment" />
    ///  。
    ///</summary>
    function GetContourPoints: TArray<DNContourPoint>;
    ///<summary>
    ///  集 <see langword="ContourPoints" />
    ///  的 <see langword="TextFragment" />
    ///  。
    ///</summary>
    ///  <param name="points">
    ///  字节数组 <see langword="ContourPoint " />
    ///  对象。
    ///</param>
    procedure SetContourPoints(points: TArray<DNContourPoint>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的基线音调 <see langword="TextFragment" />
    ///  。
    ///</summary>
    property Pitch: DNProsodyNumber read get_Pitch write set_Pitch;
    ///<summary>
    ///  获取或设置的音调范围 <see langword="TextFragment" />
    ///  。
    ///</summary>
    property Range: DNProsodyNumber read get_Range write set_Range;
    ///<summary>
    ///  获取或设置的语速 <see langword="TextFragment" />
    ///  。
    ///</summary>
    property Rate: DNProsodyNumber read get_Rate write set_Rate;
    ///<summary>
    ///  获取或设置的持续时间 <see langword="TextFragment" />
    ///  以毫秒为单位。
    ///</summary>
    ///<returns>
    ///  以毫秒为单位的所需的时间朗读该文本值。
    ///</returns>
    property Duration: Int32 read get_Duration write set_Duration;
    ///<summary>
    ///  获取或设置的朗读音量 （响度） 的 <see langword="TextFragment" />
    ///  。
    ///</summary>
    property Volume: DNProsodyNumber read get_Volume write set_Volume;
  end;

  TDNProsody = class(TDNGenericImport<DNProsodyClass, DNProsody>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNTtsEngine_SayAsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{31EAE651-B28D-5E41-BF26-3385D6A5913B}']
  { constructors } 

    ///<summary>
    ///  创建 SayAs 类的新实例。
    ///</summary>
    {class} function init: DNTtsEngine_SayAs;

  end;

  ///<summary>
  ///  包含有关内容类型 （如货币、 日期或地址） 或语言构造，以确定要发言文本的方式的信息。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.SayAs')]
  DNTtsEngine_SayAs = interface(DDN.mscorlib.DNObject)
  ['{05D5E642-02F8-3B94-B19F-ABE4010A9DB8}']
  { getters & setters } 

    function get_InterpretAs: string;
    procedure set_InterpretAs(value: string);
    function get_Format: string;
    procedure set_Format(value: string);
    function get_Detail: string;
    procedure set_Detail(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的值 interpret-as 属性 say-as 提示的 SSML 标记语言中的元素。
    ///</summary>
    property InterpretAs: string read get_InterpretAs write set_InterpretAs;
    ///<summary>
    ///  获取或设置的值 format 属性 say-as 提示的 SSML 标记语言中的元素。
    ///</summary>
    property Format: string read get_Format write set_Format;
    ///<summary>
    ///  获取或设置的值 detail 属性 say-as 提示的 SSML 标记语言中的元素。
    ///</summary>
    property Detail: string read get_Detail write set_Detail;
  end;

  TDNTtsEngine_SayAs = class(TDNGenericImport<DNTtsEngine_SayAsClass, DNTtsEngine_SayAs>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNSkipInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4EF0087-4851-56AB-B6E1-24619905FE34}']
  { constructors } 

    ///<summary>
    ///  创建 <see langword="SkipInfo" />
    ///  对象的新实例。
    ///</summary>
    {class} function init: DNSkipInfo;

  end;

  ///<summary>
  ///  提供有关文本的信息跳过的流项目。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.SkipInfo')]
  DNSkipInfo = interface(DDN.mscorlib.DNObject)
  ['{253B5749-6BCF-36DB-B92F-4DCCC7251BEA}']
  { getters & setters } 

    function get_Type: Int32;
    procedure set_Type(value: Int32);
    function get_Count: Int32;
    procedure set_Count(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要跳过的对象类型。
    ///</summary>
    ///<returns><see langword="int" />
    ///  表示的对象类型。
    ///</returns>
    property &Type: Int32 read get_Type write set_Type;
    ///<summary>
    ///  获取或设置要跳过的项数。
    ///</summary>
    ///<returns><see langword="int" />
    ///  包含项的数目。
    ///</returns>
    property Count: Int32 read get_Count write set_Count;
  end;

  TDNSkipInfo = class(TDNGenericImport<DNSkipInfoClass, DNSkipInfo>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNTextFragmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2F2C2E00-1248-5BEC-9417-0C437C017241}']
  { constructors } 

    ///<summary>
    ///  构造 <see langword="TextFragment" />
    ///  的新实例。
    ///</summary>
    {class} function init: DNTextFragment;

  end;

  ///<summary>
  ///  包含由语音 synthsizer 引擎消耗的文本和语音属性信息。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.TextFragment')]
  DNTextFragment = interface(DDN.mscorlib.DNObject)
  ['{67C83D9B-9F83-3F00-94BD-EF6393074BDC}']
  { getters & setters } 

    function get_State: DNFragmentState;
    procedure set_State(value: DNFragmentState);
    function get_TextToSpeak: string;
    procedure set_TextToSpeak(value: string);
    function get_TextOffset: Int32;
    procedure set_TextOffset(value: Int32);
    function get_TextLength: Int32;
    procedure set_TextLength(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置语音的特性信息 <see langword="TextFragment" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  实例返回，或用于设置语音的特性信息 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  。
    ///</returns>
    property State: DNFragmentState read get_State write set_State;
    ///<summary>
    ///  设置或获取该片段的语音文本。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="System.String" />
    ///  返回或可以用于设置要用于语音合成引擎通过生成音频输出的语音文本。
    ///</returns>
    property TextToSpeak: string read get_TextToSpeak write set_TextToSpeak;
    ///<summary>
    ///  获取或设置在片段的文本的起始位置。
    ///</summary>
    ///<returns><see langword="int" />
    ///  返回或可以用于设置字符的文本字符串与此代码段要发言关联的部分中的开始位置。
    ///</returns>
    property TextOffset: Int32 read get_TextOffset write set_TextOffset;
    ///<summary>
    ///  获取或设置片段的语音文本的长度。
    ///</summary>
    ///<returns><see langword="int" />
    ///  返回或可以用于设置长度，在字符中，此代码段要发言与关联的文本字符串。
    ///</returns>
    property TextLength: Int32 read get_TextLength write set_TextLength;
  end;

  TDNTextFragment = class(TDNGenericImport<DNTextFragmentClass, DNTextFragment>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNTtsEngineSsmlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0348736C-08F5-541E-B5D0-512CA1A58B63}']
  end;

  ///<summary>
  ///  抽象基类实现的所有文本到语音合成引擎。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.TtsEngineSsml')]
  DNTtsEngineSsml = interface(DDN.mscorlib.DNObject)
  ['{E015DDC1-44B9-3774-BF30-5752DC293D8C}']
  { methods } 

    ///<summary>
    ///  返回的最匹配的请求到特定的输出格式的支持合成器引擎的给定的 synthesize 引擎响应所支持的音频输出。
    ///</summary>
    ///  <param name="speakOutputFormat">
    ///  有效成员 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
    ///  指示请求的音频输出格式的类型的枚举。
    ///</param>
    ///  <param name="targetWaveFormat">
    ///  一个指向 <see langword="struct" />
    ///  包含请求的音频格式类型的详细信息设置 <paramref name="speakOutputFormat" />
    ///  参数。
    ///</param>
    ///<returns>
    ///  返回一个有效 <see langword="IntPtr" />
    ///  实例指 <see langword="struct" />
    ///  包含有关输出格式的详细的信息。
    ///</returns>
    function GetOutputFormat(speakOutputFormat: DNSpeakOutputFormat; targetWaveFormat: IntPtr): IntPtr;
    ///<summary>
    ///  将添加到词典 <see langword="Synthesizer" />
    ///<see langword="Voice" />
    ///  实现由当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
    ///  实例。
    ///</summary>
    ///  <param name="uri">
    ///  有效实例 <see langword="System.Uri" />
    ///  ，该值指示字典信息的位置。
    ///</param>
    ///  <param name="mediaType">
    ///  包含词典的媒体类型的字符串。
    ///  媒体类型有区分大小写。
    ///</param>
    ///  <param name="site">
    ///  对引用 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
    ///  用于与平台基础结构进行交互的接口。
    ///</param>
    procedure AddLexicon(uri: DDN.System.DNUri; mediaType: string; site: DNITtsEngineSite);
    ///<summary>
    ///  删除当前装入的词典 <see langword="Synthesizer" />
    ///<see langword="Voice" />
    ///  实现由当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
    ///  实例。
    ///</summary>
    ///  <param name="uri">
    ///  有效实例 <see langword="System.Uri" />
    ///  ，该值指示字典信息的位置。
    ///</param>
    ///  <param name="site">
    ///  对引用 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
    ///  接口传入的平台基础结构，以允许对基础结构资源的访问。
    ///</param>
    procedure RemoveLexicon(uri: DDN.System.DNUri; site: DNITtsEngineSite);
    ///<summary>
    ///  指定的呈现 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  数组中指定的输出格式。
    ///</summary>
    ///  <param name="fragment">
    ///  一个数组 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  包含文本到语音呈现的实例。
    ///</param>
    ///  <param name="waveHeader"><see langword="IntPtr" />
    ///  指向一个包含音频的输出格式的结构。
    ///</param>
    ///  <param name="site">
    ///  对引用 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
    ///  接口传入的平台基础结构，以允许对基础结构资源的访问。
    ///</param>
    procedure Speak(fragment: TArray<DNTextFragment>; waveHeader: IntPtr; site: DNITtsEngineSite);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTtsEngineSsml = class(TDNGenericImport<DNTtsEngineSsmlClass, DNTtsEngineSsml>) end;

  //-------------namespace: System.Speech.Synthesis----------------
  DNVoiceInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CF92CA8-086B-5882-8CB3-781297631A0B}']
  end;

  ///<summary>
  ///  表示一个已安装的语音合成引擎。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.VoiceInfo')]
  DNVoiceInfo = interface(DDN.mscorlib.DNObject)
  ['{153277F1-BCCA-3B91-8913-A797FC2B46F9}']
  { getters & setters } 

    function get_Gender: DNVoiceGender;
    function get_Age: DNVoiceAge;
    function get_Name: string;
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    function get_Id: string;
    function get_Description: string;
    function get_SupportedAudioFormats: DDN.mscorlib.DNReadOnlyCollection<DNSpeechAudioFormatInfo>;
    function get_AdditionalInfo: DDN.mscorlib.DNIDictionary<string, string>;

  { methods } 

    ///<summary>
    ///  比较具有指定的语音字段 <see cref="T:System.Speech.Synthesis.VoiceInfo" />
    ///  对象，以确定它们是否包含相同的值。
    ///</summary>
    ///  <param name="obj">
    ///  指定 <see cref="T:System.Speech.Synthesis.VoiceInfo" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  返回 <see langword="True" />
    ///  如果两个字段 <see cref="T:System.Speech.Synthesis.VoiceInfo" />
    ///  对象是否相等; 否则返回 <see langword="False" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  提供的哈希代码 VoiceInfo 对象。
    ///</summary>
    ///<returns>
    ///  当前的哈希代码 <see cref="T:System.Speech.Synthesis.VoiceInfo" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取语音的性别。
    ///</summary>
    ///<returns>
    ///  返回的语音的性别。
    ///</returns>
    property Gender: DNVoiceGender read get_Gender;
    ///<summary>
    ///  获取语音的年龄。
    ///</summary>
    ///<returns>
    ///  返回语音的年龄。
    ///</returns>
    property Age: DNVoiceAge read get_Age;
    ///<summary>
    ///  获取语音的名称。
    ///</summary>
    ///<returns>
    ///  返回的语音的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取的语音的区域性。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，它提供有关特定区域性，例如区域性、 书写系统、 使用的日历的名称的信息以及如何设置日期格式和排序字符串。
    ///</returns>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture;
    ///<summary>
    ///  获取的语音的 ID。
    ///</summary>
    ///<returns>
    ///  返回为语音的标识符。
    ///</returns>
    property Id: string read get_Id;
    ///<summary>
    ///  获取的语音的说明。
    ///</summary>
    ///<returns>
    ///  返回的语音的说明。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取语音所支持的音频格式的集合。
    ///</summary>
    ///<returns>
    ///  返回支持语音的音频格式的集合。
    ///</returns>
    property SupportedAudioFormats: DDN.mscorlib.DNReadOnlyCollection<DNSpeechAudioFormatInfo> read get_SupportedAudioFormats;
    ///<summary>
    ///  获取有关所选声音的其他信息。
    ///</summary>
    ///<returns>
    ///  返回用于描述并标识语音的名称/值对的集合。
    ///</returns>
    property AdditionalInfo: DDN.mscorlib.DNIDictionary<string, string> read get_AdditionalInfo;
  end;

  TDNVoiceInfo = class(TDNGenericImport<DNVoiceInfoClass, DNVoiceInfo>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNContourPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B0117B85-91D4-57CD-BA57-F80F5FCC302C}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="start">
    ///  一个 <see cref="T:System.Single" />
    ///  ，它指定要应用的音调变化的点 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  。
    ///  这表示为的持续时间的已用百分比 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  在该点。
    ///</param>
    ///  <param name="change">
    ///  一个 <see cref="T:System.Single" />
    ///  ，它指定要提高或降低音调的量。
    ///</param>
    ///  <param name="changeType">
    ///  成员 <see cref="P:System.Speech.Synthesis.TtsEngine.ContourPoint.ChangeType" />
    ///  ，它指定要用于中指定的数字的单元 <paramref name="change" />
    ///  参数。
    ///</param>
    {class} function init(start: Single; change: Single; changeType: DNContourPointChangeType): DNContourPoint;

  end;

  ///<summary>
  ///  表示更改内容的语音的音调 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  ///  。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ContourPoint')]
  DNContourPoint = interface(DDN.mscorlib.DNValueType)
  ['{AD472970-8BA0-3921-A1B7-4369B2B5F562}']
  { getters & setters } 

    function get_Start: Single;
    function get_Change: Single;
    function get_ChangeType: DNContourPointChangeType;

  { methods } 

    ///<summary>
    ///  确定 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  的给定实例是否等于 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  的当前实例。
    ///</summary>
    ///  <param name="other">
    ///  一个实例 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  ，将与当前实例进行比较。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果这两个的当前实例 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  并通过提供 <paramref name="other" />
    ///  参数是否相等，否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNContourPoint): Boolean; overload;
    ///<summary>
    ///  确定给定的对象是否为的一个实例 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  和的当前实例等于 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  一个对象，可以强制转换为的一个实例 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果的当前实例 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  并从获取 <paramref name="obj" />
    ///  参数是否相等，否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Single" />
    ///  ，它指定要应用的音调变化的点 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  。
    ///  这表示为的持续时间的已用百分比 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  在该点。
    ///</summary>
    property Start: Single read get_Start;
    ///<summary>
    ///  获取值，该值表示量来提高或降低在某个点的音调 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  。
    ///</summary>
    property Change: Single read get_Change;
    ///<summary>
    ///  获取的成员 <see cref="P:System.Speech.Synthesis.TtsEngine.ContourPoint.ChangeType" />
    ///  ，它指定要用于中指定的数字的单元 <paramref name="change" />
    ///  参数 <see cref="T:System.Speech.Synthesis.TtsEngine.ContourPoint" />
    ///  对象。
    ///</summary>
    property ChangeType: DNContourPointChangeType read get_ChangeType;
  end;

  TDNContourPoint = class(TDNGenericImport<DNContourPointClass, DNContourPoint>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNFragmentStateClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{90A32FE5-1715-5F08-8D7A-C8334FB344C4}']
  { constructors } 

    ///<summary>
    ///  构造 <see langword="FragmentState" />
    ///  的新实例。
    ///</summary>
    ///  <param name="action">
    ///  指定语音合成操作的 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineAction" />
    ///  枚举的成员。
    ///</param>
    ///  <param name="langId">
    ///  所使用的语言的 ID。
    ///  对应于 XML xml:lang 特性。
    ///</param>
    ///  <param name="emphasis">
    ///  要应用于语音输出或暂停的焦点。
    ///</param>
    ///  <param name="duration">
    ///  为朗读 <see langword="TextFragment" />
    ///  的文本所分配的时间。
    ///</param>
    ///  <param name="sayAs"><see cref="T:System.Speech.Synthesis.TtsEngine.SayAs" />
    ///  类的成员，用于指示 <see langword="TextFragment" />
    ///  的文本类型以及精确呈现包含文本时所需的详细信息的级别。
    ///  对应于 SSML 规范中的 &lt;say-as&gt; XML 标记
    ///  该参数可能为 <see langword="null." />
    ///</param>
    ///  <param name="prosody">
    ///  一个 <see cref="T:System.Speech.Synthesis.TtsEngine.Prosody" />
    ///  对象，用于指示语音输出的特性（如音调、语速、音量）。
    ///  对应于 SSML 规范中的 &lt;prosody&gt; XML 标记。
    ///</param>
    ///  <param name="phonemes"><see langword="char" />
    ///  对象的数组，这些对象使用国际音标 (IPA) 规范提供 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  中包含的文本的语音发音。
    ///  对应于 SSML 规范中的 &lt;phoneme&gt; XML 标记。
    ///  此参数可能为 <see langword="null" />
    ///  。
    ///</param>
    {class} function init(action: DNTtsEngineAction; langId: Int32; emphasis: Int32; duration: Int32; sayAs: DNTtsEngine_SayAs; prosody: DNProsody; phonemes: TArray<Char>): DNFragmentState;

  end;

  ///<summary>
  ///  提供有关 <see langword="TextFragment" />
  ///  的详细信息。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.FragmentState')]
  DNFragmentState = interface(DDN.mscorlib.DNValueType)
  ['{525997F7-8BBC-3461-B3AA-FCE6E92CF438}']
  { getters & setters } 

    function get_Action: DNTtsEngineAction;
    function get_LangId: Int32;
    function get_Emphasis: Int32;
    function get_Duration: Int32;
    function get_SayAs: DNTtsEngine_SayAs;
    function get_Prosody: DNProsody;
    function get_Phoneme: TArray<Char>;

  { methods } 

    ///<summary>
    ///  确定 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  的给定实例是否等于 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  的当前实例。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  的实例
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  的当前实例和通过 <paramref name="other" />
    ///  参数提供的实例都描述了相同的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  状态，则返回 <see langword="true" />
    ///  。
    ///  如果当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  和 <paramref name="other" />
    ///  参数不支持相同的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  状态，则返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNFragmentState): Boolean; overload;
    ///<summary>
    ///  确定给定对象是否为等于 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  的当前实例的实例 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  可强制转换为 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  的实例的对象
    ///</param>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  的当前实例和从由 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  参数提供的对象获取的实例都描述的是相同的 <paramref name="obj" />
    ///  状态，则返回 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  。
    ///  如果当前 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  和 <paramref name="obj" />
    ///  参数不支持相同的 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  状态，则返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  一个 32 位带符号整数，它是此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回请求的语音合成器操作。
    ///</summary>
    ///<returns><see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineAction" />
    ///  的成员，用于指示 SSML 输入请求的语音合成操作。
    ///</returns>
    property Action: DNTtsEngineAction read get_Action;
    ///<summary>
    ///  返回当前 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  支持的语言。
    ///</summary>
    ///<returns>
    ///  返回一个 <see langword="int" />
    ///  ，它包含当前 <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" />
    ///  所使用的语言的标识符。
    ///</returns>
    property LangId: Int32 read get_LangId;
    ///<summary>
    ///  返回对如何强调 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  的说明。
    ///</summary>
    ///<returns>
    ///  返回一个 <see langword="int" />
    ///  值，此值指示如何强调 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  。
    ///</returns>
    property Emphasis: Int32 read get_Emphasis;
    ///<summary>
    ///  返回呈现 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  所需的时间。
    ///</summary>
    ///<returns>
    ///  返回一个 <see langword="int" />
    ///  ，它包含呈现 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  所需时间的以毫秒为单位的值。
    ///</returns>
    property Duration: Int32 read get_Duration;
    ///<summary>
    ///  返回有关从文本生成语音的上下文的信息。
    ///</summary>
    ///<returns>
    ///  如果语音合成引擎所用的 SSML 包含有关用于生成语音的上下文的详细信息，则返回一个值 <see cref="T:System.Speech.Synthesis.TtsEngine.SayAs" />
    ///  的实例；否则返回 <see langword="null" />
    ///  。
    ///</returns>
    property SayAs: DNTtsEngine_SayAs read get_SayAs;
    ///<summary>
    ///  返回有关语音输出的音调、语速和音量的详细信息。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Speech.Synthesis.TtsEngine.Prosody" />
    ///  的有效实例，它包含语音输出的语调、语速、音量设置以及对这些设置的更改。
    ///</returns>
    property Prosody: DNProsody read get_Prosody;
    ///<summary>
    ///  返回 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
    ///  的语音信息。
    ///</summary>
    property Phoneme: TArray<Char> read get_Phoneme;
  end;

  TDNFragmentState = class(TDNGenericImport<DNFragmentStateClass, DNFragmentState>) end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNProsodyNumberClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{FAEDDE9D-64DE-5E80-8708-56AFA348CC66}']
  { constructors } 

    ///<summary>
    ///  创建的新实例 ProsodyNumber 类，并指定 prosody 属性的标识符。
    ///</summary>
    ///  <param name="ssmlAttributeId">
    ///  Prosody 属性的标识符。
    ///</param>
    {class} function init(ssmlAttributeId: Int32): DNProsodyNumber; overload;
    ///<summary>
    ///  创建的新实例 ProsodyNumber 类，并指定 prosody 属性的值。
    ///</summary>
    ///  <param name="number">
    ///  Prosody 属性的值。
    ///</param>
    {class} function init(number: Single): DNProsodyNumber; overload;

  end;

  ///<summary>
  ///  指定 prosody 属性及其值。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.ProsodyNumber')]
  DNProsodyNumber = interface(DDN.mscorlib.DNValueType)
  ['{DEBA92EF-4492-3F4A-A0EF-3C601D47917A}']
  { getters & setters } 

    function get_SsmlAttributeId: Int32;
    function get_IsNumberPercent: Boolean;
    function get_Number: Single;
    function get_Unit: DNProsodyUnit;

  { methods } 

    ///<summary>
    ///  确定指定 ProsodyNumber 对象是否等于当前实例的 ProsodyNumber。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Speech.Synthesis.TtsEngine.ProsodyNumber" />
    ///  对象来评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="other" />
    ///  是否等于当前 <see cref="T:System.Speech.Synthesis.TtsEngine.ProsodyNumber" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNProsodyNumber): Boolean; overload;
    ///<summary>
    ///  确定指定的对象是否是实例 ProsodyNumber 和的当前实例等于 ProsodyNumber。
    ///</summary>
    ///  <param name="obj">
    ///  要计算的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是否等于当前 <see cref="T:System.Speech.Synthesis.TtsEngine.ProsodyNumber" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  提供的哈希代码 ProsodyNumber 对象。
    ///</summary>
    ///<returns>
    ///  哈希代码 <see cref="T:System.Speech.Synthesis.TtsEngine.ProsodyNumber" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个 SSML prosody 属性的标识符。
    ///</summary>
    ///<returns>
    ///  SSML prosody 属性的标识符。
    ///</returns>
    property SsmlAttributeId: Int32 read get_SsmlAttributeId;
    ///<summary>
    ///  获取是否 Number 属性表示一个百分比值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Speech.Synthesis.TtsEngine.ProsodyNumber.Number" />
    ///  表示一个百分比值，否则， <see langword="false" />
    ///  。
    ///</returns>
    property IsNumberPercent: Boolean read get_IsNumberPercent;
    ///<summary>
    ///  获取 SSML prosody 特性的数字值。
    ///</summary>
    ///<returns>
    ///  SSML prosody 属性的数值。
    ///</returns>
    property Number: Single read get_Number;
    ///<summary>
    ///  获取在其中指定的更改量的单位。
    ///</summary>
    ///<returns>
    ///  在其中指定的更改量，例如 Hz （赫兹） 或单位半音。
    ///</returns>
    property &Unit: DNProsodyUnit read get_Unit;
  end;

  TDNProsodyNumber = class(TDNGenericImport<DNProsodyNumberClass, DNProsodyNumber>)
  public const
    ///<summary>
    ///  包含一个值，表示 prosody 属性的设置。
    ///</summary>
   AbsoluteNumber = 2147483647;
  end;

  //-------------namespace: System.Speech.Synthesis.TtsEngine----------------
  DNSpeechEventInfoClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{AC6B0BA8-5677-555A-B0FE-2B40C496FBFA}']
  { constructors } 

    ///<summary>
    ///  Constucts 适当 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  。
    ///</summary>
    ///  <param name="eventId">
    ///  一个实例 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" />
    ///  ，该值指示这种语音平台事件 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象是处理。
    ///</param>
    ///  <param name="parameterType">
    ///  一个实例 <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" />
    ///  ，该值指示如何 <see langword="System.IntPtr" />
    ///  引用的 <paramref name="param2" />
    ///  将被解释，并通过暗示、 使用 <paramref name="param1" />
    ///  。
    ///</param>
    ///  <param name="param1">
    ///  一个整数值，该事件发出请求的实例时要传递到语音平台 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  构造生成。
    ///  此整数的确切含义隐式的值确定 <paramref name="parameterType" />
    ///  。
    ///</param>
    ///  <param name="param2">
    ///  一个 <see langword="System.IntPtr" />
    ///  引用对象的实例。
    ///  该事件发出请求的实例时要传递到语音平台 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  构造生成。
    ///  值显式定义的类型必须引用 <paramref name="parameterType" />
    ///  。
    ///  值 <see langword="System.IntPtr.Zero" />
    ///  。
    ///</param>
    {class} function init(eventId: Int16; parameterType: Int16; param1: Int32; param2: IntPtr): DNSpeechEventInfo;

  end;

  ///<summary>
  ///  用于指定类型的事件，并且其参数 （如果有） 要由自定义的综合语音引擎生成的呈现文本到语音转换的一部分。
  ///</summary>
  [DNTypeName('System.Speech.Synthesis.TtsEngine.SpeechEventInfo')]
  DNSpeechEventInfo = interface(DDN.mscorlib.DNValueType)
  ['{C3F71718-AF0A-3281-945D-140DE4D66124}']
  { getters & setters } 

    function get_EventId: Int16;
    function get_ParameterType: Int16;
    function get_Param1: Int32;
    function get_Param2: IntPtr;

  { methods } 

    ///<summary>
    ///  确定指定 SpeechEventInfo 对象是否等于当前实例的 SpeechEventInfo。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象来评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="other" />
    ///  是否等于当前 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DNSpeechEventInfo): Boolean; overload;
    ///<summary>
    ///  确定指定的对象是否是实例 SpeechEventInfo 和的当前实例等于 SpeechEventInfo。
    ///</summary>
    ///  <param name="obj">
    ///  要评估的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是否等于当前 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  提供的哈希代码 SpeechEventInfo 对象。
    ///</summary>
    ///<returns>
    ///  哈希代码 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取和设置语音平台事件其中的一个实例 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  用于对请求。
    ///</summary>
    ///<returns>
    ///  返回的一个成员 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" />
    ///  作为 <see langword="short" />
    ///  , ，事件类型，该值指示 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象是生成。
    ///</returns>
    property EventId: Int16 read get_EventId;
    ///<summary>
    ///  返回指向的对象的数据类型 <see langword="IntPtr" />
    ///  返回 <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
    ///  参数对当前 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="short" />
    ///  指向成员的相对应的值 <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" />
    ///  枚举并指示该对象的数据类型由指向 <see langword="IntPtr" />
    ///  返回 <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
    ///  参数用作第二个参数为当前的构造函数和 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  对象。
    ///</returns>
    property ParameterType: Int16 read get_ParameterType;
    ///<summary>
    ///  获取并设置 <see langword="integer" />
    ///  值 (<paramref name="param1" />
    ///  构造函数中) 将传递给语音平台生成一个事件的当前实例 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  用于对请求。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="integer" />
    ///  由当前实例的指定事件时要传递到语音平台 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  生成。
    ///</returns>
    property Param1: Int32 read get_Param1;
    ///<summary>
    ///  获取并设置 <see langword="System.IntPtr" />
    ///  实例 (<paramref name="param2" />
    ///  构造函数中) 引用的对象将传递给语音平台生成一个事件的当前实例 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  用于对请求。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="System.IntPtr" />
    ///  引用对象的当前实例的指定事件时要传递到语音平台 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
    ///  生成。
    ///</returns>
    property Param2: IntPtr read get_Param2;
  end;

  TDNSpeechEventInfo = class(TDNGenericImport<DNSpeechEventInfoClass, DNSpeechEventInfo>) end;


implementation


initialization
  LoadAssemblyModule('WPF\System.Speech.dll', True);

finalization

end.
