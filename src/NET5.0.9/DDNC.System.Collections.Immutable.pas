//----------------------------------------------------------------------------
//  System.Collections.Immutable.dll: System.Collections.Immutable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Collections.Immutable
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Collections.Immutable;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type


{ declares }

  DNIImmutableDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.IImmutableDictionary`2, namespace: System.Collections.Immutable
  DNIImmutableList<T> = interface; // type: System.Collections.Immutable.IImmutableList`1, namespace: System.Collections.Immutable
  DNIImmutableSet<T> = interface; // type: System.Collections.Immutable.IImmutableSet`1, namespace: System.Collections.Immutable
  DNIImmutableQueue<T> = interface; // type: System.Collections.Immutable.IImmutableQueue`1, namespace: System.Collections.Immutable
  DNIImmutableStack<T> = interface; // type: System.Collections.Immutable.IImmutableStack`1, namespace: System.Collections.Immutable
  DNImmutableArray_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1+Builder, namespace: System.Collections.Immutable
  DNImmutableArray = interface; // type: System.Collections.Immutable.ImmutableArray, namespace: System.Collections.Immutable
  DNImmutableDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2, namespace: System.Collections.Immutable
  DNImmutableDictionary_Builder<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2+Builder, namespace: System.Collections.Immutable
  DNImmutableDictionary = interface; // type: System.Collections.Immutable.ImmutableDictionary, namespace: System.Collections.Immutable
  DNImmutableHashSet<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1, namespace: System.Collections.Immutable
  DNImmutableHashSet_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1+Builder, namespace: System.Collections.Immutable
  DNImmutableHashSet = interface; // type: System.Collections.Immutable.ImmutableHashSet, namespace: System.Collections.Immutable
  DNImmutableInterlocked = interface; // type: System.Collections.Immutable.ImmutableInterlocked, namespace: System.Collections.Immutable
  DNImmutableList<T> = interface; // type: System.Collections.Immutable.ImmutableList`1, namespace: System.Collections.Immutable
  DNImmutableList_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableList`1+Builder, namespace: System.Collections.Immutable
  DNImmutableList = interface; // type: System.Collections.Immutable.ImmutableList, namespace: System.Collections.Immutable
  DNImmutableQueue<T> = interface; // type: System.Collections.Immutable.ImmutableQueue`1, namespace: System.Collections.Immutable
  DNImmutableQueue = interface; // type: System.Collections.Immutable.ImmutableQueue, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary_Builder<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2+Builder, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary, namespace: System.Collections.Immutable
  DNImmutableSortedSet<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1, namespace: System.Collections.Immutable
  DNImmutableSortedSet_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1+Builder, namespace: System.Collections.Immutable
  DNImmutableSortedSet = interface; // type: System.Collections.Immutable.ImmutableSortedSet, namespace: System.Collections.Immutable
  DNImmutableStack<T> = interface; // type: System.Collections.Immutable.ImmutableStack`1, namespace: System.Collections.Immutable
  DNImmutableStack = interface; // type: System.Collections.Immutable.ImmutableStack, namespace: System.Collections.Immutable
  DNImmutableArrayExtensions = interface; // type: System.Linq.ImmutableArrayExtensions, namespace: System.Linq
  DNImmutableArray<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1, namespace: System.Collections.Immutable
  DNImmutableArray_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2+Enumerator, namespace: System.Collections.Immutable
  DNImmutableHashSet_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableList_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableList`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableQueue_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableQueue`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator, namespace: System.Collections.Immutable
  DNImmutableSortedSet_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableStack_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableStack`1+Enumerator, namespace: System.Collections.Immutable


{ objects }

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableDictionary`2')]
  DNIImmutableDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyDictionary<TKey, TValue>)
  ['{39EFFA9F-1802-34FF-80E0-18981EBBD4D0}']
  { methods } 

    function Clear: DNIImmutableDictionary<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNIImmutableDictionary<TKey, TValue>;
    function AddRange(pairs: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNIImmutableDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNIImmutableDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNIImmutableDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNIImmutableDictionary<TKey, TValue>;
    function Remove(key: TKey): DNIImmutableDictionary<TKey, TValue>;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableList`1')]
  DNIImmutableList<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyList<T>)
  ['{26D524FD-8B27-3B73-9543-208B3FD97910}']
  { methods } 

    function Clear: DNIImmutableList<T>;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function LastIndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function Add(value: T): DNIImmutableList<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableList<T>;
    function Insert(index: Int32; element: T): DNIImmutableList<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableList<T>;
    function Remove(value: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNIImmutableList<T>;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>; overload;
    function RemoveRange(index: Int32; count: Int32): DNIImmutableList<T>; overload;
    function RemoveAt(index: Int32): DNIImmutableList<T>;
    function SetItem(index: Int32; value: T): DNIImmutableList<T>;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableSet`1')]
  DNIImmutableSet<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyCollection<T>)
  ['{B040AC84-1F1D-3505-8BE4-FB08563E0D03}']
  { methods } 

    function Clear: DNIImmutableSet<T>;
    function &Contains(value: T): Boolean;
    function Add(value: T): DNIImmutableSet<T>;
    function Remove(value: T): DNIImmutableSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableQueue`1')]
  DNIImmutableQueue<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{F1EE422F-4F18-3468-93B1-3C72CCDF2B29}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNIImmutableQueue<T>;
    function Peek: T;
    function Enqueue(value: T): DNIImmutableQueue<T>;
    function Dequeue: DNIImmutableQueue<T>;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableStack`1')]
  DNIImmutableStack<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{3740202A-E4E9-3C75-8459-DAE2011949BE}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNIImmutableStack<T>;
    function Push(value: T): DNIImmutableStack<T>;
    function Pop: DNIImmutableStack<T>;
    function Peek: T;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArray_BuilderClass<T> = interface(DNObjectClass)
  ['{C9956BCB-0C6E-5F06-ACF6-8A5CE12C80D1}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1+Builder')]
  DNImmutableArray_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{BD25AD2F-2B03-3F10-AF4A-D111E34DCDD6}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    procedure set_Count(value: Int32);

  { methods } 

    function ItemRef(index: Int32): T;
    function ToImmutable: DNImmutableArray<T>;
    function MoveToImmutable: DNImmutableArray<T>;
    procedure Insert(index: Int32; item: T);
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>); overload;
    procedure AddRange(items: TArray<T>); overload;
    procedure AddRange(items: TArray<T>; length: Int32); overload;
    procedure AddRange(items: DNImmutableArray<T>); overload;
    procedure AddRange(items: DNImmutableArray<T>; length: Int32); overload;
    procedure AddRange(items: DNImmutableArray_Builder<T>); overload;
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    function ToArray: TArray<T>;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; startIndex: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    procedure Reverse;
    procedure Sort; overload;
    procedure Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>); overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count write set_Count;
  end;

  TDNImmutableArray_Builder<T> = class(TDNGenericImport<DNImmutableArray_BuilderClass<T>, DNImmutableArray_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArrayClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5B0BFC0C-A0FF-544A-AA1B-E9452EFB4097}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray')]
  DNImmutableArray = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8073F1C6-76C8-3A7D-9B01-844D9B9FFA51}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableArray = class(TDNGenericImport<DNImmutableArrayClass, DNImmutableArray>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{7E266533-874A-561D-9734-8F0E7D5C1912}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableDictionary<TKey, TValue>;

  { static fields } 

    {class} property Empty: DNImmutableDictionary<TKey, TValue> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2')]
  DNImmutableDictionary<TKey, TValue> = interface(DNIImmutableDictionary<TKey, TValue>)
  ['{0332771A-4210-3805-879F-A4E0BEB70EFC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;

  { methods } 

    function Clear: DNImmutableDictionary<TKey, TValue>;
    function ToBuilder: DNImmutableDictionary_Builder<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNImmutableDictionary<TKey, TValue>;
    function AddRange(pairs: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNImmutableDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableDictionary<TKey, TValue>;
    function Remove(key: TKey): DNImmutableDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNImmutableDictionary<TKey, TValue>;
    function ContainsKey(key: TKey): Boolean;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>; valueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>): DNImmutableDictionary<TKey, TValue>; overload;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>): DNImmutableDictionary<TKey, TValue>; overload;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DNImmutableDictionary_Enumerator<TKey, TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
  end;

  TDNImmutableDictionary<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionaryClass<TKey, TValue>, DNImmutableDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionary_BuilderClass<TKey, TValue> = interface(DNObjectClass)
  ['{0EFD9757-DFF7-5748-A021-96152CAA27A9}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2+Builder')]
  DNImmutableDictionary_Builder<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{1B7D4576-FA27-35AF-9BD0-A0E46C017923}']
  { getters & setters } 

    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>);
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    procedure set_ValueComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>);
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;

  { methods } 

    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>);
    procedure RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>);
    function GetEnumerator: DNImmutableDictionary_Enumerator<TKey, TValue>;
    function GetValueOrDefault(key: TKey): TValue; overload;
    function GetValueOrDefault(key: TKey; defaultValue: TValue): TValue; overload;
    function ToImmutable: DNImmutableDictionary<TKey, TValue>;
    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function &Contains(item: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_KeyComparer write set_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer write set_ValueComparer;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
  end;

  TDNImmutableDictionary_Builder<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionary_BuilderClass<TKey, TValue>, DNImmutableDictionary_Builder<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionaryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{35145B1E-2CF7-55B5-92E2-897361C1061A}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary')]
  DNImmutableDictionary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B06545E3-7CC2-375E-942E-F37419F6A839}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableDictionary = class(TDNGenericImport<DNImmutableDictionaryClass, DNImmutableDictionary>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSetClass<T> = interface(DNObjectClass)
  ['{F0D0756D-58E5-58E6-95A1-2DEC23179392}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableHashSet<T>;

  { static fields } 

    {class} property Empty: DNImmutableHashSet<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1')]
  DNImmutableHashSet<T> = interface(DNIImmutableSet<T>)
  ['{8FEB9D64-D575-30D7-8E37-1B0982C9DB7D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;

  { methods } 

    function Clear: DNImmutableHashSet<T>;
    function ToBuilder: DNImmutableHashSet_Builder<T>;
    function Add(item: T): DNImmutableHashSet<T>;
    function Remove(item: T): DNImmutableHashSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function &Contains(item: T): Boolean;
    function WithComparer(equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableHashSet<T>;
    function GetEnumerator: DNImmutableHashSet_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_KeyComparer;
  end;

  TDNImmutableHashSet<T> = class(TDNGenericImport<DNImmutableHashSetClass<T>, DNImmutableHashSet<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSet_BuilderClass<T> = interface(DNObjectClass)
  ['{0FB3E3EA-FAB3-57CF-8E8F-84F99509B52F}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1+Builder')]
  DNImmutableHashSet_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyCollection<T>)
  ['{82A58747-03D4-3589-A7FC-16A832BB5343}']
  { getters & setters } 

    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>);

  { methods } 

    function GetEnumerator: DNImmutableHashSet_Enumerator<T>;
    function ToImmutable: DNImmutableHashSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function &Contains(item: T): Boolean;
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_KeyComparer write set_KeyComparer;
  end;

  TDNImmutableHashSet_Builder<T> = class(TDNGenericImport<DNImmutableHashSet_BuilderClass<T>, DNImmutableHashSet_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{92DEEC57-498D-5FB7-946A-7A3A6EA43910}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet')]
  DNImmutableHashSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7B386BA4-020F-3C72-9764-0E1139BBAB47}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableHashSet = class(TDNGenericImport<DNImmutableHashSetClass, DNImmutableHashSet>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableInterlockedClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{76F59F90-03AC-5839-A5FB-582A85DC0875}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableInterlocked')]
  DNImmutableInterlocked = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6022C260-C1C0-3CF4-BBE7-CA506CABE793}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableInterlocked = class(TDNGenericImport<DNImmutableInterlockedClass, DNImmutableInterlocked>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableListClass<T> = interface(DNObjectClass)
  ['{6E17D263-5586-5A14-A11C-64BBC18A1F07}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableList<T>;

  { static fields } 

    {class} property Empty: DNImmutableList<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1')]
  DNImmutableList<T> = interface(DNIImmutableList<T>)
  ['{4EB0C5B0-0E19-35F5-9B43-F5A884AC9C3A}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNImmutableList_Enumerator<T>;
    function Clear: DNImmutableList<T>;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function ItemRef(index: Int32): T;
    function ToBuilder: DNImmutableList_Builder<T>;
    function Add(value: T): DNImmutableList<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>;
    function Insert(index: Int32; item: T): DNImmutableList<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>;
    function Remove(value: T): DNImmutableList<T>; overload;
    function Remove(value: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function RemoveRange(index: Int32; count: Int32): DNImmutableList<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function RemoveAt(index: Int32): DNImmutableList<T>;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function SetItem(index: Int32; value: T): DNImmutableList<T>;
    function Replace(oldValue: T; newValue: T): DNImmutableList<T>; overload;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function Reverse: DNImmutableList<T>; overload;
    function Reverse(index: Int32; count: Int32): DNImmutableList<T>; overload;
    function Sort: DNImmutableList<T>; overload;
    function Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>): DNImmutableList<T>; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableList<T>; overload;
    function Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableList<T>; overload;
    procedure ForEach(action: DDNC.System.Private.CoreLib.DNAction<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function GetRange(index: Int32; count: Int32): DNImmutableList<T>;
    function Exists(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function Find(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function FindIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindLastIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function TrueForAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function &Contains(value: T): Boolean;
    function IndexOf(value: T): Int32; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
  end;

  TDNImmutableList<T> = class(TDNGenericImport<DNImmutableListClass<T>, DNImmutableList<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableList_BuilderClass<T> = interface(DNObjectClass)
  ['{83E53E61-79CD-54A5-95B7-8B76B738F3B6}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1+Builder')]
  DNImmutableList_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{FC7D8038-21D0-3DF2-8255-7964F0D71274}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function ItemRef(index: Int32): T;
    function IndexOf(item: T): Int32; overload;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNImmutableList_Enumerator<T>;
    procedure ForEach(action: DDNC.System.Private.CoreLib.DNAction<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function GetRange(index: Int32; count: Int32): DNImmutableList<T>;
    function Exists(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function Find(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function FindIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindLastIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function TrueForAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>); overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function ToImmutable: DNImmutableList<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNImmutableList_Builder<T> = class(TDNGenericImport<DNImmutableList_BuilderClass<T>, DNImmutableList_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableListClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7EA951E4-30E1-5120-A6B2-4E2CD12BE2DF}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList')]
  DNImmutableList = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5846805D-555D-3AC4-AAAD-F8B38F8BD2ED}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableList = class(TDNGenericImport<DNImmutableListClass, DNImmutableList>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueueClass<T> = interface(DNObjectClass)
  ['{C832FE3C-6597-5014-B032-8EAA1503AD9E}']
  { static getter & setter } 

    {class} function get_Empty: DNImmutableQueue<T>;

  { static propertys } 

    {class} property Empty: DNImmutableQueue<T> read get_Empty;
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue`1')]
  DNImmutableQueue<T> = interface(DNIImmutableQueue<T>)
  ['{8E97E4E0-B6C3-3AB0-A76B-384F0392D102}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNImmutableQueue<T>;
    function Peek: T;
    function PeekRef: T;
    function Enqueue(value: T): DNImmutableQueue<T>;
    function Dequeue: DNImmutableQueue<T>; overload;
    function Dequeue(out value: T): DNImmutableQueue<T>; overload;
    function GetEnumerator: DNImmutableQueue_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNImmutableQueue<T> = class(TDNGenericImport<DNImmutableQueueClass<T>, DNImmutableQueue<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueueClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B5E739C8-5329-5ED0-BBFD-A7206460F360}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue')]
  DNImmutableQueue = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{574A31A8-26DD-35EB-B841-C22EECA9D866}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableQueue = class(TDNGenericImport<DNImmutableQueueClass, DNImmutableQueue>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{62006772-9F42-5B95-9A4B-952053D4F12D}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableSortedDictionary<TKey, TValue>;

  { static fields } 

    {class} property Empty: DNImmutableSortedDictionary<TKey, TValue> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2')]
  DNImmutableSortedDictionary<TKey, TValue> = interface(DNIImmutableDictionary<TKey, TValue>)
  ['{704ED759-1DCB-35A0-B997-58EF57F23945}']
  { getters & setters } 

    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;

  { methods } 

    function Clear: DNImmutableSortedDictionary<TKey, TValue>;
    function ValueRef(key: TKey): TValue;
    function ToBuilder: DNImmutableSortedDictionary_Builder<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNImmutableSortedDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNImmutableSortedDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableSortedDictionary<TKey, TValue>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableSortedDictionary<TKey, TValue>;
    function Remove(value: TKey): DNImmutableSortedDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNImmutableSortedDictionary<TKey, TValue>;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>; valueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>): DNImmutableSortedDictionary<TKey, TValue>; overload;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNImmutableSortedDictionary<TKey, TValue>; overload;
    function ContainsValue(value: TValue): Boolean;
    function ContainsKey(key: TKey): Boolean;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function GetEnumerator: DNImmutableSortedDictionary_Enumerator<TKey, TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer;
    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_KeyComparer;
  end;

  TDNImmutableSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionaryClass<TKey, TValue>, DNImmutableSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionary_BuilderClass<TKey, TValue> = interface(DNObjectClass)
  ['{E568F73D-8712-51B2-A29B-953599DB1054}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2+Builder')]
  DNImmutableSortedDictionary_Builder<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{7220D789-8C0F-3F33-8948-20A00A436A1A}']
  { getters & setters } 

    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;
    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIComparer<TKey>);
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    procedure set_ValueComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>);

  { methods } 

    function ValueRef(key: TKey): TValue;
    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function &Contains(item: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function GetEnumerator: DNImmutableSortedDictionary_Enumerator<TKey, TValue>;
    function ContainsValue(value: TValue): Boolean;
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>);
    procedure RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>);
    function GetValueOrDefault(key: TKey): TValue; overload;
    function GetValueOrDefault(key: TKey; defaultValue: TValue): TValue; overload;
    function ToImmutable: DNImmutableSortedDictionary<TKey, TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_KeyComparer write set_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer write set_ValueComparer;
  end;

  TDNImmutableSortedDictionary_Builder<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionary_BuilderClass<TKey, TValue>, DNImmutableSortedDictionary_Builder<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionaryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8673B1F5-11C8-5D8E-BF4A-3D0F3428996D}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary')]
  DNImmutableSortedDictionary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{AD453486-3E9D-311C-A36E-6146BF739112}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableSortedDictionary = class(TDNGenericImport<DNImmutableSortedDictionaryClass, DNImmutableSortedDictionary>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSetClass<T> = interface(DNObjectClass)
  ['{86B7AAEF-2D89-5A00-BB5D-1C45EE060088}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableSortedSet<T>;

  { static fields } 

    {class} property Empty: DNImmutableSortedSet<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1')]
  DNImmutableSortedSet<T> = interface(DNIImmutableSet<T>)
  ['{787E8886-A90B-3CA1-9397-14616EC06DA8}']
  { getters & setters } 

    function get_Max: T;
    function get_Min: T;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T>;

  { methods } 

    function Clear: DNImmutableSortedSet<T>;
    function ItemRef(index: Int32): T;
    function ToBuilder: DNImmutableSortedSet_Builder<T>;
    function Add(value: T): DNImmutableSortedSet<T>;
    function Remove(value: T): DNImmutableSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function WithComparer(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableSortedSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function IndexOf(item: T): Int32;
    function &Contains(value: T): Boolean;
    function GetEnumerator: DNImmutableSortedSet_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Max: T read get_Max;
    property Min: T read get_Min;
    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_KeyComparer;
  end;

  TDNImmutableSortedSet<T> = class(TDNGenericImport<DNImmutableSortedSetClass<T>, DNImmutableSortedSet<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSet_BuilderClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{FC0A8D29-72D4-5056-ADC1-13654C256788}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1+Builder')]
  DNImmutableSortedSet_Builder<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{98E35618-EFA6-393A-95C8-22372315639C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): T;
    function get_Max: T;
    function get_Min: T;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIComparer<T>);

  { methods } 

    function ItemRef(index: Int32): T;
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNImmutableSortedSet_Enumerator<T>;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function ToImmutable: DNImmutableSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: T read get_Item; default;
    property Max: T read get_Max;
    property Min: T read get_Min;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_KeyComparer write set_KeyComparer;
  end;

  TDNImmutableSortedSet_Builder<T> = class(TDNGenericImport<DNImmutableSortedSet_BuilderClass<T>, DNImmutableSortedSet_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{922661F3-DA3D-5695-A9F3-DC44C374F666}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet')]
  DNImmutableSortedSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{05A3CAC1-E3EA-3C5C-9EC2-880568E2ECC4}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableSortedSet = class(TDNGenericImport<DNImmutableSortedSetClass, DNImmutableSortedSet>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStackClass<T> = interface(DNObjectClass)
  ['{81F277AA-C1EE-5900-AD89-B8152FB4254B}']
  { static getter & setter } 

    {class} function get_Empty: DNImmutableStack<T>;

  { static propertys } 

    {class} property Empty: DNImmutableStack<T> read get_Empty;
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack`1')]
  DNImmutableStack<T> = interface(DNIImmutableStack<T>)
  ['{BA41BBE7-3179-362D-8D9B-D55C68B2A94E}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNImmutableStack<T>;
    function Peek: T;
    function PeekRef: T;
    function Push(value: T): DNImmutableStack<T>;
    function Pop: DNImmutableStack<T>; overload;
    function Pop(out value: T): DNImmutableStack<T>; overload;
    function GetEnumerator: DNImmutableStack_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNImmutableStack<T> = class(TDNGenericImport<DNImmutableStackClass<T>, DNImmutableStack<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStackClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B469B1FC-3C98-5173-97C3-4F31926C3134}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack')]
  DNImmutableStack = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{358C99FD-DB57-3D06-98BE-19A49208134E}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableStack = class(TDNGenericImport<DNImmutableStackClass, DNImmutableStack>) end;

  //-------------namespace: System.Linq----------------
  DNImmutableArrayExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B90EDB58-46E7-5FF0-8FC5-7DEBC443AC92}']
  end;

  [DNTypeName('System.Linq.ImmutableArrayExtensions')]
  DNImmutableArrayExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1A0198F4-C47A-39D5-9A44-00859B91CEA9}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableArrayExtensions = class(TDNGenericImport<DNImmutableArrayExtensionsClass, DNImmutableArrayExtensions>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArrayClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CFD477E2-6994-5455-960A-BD0E2DE07339}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableArray<T>;

  { static fields } 

    {class} property Empty: DNImmutableArray<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1')]
  DNImmutableArray<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C2667B01-0927-3328-AE8E-DDA2924C747A}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    function get_IsEmpty: Boolean;
    function get_Length: Int32;
    function get_IsDefault: Boolean;
    function get_IsDefaultOrEmpty: Boolean;

  { methods } 

    function ItemRef(index: Int32): T;
    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; destinationIndex: Int32); overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<T>; destinationIndex: Int32; length: Int32); overload;
    function ToBuilder: DNImmutableArray_Builder<T>;
    function GetEnumerator: DNImmutableArray_Enumerator<T>;
    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNImmutableArray<T>): Boolean; overload;
    function AsSpan: DDNC.System.Private.CoreLib.DNReadOnlySpan<T>;
    function AsMemory: DDNC.System.Private.CoreLib.DNReadOnlyMemory<T>;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function IndexOf(item: T; startIndex: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    function Insert(index: Int32; item: T): DNImmutableArray<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function InsertRange(index: Int32; items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function Add(item: T): DNImmutableArray<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function AddRange(items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function SetItem(index: Int32; item: T): DNImmutableArray<T>;
    function Replace(oldValue: T; newValue: T): DNImmutableArray<T>; overload;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function Remove(item: T): DNImmutableArray<T>; overload;
    function Remove(item: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveAt(index: Int32): DNImmutableArray<T>;
    function RemoveRange(index: Int32; length: Int32): DNImmutableArray<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DNImmutableArray<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableArray<T>;
    function Clear: DNImmutableArray<T>;
    function Sort: DNImmutableArray<T>; overload;
    function Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>): DNImmutableArray<T>; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableArray<T>; overload;
    function Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableArray<T>; overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
    property IsEmpty: Boolean read get_IsEmpty;
    property Length: Int32 read get_Length;
    property IsDefault: Boolean read get_IsDefault;
    property IsDefaultOrEmpty: Boolean read get_IsDefaultOrEmpty;
  end;

  TDNImmutableArray<T> = class(TDNGenericImport<DNImmutableArrayClass<T>, DNImmutableArray<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArray_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{19B48D22-4363-557B-93F6-530E2DE997CC}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1+Enumerator')]
  DNImmutableArray_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0B1A7672-EF2E-369A-B8F7-8C1DB71EFF6F}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableArray_Enumerator<T> = class(TDNGenericImport<DNImmutableArray_EnumeratorClass<T>, DNImmutableArray_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{B66D39C0-D9E0-59B4-994C-B252E4DA1AAE}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2+Enumerator')]
  DNImmutableDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9ACF55E4-A8C7-3D58-BD33-9B926E4F3E35}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNImmutableDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionary_EnumeratorClass<TKey, TValue>, DNImmutableDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{51A5AC6F-BCB2-5BE7-9004-392931AAA4DA}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1+Enumerator')]
  DNImmutableHashSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F68CCB15-DBFB-3688-B515-675C06E2A6AA}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableHashSet_Enumerator<T> = class(TDNGenericImport<DNImmutableHashSet_EnumeratorClass<T>, DNImmutableHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableList_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{08486CEF-13FE-5339-9548-E8B600988A1E}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1+Enumerator')]
  DNImmutableList_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7B3F80F6-F4F5-3610-9C67-5A6D30F9CB6D}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableList_Enumerator<T> = class(TDNGenericImport<DNImmutableList_EnumeratorClass<T>, DNImmutableList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueue_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{06B7B5A3-0696-5A4A-9F6D-04E778007138}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue`1+Enumerator')]
  DNImmutableQueue_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BC292B08-D2BE-3D78-9948-6B3C221376EA}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableQueue_Enumerator<T> = class(TDNGenericImport<DNImmutableQueue_EnumeratorClass<T>, DNImmutableQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{31971029-1A6A-5223-8AB7-672882516A4E}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator')]
  DNImmutableSortedDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B27CE39C-54FE-3388-880C-8410F93751DB}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNImmutableSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionary_EnumeratorClass<TKey, TValue>, DNImmutableSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{12FC3E5E-B7A8-5EE0-893E-74D7640EADE9}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1+Enumerator')]
  DNImmutableSortedSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4D0DB0FB-D36B-330E-AC46-85FD6394914D}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableSortedSet_Enumerator<T> = class(TDNGenericImport<DNImmutableSortedSet_EnumeratorClass<T>, DNImmutableSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStack_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8C674F14-8735-58E6-B705-8D097315725B}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack`1+Enumerator')]
  DNImmutableStack_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{CDB7E6BB-79AB-37E9-8A85-2AA97E2C9CA3}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableStack_Enumerator<T> = class(TDNGenericImport<DNImmutableStack_EnumeratorClass<T>, DNImmutableStack_Enumerator<T>>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.Collections.Immutable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
