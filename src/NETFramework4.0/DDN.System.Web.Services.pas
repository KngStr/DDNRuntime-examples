//----------------------------------------------------------------------------
//  System.Web.Services.dll: System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web.Services
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web.Services;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.EnterpriseServices,
  DDN.System.Xml,
  DDN.System,
  DDN.System.Web,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Web.Services.Configuration----------------
  [DNTypeName('System.Web.Services.Configuration.PriorityGroup')]
  DNPriorityGroup = type Integer;
  DNPriorityGroupHelper = record helper for DNPriorityGroup
  public const
    High = 0;
    Low = 1;
  end;


  //-------------namespace: System.Web.Services.Configuration----------------
  [DNTypeName('System.Web.Services.Configuration.WebServiceProtocols')]
  DNWebServiceProtocols = type Integer;
  DNWebServiceProtocolsHelper = record helper for DNWebServiceProtocols
  public const
    Unknown = 0;
    HttpSoap = 1;
    HttpGet = 2;
    HttpPost = 4;
    Documentation = 8;
    HttpPostLocalhost = 16;
    HttpSoap12 = 32;
    AnyHttpSoap = 33;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  [DNTypeName('System.Web.Services.Description.OperationFlow')]
  DNOperationFlow = type Integer;
  DNOperationFlowHelper = record helper for DNOperationFlow
  public const
    None = 0;
    OneWay = 1;
    Notification = 2;
    RequestResponse = 3;
    SolicitResponse = 4;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImportStyle')]
  DNServiceDescriptionImportStyle = type Integer;
  DNServiceDescriptionImportStyleHelper = record helper for DNServiceDescriptionImportStyle
  public const
    Client = 0;
    Server = 1;
    ServerInterface = 2;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImportWarnings')]
  DNServiceDescriptionImportWarnings = type Integer;
  DNServiceDescriptionImportWarningsHelper = record helper for DNServiceDescriptionImportWarnings
  public const
    NoCodeGenerated = 1;
    OptionalExtensionsIgnored = 2;
    RequiredExtensionsIgnored = 4;
    UnsupportedOperationsIgnored = 8;
    UnsupportedBindingsIgnored = 16;
    NoMethodsGenerated = 32;
    SchemaValidation = 64;
    WsiConformance = 128;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  [DNTypeName('System.Web.Services.Description.SoapBindingStyle')]
  DNSoapBindingStyle = type Integer;
  DNSoapBindingStyleHelper = record helper for DNSoapBindingStyle
  public const
    Default_ = 0;
    Document = 1;
    Rpc = 2;
  end;


  //-------------namespace: System.Web.Services.Description----------------
  [DNTypeName('System.Web.Services.Description.SoapBindingUse')]
  DNSoapBindingUse = type Integer;
  DNSoapBindingUseHelper = record helper for DNSoapBindingUse
  public const
    Default_ = 0;
    Encoded = 1;
    Literal = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  [DNTypeName('System.Web.Services.Protocols.LogicalMethodTypes')]
  DNLogicalMethodTypes = type Integer;
  DNLogicalMethodTypesHelper = record helper for DNLogicalMethodTypes
  public const
    Sync = 1;
    Async = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  [DNTypeName('System.Web.Services.Protocols.SoapHeaderDirection')]
  DNSoapHeaderDirection = type Integer;
  DNSoapHeaderDirectionHelper = record helper for DNSoapHeaderDirection
  public const
    In_ = 1;
    Out_ = 2;
    InOut = 3;
    Fault = 4;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  [DNTypeName('System.Web.Services.Protocols.SoapMessageStage')]
  DNSoapMessageStage = type Integer;
  DNSoapMessageStageHelper = record helper for DNSoapMessageStage
  public const
    BeforeSerialize = 1;
    AfterSerialize = 2;
    BeforeDeserialize = 4;
    AfterDeserialize = 8;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  [DNTypeName('System.Web.Services.Protocols.SoapParameterStyle')]
  DNSoapParameterStyle = type Integer;
  DNSoapParameterStyleHelper = record helper for DNSoapParameterStyle
  public const
    Default_ = 0;
    Bare = 1;
    Wrapped = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  [DNTypeName('System.Web.Services.Protocols.SoapProtocolVersion')]
  DNSoapProtocolVersion = type Integer;
  DNSoapProtocolVersionHelper = record helper for DNSoapProtocolVersion
  public const
    Default_ = 0;
    Soap11 = 1;
    Soap12 = 2;
  end;


  //-------------namespace: System.Web.Services.Protocols----------------
  [DNTypeName('System.Web.Services.Protocols.SoapServiceRoutingStyle')]
  DNSoapServiceRoutingStyle = type Integer;
  DNSoapServiceRoutingStyleHelper = record helper for DNSoapServiceRoutingStyle
  public const
    SoapAction = 0;
    RequestElement = 1;
  end;


  //-------------namespace: System.Web.Services----------------
  [DNTypeName('System.Web.Services.WsiProfiles')]
  DNWsiProfiles = type Integer;
  DNWsiProfilesHelper = record helper for DNWsiProfiles
  public const
    None = 0;
    BasicProfile1_1 = 1;
  end;




type


{ declares }

  DNXmlFormatExtensionAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionAttribute, namespace: System.Web.Services.Configuration
  DNXmlFormatExtensionPointAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionPointAttribute, namespace: System.Web.Services.Configuration
  DNXmlFormatExtensionPrefixAttribute = interface; // type: System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute, namespace: System.Web.Services.Configuration
  DNHttpMethodAttribute = interface; // type: System.Web.Services.Protocols.HttpMethodAttribute, namespace: System.Web.Services.Protocols
  DNMatchAttribute = interface; // type: System.Web.Services.Protocols.MatchAttribute, namespace: System.Web.Services.Protocols
  DNSoapDocumentMethodAttribute = interface; // type: System.Web.Services.Protocols.SoapDocumentMethodAttribute, namespace: System.Web.Services.Protocols
  DNSoapDocumentServiceAttribute = interface; // type: System.Web.Services.Protocols.SoapDocumentServiceAttribute, namespace: System.Web.Services.Protocols
  DNSoapExtensionAttribute = interface; // type: System.Web.Services.Protocols.SoapExtensionAttribute, namespace: System.Web.Services.Protocols
  DNSoapHeaderAttribute = interface; // type: System.Web.Services.Protocols.SoapHeaderAttribute, namespace: System.Web.Services.Protocols
  DNSoapRpcMethodAttribute = interface; // type: System.Web.Services.Protocols.SoapRpcMethodAttribute, namespace: System.Web.Services.Protocols
  DNSoapRpcServiceAttribute = interface; // type: System.Web.Services.Protocols.SoapRpcServiceAttribute, namespace: System.Web.Services.Protocols
  DNWebMethodAttribute = interface; // type: System.Web.Services.WebMethodAttribute, namespace: System.Web.Services
  DNWebServiceAttribute = interface; // type: System.Web.Services.WebServiceAttribute, namespace: System.Web.Services
  DNWebServiceBindingAttribute = interface; // type: System.Web.Services.WebServiceBindingAttribute, namespace: System.Web.Services
  DNBasicProfileViolationCollection = interface; // type: System.Web.Services.Description.BasicProfileViolationCollection, namespace: System.Web.Services.Description
  DNMimePartCollection = interface; // type: System.Web.Services.Description.MimePartCollection, namespace: System.Web.Services.Description
  DNMimeTextMatchCollection = interface; // type: System.Web.Services.Description.MimeTextMatchCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionBaseCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionBaseCollection, namespace: System.Web.Services.Description
  DNBindingCollection = interface; // type: System.Web.Services.Description.BindingCollection, namespace: System.Web.Services.Description
  DNFaultBindingCollection = interface; // type: System.Web.Services.Description.FaultBindingCollection, namespace: System.Web.Services.Description
  DNImportCollection = interface; // type: System.Web.Services.Description.ImportCollection, namespace: System.Web.Services.Description
  DNMessageCollection = interface; // type: System.Web.Services.Description.MessageCollection, namespace: System.Web.Services.Description
  DNMessagePartCollection = interface; // type: System.Web.Services.Description.MessagePartCollection, namespace: System.Web.Services.Description
  DNOperationBindingCollection = interface; // type: System.Web.Services.Description.OperationBindingCollection, namespace: System.Web.Services.Description
  DNOperationCollection = interface; // type: System.Web.Services.Description.OperationCollection, namespace: System.Web.Services.Description
  DNOperationFaultCollection = interface; // type: System.Web.Services.Description.OperationFaultCollection, namespace: System.Web.Services.Description
  DNOperationMessageCollection = interface; // type: System.Web.Services.Description.OperationMessageCollection, namespace: System.Web.Services.Description
  DNPortCollection = interface; // type: System.Web.Services.Description.PortCollection, namespace: System.Web.Services.Description
  DNPortTypeCollection = interface; // type: System.Web.Services.Description.PortTypeCollection, namespace: System.Web.Services.Description
  DNServiceCollection = interface; // type: System.Web.Services.Description.ServiceCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionCollection, namespace: System.Web.Services.Description
  DNServiceDescriptionFormatExtensionCollection = interface; // type: System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection, namespace: System.Web.Services.Description
  DNWebReferenceCollection = interface; // type: System.Web.Services.Description.WebReferenceCollection, namespace: System.Web.Services.Description
  DNDiscoveryClientResultCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientResultCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryReferenceCollection = interface; // type: System.Web.Services.Discovery.DiscoveryReferenceCollection, namespace: System.Web.Services.Discovery
  DNSoapHeaderCollection = interface; // type: System.Web.Services.Protocols.SoapHeaderCollection, namespace: System.Web.Services.Protocols
  DNDiscoveryClientDocumentCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientDocumentCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryClientReferenceCollection = interface; // type: System.Web.Services.Discovery.DiscoveryClientReferenceCollection, namespace: System.Web.Services.Discovery
  DNDiscoveryExceptionDictionary = interface; // type: System.Web.Services.Discovery.DiscoveryExceptionDictionary, namespace: System.Web.Services.Discovery
  DNWebService = interface; // type: System.Web.Services.WebService, namespace: System.Web.Services
  DNProtocolElementCollection = interface; // type: System.Web.Services.Configuration.ProtocolElementCollection, namespace: System.Web.Services.Configuration
  DNSoapExtensionTypeElementCollection = interface; // type: System.Web.Services.Configuration.SoapExtensionTypeElementCollection, namespace: System.Web.Services.Configuration
  DNTypeElementCollection = interface; // type: System.Web.Services.Configuration.TypeElementCollection, namespace: System.Web.Services.Configuration
  DNWsiProfilesElementCollection = interface; // type: System.Web.Services.Configuration.WsiProfilesElementCollection, namespace: System.Web.Services.Configuration
  DNWebServicesSection = interface; // type: System.Web.Services.Configuration.WebServicesSection, namespace: System.Web.Services.Configuration
  DNDiagnosticsElement = interface; // type: System.Web.Services.Configuration.DiagnosticsElement, namespace: System.Web.Services.Configuration
  DNProtocolElement = interface; // type: System.Web.Services.Configuration.ProtocolElement, namespace: System.Web.Services.Configuration
  DNSoapEnvelopeProcessingElement = interface; // type: System.Web.Services.Configuration.SoapEnvelopeProcessingElement, namespace: System.Web.Services.Configuration
  DNSoapExtensionTypeElement = interface; // type: System.Web.Services.Configuration.SoapExtensionTypeElement, namespace: System.Web.Services.Configuration
  DNTypeElement = interface; // type: System.Web.Services.Configuration.TypeElement, namespace: System.Web.Services.Configuration
  DNWsdlHelpGeneratorElement = interface; // type: System.Web.Services.Configuration.WsdlHelpGeneratorElement, namespace: System.Web.Services.Configuration
  DNWsiProfilesElement = interface; // type: System.Web.Services.Configuration.WsiProfilesElement, namespace: System.Web.Services.Configuration
  DNInvokeCompletedEventArgs = interface; // type: System.Web.Services.Protocols.InvokeCompletedEventArgs, namespace: System.Web.Services.Protocols
  DNSoapException = interface; // type: System.Web.Services.Protocols.SoapException, namespace: System.Web.Services.Protocols
  DNSoapHeaderException = interface; // type: System.Web.Services.Protocols.SoapHeaderException, namespace: System.Web.Services.Protocols
  DNWebClientProtocol = interface; // type: System.Web.Services.Protocols.WebClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpWebClientProtocol = interface; // type: System.Web.Services.Protocols.HttpWebClientProtocol, namespace: System.Web.Services.Protocols
  DNDiscoveryClientProtocol = interface; // type: System.Web.Services.Discovery.DiscoveryClientProtocol, namespace: System.Web.Services.Discovery
  DNHttpSimpleClientProtocol = interface; // type: System.Web.Services.Protocols.HttpSimpleClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpGetClientProtocol = interface; // type: System.Web.Services.Protocols.HttpGetClientProtocol, namespace: System.Web.Services.Protocols
  DNHttpPostClientProtocol = interface; // type: System.Web.Services.Protocols.HttpPostClientProtocol, namespace: System.Web.Services.Protocols
  DNSoapHttpClientProtocol = interface; // type: System.Web.Services.Protocols.SoapHttpClientProtocol, namespace: System.Web.Services.Protocols
  DNBasicProfileViolation = interface; // type: System.Web.Services.Description.BasicProfileViolation, namespace: System.Web.Services.Description
  DNBasicProfileViolationEnumerator = interface; // type: System.Web.Services.Description.BasicProfileViolationEnumerator, namespace: System.Web.Services.Description
  DNDocumentableItem = interface; // type: System.Web.Services.Description.DocumentableItem, namespace: System.Web.Services.Description
  DNImport = interface; // type: System.Web.Services.Description.Import, namespace: System.Web.Services.Description
  DNNamedItem = interface; // type: System.Web.Services.Description.NamedItem, namespace: System.Web.Services.Description
  DNBinding = interface; // type: System.Web.Services.Description.Binding, namespace: System.Web.Services.Description
  DNMessage = interface; // type: System.Web.Services.Description.Message, namespace: System.Web.Services.Description
  DNMessageBinding = interface; // type: System.Web.Services.Description.MessageBinding, namespace: System.Web.Services.Description
  DNFaultBinding = interface; // type: System.Web.Services.Description.FaultBinding, namespace: System.Web.Services.Description
  DNInputBinding = interface; // type: System.Web.Services.Description.InputBinding, namespace: System.Web.Services.Description
  DNOutputBinding = interface; // type: System.Web.Services.Description.OutputBinding, namespace: System.Web.Services.Description
  DNMessagePart = interface; // type: System.Web.Services.Description.MessagePart, namespace: System.Web.Services.Description
  DNOperation = interface; // type: System.Web.Services.Description.Operation, namespace: System.Web.Services.Description
  DNOperationBinding = interface; // type: System.Web.Services.Description.OperationBinding, namespace: System.Web.Services.Description
  DNOperationMessage = interface; // type: System.Web.Services.Description.OperationMessage, namespace: System.Web.Services.Description
  DNOperationFault = interface; // type: System.Web.Services.Description.OperationFault, namespace: System.Web.Services.Description
  DNOperationInput = interface; // type: System.Web.Services.Description.OperationInput, namespace: System.Web.Services.Description
  DNOperationOutput = interface; // type: System.Web.Services.Description.OperationOutput, namespace: System.Web.Services.Description
  DNPort = interface; // type: System.Web.Services.Description.Port, namespace: System.Web.Services.Description
  DNPortType = interface; // type: System.Web.Services.Description.PortType, namespace: System.Web.Services.Description
  DNService = interface; // type: System.Web.Services.Description.Service, namespace: System.Web.Services.Description
  DNServiceDescription = interface; // type: System.Web.Services.Description.ServiceDescription, namespace: System.Web.Services.Description
  DNTypes = interface; // type: System.Web.Services.Description.Types, namespace: System.Web.Services.Description
  DNMimeTextMatch = interface; // type: System.Web.Services.Description.MimeTextMatch, namespace: System.Web.Services.Description
  DNProtocolImporter = interface; // type: System.Web.Services.Description.ProtocolImporter, namespace: System.Web.Services.Description
  DNSoapProtocolImporter = interface; // type: System.Web.Services.Description.SoapProtocolImporter, namespace: System.Web.Services.Description
  DNProtocolReflector = interface; // type: System.Web.Services.Description.ProtocolReflector, namespace: System.Web.Services.Description
  DNServiceDescriptionFormatExtension = interface; // type: System.Web.Services.Description.ServiceDescriptionFormatExtension, namespace: System.Web.Services.Description
  DNHttpAddressBinding = interface; // type: System.Web.Services.Description.HttpAddressBinding, namespace: System.Web.Services.Description
  DNHttpBinding = interface; // type: System.Web.Services.Description.HttpBinding, namespace: System.Web.Services.Description
  DNHttpOperationBinding = interface; // type: System.Web.Services.Description.HttpOperationBinding, namespace: System.Web.Services.Description
  DNHttpUrlEncodedBinding = interface; // type: System.Web.Services.Description.HttpUrlEncodedBinding, namespace: System.Web.Services.Description
  DNHttpUrlReplacementBinding = interface; // type: System.Web.Services.Description.HttpUrlReplacementBinding, namespace: System.Web.Services.Description
  DNMimeContentBinding = interface; // type: System.Web.Services.Description.MimeContentBinding, namespace: System.Web.Services.Description
  DNMimeMultipartRelatedBinding = interface; // type: System.Web.Services.Description.MimeMultipartRelatedBinding, namespace: System.Web.Services.Description
  DNMimePart = interface; // type: System.Web.Services.Description.MimePart, namespace: System.Web.Services.Description
  DNMimeTextBinding = interface; // type: System.Web.Services.Description.MimeTextBinding, namespace: System.Web.Services.Description
  DNMimeXmlBinding = interface; // type: System.Web.Services.Description.MimeXmlBinding, namespace: System.Web.Services.Description
  DNSoapAddressBinding = interface; // type: System.Web.Services.Description.SoapAddressBinding, namespace: System.Web.Services.Description
  DNSoap12AddressBinding = interface; // type: System.Web.Services.Description.Soap12AddressBinding, namespace: System.Web.Services.Description
  DNDescription_SoapBinding = interface; // type: System.Web.Services.Description.SoapBinding, namespace: System.Web.Services.Description
  DNSoap12Binding = interface; // type: System.Web.Services.Description.Soap12Binding, namespace: System.Web.Services.Description
  DNSoapBodyBinding = interface; // type: System.Web.Services.Description.SoapBodyBinding, namespace: System.Web.Services.Description
  DNSoap12BodyBinding = interface; // type: System.Web.Services.Description.Soap12BodyBinding, namespace: System.Web.Services.Description
  DNSoapFaultBinding = interface; // type: System.Web.Services.Description.SoapFaultBinding, namespace: System.Web.Services.Description
  DNSoap12FaultBinding = interface; // type: System.Web.Services.Description.Soap12FaultBinding, namespace: System.Web.Services.Description
  DNSoapHeaderBinding = interface; // type: System.Web.Services.Description.SoapHeaderBinding, namespace: System.Web.Services.Description
  DNSoap12HeaderBinding = interface; // type: System.Web.Services.Description.Soap12HeaderBinding, namespace: System.Web.Services.Description
  DNSoapHeaderFaultBinding = interface; // type: System.Web.Services.Description.SoapHeaderFaultBinding, namespace: System.Web.Services.Description
  DNSoapOperationBinding = interface; // type: System.Web.Services.Description.SoapOperationBinding, namespace: System.Web.Services.Description
  DNSoap12OperationBinding = interface; // type: System.Web.Services.Description.Soap12OperationBinding, namespace: System.Web.Services.Description
  DNServiceDescriptionImporter = interface; // type: System.Web.Services.Description.ServiceDescriptionImporter, namespace: System.Web.Services.Description
  DNServiceDescriptionReflector = interface; // type: System.Web.Services.Description.ServiceDescriptionReflector, namespace: System.Web.Services.Description
  DNSoapExtensionImporter = interface; // type: System.Web.Services.Description.SoapExtensionImporter, namespace: System.Web.Services.Description
  DNSoapExtensionReflector = interface; // type: System.Web.Services.Description.SoapExtensionReflector, namespace: System.Web.Services.Description
  DNSoapTransportImporter = interface; // type: System.Web.Services.Description.SoapTransportImporter, namespace: System.Web.Services.Description
  DNWebReference = interface; // type: System.Web.Services.Description.WebReference, namespace: System.Web.Services.Description
  DNWebReferenceOptions = interface; // type: System.Web.Services.Description.WebReferenceOptions, namespace: System.Web.Services.Description
  DNWebServicesInteroperability = interface; // type: System.Web.Services.Description.WebServicesInteroperability, namespace: System.Web.Services.Description
  DNDiscoveryClientProtocol_DiscoveryClientResultsFile = interface; // type: System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile, namespace: System.Web.Services.Discovery
  DNDiscoveryClientResult = interface; // type: System.Web.Services.Discovery.DiscoveryClientResult, namespace: System.Web.Services.Discovery
  DNDiscoveryDocument = interface; // type: System.Web.Services.Discovery.DiscoveryDocument, namespace: System.Web.Services.Discovery
  DNDiscoveryReference = interface; // type: System.Web.Services.Discovery.DiscoveryReference, namespace: System.Web.Services.Discovery
  DNContractReference = interface; // type: System.Web.Services.Discovery.ContractReference, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentReference = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentReference, namespace: System.Web.Services.Discovery
  DNSchemaReference = interface; // type: System.Web.Services.Discovery.SchemaReference, namespace: System.Web.Services.Discovery
  DNDiscoveryRequestHandler = interface; // type: System.Web.Services.Discovery.DiscoveryRequestHandler, namespace: System.Web.Services.Discovery
  DNDiscoverySearchPattern = interface; // type: System.Web.Services.Discovery.DiscoverySearchPattern, namespace: System.Web.Services.Discovery
  DNContractSearchPattern = interface; // type: System.Web.Services.Discovery.ContractSearchPattern, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentLinksPattern = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentLinksPattern, namespace: System.Web.Services.Discovery
  DNDiscoveryDocumentSearchPattern = interface; // type: System.Web.Services.Discovery.DiscoveryDocumentSearchPattern, namespace: System.Web.Services.Discovery
  DNXmlSchemaSearchPattern = interface; // type: System.Web.Services.Discovery.XmlSchemaSearchPattern, namespace: System.Web.Services.Discovery
  DNDynamicDiscoveryDocument = interface; // type: System.Web.Services.Discovery.DynamicDiscoveryDocument, namespace: System.Web.Services.Discovery
  DNExcludePathInfo = interface; // type: System.Web.Services.Discovery.ExcludePathInfo, namespace: System.Web.Services.Discovery
  DNDiscovery_SoapBinding = interface; // type: System.Web.Services.Discovery.SoapBinding, namespace: System.Web.Services.Discovery
  DNLogicalMethodInfo = interface; // type: System.Web.Services.Protocols.LogicalMethodInfo, namespace: System.Web.Services.Protocols
  DNMimeFormatter = interface; // type: System.Web.Services.Protocols.MimeFormatter, namespace: System.Web.Services.Protocols
  DNMimeParameterReader = interface; // type: System.Web.Services.Protocols.MimeParameterReader, namespace: System.Web.Services.Protocols
  DNValueCollectionParameterReader = interface; // type: System.Web.Services.Protocols.ValueCollectionParameterReader, namespace: System.Web.Services.Protocols
  DNHtmlFormParameterReader = interface; // type: System.Web.Services.Protocols.HtmlFormParameterReader, namespace: System.Web.Services.Protocols
  DNUrlParameterReader = interface; // type: System.Web.Services.Protocols.UrlParameterReader, namespace: System.Web.Services.Protocols
  DNMimeParameterWriter = interface; // type: System.Web.Services.Protocols.MimeParameterWriter, namespace: System.Web.Services.Protocols
  DNUrlEncodedParameterWriter = interface; // type: System.Web.Services.Protocols.UrlEncodedParameterWriter, namespace: System.Web.Services.Protocols
  DNHtmlFormParameterWriter = interface; // type: System.Web.Services.Protocols.HtmlFormParameterWriter, namespace: System.Web.Services.Protocols
  DNUrlParameterWriter = interface; // type: System.Web.Services.Protocols.UrlParameterWriter, namespace: System.Web.Services.Protocols
  DNMimeReturnReader = interface; // type: System.Web.Services.Protocols.MimeReturnReader, namespace: System.Web.Services.Protocols
  DNAnyReturnReader = interface; // type: System.Web.Services.Protocols.AnyReturnReader, namespace: System.Web.Services.Protocols
  DNNopReturnReader = interface; // type: System.Web.Services.Protocols.NopReturnReader, namespace: System.Web.Services.Protocols
  DNTextReturnReader = interface; // type: System.Web.Services.Protocols.TextReturnReader, namespace: System.Web.Services.Protocols
  DNXmlReturnReader = interface; // type: System.Web.Services.Protocols.XmlReturnReader, namespace: System.Web.Services.Protocols
  DNPatternMatcher = interface; // type: System.Web.Services.Protocols.PatternMatcher, namespace: System.Web.Services.Protocols
  DNServerProtocol = interface; // type: System.Web.Services.Protocols.ServerProtocol, namespace: System.Web.Services.Protocols
  DNSoapServerProtocol = interface; // type: System.Web.Services.Protocols.SoapServerProtocol, namespace: System.Web.Services.Protocols
  DNServerProtocolFactory = interface; // type: System.Web.Services.Protocols.ServerProtocolFactory, namespace: System.Web.Services.Protocols
  DNSoapServerProtocolFactory = interface; // type: System.Web.Services.Protocols.SoapServerProtocolFactory, namespace: System.Web.Services.Protocols
  DNServerType = interface; // type: System.Web.Services.Protocols.ServerType, namespace: System.Web.Services.Protocols
  DNSoapServerType = interface; // type: System.Web.Services.Protocols.SoapServerType, namespace: System.Web.Services.Protocols
  DNSoap12FaultCodes = interface; // type: System.Web.Services.Protocols.Soap12FaultCodes, namespace: System.Web.Services.Protocols
  DNSoapExtension = interface; // type: System.Web.Services.Protocols.SoapExtension, namespace: System.Web.Services.Protocols
  DNSoapFaultSubCode = interface; // type: System.Web.Services.Protocols.SoapFaultSubCode, namespace: System.Web.Services.Protocols
  DNSoapHeader = interface; // type: System.Web.Services.Protocols.SoapHeader, namespace: System.Web.Services.Protocols
  DNSoapUnknownHeader = interface; // type: System.Web.Services.Protocols.SoapUnknownHeader, namespace: System.Web.Services.Protocols
  DNSoapHeaderHandling = interface; // type: System.Web.Services.Protocols.SoapHeaderHandling, namespace: System.Web.Services.Protocols
  DNSoapHeaderMapping = interface; // type: System.Web.Services.Protocols.SoapHeaderMapping, namespace: System.Web.Services.Protocols
  DNSoapMessage = interface; // type: System.Web.Services.Protocols.SoapMessage, namespace: System.Web.Services.Protocols
  DNSoapClientMessage = interface; // type: System.Web.Services.Protocols.SoapClientMessage, namespace: System.Web.Services.Protocols
  DNSoapServerMessage = interface; // type: System.Web.Services.Protocols.SoapServerMessage, namespace: System.Web.Services.Protocols
  DNSoapServerMethod = interface; // type: System.Web.Services.Protocols.SoapServerMethod, namespace: System.Web.Services.Protocols
  DNWebClientAsyncResult = interface; // type: System.Web.Services.Protocols.WebClientAsyncResult, namespace: System.Web.Services.Protocols
  DNWebServiceHandlerFactory = interface; // type: System.Web.Services.Protocols.WebServiceHandlerFactory, namespace: System.Web.Services.Protocols

{ delegates }

  [DNTypeName('System.Web.Services.Protocols.InvokeCompletedEventHandler')]
  DNInvokeCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInvokeCompletedEventArgs) of object;




{ objects }

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D8F70425-9869-57D3-B301-B54D916F5E77}']
  { constructors } 

    {class} function init: DNXmlFormatExtensionAttribute; overload;
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType; extensionPoint3: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    {class} function init(elementName: string; ns: string; extensionPoint1: DDN.mscorlib.DNType; extensionPoint2: DDN.mscorlib.DNType; extensionPoint3: DDN.mscorlib.DNType; extensionPoint4: DDN.mscorlib.DNType): DNXmlFormatExtensionAttribute; overload;
    {class} function init(elementName: string; ns: string; extensionPoints: TArray<DDN.mscorlib.DNType>): DNXmlFormatExtensionAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionAttribute')]
  DNXmlFormatExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6774FB3A-8F83-34F9-852D-2DB2D8C29A84}']
  { getters & setters } 

    function get_ExtensionPoints: TArray<DDN.mscorlib.DNType>;
    procedure set_ExtensionPoints(value: TArray<DDN.mscorlib.DNType>);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtensionPoints: TArray<DDN.mscorlib.DNType> read get_ExtensionPoints write set_ExtensionPoints;
    property Namespace: string read get_Namespace write set_Namespace;
    property ElementName: string read get_ElementName write set_ElementName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionAttribute = class(TDNGenericImport<DNXmlFormatExtensionAttributeClass, DNXmlFormatExtensionAttribute>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionPointAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{65917D03-8A16-50D7-BD67-C94F07D86170}']
  { constructors } 

    {class} function init(memberName: string): DNXmlFormatExtensionPointAttribute;

  end;

  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionPointAttribute')]
  DNXmlFormatExtensionPointAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F491878B-5101-3DA0-A124-BD84B2A35F98}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_AllowElements: Boolean;
    procedure set_AllowElements(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName write set_MemberName;
    property AllowElements: Boolean read get_AllowElements write set_AllowElements;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionPointAttribute = class(TDNGenericImport<DNXmlFormatExtensionPointAttributeClass, DNXmlFormatExtensionPointAttribute>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNXmlFormatExtensionPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{DFFCB22C-D4B9-5488-8D5C-6278C0A2559B}']
  { constructors } 

    {class} function init: DNXmlFormatExtensionPrefixAttribute; overload;
    {class} function init(prefix: string; ns: string): DNXmlFormatExtensionPrefixAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.XmlFormatExtensionPrefixAttribute')]
  DNXmlFormatExtensionPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{75AB7299-DF38-33D4-926A-6B22255CB9F8}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Prefix: string read get_Prefix write set_Prefix;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlFormatExtensionPrefixAttribute = class(TDNGenericImport<DNXmlFormatExtensionPrefixAttributeClass, DNXmlFormatExtensionPrefixAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4EFF01D8-7CCB-5902-8EBA-7BB33BE9574A}']
  { constructors } 

    {class} function init: DNHttpMethodAttribute; overload;
    {class} function init(returnFormatter: DDN.mscorlib.DNType; parameterFormatter: DDN.mscorlib.DNType): DNHttpMethodAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.HttpMethodAttribute')]
  DNHttpMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F9700E71-4145-3C50-93EB-1E66801792F0}']
  { getters & setters } 

    function get_ReturnFormatter: DDN.mscorlib.DNType;
    procedure set_ReturnFormatter(value: DDN.mscorlib.DNType);
    function get_ParameterFormatter: DDN.mscorlib.DNType;
    procedure set_ParameterFormatter(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnFormatter: DDN.mscorlib.DNType read get_ReturnFormatter write set_ReturnFormatter;
    property ParameterFormatter: DDN.mscorlib.DNType read get_ParameterFormatter write set_ParameterFormatter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNHttpMethodAttribute = class(TDNGenericImport<DNHttpMethodAttributeClass, DNHttpMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMatchAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BA40C50C-E4F8-5DED-8574-3F0C136D632F}']
  { constructors } 

    {class} function init(pattern: string): DNMatchAttribute;

  end;

  [DNTypeName('System.Web.Services.Protocols.MatchAttribute')]
  DNMatchAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DA520CF3-3A02-37A4-911A-E1F744921457}']
  { getters & setters } 

    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_Group: Int32;
    procedure set_Group(value: Int32);
    function get_Capture: Int32;
    procedure set_Capture(value: Int32);
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_MaxRepeats: Int32;
    procedure set_MaxRepeats(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern write set_Pattern;
    property Group: Int32 read get_Group write set_Group;
    property Capture: Int32 read get_Capture write set_Capture;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property MaxRepeats: Int32 read get_MaxRepeats write set_MaxRepeats;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMatchAttribute = class(TDNGenericImport<DNMatchAttributeClass, DNMatchAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapDocumentMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4509BFBC-019F-5F2C-BD15-DCDA890A695D}']
  { constructors } 

    {class} function init: DNSoapDocumentMethodAttribute; overload;
    {class} function init(action: string): DNSoapDocumentMethodAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapDocumentMethodAttribute')]
  DNSoapDocumentMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BF3FE395-DBD5-305B-8AE8-775F175DCDD4}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_OneWay: Boolean;
    procedure set_OneWay(value: Boolean);
    function get_RequestNamespace: string;
    procedure set_RequestNamespace(value: string);
    function get_ResponseNamespace: string;
    procedure set_ResponseNamespace(value: string);
    function get_RequestElementName: string;
    procedure set_RequestElementName(value: string);
    function get_ResponseElementName: string;
    procedure set_ResponseElementName(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_ParameterStyle: DNSoapParameterStyle;
    procedure set_ParameterStyle(value: DNSoapParameterStyle);
    function get_Binding: string;
    procedure set_Binding(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: string read get_Action write set_Action;
    property OneWay: Boolean read get_OneWay write set_OneWay;
    property RequestNamespace: string read get_RequestNamespace write set_RequestNamespace;
    property ResponseNamespace: string read get_ResponseNamespace write set_ResponseNamespace;
    property RequestElementName: string read get_RequestElementName write set_RequestElementName;
    property ResponseElementName: string read get_ResponseElementName write set_ResponseElementName;
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle write set_ParameterStyle;
    property Binding: string read get_Binding write set_Binding;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapDocumentMethodAttribute = class(TDNGenericImport<DNSoapDocumentMethodAttributeClass, DNSoapDocumentMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapDocumentServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9E5CEB54-04C7-5B34-A760-0FB33510E88A}']
  { constructors } 

    {class} function init: DNSoapDocumentServiceAttribute; overload;
    {class} function init(use: DNSoapBindingUse): DNSoapDocumentServiceAttribute; overload;
    {class} function init(use: DNSoapBindingUse; paramStyle: DNSoapParameterStyle): DNSoapDocumentServiceAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapDocumentServiceAttribute')]
  DNSoapDocumentServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{97184EBC-78AC-36EB-904B-34CD02661283}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_ParameterStyle: DNSoapParameterStyle;
    procedure set_ParameterStyle(value: DNSoapParameterStyle);
    function get_RoutingStyle: DNSoapServiceRoutingStyle;
    procedure set_RoutingStyle(value: DNSoapServiceRoutingStyle);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Use: DNSoapBindingUse read get_Use write set_Use;
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle write set_ParameterStyle;
    property RoutingStyle: DNSoapServiceRoutingStyle read get_RoutingStyle write set_RoutingStyle;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapDocumentServiceAttribute = class(TDNGenericImport<DNSoapDocumentServiceAttributeClass, DNSoapDocumentServiceAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{67F431F0-3A07-5DC7-B422-4ADBAB7F0A31}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapExtensionAttribute')]
  DNSoapExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{177794D8-EA63-3982-8296-67AD5FB185A5}']
  { getters & setters } 

    function get_ExtensionType: DDN.mscorlib.DNType;
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtensionType: DDN.mscorlib.DNType read get_ExtensionType;
    property Priority: Int32 read get_Priority write set_Priority;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapExtensionAttribute = class(TDNGenericImport<DNSoapExtensionAttributeClass, DNSoapExtensionAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BEC94F14-BCD3-599C-9E4A-BF712FC6DEB6}']
  { constructors } 

    {class} function init(memberName: string): DNSoapHeaderAttribute;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHeaderAttribute')]
  DNSoapHeaderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{45D22740-EAD6-3F99-ADCB-7E9B0404EB0D}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Direction: DNSoapHeaderDirection;
    procedure set_Direction(value: DNSoapHeaderDirection);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName write set_MemberName;
    property Direction: DNSoapHeaderDirection read get_Direction write set_Direction;
    property Required: Boolean read get_Required write set_Required;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapHeaderAttribute = class(TDNGenericImport<DNSoapHeaderAttributeClass, DNSoapHeaderAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapRpcMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C595ED6F-698D-53A0-82E9-81E2CDD42D57}']
  { constructors } 

    {class} function init: DNSoapRpcMethodAttribute; overload;
    {class} function init(action: string): DNSoapRpcMethodAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapRpcMethodAttribute')]
  DNSoapRpcMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1B104B44-0A90-3023-94C4-20DE54408AD2}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_Binding: string;
    procedure set_Binding(value: string);
    function get_OneWay: Boolean;
    procedure set_OneWay(value: Boolean);
    function get_RequestNamespace: string;
    procedure set_RequestNamespace(value: string);
    function get_ResponseNamespace: string;
    procedure set_ResponseNamespace(value: string);
    function get_RequestElementName: string;
    procedure set_RequestElementName(value: string);
    function get_ResponseElementName: string;
    procedure set_ResponseElementName(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: string read get_Action write set_Action;
    property Binding: string read get_Binding write set_Binding;
    property OneWay: Boolean read get_OneWay write set_OneWay;
    property RequestNamespace: string read get_RequestNamespace write set_RequestNamespace;
    property ResponseNamespace: string read get_ResponseNamespace write set_ResponseNamespace;
    property RequestElementName: string read get_RequestElementName write set_RequestElementName;
    property ResponseElementName: string read get_ResponseElementName write set_ResponseElementName;
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapRpcMethodAttribute = class(TDNGenericImport<DNSoapRpcMethodAttributeClass, DNSoapRpcMethodAttribute>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapRpcServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A5F23360-FB26-536A-B06E-2AD0019E5B3E}']
  { constructors } 

    {class} function init: DNSoapRpcServiceAttribute;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapRpcServiceAttribute')]
  DNSoapRpcServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5DFE0DCA-3B64-3F13-81DE-10A317608568}']
  { getters & setters } 

    function get_RoutingStyle: DNSoapServiceRoutingStyle;
    procedure set_RoutingStyle(value: DNSoapServiceRoutingStyle);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RoutingStyle: DNSoapServiceRoutingStyle read get_RoutingStyle write set_RoutingStyle;
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapRpcServiceAttribute = class(TDNGenericImport<DNSoapRpcServiceAttributeClass, DNSoapRpcServiceAttribute>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A4C76320-1067-5B55-96CE-CFA0F284F936}']
  { constructors } 

    {class} function init: DNWebMethodAttribute; overload;
    {class} function init(enableSession: Boolean): DNWebMethodAttribute; overload;
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption): DNWebMethodAttribute; overload;
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption; cacheDuration: Int32): DNWebMethodAttribute; overload;
    {class} function init(enableSession: Boolean; transactionOption: DDN.System.EnterpriseServices.DNTransactionOption; cacheDuration: Int32; bufferResponse: Boolean): DNWebMethodAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.WebMethodAttribute')]
  DNWebMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E13D617E-4DD7-3166-A6FF-C05E9A19C53B}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_EnableSession: Boolean;
    procedure set_EnableSession(value: Boolean);
    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_BufferResponse: Boolean;
    procedure set_BufferResponse(value: Boolean);
    function get_TransactionOption: DDN.System.EnterpriseServices.DNTransactionOption;
    procedure set_TransactionOption(value: DDN.System.EnterpriseServices.DNTransactionOption);
    function get_MessageName: string;
    procedure set_MessageName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description write set_Description;
    property EnableSession: Boolean read get_EnableSession write set_EnableSession;
    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    property BufferResponse: Boolean read get_BufferResponse write set_BufferResponse;
    property TransactionOption: DDN.System.EnterpriseServices.DNTransactionOption read get_TransactionOption write set_TransactionOption;
    property MessageName: string read get_MessageName write set_MessageName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebMethodAttribute = class(TDNGenericImport<DNWebMethodAttributeClass, DNWebMethodAttribute>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{96FA1B76-25D8-5530-8EE6-6DCF9CD4F4BD}']
  { constructors } 

    {class} function init: DNWebServiceAttribute;

  end;

  [DNTypeName('System.Web.Services.WebServiceAttribute')]
  DNWebServiceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{7986D9D3-2B67-3D0A-A674-27FC7A009600}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description write set_Description;
    property Namespace: string read get_Namespace write set_Namespace;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebServiceAttribute = class(TDNGenericImport<DNWebServiceAttributeClass, DNWebServiceAttribute>)
  public const
   DefaultNamespace = 'http://tempuri.org/';
  end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceBindingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B99651D7-502C-54A3-B518-02B864EE4137}']
  { constructors } 

    {class} function init: DNWebServiceBindingAttribute; overload;
    {class} function init(name: string): DNWebServiceBindingAttribute; overload;
    {class} function init(name: string; ns: string): DNWebServiceBindingAttribute; overload;
    {class} function init(name: string; ns: string; location: string): DNWebServiceBindingAttribute; overload;

  end;

  [DNTypeName('System.Web.Services.WebServiceBindingAttribute')]
  DNWebServiceBindingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0A8A2DAB-197E-3961-9795-4622CD2A626E}']
  { getters & setters } 

    function get_ConformsTo: DNWsiProfiles;
    procedure set_ConformsTo(value: DNWsiProfiles);
    function get_EmitConformanceClaims: Boolean;
    procedure set_EmitConformanceClaims(value: Boolean);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConformsTo: DNWsiProfiles read get_ConformsTo write set_ConformsTo;
    property EmitConformanceClaims: Boolean read get_EmitConformanceClaims write set_EmitConformanceClaims;
    property Location: string read get_Location write set_Location;
    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebServiceBindingAttribute = class(TDNGenericImport<DNWebServiceBindingAttributeClass, DNWebServiceBindingAttribute>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{63ABA720-5224-524B-AE8C-1966645DF889}']
  { constructors } 

    {class} function init: DNBasicProfileViolationCollection;

  end;

  [DNTypeName('System.Web.Services.Description.BasicProfileViolationCollection')]
  DNBasicProfileViolationCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{86B87E3A-8624-330A-9689-E1BD24FC6FDA}']
  { getters & setters } 

    function get_Item(index: Int32): DNBasicProfileViolation;
    procedure set_Item(index: Int32; value: DNBasicProfileViolation);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure Insert(index: Int32; violation: DNBasicProfileViolation);
    function IndexOf(violation: DNBasicProfileViolation): Int32;
    function &Contains(violation: DNBasicProfileViolation): Boolean;
    procedure Remove(violation: DNBasicProfileViolation);
    procedure CopyTo(&array: TArray<DNBasicProfileViolation>; index: Int32);
    function ToString: string;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Int32]: DNBasicProfileViolation read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBasicProfileViolationCollection = class(TDNGenericImport<DNBasicProfileViolationCollectionClass, DNBasicProfileViolationCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimePartCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{973FA0FA-7618-520B-B0FF-3218C4A09ED0}']
  { constructors } 

    {class} function init: DNMimePartCollection;

  end;

  [DNTypeName('System.Web.Services.Description.MimePartCollection')]
  DNMimePartCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{0B454C50-010C-3774-8F73-216BABB06416}']
  { getters & setters } 

    function get_Item(index: Int32): DNMimePart;
    procedure set_Item(index: Int32; value: DNMimePart);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(mimePart: DNMimePart): Int32;
    procedure Insert(index: Int32; mimePart: DNMimePart);
    function IndexOf(mimePart: DNMimePart): Int32;
    function &Contains(mimePart: DNMimePart): Boolean;
    procedure Remove(mimePart: DNMimePart);
    procedure CopyTo(&array: TArray<DNMimePart>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMimePart read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMimePartCollection = class(TDNGenericImport<DNMimePartCollectionClass, DNMimePartCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextMatchCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{52D4D7AB-3B34-52F9-A829-F8B6D45327B1}']
  { constructors } 

    {class} function init: DNMimeTextMatchCollection;

  end;

  [DNTypeName('System.Web.Services.Description.MimeTextMatchCollection')]
  DNMimeTextMatchCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{6BDD8926-90C4-3AE9-B98D-C67D99EE6D20}']
  { getters & setters } 

    function get_Item(index: Int32): DNMimeTextMatch;
    procedure set_Item(index: Int32; value: DNMimeTextMatch);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(match: DNMimeTextMatch): Int32;
    procedure Insert(index: Int32; match: DNMimeTextMatch);
    function IndexOf(match: DNMimeTextMatch): Int32;
    function &Contains(match: DNMimeTextMatch): Boolean;
    procedure Remove(match: DNMimeTextMatch);
    procedure CopyTo(&array: TArray<DNMimeTextMatch>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMimeTextMatch read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMimeTextMatchCollection = class(TDNGenericImport<DNMimeTextMatchCollectionClass, DNMimeTextMatchCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionBaseCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{4AC8E72D-88D1-54CB-B874-9DE9E925522C}']
  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescriptionBaseCollection')]
  DNServiceDescriptionBaseCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{7DA9E46B-0948-3A11-85DE-31963662B8C1}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionBaseCollection = class(TDNGenericImport<DNServiceDescriptionBaseCollectionClass, DNServiceDescriptionBaseCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{E245DCED-1E9F-5B2C-9A6E-6C4629A1A42F}']
  end;

  [DNTypeName('System.Web.Services.Description.BindingCollection')]
  DNBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{8C68ECA6-C3B7-3034-8C06-39A90BA373BB}']
  { getters & setters } 

    function get_Item(index: Int32): DNBinding; overload;
    procedure set_Item(index: Int32; value: DNBinding);
    function get_Item(name: string): DNBinding; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(binding: DNBinding): Int32;
    procedure Insert(index: Int32; binding: DNBinding);
    function IndexOf(binding: DNBinding): Int32;
    function &Contains(binding: DNBinding): Boolean;
    procedure Remove(binding: DNBinding);
    procedure CopyTo(&array: TArray<DNBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBinding read get_Item write set_Item; default;
    property Item[name: string]: DNBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBindingCollection = class(TDNGenericImport<DNBindingCollectionClass, DNBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNFaultBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{6148FA8B-3259-5672-9043-1FDA7BF74A2B}']
  end;

  [DNTypeName('System.Web.Services.Description.FaultBindingCollection')]
  DNFaultBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{B99D3470-2A5C-3E49-BC7F-D8437FB9D1EF}']
  { getters & setters } 

    function get_Item(index: Int32): DNFaultBinding; overload;
    procedure set_Item(index: Int32; value: DNFaultBinding);
    function get_Item(name: string): DNFaultBinding; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(bindingOperationFault: DNFaultBinding): Int32;
    procedure Insert(index: Int32; bindingOperationFault: DNFaultBinding);
    function IndexOf(bindingOperationFault: DNFaultBinding): Int32;
    function &Contains(bindingOperationFault: DNFaultBinding): Boolean;
    procedure Remove(bindingOperationFault: DNFaultBinding);
    procedure CopyTo(&array: TArray<DNFaultBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNFaultBinding read get_Item write set_Item; default;
    property Item[name: string]: DNFaultBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFaultBindingCollection = class(TDNGenericImport<DNFaultBindingCollectionClass, DNFaultBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNImportCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{47CC628D-820B-544A-9F3A-86394354AF79}']
  end;

  [DNTypeName('System.Web.Services.Description.ImportCollection')]
  DNImportCollection = interface(DNServiceDescriptionBaseCollection)
  ['{7CCAD7FE-9CE1-3CDA-B03C-89810FB1569B}']
  { getters & setters } 

    function get_Item(index: Int32): DNImport;
    procedure set_Item(index: Int32; value: DNImport);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(import: DNImport): Int32;
    procedure Insert(index: Int32; import: DNImport);
    function IndexOf(import: DNImport): Int32;
    function &Contains(import: DNImport): Boolean;
    procedure Remove(import: DNImport);
    procedure CopyTo(&array: TArray<DNImport>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNImport read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNImportCollection = class(TDNGenericImport<DNImportCollectionClass, DNImportCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{4FACAE3D-EEFC-5F3E-85A4-0C617046DE1F}']
  end;

  [DNTypeName('System.Web.Services.Description.MessageCollection')]
  DNMessageCollection = interface(DNServiceDescriptionBaseCollection)
  ['{42003B6D-71EB-3EAC-B117-5729E10AB7EE}']
  { getters & setters } 

    function get_Item(index: Int32): DNMessage; overload;
    procedure set_Item(index: Int32; value: DNMessage);
    function get_Item(name: string): DNMessage; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(message: DNMessage): Int32;
    procedure Insert(index: Int32; message: DNMessage);
    function IndexOf(message: DNMessage): Int32;
    function &Contains(message: DNMessage): Boolean;
    procedure Remove(message: DNMessage);
    procedure CopyTo(&array: TArray<DNMessage>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMessage read get_Item write set_Item; default;
    property Item[name: string]: DNMessage read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMessageCollection = class(TDNGenericImport<DNMessageCollectionClass, DNMessageCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessagePartCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{2B802EFB-88B9-531D-ADDC-3C9A237ED86C}']
  end;

  [DNTypeName('System.Web.Services.Description.MessagePartCollection')]
  DNMessagePartCollection = interface(DNServiceDescriptionBaseCollection)
  ['{928087D1-7AF0-3265-9C59-EB140C05D423}']
  { getters & setters } 

    function get_Item(index: Int32): DNMessagePart; overload;
    procedure set_Item(index: Int32; value: DNMessagePart);
    function get_Item(name: string): DNMessagePart; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(messagePart: DNMessagePart): Int32;
    procedure Insert(index: Int32; messagePart: DNMessagePart);
    function IndexOf(messagePart: DNMessagePart): Int32;
    function &Contains(messagePart: DNMessagePart): Boolean;
    procedure Remove(messagePart: DNMessagePart);
    procedure CopyTo(&array: TArray<DNMessagePart>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMessagePart read get_Item write set_Item; default;
    property Item[name: string]: DNMessagePart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMessagePartCollection = class(TDNGenericImport<DNMessagePartCollectionClass, DNMessagePartCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationBindingCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{192B8812-765F-5EED-BAED-31502E539658}']
  end;

  [DNTypeName('System.Web.Services.Description.OperationBindingCollection')]
  DNOperationBindingCollection = interface(DNServiceDescriptionBaseCollection)
  ['{FE6D8463-D80C-387B-8126-7FCFB2AE1A68}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationBinding;
    procedure set_Item(index: Int32; value: DNOperationBinding);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(bindingOperation: DNOperationBinding): Int32;
    procedure Insert(index: Int32; bindingOperation: DNOperationBinding);
    function IndexOf(bindingOperation: DNOperationBinding): Int32;
    function &Contains(bindingOperation: DNOperationBinding): Boolean;
    procedure Remove(bindingOperation: DNOperationBinding);
    procedure CopyTo(&array: TArray<DNOperationBinding>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationBinding read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationBindingCollection = class(TDNGenericImport<DNOperationBindingCollectionClass, DNOperationBindingCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{AA10AE7F-697B-5F31-9068-75B0CD8B333F}']
  end;

  [DNTypeName('System.Web.Services.Description.OperationCollection')]
  DNOperationCollection = interface(DNServiceDescriptionBaseCollection)
  ['{052A90D8-17DC-3AFA-9A25-99600882790F}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperation;
    procedure set_Item(index: Int32; value: DNOperation);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(operation: DNOperation): Int32;
    procedure Insert(index: Int32; operation: DNOperation);
    function IndexOf(operation: DNOperation): Int32;
    function &Contains(operation: DNOperation): Boolean;
    procedure Remove(operation: DNOperation);
    procedure CopyTo(&array: TArray<DNOperation>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperation read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationCollection = class(TDNGenericImport<DNOperationCollectionClass, DNOperationCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationFaultCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{F9F64D37-457A-5231-B828-D13433123369}']
  end;

  [DNTypeName('System.Web.Services.Description.OperationFaultCollection')]
  DNOperationFaultCollection = interface(DNServiceDescriptionBaseCollection)
  ['{11F638AE-E3B2-3568-B40C-6132989A232C}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationFault; overload;
    procedure set_Item(index: Int32; value: DNOperationFault);
    function get_Item(name: string): DNOperationFault; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(operationFaultMessage: DNOperationFault): Int32;
    procedure Insert(index: Int32; operationFaultMessage: DNOperationFault);
    function IndexOf(operationFaultMessage: DNOperationFault): Int32;
    function &Contains(operationFaultMessage: DNOperationFault): Boolean;
    procedure Remove(operationFaultMessage: DNOperationFault);
    procedure CopyTo(&array: TArray<DNOperationFault>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationFault read get_Item write set_Item; default;
    property Item[name: string]: DNOperationFault read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationFaultCollection = class(TDNGenericImport<DNOperationFaultCollectionClass, DNOperationFaultCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationMessageCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{5255AC19-FCD8-56DC-B6A3-55C77C4A7273}']
  end;

  [DNTypeName('System.Web.Services.Description.OperationMessageCollection')]
  DNOperationMessageCollection = interface(DNServiceDescriptionBaseCollection)
  ['{4E941E36-9B9C-3AB7-95F9-E53DAFED969F}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperationMessage;
    procedure set_Item(index: Int32; value: DNOperationMessage);
    function get_Input: DNOperationInput;
    function get_Output: DNOperationOutput;
    function get_Flow: DNOperationFlow;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(operationMessage: DNOperationMessage): Int32;
    procedure Insert(index: Int32; operationMessage: DNOperationMessage);
    function IndexOf(operationMessage: DNOperationMessage): Int32;
    function &Contains(operationMessage: DNOperationMessage): Boolean;
    procedure Remove(operationMessage: DNOperationMessage);
    procedure CopyTo(&array: TArray<DNOperationMessage>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperationMessage read get_Item write set_Item; default;
    property Input: DNOperationInput read get_Input;
    property Output: DNOperationOutput read get_Output;
    property Flow: DNOperationFlow read get_Flow;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOperationMessageCollection = class(TDNGenericImport<DNOperationMessageCollectionClass, DNOperationMessageCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{80A6DC27-6C52-595B-9A12-2E199D308278}']
  end;

  [DNTypeName('System.Web.Services.Description.PortCollection')]
  DNPortCollection = interface(DNServiceDescriptionBaseCollection)
  ['{B8FC5BCF-9A8C-37BF-96B5-0E6163FC1CE0}']
  { getters & setters } 

    function get_Item(index: Int32): DNPort; overload;
    procedure set_Item(index: Int32; value: DNPort);
    function get_Item(name: string): DNPort; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(port: DNPort): Int32;
    procedure Insert(index: Int32; port: DNPort);
    function IndexOf(port: DNPort): Int32;
    function &Contains(port: DNPort): Boolean;
    procedure Remove(port: DNPort);
    procedure CopyTo(&array: TArray<DNPort>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPort read get_Item write set_Item; default;
    property Item[name: string]: DNPort read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPortCollection = class(TDNGenericImport<DNPortCollectionClass, DNPortCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortTypeCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{34807EB7-4837-5001-9162-57F7AF9EA7F8}']
  end;

  [DNTypeName('System.Web.Services.Description.PortTypeCollection')]
  DNPortTypeCollection = interface(DNServiceDescriptionBaseCollection)
  ['{DC1F42E1-36A8-3FB5-9760-FF826B7B7C13}']
  { getters & setters } 

    function get_Item(index: Int32): DNPortType; overload;
    procedure set_Item(index: Int32; value: DNPortType);
    function get_Item(name: string): DNPortType; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(portType: DNPortType): Int32;
    procedure Insert(index: Int32; portType: DNPortType);
    function IndexOf(portType: DNPortType): Int32;
    function &Contains(portType: DNPortType): Boolean;
    procedure Remove(portType: DNPortType);
    procedure CopyTo(&array: TArray<DNPortType>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPortType read get_Item write set_Item; default;
    property Item[name: string]: DNPortType read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPortTypeCollection = class(TDNGenericImport<DNPortTypeCollectionClass, DNPortTypeCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{3E690398-8498-53AC-931D-503CBAEDFB47}']
  end;

  [DNTypeName('System.Web.Services.Description.ServiceCollection')]
  DNServiceCollection = interface(DNServiceDescriptionBaseCollection)
  ['{6E65C6E9-2CDF-3F63-A49D-B10C19EB64D4}']
  { getters & setters } 

    function get_Item(index: Int32): DNService; overload;
    procedure set_Item(index: Int32; value: DNService);
    function get_Item(name: string): DNService; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(service: DNService): Int32;
    procedure Insert(index: Int32; service: DNService);
    function IndexOf(service: DNService): Int32;
    function &Contains(service: DNService): Boolean;
    procedure Remove(service: DNService);
    procedure CopyTo(&array: TArray<DNService>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNService read get_Item write set_Item; default;
    property Item[name: string]: DNService read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceCollection = class(TDNGenericImport<DNServiceCollectionClass, DNServiceCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{E748C7DE-515D-535A-9CE9-BD9C4717F7E0}']
  { constructors } 

    {class} function init: DNServiceDescriptionCollection;

  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescriptionCollection')]
  DNServiceDescriptionCollection = interface(DNServiceDescriptionBaseCollection)
  ['{285DC0B4-86A5-3E75-8B56-57E607ABAC40}']
  { getters & setters } 

    function get_Item(index: Int32): DNServiceDescription; overload;
    procedure set_Item(index: Int32; value: DNServiceDescription);
    function get_Item(ns: string): DNServiceDescription; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(serviceDescription: DNServiceDescription): Int32;
    procedure Insert(index: Int32; serviceDescription: DNServiceDescription);
    function IndexOf(serviceDescription: DNServiceDescription): Int32;
    function &Contains(serviceDescription: DNServiceDescription): Boolean;
    procedure Remove(serviceDescription: DNServiceDescription);
    procedure CopyTo(&array: TArray<DNServiceDescription>; index: Int32);
    function GetMessage(name: DDN.System.Xml.DNXmlQualifiedName): DNMessage;
    function GetPortType(name: DDN.System.Xml.DNXmlQualifiedName): DNPortType;
    function GetService(name: DDN.System.Xml.DNXmlQualifiedName): DNService;
    function GetBinding(name: DDN.System.Xml.DNXmlQualifiedName): DNBinding;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNServiceDescription read get_Item write set_Item; default;
    property Item[ns: string]: DNServiceDescription read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionCollection = class(TDNGenericImport<DNServiceDescriptionCollectionClass, DNServiceDescriptionCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionFormatExtensionCollectionClass = interface(DNServiceDescriptionBaseCollectionClass)
  ['{2D29C8F5-B5EA-5751-ACDB-CC9CCC736DA2}']
  { constructors } 

    {class} function init(parent: DDN.mscorlib.DNObject): DNServiceDescriptionFormatExtensionCollection;

  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescriptionFormatExtensionCollection')]
  DNServiceDescriptionFormatExtensionCollection = interface(DNServiceDescriptionBaseCollection)
  ['{498CDDD4-27D6-3C72-B879-3549553B706E}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(extension: DDN.mscorlib.DNObject): Int32;
    procedure Insert(index: Int32; extension: DDN.mscorlib.DNObject);
    function IndexOf(extension: DDN.mscorlib.DNObject): Int32;
    function &Contains(extension: DDN.mscorlib.DNObject): Boolean;
    procedure Remove(extension: DDN.mscorlib.DNObject);
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNObject>; index: Int32);
    function Find(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function FindAll(&type: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>; overload;
    function Find(name: string; ns: string): DDN.System.Xml.DNXmlElement; overload;
    function FindAll(name: string; ns: string): TArray<DDN.System.Xml.DNXmlElement>; overload;
    function IsHandled(item: DDN.mscorlib.DNObject): Boolean;
    function IsRequired(item: DDN.mscorlib.DNObject): Boolean;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNServiceDescriptionFormatExtensionCollection = class(TDNGenericImport<DNServiceDescriptionFormatExtensionCollectionClass, DNServiceDescriptionFormatExtensionCollection>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{617F08C5-F27E-544F-86E1-183997FB1769}']
  { constructors } 

    {class} function init: DNWebReferenceCollection;

  end;

  [DNTypeName('System.Web.Services.Description.WebReferenceCollection')]
  DNWebReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{12E95E11-4A57-36AA-A3A1-FB7E361F2EFD}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebReference;
    procedure set_Item(index: Int32; value: DNWebReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(webReference: DNWebReference): Int32;
    procedure Insert(index: Int32; webReference: DNWebReference);
    function IndexOf(webReference: DNWebReference): Int32;
    function &Contains(webReference: DNWebReference): Boolean;
    procedure Remove(webReference: DNWebReference);
    procedure CopyTo(&array: TArray<DNWebReference>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebReferenceCollection = class(TDNGenericImport<DNWebReferenceCollectionClass, DNWebReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientResultCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{32870C24-63CF-5270-932C-A1247DFF2DFF}']
  { constructors } 

    {class} function init: DNDiscoveryClientResultCollection;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientResultCollection')]
  DNDiscoveryClientResultCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{0CA71B79-6FAE-31E7-980E-051BFA551097}']
  { getters & setters } 

    function get_Item(i: Int32): DNDiscoveryClientResult;
    procedure set_Item(i: Int32; value: DNDiscoveryClientResult);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNDiscoveryClientResult): Int32;
    function &Contains(value: DNDiscoveryClientResult): Boolean;
    procedure Remove(value: DNDiscoveryClientResult);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNDiscoveryClientResult read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientResultCollection = class(TDNGenericImport<DNDiscoveryClientResultCollectionClass, DNDiscoveryClientResultCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{3D648A24-D32B-51AB-8C03-29DC70F09579}']
  { constructors } 

    {class} function init: DNDiscoveryReferenceCollection;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryReferenceCollection')]
  DNDiscoveryReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{E18A5B9E-5231-3029-87B7-6268E65BF0E4}']
  { getters & setters } 

    function get_Item(i: Int32): DNDiscoveryReference;
    procedure set_Item(i: Int32; value: DNDiscoveryReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNDiscoveryReference): Int32;
    function &Contains(value: DNDiscoveryReference): Boolean;
    procedure Remove(value: DNDiscoveryReference);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNDiscoveryReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryReferenceCollection = class(TDNGenericImport<DNDiscoveryReferenceCollectionClass, DNDiscoveryReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D7EE4A41-E982-579A-A21B-1790F67930B1}']
  { constructors } 

    {class} function init: DNSoapHeaderCollection;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHeaderCollection')]
  DNSoapHeaderCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{821C82E9-A3E7-3EAA-88B6-759282607AC9}']
  { getters & setters } 

    function get_Item(index: Int32): DNSoapHeader;
    procedure set_Item(index: Int32; value: DNSoapHeader);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(header: DNSoapHeader): Int32;
    procedure Insert(index: Int32; header: DNSoapHeader);
    function IndexOf(header: DNSoapHeader): Int32;
    function &Contains(header: DNSoapHeader): Boolean;
    procedure Remove(header: DNSoapHeader);
    procedure CopyTo(&array: TArray<DNSoapHeader>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSoapHeader read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSoapHeaderCollection = class(TDNGenericImport<DNSoapHeaderCollectionClass, DNSoapHeaderCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientDocumentCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{332825F8-A091-5868-87EC-0E6072154933}']
  { constructors } 

    {class} function init: DNDiscoveryClientDocumentCollection;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientDocumentCollection')]
  DNDiscoveryClientDocumentCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{F6C3BA94-E0F0-3189-BE64-62B171FDC604}']
  { getters & setters } 

    function get_Item(url: string): DDN.mscorlib.DNObject;
    procedure set_Item(url: string; value: DDN.mscorlib.DNObject);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    procedure Add(url: string; value: DDN.mscorlib.DNObject);
    function &Contains(url: string): Boolean;
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientDocumentCollection = class(TDNGenericImport<DNDiscoveryClientDocumentCollectionClass, DNDiscoveryClientDocumentCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientReferenceCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{AC2BAAF9-956D-5EE1-AB5D-C0D56F541B49}']
  { constructors } 

    {class} function init: DNDiscoveryClientReferenceCollection;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientReferenceCollection')]
  DNDiscoveryClientReferenceCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{319342E4-CF06-3820-BFAA-752EA92E6EB4}']
  { getters & setters } 

    function get_Item(url: string): DNDiscoveryReference;
    procedure set_Item(url: string; value: DNDiscoveryReference);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    procedure Add(value: DNDiscoveryReference); overload;
    procedure Add(url: string; value: DNDiscoveryReference); overload;
    function &Contains(url: string): Boolean;
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DNDiscoveryReference read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryClientReferenceCollection = class(TDNGenericImport<DNDiscoveryClientReferenceCollectionClass, DNDiscoveryClientReferenceCollection>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryExceptionDictionaryClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{B9B80E43-F41E-5735-AE44-FF2EBFF4C017}']
  { constructors } 

    {class} function init: DNDiscoveryExceptionDictionary;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryExceptionDictionary')]
  DNDiscoveryExceptionDictionary = interface(DDN.mscorlib.DNDictionaryBase)
  ['{8A79B40D-70F9-3888-A1DE-C51D12790B82}']
  { getters & setters } 

    function get_Item(url: string): DDN.mscorlib.DNException;
    procedure set_Item(url: string; value: DDN.mscorlib.DNException);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    procedure Add(url: string; value: DDN.mscorlib.DNException);
    function &Contains(url: string): Boolean;
    procedure Remove(url: string);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[url: string]: DDN.mscorlib.DNException read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNDiscoveryExceptionDictionary = class(TDNGenericImport<DNDiscoveryExceptionDictionaryClass, DNDiscoveryExceptionDictionary>) end;

  //-------------namespace: System.Web.Services----------------
  DNWebServiceClass = interface(DNObjectClass)
  ['{76DF2388-4344-5160-A2EF-09B07A0EF4C2}']
  { constructors } 

    {class} function init: DNWebService;

  end;

  [DNTypeName('System.Web.Services.WebService')]
  DNWebService = interface(DNObject)
  ['{071632B9-45F4-37F9-9A37-45C335B86B5C}']
  { getters & setters } 

    function get_Application: DDN.System.Web.DNHttpApplicationState;
    function get_Context: DDN.System.Web.DNHttpContext;
    function get_Session: DDN.System.Web.DNHttpSessionState;
    function get_Server: DDN.System.Web.DNHttpServerUtility;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Application: DDN.System.Web.DNHttpApplicationState read get_Application;
    property Context: DDN.System.Web.DNHttpContext read get_Context;
    property Session: DDN.System.Web.DNHttpSessionState read get_Session;
    property Server: DDN.System.Web.DNHttpServerUtility read get_Server;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNWebService = class(TDNGenericImport<DNWebServiceClass, DNWebService>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNProtocolElementCollectionClass = interface(DNObjectClass)
  ['{C76A5689-DBF4-5950-9351-49B8126F0140}']
  { constructors } 

    {class} function init: DNProtocolElementCollection;

  end;

  [DNTypeName('System.Web.Services.Configuration.ProtocolElementCollection')]
  DNProtocolElementCollection = interface(DNObject)
  ['{3B1722C0-CF1E-3155-AE67-88E67336A395}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNProtocolElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNProtocolElement); overload;
    function get_Item(index: Int32): DNProtocolElement; overload;
    procedure set_Item(index: Int32; value: DNProtocolElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(element: DNProtocolElement);
    procedure Clear;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: TArray<DNProtocolElement>; index: Int32); overload;
    function IndexOf(element: DNProtocolElement): Int32;
    procedure Remove(element: DNProtocolElement);
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNProtocolElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNProtocolElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElementCollection = class(TDNGenericImport<DNProtocolElementCollectionClass, DNProtocolElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapExtensionTypeElementCollectionClass = interface(DNObjectClass)
  ['{96147F8F-5DD2-51D5-9394-BD5B877FE942}']
  { constructors } 

    {class} function init: DNSoapExtensionTypeElementCollection;

  end;

  [DNTypeName('System.Web.Services.Configuration.SoapExtensionTypeElementCollection')]
  DNSoapExtensionTypeElementCollection = interface(DNObject)
  ['{141B31B9-5A61-34DB-AC7E-B308DAAE9575}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNSoapExtensionTypeElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNSoapExtensionTypeElement); overload;
    function get_Item(index: Int32): DNSoapExtensionTypeElement; overload;
    procedure set_Item(index: Int32; value: DNSoapExtensionTypeElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(element: DNSoapExtensionTypeElement);
    procedure Clear;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: TArray<DNSoapExtensionTypeElement>; index: Int32); overload;
    function IndexOf(element: DNSoapExtensionTypeElement): Int32;
    procedure Remove(element: DNSoapExtensionTypeElement);
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNSoapExtensionTypeElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNSoapExtensionTypeElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapExtensionTypeElementCollection = class(TDNGenericImport<DNSoapExtensionTypeElementCollectionClass, DNSoapExtensionTypeElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNTypeElementCollectionClass = interface(DNObjectClass)
  ['{81DACE2A-BB34-5D14-80E8-931FAFAC628D}']
  { constructors } 

    {class} function init: DNTypeElementCollection;

  end;

  [DNTypeName('System.Web.Services.Configuration.TypeElementCollection')]
  DNTypeElementCollection = interface(DNObject)
  ['{9420CE26-DB85-30A6-9A7F-98D9386A37AC}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNTypeElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNTypeElement); overload;
    function get_Item(index: Int32): DNTypeElement; overload;
    procedure set_Item(index: Int32; value: DNTypeElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(element: DNTypeElement);
    procedure Clear;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: TArray<DNTypeElement>; index: Int32); overload;
    function IndexOf(element: DNTypeElement): Int32;
    procedure Remove(element: DNTypeElement);
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNTypeElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNTypeElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTypeElementCollection = class(TDNGenericImport<DNTypeElementCollectionClass, DNTypeElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsiProfilesElementCollectionClass = interface(DNObjectClass)
  ['{23B46D28-0BFE-5F15-8E92-B513760F5E51}']
  { constructors } 

    {class} function init: DNWsiProfilesElementCollection;

  end;

  [DNTypeName('System.Web.Services.Configuration.WsiProfilesElementCollection')]
  DNWsiProfilesElementCollection = interface(DNObject)
  ['{744F08E6-7BE8-3BA9-9F37-314819E2FF48}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DNWsiProfilesElement; overload;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DNWsiProfilesElement); overload;
    function get_Item(index: Int32): DNWsiProfilesElement; overload;
    procedure set_Item(index: Int32; value: DNWsiProfilesElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(element: DNWsiProfilesElement);
    procedure Clear;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: TArray<DNWsiProfilesElement>; index: Int32); overload;
    function IndexOf(element: DNWsiProfilesElement): Int32;
    procedure Remove(element: DNWsiProfilesElement);
    procedure RemoveAt(key: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DNWsiProfilesElement read get_Item write set_Item; default;
    property Item[index: Int32]: DNWsiProfilesElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsiProfilesElementCollection = class(TDNGenericImport<DNWsiProfilesElementCollectionClass, DNWsiProfilesElementCollection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWebServicesSectionClass = interface(DNObjectClass)
  ['{BDDC500A-FE8F-5F06-84B5-236CE67625CB}']
  { static getter & setter } 

    {class} function get_Current: DNWebServicesSection;

  { constructors } 

    {class} function init: DNWebServicesSection;

  { static methods } 

    {class} function GetSection(config: DDN.System.Configuration.DNConfiguration): DNWebServicesSection;

  { static propertys } 

    {class} property Current: DNWebServicesSection read get_Current;
  end;

  [DNTypeName('System.Web.Services.Configuration.WebServicesSection')]
  DNWebServicesSection = interface(DNObject)
  ['{9F8ADC5D-6785-3581-90CC-F758E37E0072}']
  { getters & setters } 

    function get_ConformanceWarnings: DNWsiProfilesElementCollection;
    function get_EnabledProtocols: DNWebServiceProtocols;
    function get_Protocols: DNProtocolElementCollection;
    function get_SoapEnvelopeProcessing: DNSoapEnvelopeProcessingElement;
    procedure set_SoapEnvelopeProcessing(value: DNSoapEnvelopeProcessingElement);
    function get_Diagnostics: DNDiagnosticsElement;
    procedure set_Diagnostics(value: DNDiagnosticsElement);
    function get_ServiceDescriptionFormatExtensionTypes: DNTypeElementCollection;
    function get_SoapExtensionImporterTypes: DNTypeElementCollection;
    function get_SoapExtensionReflectorTypes: DNTypeElementCollection;
    function get_SoapExtensionTypes: DNSoapExtensionTypeElementCollection;
    function get_SoapServerProtocolFactoryType: DNTypeElement;
    function get_SoapTransportImporterTypes: DNTypeElementCollection;
    function get_WsdlHelpGenerator: DNWsdlHelpGeneratorElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConformanceWarnings: DNWsiProfilesElementCollection read get_ConformanceWarnings;
    property EnabledProtocols: DNWebServiceProtocols read get_EnabledProtocols;
    property Protocols: DNProtocolElementCollection read get_Protocols;
    property SoapEnvelopeProcessing: DNSoapEnvelopeProcessingElement read get_SoapEnvelopeProcessing write set_SoapEnvelopeProcessing;
    property Diagnostics: DNDiagnosticsElement read get_Diagnostics write set_Diagnostics;
    property ServiceDescriptionFormatExtensionTypes: DNTypeElementCollection read get_ServiceDescriptionFormatExtensionTypes;
    property SoapExtensionImporterTypes: DNTypeElementCollection read get_SoapExtensionImporterTypes;
    property SoapExtensionReflectorTypes: DNTypeElementCollection read get_SoapExtensionReflectorTypes;
    property SoapExtensionTypes: DNSoapExtensionTypeElementCollection read get_SoapExtensionTypes;
    property SoapServerProtocolFactoryType: DNTypeElement read get_SoapServerProtocolFactoryType;
    property SoapTransportImporterTypes: DNTypeElementCollection read get_SoapTransportImporterTypes;
    property WsdlHelpGenerator: DNWsdlHelpGeneratorElement read get_WsdlHelpGenerator;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebServicesSection = class(TDNGenericImport<DNWebServicesSectionClass, DNWebServicesSection>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNDiagnosticsElementClass = interface(DNObjectClass)
  ['{22E38B3A-5440-5519-B957-956760FA46EE}']
  { constructors } 

    {class} function init: DNDiagnosticsElement;

  end;

  [DNTypeName('System.Web.Services.Configuration.DiagnosticsElement')]
  DNDiagnosticsElement = interface(DNObject)
  ['{BAF33767-9E43-3C23-B8D1-E538A6EF771A}']
  { getters & setters } 

    function get_SuppressReturningExceptions: Boolean;
    procedure set_SuppressReturningExceptions(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SuppressReturningExceptions: Boolean read get_SuppressReturningExceptions write set_SuppressReturningExceptions;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDiagnosticsElement = class(TDNGenericImport<DNDiagnosticsElementClass, DNDiagnosticsElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNProtocolElementClass = interface(DNObjectClass)
  ['{7538B510-782A-5831-837F-EC834436FF82}']
  { constructors } 

    {class} function init: DNProtocolElement; overload;
    {class} function init(protocol: DNWebServiceProtocols): DNProtocolElement; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.ProtocolElement')]
  DNProtocolElement = interface(DNObject)
  ['{3C1D5EBC-5430-37E1-8D66-CD655A780583}']
  { getters & setters } 

    function get_Name: DNWebServiceProtocols;
    procedure set_Name(value: DNWebServiceProtocols);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: DNWebServiceProtocols read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElement = class(TDNGenericImport<DNProtocolElementClass, DNProtocolElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapEnvelopeProcessingElementClass = interface(DNObjectClass)
  ['{8820641C-A645-55B1-9151-2FA6997842A9}']
  { constructors } 

    {class} function init: DNSoapEnvelopeProcessingElement; overload;
    {class} function init(readTimeout: Int32): DNSoapEnvelopeProcessingElement; overload;
    {class} function init(readTimeout: Int32; &strict: Boolean): DNSoapEnvelopeProcessingElement; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.SoapEnvelopeProcessingElement')]
  DNSoapEnvelopeProcessingElement = interface(DNObject)
  ['{11BF26C8-2F62-3960-B6B0-3CD6BCC5E30C}']
  { getters & setters } 

    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_IsStrict: Boolean;
    procedure set_IsStrict(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property IsStrict: Boolean read get_IsStrict write set_IsStrict;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapEnvelopeProcessingElement = class(TDNGenericImport<DNSoapEnvelopeProcessingElementClass, DNSoapEnvelopeProcessingElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNSoapExtensionTypeElementClass = interface(DNObjectClass)
  ['{CCA39556-08FB-51E4-97B4-B7155CF687BE}']
  { constructors } 

    {class} function init: DNSoapExtensionTypeElement; overload;
    {class} function init(&type: string; priority: Int32; group: DNPriorityGroup): DNSoapExtensionTypeElement; overload;
    {class} function init(&type: DDN.mscorlib.DNType; priority: Int32; group: DNPriorityGroup): DNSoapExtensionTypeElement; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.SoapExtensionTypeElement')]
  DNSoapExtensionTypeElement = interface(DNObject)
  ['{EFD42C93-4353-37DB-A5C8-31676535A1D8}']
  { getters & setters } 

    function get_Group: DNPriorityGroup;
    procedure set_Group(value: DNPriorityGroup);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Group: DNPriorityGroup read get_Group write set_Group;
    property Priority: Int32 read get_Priority write set_Priority;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSoapExtensionTypeElement = class(TDNGenericImport<DNSoapExtensionTypeElementClass, DNSoapExtensionTypeElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNTypeElementClass = interface(DNObjectClass)
  ['{A3435EB6-8AA8-5E73-BD6C-9D89A7C22895}']
  { constructors } 

    {class} function init: DNTypeElement; overload;
    {class} function init(&type: string): DNTypeElement; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeElement; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.TypeElement')]
  DNTypeElement = interface(DNObject)
  ['{2724AAC7-EBAB-3582-94FD-EAADAC298424}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTypeElement = class(TDNGenericImport<DNTypeElementClass, DNTypeElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsdlHelpGeneratorElementClass = interface(DNObjectClass)
  ['{B3C1B686-B9B3-5831-B699-BBC1C776DBC7}']
  { constructors } 

    {class} function init: DNWsdlHelpGeneratorElement;

  end;

  [DNTypeName('System.Web.Services.Configuration.WsdlHelpGeneratorElement')]
  DNWsdlHelpGeneratorElement = interface(DNObject)
  ['{E0FD4447-DD52-36B2-9505-4ADCE0A3EEF3}']
  { getters & setters } 

    function get_Href: string;
    procedure set_Href(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Href: string read get_Href write set_Href;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsdlHelpGeneratorElement = class(TDNGenericImport<DNWsdlHelpGeneratorElementClass, DNWsdlHelpGeneratorElement>) end;

  //-------------namespace: System.Web.Services.Configuration----------------
  DNWsiProfilesElementClass = interface(DNObjectClass)
  ['{274BE160-6830-5FFB-8AE6-69703DA0B524}']
  { constructors } 

    {class} function init: DNWsiProfilesElement; overload;
    {class} function init(name: DNWsiProfiles): DNWsiProfilesElement; overload;

  end;

  [DNTypeName('System.Web.Services.Configuration.WsiProfilesElement')]
  DNWsiProfilesElement = interface(DNObject)
  ['{B679E2EE-05EC-3099-82D8-B552B2F3AE5C}']
  { getters & setters } 

    function get_Name: DNWsiProfiles;
    procedure set_Name(value: DNWsiProfiles);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: DNWsiProfiles read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWsiProfilesElement = class(TDNGenericImport<DNWsiProfilesElementClass, DNWsiProfilesElement>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNInvokeCompletedEventArgsClass = interface(DNObjectClass)
  ['{80D8B0FD-CAB1-5BAB-B49E-6241DB306746}']
  end;

  [DNTypeName('System.Web.Services.Protocols.InvokeCompletedEventArgs')]
  DNInvokeCompletedEventArgs = interface(DNObject)
  ['{D0D18440-74F6-305C-8077-A796BA0C2F72}']
  { getters & setters } 

    function get_Results: TArray<DDN.mscorlib.DNObject>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Results: TArray<DDN.mscorlib.DNObject> read get_Results;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNInvokeCompletedEventArgs = class(TDNGenericImport<DNInvokeCompletedEventArgsClass, DNInvokeCompletedEventArgs>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{D29DD0CB-A764-57A4-A8DB-1C047296C8CF}']
  { constructors } 

    {class} function init: DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; detail: DDN.System.Xml.DNXmlNode): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; detail: DDN.System.Xml.DNXmlNode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; subCode: DNSoapFaultSubCode): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; detail: DDN.System.Xml.DNXmlNode; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; lang: string; detail: DDN.System.Xml.DNXmlNode; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapException; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ServerFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_ClientFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_DetailElementName: DDN.System.Xml.DNXmlQualifiedName;

  { static fields } 

    {class} property ServerFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ServerFaultCode;
    {class} property ClientFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ClientFaultCode;
    {class} property VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_VersionMismatchFaultCode;
    {class} property MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_MustUnderstandFaultCode;
    {class} property DetailElementName: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_DetailElementName;

  { static methods } 

    {class} function IsServerFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    {class} function IsClientFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    {class} function IsVersionMismatchFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;
    {class} function IsMustUnderstandFaultCode(code: DDN.System.Xml.DNXmlQualifiedName): Boolean;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapException')]
  DNSoapException = interface(DDN.mscorlib.DNSystemException)
  ['{F6D4AC82-366C-3BC5-AE59-ED6A0C95CADB}']
  { getters & setters } 

    function get_Actor: string;
    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_Detail: DDN.System.Xml.DNXmlNode;
    function get_Lang: string;
    function get_Node: string;
    function get_Role: string;
    function get_SubCode: DNSoapFaultSubCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Actor: string read get_Actor;
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    property Detail: DDN.System.Xml.DNXmlNode read get_Detail;
    property Lang: string read get_Lang;
    property Node: string read get_Node;
    property Role: string read get_Role;
    property SubCode: DNSoapFaultSubCode read get_SubCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSoapException = class(TDNGenericImport<DNSoapExceptionClass, DNSoapException>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderExceptionClass = interface(DNSoapExceptionClass)
  ['{139F0F84-DD11-5FD3-A796-E4B1574F981C}']
  { constructors } 

    {class} function init: DNSoapHeaderException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string): DNSoapHeaderException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName): DNSoapHeaderException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;
    {class} function init(message: string; code: DDN.System.Xml.DNXmlQualifiedName; actor: string; role: string; lang: string; subCode: DNSoapFaultSubCode; innerException: DDN.mscorlib.DNException): DNSoapHeaderException; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHeaderException')]
  DNSoapHeaderException = interface(DNSoapException)
  ['{A0A70FB0-CA04-36F0-BCA2-C998A22E2E45}']
  { getters & setters } 

    function get_Actor: string;
    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_Detail: DDN.System.Xml.DNXmlNode;
    function get_Lang: string;
    function get_Node: string;
    function get_Role: string;
    function get_SubCode: DNSoapFaultSubCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Actor: string read get_Actor;
    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    property Detail: DDN.System.Xml.DNXmlNode read get_Detail;
    property Lang: string read get_Lang;
    property Node: string read get_Node;
    property Role: string read get_Role;
    property SubCode: DNSoapFaultSubCode read get_SubCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSoapHeaderException = class(TDNGenericImport<DNSoapHeaderExceptionClass, DNSoapHeaderException>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebClientProtocolClass = interface(DNObjectClass)
  ['{EA09A5F2-D74C-53C3-8FBD-F79C8AA89BC8}']
  end;

  [DNTypeName('System.Web.Services.Protocols.WebClientProtocol')]
  DNWebClientProtocol = interface(DNObject)
  ['{4277F857-2873-3E94-86BA-DDEEA59EB9F6}']
  { getters & setters } 

    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNWebClientProtocol = class(TDNGenericImport<DNWebClientProtocolClass, DNWebClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpWebClientProtocolClass = interface(DNWebClientProtocolClass)
  ['{04C492BB-8D7E-598F-B3CA-C68B2556FB2E}']
  { static methods } 

    {class} function GenerateXmlMappings(&type: DDN.mscorlib.DNType; mappings: DDN.mscorlib.DNArrayList): Boolean; overload;
    {class} function GenerateXmlMappings(types: TArray<DDN.mscorlib.DNType>; mappings: DDN.mscorlib.DNArrayList): DDN.mscorlib.DNHashtable; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.HttpWebClientProtocol')]
  DNHttpWebClientProtocol = interface(DNWebClientProtocol)
  ['{A2BAAC11-CAD5-36DF-9319-A6110144C2DA}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpWebClientProtocol = class(TDNGenericImport<DNHttpWebClientProtocolClass, DNHttpWebClientProtocol>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{20DD4869-1A08-51DA-8B14-1EA69BCE64A5}']
  { constructors } 

    {class} function init: DNDiscoveryClientProtocol;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientProtocol')]
  DNDiscoveryClientProtocol = interface(DNHttpWebClientProtocol)
  ['{0DF7E8C1-DDEA-3842-A402-90FE051ED477}']
  { getters & setters } 

    function get_AdditionalInformation: DDN.mscorlib.DNIList;
    function get_Documents: DNDiscoveryClientDocumentCollection;
    function get_Errors: DNDiscoveryExceptionDictionary;
    function get_References: DNDiscoveryClientReferenceCollection;
    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Discover(url: string): DNDiscoveryDocument;
    function DiscoverAny(url: string): DNDiscoveryDocument;
    function Download(out url: string): DDN.mscorlib.DNStream; overload;
    function Download(out url: string; out contentType: string): DDN.mscorlib.DNStream; overload;
    procedure LoadExternals;
    function ReadAll(topLevelFilename: string): DNDiscoveryClientResultCollection;
    procedure ResolveAll;
    procedure ResolveOneLevel;
    function WriteAll(directory: string; topLevelFilename: string): DNDiscoveryClientResultCollection;
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AdditionalInformation: DDN.mscorlib.DNIList read get_AdditionalInformation;
    property Documents: DNDiscoveryClientDocumentCollection read get_Documents;
    property Errors: DNDiscoveryExceptionDictionary read get_Errors;
    property References: DNDiscoveryClientReferenceCollection read get_References;
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDiscoveryClientProtocol = class(TDNGenericImport<DNDiscoveryClientProtocolClass, DNDiscoveryClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpSimpleClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{0DDD2FD8-BBA9-5D80-8B38-4A60DFC2634C}']
  end;

  [DNTypeName('System.Web.Services.Protocols.HttpSimpleClientProtocol')]
  DNHttpSimpleClientProtocol = interface(DNHttpWebClientProtocol)
  ['{FA8E1429-5177-36EB-813E-9427B1FA0CF5}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpSimpleClientProtocol = class(TDNGenericImport<DNHttpSimpleClientProtocolClass, DNHttpSimpleClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpGetClientProtocolClass = interface(DNHttpSimpleClientProtocolClass)
  ['{20521212-F92D-58B4-9EDF-487640F4D0B6}']
  { constructors } 

    {class} function init: DNHttpGetClientProtocol;

  end;

  [DNTypeName('System.Web.Services.Protocols.HttpGetClientProtocol')]
  DNHttpGetClientProtocol = interface(DNHttpSimpleClientProtocol)
  ['{278FFCD4-7F0B-3AAF-AD2C-BF43BED9E14C}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpGetClientProtocol = class(TDNGenericImport<DNHttpGetClientProtocolClass, DNHttpGetClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHttpPostClientProtocolClass = interface(DNHttpSimpleClientProtocolClass)
  ['{634771B0-779C-58FF-BE61-E21423B0D95C}']
  { constructors } 

    {class} function init: DNHttpPostClientProtocol;

  end;

  [DNTypeName('System.Web.Services.Protocols.HttpPostClientProtocol')]
  DNHttpPostClientProtocol = interface(DNHttpSimpleClientProtocol)
  ['{5C6804FA-EC9D-3BE2-8D8D-47F7FCE46B8A}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNHttpPostClientProtocol = class(TDNGenericImport<DNHttpPostClientProtocolClass, DNHttpPostClientProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHttpClientProtocolClass = interface(DNHttpWebClientProtocolClass)
  ['{C7BE43AF-6807-5E8D-9DA4-993B28127797}']
  { constructors } 

    {class} function init: DNSoapHttpClientProtocol;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHttpClientProtocol')]
  DNSoapHttpClientProtocol = interface(DNHttpWebClientProtocol)
  ['{EE5E5453-6867-333F-8E25-56B63C54F470}']
  { getters & setters } 

    function get_SoapVersion: DNSoapProtocolVersion;
    procedure set_SoapVersion(value: DNSoapProtocolVersion);
    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_CookieContainer: DDN.System.DNCookieContainer;
    procedure set_CookieContainer(value: DDN.System.DNCookieContainer);
    function get_ClientCertificates: DDN.System.DNX509CertificateCollection;
    function get_EnableDecompression: Boolean;
    procedure set_EnableDecompression(value: Boolean);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Proxy: DDN.System.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_Credentials: DDN.System.DNICredentials;
    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Discover;
    procedure &Abort;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion write set_SoapVersion;
    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property CookieContainer: DDN.System.DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property ClientCertificates: DDN.System.DNX509CertificateCollection read get_ClientCertificates;
    property EnableDecompression: Boolean read get_EnableDecompression write set_EnableDecompression;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Proxy: DDN.System.DNIWebProxy read get_Proxy write set_Proxy;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property Credentials: DDN.System.DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Url: string read get_Url write set_Url;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSoapHttpClientProtocol = class(TDNGenericImport<DNSoapHttpClientProtocolClass, DNSoapHttpClientProtocol>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FA19947-DDE3-5DD1-9007-EC486D3EDB67}']
  end;

  [DNTypeName('System.Web.Services.Description.BasicProfileViolation')]
  DNBasicProfileViolation = interface(DDN.mscorlib.DNObject)
  ['{66DBB2C6-F87D-381C-8F7F-1A8F0AB571F3}']
  { getters & setters } 

    function get_Claims: DNWsiProfiles;
    function get_Details: string;
    function get_Elements: DDN.System.DNStringCollection;
    function get_NormativeStatement: string;
    function get_Recommendation: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Claims: DNWsiProfiles read get_Claims;
    property Details: string read get_Details;
    property Elements: DDN.System.DNStringCollection read get_Elements;
    property NormativeStatement: string read get_NormativeStatement;
    property Recommendation: string read get_Recommendation;
  end;

  TDNBasicProfileViolation = class(TDNGenericImport<DNBasicProfileViolationClass, DNBasicProfileViolation>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBasicProfileViolationEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E738742-7A52-57B4-9C70-11FDBC6E26E5}']
  { constructors } 

    {class} function init(list: DNBasicProfileViolationCollection): DNBasicProfileViolationEnumerator;

  end;

  [DNTypeName('System.Web.Services.Description.BasicProfileViolationEnumerator')]
  DNBasicProfileViolationEnumerator = interface(DDN.mscorlib.DNObject)
  ['{EBF9BFBC-F116-3FEC-AD73-51ED50522571}']
  { getters & setters } 

    function get_Current: DNBasicProfileViolation;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNBasicProfileViolation read get_Current;
  end;

  TDNBasicProfileViolationEnumerator = class(TDNGenericImport<DNBasicProfileViolationEnumeratorClass, DNBasicProfileViolationEnumerator>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNDocumentableItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4532CAC-DF95-5A37-BC85-8C3BB9C73219}']
  end;

  [DNTypeName('System.Web.Services.Description.DocumentableItem')]
  DNDocumentableItem = interface(DDN.mscorlib.DNObject)
  ['{A3CDDD20-DC42-3D33-9E69-8548C4136376}']
  { getters & setters } 

    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNDocumentableItem = class(TDNGenericImport<DNDocumentableItemClass, DNDocumentableItem>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNImportClass = interface(DNDocumentableItemClass)
  ['{20B3472F-575C-5D93-A787-0F7DD2483966}']
  { constructors } 

    {class} function init: DNImport;

  end;

  [DNTypeName('System.Web.Services.Description.Import')]
  DNImport = interface(DNDocumentableItem)
  ['{3B61C69D-0E5F-31F6-BA7B-B78C86F08A7A}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    property Namespace: string read get_Namespace write set_Namespace;
    property Location: string read get_Location write set_Location;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNImport = class(TDNGenericImport<DNImportClass, DNImport>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNNamedItemClass = interface(DNDocumentableItemClass)
  ['{EFA9320C-F53E-5BF6-9480-F24162673F4E}']
  end;

  [DNTypeName('System.Web.Services.Description.NamedItem')]
  DNNamedItem = interface(DNDocumentableItem)
  ['{5A867DA0-FFED-3C2E-959C-256AA9CE10FA}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNNamedItem = class(TDNGenericImport<DNNamedItemClass, DNNamedItem>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNBindingClass = interface(DNNamedItemClass)
  ['{E1C20336-C100-559B-91AC-B07E627F922A}']
  { constructors } 

    {class} function init: DNBinding;

  end;

  [DNTypeName('System.Web.Services.Description.Binding')]
  DNBinding = interface(DNNamedItem)
  ['{72F0A66B-ED90-3B3F-B4AA-C95E599EDB42}']
  { getters & setters } 

    function get_ServiceDescription: DNServiceDescription;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operations: DNOperationBindingCollection;
    function get_Type: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Type(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Operations: DNOperationBindingCollection read get_Operations;
    property &Type: DDN.System.Xml.DNXmlQualifiedName read get_Type write set_Type;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNBinding = class(TDNGenericImport<DNBindingClass, DNBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageClass = interface(DNNamedItemClass)
  ['{0BD73070-A3A0-577B-AFD0-3A40B4045A12}']
  { constructors } 

    {class} function init: DNMessage;

  end;

  [DNTypeName('System.Web.Services.Description.Message')]
  DNMessage = interface(DNNamedItem)
  ['{7831869D-5BDC-3D1D-BFED-33AF91678474}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Parts: DNMessagePartCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function FindPartsByName(partNames: TArray<string>): TArray<DNMessagePart>;
    function FindPartByName(partName: string): DNMessagePart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    property Parts: DNMessagePartCollection read get_Parts;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNMessage = class(TDNGenericImport<DNMessageClass, DNMessage>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessageBindingClass = interface(DNNamedItemClass)
  ['{ED76ED12-9C86-52A5-BFD7-6F367C8E4BD0}']
  end;

  [DNTypeName('System.Web.Services.Description.MessageBinding')]
  DNMessageBinding = interface(DNNamedItem)
  ['{25D86ADF-A83D-3D7F-B896-7C639E6AABE9}']
  { getters & setters } 

    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNMessageBinding = class(TDNGenericImport<DNMessageBindingClass, DNMessageBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNFaultBindingClass = interface(DNMessageBindingClass)
  ['{0C0E13F3-3F81-5A17-874F-47CAE475F642}']
  { constructors } 

    {class} function init: DNFaultBinding;

  end;

  [DNTypeName('System.Web.Services.Description.FaultBinding')]
  DNFaultBinding = interface(DNMessageBinding)
  ['{CE8469A0-74FF-3120-8C56-5B6609080F20}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNFaultBinding = class(TDNGenericImport<DNFaultBindingClass, DNFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNInputBindingClass = interface(DNMessageBindingClass)
  ['{40194096-195D-5277-83A0-3BF675E53EFE}']
  { constructors } 

    {class} function init: DNInputBinding;

  end;

  [DNTypeName('System.Web.Services.Description.InputBinding')]
  DNInputBinding = interface(DNMessageBinding)
  ['{0430661A-1BCC-378B-834F-B2CFC7F994FC}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNInputBinding = class(TDNGenericImport<DNInputBindingClass, DNInputBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOutputBindingClass = interface(DNMessageBindingClass)
  ['{1E4320D0-7788-5538-AECA-62D1BF68AD59}']
  { constructors } 

    {class} function init: DNOutputBinding;

  end;

  [DNTypeName('System.Web.Services.Description.OutputBinding')]
  DNOutputBinding = interface(DNMessageBinding)
  ['{7A3A3791-9C3C-3F88-8F7D-CD62FCD0276F}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_OperationBinding: DNOperationBinding;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOutputBinding = class(TDNGenericImport<DNOutputBindingClass, DNOutputBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMessagePartClass = interface(DNNamedItemClass)
  ['{65A2A902-F08D-56B3-9106-593D38F971B2}']
  { constructors } 

    {class} function init: DNMessagePart;

  end;

  [DNTypeName('System.Web.Services.Description.MessagePart')]
  DNMessagePart = interface(DNNamedItem)
  ['{0596EDAA-CE70-3548-B80A-43AB840DB0B1}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Message: DNMessage;
    function get_Element: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Element(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Type: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Type(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Message: DNMessage read get_Message;
    property Element: DDN.System.Xml.DNXmlQualifiedName read get_Element write set_Element;
    property &Type: DDN.System.Xml.DNXmlQualifiedName read get_Type write set_Type;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNMessagePart = class(TDNGenericImport<DNMessagePartClass, DNMessagePart>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationClass = interface(DNNamedItemClass)
  ['{77ADA884-892D-595D-A198-CF550478F8A4}']
  { constructors } 

    {class} function init: DNOperation;

  end;

  [DNTypeName('System.Web.Services.Description.Operation')]
  DNOperation = interface(DNNamedItem)
  ['{5D59EB08-FE63-3657-BF73-50E844BE94D5}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_PortType: DNPortType;
    function get_ParameterOrderString: string;
    procedure set_ParameterOrderString(value: string);
    function get_ParameterOrder: TArray<string>;
    procedure set_ParameterOrder(value: TArray<string>);
    function get_Messages: DNOperationMessageCollection;
    function get_Faults: DNOperationFaultCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function IsBoundBy(operationBinding: DNOperationBinding): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property PortType: DNPortType read get_PortType;
    property ParameterOrderString: string read get_ParameterOrderString write set_ParameterOrderString;
    property ParameterOrder: TArray<string> read get_ParameterOrder write set_ParameterOrder;
    property Messages: DNOperationMessageCollection read get_Messages;
    property Faults: DNOperationFaultCollection read get_Faults;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperation = class(TDNGenericImport<DNOperationClass, DNOperation>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationBindingClass = interface(DNNamedItemClass)
  ['{A2146659-0BB5-5F83-AED2-CDC2F1CA6992}']
  { constructors } 

    {class} function init: DNOperationBinding;

  end;

  [DNTypeName('System.Web.Services.Description.OperationBinding')]
  DNOperationBinding = interface(DNNamedItem)
  ['{D061384A-7647-3EB3-AEE9-631645043AC1}']
  { getters & setters } 

    function get_Binding: DNBinding;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Input: DNInputBinding;
    procedure set_Input(value: DNInputBinding);
    function get_Output: DNOutputBinding;
    procedure set_Output(value: DNOutputBinding);
    function get_Faults: DNFaultBindingCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Binding: DNBinding read get_Binding;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Input: DNInputBinding read get_Input write set_Input;
    property Output: DNOutputBinding read get_Output write set_Output;
    property Faults: DNFaultBindingCollection read get_Faults;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationBinding = class(TDNGenericImport<DNOperationBindingClass, DNOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationMessageClass = interface(DNNamedItemClass)
  ['{E1C13CC4-2789-5FF6-BBC0-08AB66FCDD90}']
  end;

  [DNTypeName('System.Web.Services.Description.OperationMessage')]
  DNOperationMessage = interface(DNNamedItem)
  ['{84C1E90C-70CE-3C74-A0D6-64191CA9EBD3}']
  { getters & setters } 

    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Operation: DNOperation read get_Operation;
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
  end;

  TDNOperationMessage = class(TDNGenericImport<DNOperationMessageClass, DNOperationMessage>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationFaultClass = interface(DNOperationMessageClass)
  ['{9E25F711-D34E-52BA-8D20-F00FFE352799}']
  { constructors } 

    {class} function init: DNOperationFault;

  end;

  [DNTypeName('System.Web.Services.Description.OperationFault')]
  DNOperationFault = interface(DNOperationMessage)
  ['{D334DF82-E3F5-3320-8353-059C947A4DA5}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Operation: DNOperation read get_Operation;
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationFault = class(TDNGenericImport<DNOperationFaultClass, DNOperationFault>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationInputClass = interface(DNOperationMessageClass)
  ['{F065755A-8814-5E5C-8C8C-9036A354DECE}']
  { constructors } 

    {class} function init: DNOperationInput;

  end;

  [DNTypeName('System.Web.Services.Description.OperationInput')]
  DNOperationInput = interface(DNOperationMessage)
  ['{F0D1546A-CD19-31E7-9ED7-1F54A44D15C9}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Operation: DNOperation read get_Operation;
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationInput = class(TDNGenericImport<DNOperationInputClass, DNOperationInput>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNOperationOutputClass = interface(DNOperationMessageClass)
  ['{F2BF5B09-6181-5720-9F1F-CAE916C31A5E}']
  { constructors } 

    {class} function init: DNOperationOutput;

  end;

  [DNTypeName('System.Web.Services.Description.OperationOutput')]
  DNOperationOutput = interface(DNOperationMessage)
  ['{3923EF37-EFB1-360B-A386-82992AF85D74}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Operation: DNOperation;
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Operation: DNOperation read get_Operation;
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNOperationOutput = class(TDNGenericImport<DNOperationOutputClass, DNOperationOutput>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortClass = interface(DNNamedItemClass)
  ['{383AEC24-A76D-5221-94D8-31446780975D}']
  { constructors } 

    {class} function init: DNPort;

  end;

  [DNTypeName('System.Web.Services.Description.Port')]
  DNPort = interface(DNNamedItem)
  ['{07BD011F-4825-3C83-A05A-C3A18D88E935}']
  { getters & setters } 

    function get_Service: DNService;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Binding: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Binding(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Service: DNService read get_Service;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Binding: DDN.System.Xml.DNXmlQualifiedName read get_Binding write set_Binding;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNPort = class(TDNGenericImport<DNPortClass, DNPort>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNPortTypeClass = interface(DNNamedItemClass)
  ['{45347A1A-4F69-5D49-8412-094C9B23F634}']
  { constructors } 

    {class} function init: DNPortType;

  end;

  [DNTypeName('System.Web.Services.Description.PortType')]
  DNPortType = interface(DNNamedItem)
  ['{9071F449-C1CD-307D-83C4-034D5285DF6D}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_ServiceDescription: DNServiceDescription;
    function get_Operations: DNOperationCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    property Operations: DNOperationCollection read get_Operations;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNPortType = class(TDNGenericImport<DNPortTypeClass, DNPortType>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceClass = interface(DNNamedItemClass)
  ['{604F4993-F415-511C-B8CB-E374835647A3}']
  { constructors } 

    {class} function init: DNService;

  end;

  [DNTypeName('System.Web.Services.Description.Service')]
  DNService = interface(DNNamedItem)
  ['{DEA43AAB-E2E7-3348-81C5-C279AFC3B03D}']
  { getters & setters } 

    function get_ServiceDescription: DNServiceDescription;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Ports: DNPortCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Ports: DNPortCollection read get_Ports;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNService = class(TDNGenericImport<DNServiceClass, DNService>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionClass = interface(DNNamedItemClass)
  ['{C238E77B-1D57-5DCB-A949-288247734BF3}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;
    {class} function get_Serializer: DDN.System.Xml.DNXmlSerializer;

  { constructors } 

    {class} function init: DNServiceDescription;

  { static methods } 

    {class} function Read(textReader: DDN.mscorlib.DNTextReader): DNServiceDescription; overload;
    {class} function Read(stream: DDN.mscorlib.DNStream): DNServiceDescription; overload;
    {class} function Read(reader: DDN.System.Xml.DNXmlReader): DNServiceDescription; overload;
    {class} function Read(fileName: string): DNServiceDescription; overload;
    {class} function Read(fileName: string; validate: Boolean): DNServiceDescription; overload;
    {class} function Read(textReader: DDN.mscorlib.DNTextReader; validate: Boolean): DNServiceDescription; overload;
    {class} function Read(stream: DDN.mscorlib.DNStream; validate: Boolean): DNServiceDescription; overload;
    {class} function Read(reader: DDN.System.Xml.DNXmlReader; validate: Boolean): DNServiceDescription; overload;
    {class} function CanRead(reader: DDN.System.Xml.DNXmlReader): Boolean;

  { static propertys } 

    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
    {class} property Serializer: DDN.System.Xml.DNXmlSerializer read get_Serializer;
  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescription')]
  DNServiceDescription = interface(DNNamedItem)
  ['{8BCC7200-84AC-38CF-AF7D-782CDD36B557}']
  { getters & setters } 

    function get_RetrievalUrl: string;
    procedure set_RetrievalUrl(value: string);
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Imports: DNImportCollection;
    function get_Types: DNTypes;
    procedure set_Types(value: DNTypes);
    function get_Messages: DNMessageCollection;
    function get_PortTypes: DNPortTypeCollection;
    function get_Bindings: DNBindingCollection;
    function get_Services: DNServiceCollection;
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_ValidationWarnings: DDN.System.DNStringCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    procedure Write(fileName: string); overload;
    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Write(writer: DDN.System.Xml.DNXmlWriter); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RetrievalUrl: string read get_RetrievalUrl write set_RetrievalUrl;
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Imports: DNImportCollection read get_Imports;
    property Types: DNTypes read get_Types write set_Types;
    property Messages: DNMessageCollection read get_Messages;
    property PortTypes: DNPortTypeCollection read get_PortTypes;
    property Bindings: DNBindingCollection read get_Bindings;
    property Services: DNServiceCollection read get_Services;
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    property ValidationWarnings: DDN.System.DNStringCollection read get_ValidationWarnings;
    property Name: string read get_Name write set_Name;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNServiceDescription = class(TDNGenericImport<DNServiceDescriptionClass, DNServiceDescription>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/wsdl/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNTypesClass = interface(DNDocumentableItemClass)
  ['{874C7C29-DD7C-5F47-94AD-0318C93B2BB0}']
  { constructors } 

    {class} function init: DNTypes;

  end;

  [DNTypeName('System.Web.Services.Description.Types')]
  DNTypes = interface(DNDocumentableItem)
  ['{FD53E581-5BF2-395B-B172-72C6D1EA00E3}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_Documentation: string;
    procedure set_Documentation(value: string);
    function get_DocumentationElement: DDN.System.Xml.DNXmlElement;
    procedure set_DocumentationElement(value: DDN.System.Xml.DNXmlElement);
    function get_ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute>;
    procedure set_ExtensibleAttributes(value: TArray<DDN.System.Xml.DNXmlAttribute>);
    function get_Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DDN.System.Xml.DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    property Documentation: string read get_Documentation write set_Documentation;
    property DocumentationElement: DDN.System.Xml.DNXmlElement read get_DocumentationElement write set_DocumentationElement;
    property ExtensibleAttributes: TArray<DDN.System.Xml.DNXmlAttribute> read get_ExtensibleAttributes write set_ExtensibleAttributes;
    property Namespaces: DDN.System.Xml.DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNTypes = class(TDNGenericImport<DNTypesClass, DNTypes>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextMatchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99CDB98B-8E2A-5B5C-A341-7C8405BE23E3}']
  { constructors } 

    {class} function init: DNMimeTextMatch;

  end;

  [DNTypeName('System.Web.Services.Description.MimeTextMatch')]
  DNMimeTextMatch = interface(DDN.mscorlib.DNObject)
  ['{3137DAB1-3EB9-3739-965D-0FDC02E1BE99}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Group: Int32;
    procedure set_Group(value: Int32);
    function get_Capture: Int32;
    procedure set_Capture(value: Int32);
    function get_Repeats: Int32;
    procedure set_Repeats(value: Int32);
    function get_RepeatsString: string;
    procedure set_RepeatsString(value: string);
    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_Matches: DNMimeTextMatchCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property Group: Int32 read get_Group write set_Group;
    property Capture: Int32 read get_Capture write set_Capture;
    property Repeats: Int32 read get_Repeats write set_Repeats;
    property RepeatsString: string read get_RepeatsString write set_RepeatsString;
    property Pattern: string read get_Pattern write set_Pattern;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property Matches: DNMimeTextMatchCollection read get_Matches;
  end;

  TDNMimeTextMatch = class(TDNGenericImport<DNMimeTextMatchClass, DNMimeTextMatch>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNProtocolImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F968D54-1145-5682-8CA5-010B7AE376C7}']
  end;

  [DNTypeName('System.Web.Services.Description.ProtocolImporter')]
  DNProtocolImporter = interface(DDN.mscorlib.DNObject)
  ['{A4B23FBB-6B0D-325B-AD7C-04678CB70D7B}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_AbstractSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_ConcreteSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_CodeNamespace: DDN.System.DNCodeNamespace;
    function get_CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration;
    function get_Style: DNServiceDescriptionImportStyle;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ClassNames: DDN.System.Xml.DNCodeIdentifiers;
    function get_MethodName: string;
    function get_ClassName: string;
    function get_Port: DNPort;
    function get_PortType: DNPortType;
    function get_Binding: DNBinding;
    function get_Service: DNService;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;
    function get_ProtocolName: string;

  { methods } 

    procedure AddExtensionWarningComments(comments: DDN.System.DNCodeCommentStatementCollection; extensions: DNServiceDescriptionFormatExtensionCollection);
    procedure UnsupportedBindingWarning(text: string);
    procedure UnsupportedOperationWarning(text: string);
    procedure UnsupportedOperationBindingWarning(text: string);
    function OperationSyntaxException(text: string): DDN.mscorlib.DNException;
    function OperationBindingSyntaxException(text: string): DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    property AbstractSchemas: DDN.System.Xml.DNXmlSchemas read get_AbstractSchemas;
    property ConcreteSchemas: DDN.System.Xml.DNXmlSchemas read get_ConcreteSchemas;
    property CodeNamespace: DDN.System.DNCodeNamespace read get_CodeNamespace;
    property CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration read get_CodeTypeDeclaration;
    property Style: DNServiceDescriptionImportStyle read get_Style;
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    property ClassNames: DDN.System.Xml.DNCodeIdentifiers read get_ClassNames;
    property MethodName: string read get_MethodName;
    property ClassName: string read get_ClassName;
    property Port: DNPort read get_Port;
    property PortType: DNPortType read get_PortType;
    property Binding: DNBinding read get_Binding;
    property Service: DNService read get_Service;
    property Operation: DNOperation read get_Operation;
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property InputMessage: DNMessage read get_InputMessage;
    property OutputMessage: DNMessage read get_OutputMessage;
    property ProtocolName: string read get_ProtocolName;
  end;

  TDNProtocolImporter = class(TDNGenericImport<DNProtocolImporterClass, DNProtocolImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapProtocolImporterClass = interface(DNProtocolImporterClass)
  ['{195A8A9E-47B2-5771-9EB7-60BCE3C60D0D}']
  { constructors } 

    {class} function init: DNSoapProtocolImporter;

  end;

  [DNTypeName('System.Web.Services.Description.SoapProtocolImporter')]
  DNSoapProtocolImporter = interface(DNProtocolImporter)
  ['{5C3BFE62-0766-3AAD-9EB3-D9603AF56BAB}']
  { getters & setters } 

    function get_ProtocolName: string;
    function get_SoapBinding: DNDescription_SoapBinding;
    function get_SoapImporter: DDN.System.Xml.DNSoapSchemaImporter;
    function get_XmlImporter: DDN.System.Xml.DNXmlSchemaImporter;
    function get_XmlExporter: DDN.System.Xml.DNXmlCodeExporter;
    function get_SoapExporter: DDN.System.Xml.DNSoapCodeExporter;
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_AbstractSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_ConcreteSchemas: DDN.System.Xml.DNXmlSchemas;
    function get_CodeNamespace: DDN.System.DNCodeNamespace;
    function get_CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration;
    function get_Style: DNServiceDescriptionImportStyle;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ClassNames: DDN.System.Xml.DNCodeIdentifiers;
    function get_MethodName: string;
    function get_ClassName: string;
    function get_Port: DNPort;
    function get_PortType: DNPortType;
    function get_Binding: DNBinding;
    function get_Service: DNService;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;

  { methods } 

    procedure AddExtensionWarningComments(comments: DDN.System.DNCodeCommentStatementCollection; extensions: DNServiceDescriptionFormatExtensionCollection);
    procedure UnsupportedBindingWarning(text: string);
    procedure UnsupportedOperationWarning(text: string);
    procedure UnsupportedOperationBindingWarning(text: string);
    function OperationSyntaxException(text: string): DDN.mscorlib.DNException;
    function OperationBindingSyntaxException(text: string): DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProtocolName: string read get_ProtocolName;
    property SoapBinding: DNDescription_SoapBinding read get_SoapBinding;
    property SoapImporter: DDN.System.Xml.DNSoapSchemaImporter read get_SoapImporter;
    property XmlImporter: DDN.System.Xml.DNXmlSchemaImporter read get_XmlImporter;
    property XmlExporter: DDN.System.Xml.DNXmlCodeExporter read get_XmlExporter;
    property SoapExporter: DDN.System.Xml.DNSoapCodeExporter read get_SoapExporter;
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    property AbstractSchemas: DDN.System.Xml.DNXmlSchemas read get_AbstractSchemas;
    property ConcreteSchemas: DDN.System.Xml.DNXmlSchemas read get_ConcreteSchemas;
    property CodeNamespace: DDN.System.DNCodeNamespace read get_CodeNamespace;
    property CodeTypeDeclaration: DDN.System.DNCodeTypeDeclaration read get_CodeTypeDeclaration;
    property Style: DNServiceDescriptionImportStyle read get_Style;
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    property ClassNames: DDN.System.Xml.DNCodeIdentifiers read get_ClassNames;
    property MethodName: string read get_MethodName;
    property ClassName: string read get_ClassName;
    property Port: DNPort read get_Port;
    property PortType: DNPortType read get_PortType;
    property Binding: DNBinding read get_Binding;
    property Service: DNService read get_Service;
    property Operation: DNOperation read get_Operation;
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property InputMessage: DNMessage read get_InputMessage;
    property OutputMessage: DNMessage read get_OutputMessage;
  end;

  TDNSoapProtocolImporter = class(TDNGenericImport<DNSoapProtocolImporterClass, DNSoapProtocolImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNProtocolReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E00F61E-FB8C-59F2-B776-588477CD5910}']
  end;

  [DNTypeName('System.Web.Services.Description.ProtocolReflector')]
  DNProtocolReflector = interface(DDN.mscorlib.DNObject)
  ['{59BA2930-BDA6-3C4D-A672-4E86576EF2E7}']
  { getters & setters } 

    function get_Service: DNService;
    function get_ServiceDescription: DNServiceDescription;
    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_SchemaExporter: DDN.System.Xml.DNXmlSchemaExporter;
    function get_ReflectionImporter: DDN.System.Xml.DNXmlReflectionImporter;
    function get_DefaultNamespace: string;
    function get_ServiceUrl: string;
    function get_ServiceType: DDN.mscorlib.DNType;
    function get_Method: DNLogicalMethodInfo;
    function get_Binding: DNBinding;
    function get_PortType: DNPortType;
    function get_Port: DNPort;
    function get_Operation: DNOperation;
    function get_OperationBinding: DNOperationBinding;
    function get_MethodAttribute: DNWebMethodAttribute;
    function get_Methods: TArray<DNLogicalMethodInfo>;
    function get_InputMessage: DNMessage;
    function get_OutputMessage: DNMessage;
    function get_HeaderMessages: DNMessageCollection;
    function get_ProtocolName: string;

  { methods } 

    function GetServiceDescription(ns: string): DNServiceDescription;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Service: DNService read get_Service;
    property ServiceDescription: DNServiceDescription read get_ServiceDescription;
    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    property SchemaExporter: DDN.System.Xml.DNXmlSchemaExporter read get_SchemaExporter;
    property ReflectionImporter: DDN.System.Xml.DNXmlReflectionImporter read get_ReflectionImporter;
    property DefaultNamespace: string read get_DefaultNamespace;
    property ServiceUrl: string read get_ServiceUrl;
    property ServiceType: DDN.mscorlib.DNType read get_ServiceType;
    property Method: DNLogicalMethodInfo read get_Method;
    property Binding: DNBinding read get_Binding;
    property PortType: DNPortType read get_PortType;
    property Port: DNPort read get_Port;
    property Operation: DNOperation read get_Operation;
    property OperationBinding: DNOperationBinding read get_OperationBinding;
    property MethodAttribute: DNWebMethodAttribute read get_MethodAttribute;
    property Methods: TArray<DNLogicalMethodInfo> read get_Methods;
    property InputMessage: DNMessage read get_InputMessage;
    property OutputMessage: DNMessage read get_OutputMessage;
    property HeaderMessages: DNMessageCollection read get_HeaderMessages;
    property ProtocolName: string read get_ProtocolName;
  end;

  TDNProtocolReflector = class(TDNGenericImport<DNProtocolReflectorClass, DNProtocolReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionFormatExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BA940F31-4FDE-5486-AD68-6019B8C14D4C}']
  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescriptionFormatExtension')]
  DNServiceDescriptionFormatExtension = interface(DDN.mscorlib.DNObject)
  ['{4B053390-4782-35FD-B385-41E959724571}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNServiceDescriptionFormatExtension = class(TDNGenericImport<DNServiceDescriptionFormatExtensionClass, DNServiceDescriptionFormatExtension>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpAddressBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{1C700106-6759-57B6-8BFF-76F9272F1B65}']
  { constructors } 

    {class} function init: DNHttpAddressBinding;

  end;

  [DNTypeName('System.Web.Services.Description.HttpAddressBinding')]
  DNHttpAddressBinding = interface(DNServiceDescriptionFormatExtension)
  ['{E0C80317-09F5-30B2-8FB5-A7A165A8023F}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Location: string read get_Location write set_Location;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpAddressBinding = class(TDNGenericImport<DNHttpAddressBindingClass, DNHttpAddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{1DC4D0DA-5BB0-5617-AB22-8EB54A997F03}']
  { constructors } 

    {class} function init: DNHttpBinding;

  end;

  [DNTypeName('System.Web.Services.Description.HttpBinding')]
  DNHttpBinding = interface(DNServiceDescriptionFormatExtension)
  ['{0B79E71A-FB26-3701-A240-E9671AF62C99}']
  { getters & setters } 

    function get_Verb: string;
    procedure set_Verb(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Verb: string read get_Verb write set_Verb;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpBinding = class(TDNGenericImport<DNHttpBindingClass, DNHttpBinding>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/wsdl/http/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpOperationBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DF9163D7-5EF3-5F59-AB53-DAA40957E068}']
  { constructors } 

    {class} function init: DNHttpOperationBinding;

  end;

  [DNTypeName('System.Web.Services.Description.HttpOperationBinding')]
  DNHttpOperationBinding = interface(DNServiceDescriptionFormatExtension)
  ['{72447989-C247-3B50-B539-174632EA0829}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Location: string read get_Location write set_Location;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpOperationBinding = class(TDNGenericImport<DNHttpOperationBindingClass, DNHttpOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpUrlEncodedBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{B9F8DCC4-030F-530C-8EB1-F875A5DC6E60}']
  { constructors } 

    {class} function init: DNHttpUrlEncodedBinding;

  end;

  [DNTypeName('System.Web.Services.Description.HttpUrlEncodedBinding')]
  DNHttpUrlEncodedBinding = interface(DNServiceDescriptionFormatExtension)
  ['{A8E9F29B-FFA1-3935-8831-61DCB5F8699C}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpUrlEncodedBinding = class(TDNGenericImport<DNHttpUrlEncodedBindingClass, DNHttpUrlEncodedBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNHttpUrlReplacementBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DC12ED70-DB21-5B29-9B41-5362FB2BC752}']
  { constructors } 

    {class} function init: DNHttpUrlReplacementBinding;

  end;

  [DNTypeName('System.Web.Services.Description.HttpUrlReplacementBinding')]
  DNHttpUrlReplacementBinding = interface(DNServiceDescriptionFormatExtension)
  ['{1F56DF7C-9632-36C7-828C-E2F78E3AD0EE}']
  { getters & setters } 

    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHttpUrlReplacementBinding = class(TDNGenericImport<DNHttpUrlReplacementBindingClass, DNHttpUrlReplacementBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeContentBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{4F79A2E0-67F6-56C3-8F79-1F42D8DA2A92}']
  { constructors } 

    {class} function init: DNMimeContentBinding;

  end;

  [DNTypeName('System.Web.Services.Description.MimeContentBinding')]
  DNMimeContentBinding = interface(DNServiceDescriptionFormatExtension)
  ['{2AC82FCF-9A51-3431-B679-A9F19DE57991}']
  { getters & setters } 

    function get_Part: string;
    procedure set_Part(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Part: string read get_Part write set_Part;
    property &Type: string read get_Type write set_Type;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeContentBinding = class(TDNGenericImport<DNMimeContentBindingClass, DNMimeContentBinding>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/wsdl/mime/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeMultipartRelatedBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{DBEC29B5-F914-5F67-A4DD-749A0E64F4A7}']
  { constructors } 

    {class} function init: DNMimeMultipartRelatedBinding;

  end;

  [DNTypeName('System.Web.Services.Description.MimeMultipartRelatedBinding')]
  DNMimeMultipartRelatedBinding = interface(DNServiceDescriptionFormatExtension)
  ['{C88EB1EF-0525-33BC-A86E-21A667D15E29}']
  { getters & setters } 

    function get_Parts: DNMimePartCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parts: DNMimePartCollection read get_Parts;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeMultipartRelatedBinding = class(TDNGenericImport<DNMimeMultipartRelatedBindingClass, DNMimeMultipartRelatedBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimePartClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{CBDF42A7-C95A-5E49-B11D-8F75DF078D33}']
  { constructors } 

    {class} function init: DNMimePart;

  end;

  [DNTypeName('System.Web.Services.Description.MimePart')]
  DNMimePart = interface(DNServiceDescriptionFormatExtension)
  ['{5772EC04-543F-3DB5-8436-7E7BABAC5850}']
  { getters & setters } 

    function get_Extensions: DNServiceDescriptionFormatExtensionCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: DNServiceDescriptionFormatExtensionCollection read get_Extensions;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimePart = class(TDNGenericImport<DNMimePartClass, DNMimePart>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeTextBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{919A10C2-3463-5C89-B84A-487B59771EC2}']
  { constructors } 

    {class} function init: DNMimeTextBinding;

  end;

  [DNTypeName('System.Web.Services.Description.MimeTextBinding')]
  DNMimeTextBinding = interface(DNServiceDescriptionFormatExtension)
  ['{F2002E31-CA87-392D-8E93-950762F1ED89}']
  { getters & setters } 

    function get_Matches: DNMimeTextMatchCollection;
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Matches: DNMimeTextMatchCollection read get_Matches;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeTextBinding = class(TDNGenericImport<DNMimeTextBindingClass, DNMimeTextBinding>)
  public const
   Namespace = 'http://microsoft.com/wsdl/mime/textMatching/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNMimeXmlBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{0EB14F68-86D5-5BB5-A979-E71AE03A18EE}']
  { constructors } 

    {class} function init: DNMimeXmlBinding;

  end;

  [DNTypeName('System.Web.Services.Description.MimeXmlBinding')]
  DNMimeXmlBinding = interface(DNServiceDescriptionFormatExtension)
  ['{202782E1-F0BF-30AC-B810-EAA5B6B3A8A4}']
  { getters & setters } 

    function get_Part: string;
    procedure set_Part(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Part: string read get_Part write set_Part;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNMimeXmlBinding = class(TDNGenericImport<DNMimeXmlBindingClass, DNMimeXmlBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapAddressBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{BF14C764-E48D-5C75-A486-E18208C80555}']
  { constructors } 

    {class} function init: DNSoapAddressBinding;

  end;

  [DNTypeName('System.Web.Services.Description.SoapAddressBinding')]
  DNSoapAddressBinding = interface(DNServiceDescriptionFormatExtension)
  ['{9394509A-247C-3837-A5AD-842F11DD1A31}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Location: string read get_Location write set_Location;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapAddressBinding = class(TDNGenericImport<DNSoapAddressBindingClass, DNSoapAddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12AddressBindingClass = interface(DNSoapAddressBindingClass)
  ['{BB6890B6-F58A-5C3F-A5B3-90FF6B917B85}']
  { constructors } 

    {class} function init: DNSoap12AddressBinding;

  end;

  [DNTypeName('System.Web.Services.Description.Soap12AddressBinding')]
  DNSoap12AddressBinding = interface(DNSoapAddressBinding)
  ['{E6FB2398-2D89-3AE0-9EAD-756622618FD7}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Location: string read get_Location write set_Location;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12AddressBinding = class(TDNGenericImport<DNSoap12AddressBindingClass, DNSoap12AddressBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNDescription_SoapBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{7556E67D-34D3-53FB-A96C-F2C440F84C3B}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;

  { constructors } 

    {class} function init: DNDescription_SoapBinding;

  { static propertys } 

    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
  end;

  [DNTypeName('System.Web.Services.Description.SoapBinding')]
  DNDescription_SoapBinding = interface(DNServiceDescriptionFormatExtension)
  ['{5C157D9E-2E33-32D4-B91C-9FB7973816F4}']
  { getters & setters } 

    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transport: string read get_Transport write set_Transport;
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNDescription_SoapBinding = class(TDNGenericImport<DNDescription_SoapBindingClass, DNDescription_SoapBinding>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/wsdl/soap/';
   HttpTransport = 'http://schemas.xmlsoap.org/soap/http';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12BindingClass = interface(DNDescription_SoapBindingClass)
  ['{3BFCBBDD-42FE-5377-A4EE-1DF31D66A968}']
  { constructors } 

    {class} function init: DNSoap12Binding;

  end;

  [DNTypeName('System.Web.Services.Description.Soap12Binding')]
  DNSoap12Binding = interface(DNDescription_SoapBinding)
  ['{104F99E0-1E53-33A2-89AE-90043973EEDB}']
  { getters & setters } 

    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transport: string read get_Transport write set_Transport;
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12Binding = class(TDNGenericImport<DNSoap12BindingClass, DNSoap12Binding>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/wsdl/soap12/';
   HttpTransport = 'http://schemas.xmlsoap.org/soap/http';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapBodyBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{64FA76A2-FC20-5C9F-B455-844C8C244D05}']
  { constructors } 

    {class} function init: DNSoapBodyBinding;

  end;

  [DNTypeName('System.Web.Services.Description.SoapBodyBinding')]
  DNSoapBodyBinding = interface(DNServiceDescriptionFormatExtension)
  ['{B3D26E8E-4FC1-3FF0-8161-8CC1C073772E}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_PartsString: string;
    procedure set_PartsString(value: string);
    function get_Parts: TArray<string>;
    procedure set_Parts(value: TArray<string>);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Namespace: string read get_Namespace write set_Namespace;
    property Encoding: string read get_Encoding write set_Encoding;
    property PartsString: string read get_PartsString write set_PartsString;
    property Parts: TArray<string> read get_Parts write set_Parts;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapBodyBinding = class(TDNGenericImport<DNSoapBodyBindingClass, DNSoapBodyBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12BodyBindingClass = interface(DNSoapBodyBindingClass)
  ['{46EEFC0D-E2C7-523F-8692-E8DE549BEB13}']
  { constructors } 

    {class} function init: DNSoap12BodyBinding;

  end;

  [DNTypeName('System.Web.Services.Description.Soap12BodyBinding')]
  DNSoap12BodyBinding = interface(DNSoapBodyBinding)
  ['{C2E83DE7-A249-3CED-A222-53C2D893A01D}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_PartsString: string;
    procedure set_PartsString(value: string);
    function get_Parts: TArray<string>;
    procedure set_Parts(value: TArray<string>);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Namespace: string read get_Namespace write set_Namespace;
    property Encoding: string read get_Encoding write set_Encoding;
    property PartsString: string read get_PartsString write set_PartsString;
    property Parts: TArray<string> read get_Parts write set_Parts;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12BodyBinding = class(TDNGenericImport<DNSoap12BodyBindingClass, DNSoap12BodyBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapFaultBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{BFC821D6-D1DD-5596-8FEE-1D8A6E7920BD}']
  { constructors } 

    {class} function init: DNSoapFaultBinding;

  end;

  [DNTypeName('System.Web.Services.Description.SoapFaultBinding')]
  DNSoapFaultBinding = interface(DNServiceDescriptionFormatExtension)
  ['{1E2734B6-40BB-32DE-BC96-B8BFB1A9C203}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property Encoding: string read get_Encoding write set_Encoding;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapFaultBinding = class(TDNGenericImport<DNSoapFaultBindingClass, DNSoapFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12FaultBindingClass = interface(DNSoapFaultBindingClass)
  ['{39F0C6DE-C95F-506C-8E21-14B5317874A1}']
  { constructors } 

    {class} function init: DNSoap12FaultBinding;

  end;

  [DNTypeName('System.Web.Services.Description.Soap12FaultBinding')]
  DNSoap12FaultBinding = interface(DNSoapFaultBinding)
  ['{9738C068-F155-3188-B097-BB9C82C6BAF2}']
  { getters & setters } 

    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property Encoding: string read get_Encoding write set_Encoding;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12FaultBinding = class(TDNGenericImport<DNSoap12FaultBindingClass, DNSoap12FaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapHeaderBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{802D010C-F16B-55B7-928C-42F881C997E2}']
  { constructors } 

    {class} function init: DNSoapHeaderBinding;

  end;

  [DNTypeName('System.Web.Services.Description.SoapHeaderBinding')]
  DNSoapHeaderBinding = interface(DNServiceDescriptionFormatExtension)
  ['{9DBF5F11-6B80-3F11-8AA0-2BE02565CC07}']
  { getters & setters } 

    function get_MapToProperty: Boolean;
    procedure set_MapToProperty(value: Boolean);
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Fault: DNSoapHeaderFaultBinding;
    procedure set_Fault(value: DNSoapHeaderFaultBinding);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MapToProperty: Boolean read get_MapToProperty write set_MapToProperty;
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Part: string read get_Part write set_Part;
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Encoding: string read get_Encoding write set_Encoding;
    property Namespace: string read get_Namespace write set_Namespace;
    property Fault: DNSoapHeaderFaultBinding read get_Fault write set_Fault;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapHeaderBinding = class(TDNGenericImport<DNSoapHeaderBindingClass, DNSoapHeaderBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12HeaderBindingClass = interface(DNSoapHeaderBindingClass)
  ['{06CE11DE-4E59-5357-8DCD-6B6ECAC440BD}']
  { constructors } 

    {class} function init: DNSoap12HeaderBinding;

  end;

  [DNTypeName('System.Web.Services.Description.Soap12HeaderBinding')]
  DNSoap12HeaderBinding = interface(DNSoapHeaderBinding)
  ['{35707944-017B-30FC-8DC1-9B39698697DD}']
  { getters & setters } 

    function get_MapToProperty: Boolean;
    procedure set_MapToProperty(value: Boolean);
    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Fault: DNSoapHeaderFaultBinding;
    procedure set_Fault(value: DNSoapHeaderFaultBinding);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MapToProperty: Boolean read get_MapToProperty write set_MapToProperty;
    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Part: string read get_Part write set_Part;
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Encoding: string read get_Encoding write set_Encoding;
    property Namespace: string read get_Namespace write set_Namespace;
    property Fault: DNSoapHeaderFaultBinding read get_Fault write set_Fault;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12HeaderBinding = class(TDNGenericImport<DNSoap12HeaderBindingClass, DNSoap12HeaderBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapHeaderFaultBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{A464D7F5-A5D4-56E0-BD6A-2CEE787C410E}']
  { constructors } 

    {class} function init: DNSoapHeaderFaultBinding;

  end;

  [DNTypeName('System.Web.Services.Description.SoapHeaderFaultBinding')]
  DNSoapHeaderFaultBinding = interface(DNServiceDescriptionFormatExtension)
  ['{4EB4EC5A-66DB-3309-BAC9-D140CA269A43}']
  { getters & setters } 

    function get_Message: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Message(value: DDN.System.Xml.DNXmlQualifiedName);
    function get_Part: string;
    procedure set_Part(value: string);
    function get_Use: DNSoapBindingUse;
    procedure set_Use(value: DNSoapBindingUse);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Message: DDN.System.Xml.DNXmlQualifiedName read get_Message write set_Message;
    property Part: string read get_Part write set_Part;
    property Use: DNSoapBindingUse read get_Use write set_Use;
    property Encoding: string read get_Encoding write set_Encoding;
    property Namespace: string read get_Namespace write set_Namespace;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapHeaderFaultBinding = class(TDNGenericImport<DNSoapHeaderFaultBindingClass, DNSoapHeaderFaultBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapOperationBindingClass = interface(DNServiceDescriptionFormatExtensionClass)
  ['{03F31EE8-D48C-524B-81A5-D23C193BA96D}']
  { constructors } 

    {class} function init: DNSoapOperationBinding;

  end;

  [DNTypeName('System.Web.Services.Description.SoapOperationBinding')]
  DNSoapOperationBinding = interface(DNServiceDescriptionFormatExtension)
  ['{ED7F89ED-9265-3E1F-949C-C7F67A7F585A}']
  { getters & setters } 

    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SoapAction: string read get_SoapAction write set_SoapAction;
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoapOperationBinding = class(TDNGenericImport<DNSoapOperationBindingClass, DNSoapOperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoap12OperationBindingClass = interface(DNSoapOperationBindingClass)
  ['{75582412-474B-5B25-8ACB-3710B777D45D}']
  { constructors } 

    {class} function init: DNSoap12OperationBinding;

  end;

  [DNTypeName('System.Web.Services.Description.Soap12OperationBinding')]
  DNSoap12OperationBinding = interface(DNSoapOperationBinding)
  ['{7C923004-9C40-3F26-8D22-9629686C3FFC}']
  { getters & setters } 

    function get_SoapActionRequired: Boolean;
    procedure set_SoapActionRequired(value: Boolean);
    function get_SoapAction: string;
    procedure set_SoapAction(value: string);
    function get_Style: DNSoapBindingStyle;
    procedure set_Style(value: DNSoapBindingStyle);
    function get_Parent: DDN.mscorlib.DNObject;
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SoapActionRequired: Boolean read get_SoapActionRequired write set_SoapActionRequired;
    property SoapAction: string read get_SoapAction write set_SoapAction;
    property Style: DNSoapBindingStyle read get_Style write set_Style;
    property Parent: DDN.mscorlib.DNObject read get_Parent;
    property Required: Boolean read get_Required write set_Required;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSoap12OperationBinding = class(TDNGenericImport<DNSoap12OperationBindingClass, DNSoap12OperationBinding>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5F0638B-C43D-55EC-B404-EAB91EBAE301}']
  { constructors } 

    {class} function init: DNServiceDescriptionImporter;

  { static methods } 

    {class} function GenerateWebReferences(webReferences: DNWebReferenceCollection; codeProvider: DDN.System.DNCodeDomProvider; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNWebReferenceOptions): DDN.System.DNStringCollection;

  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescriptionImporter')]
  DNServiceDescriptionImporter = interface(DDN.mscorlib.DNObject)
  ['{C6A12A8C-8A97-38EE-9394-9114437AF225}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;
    function get_Style: DNServiceDescriptionImportStyle;
    procedure set_Style(value: DNServiceDescriptionImportStyle);
    function get_CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions;
    procedure set_CodeGenerationOptions(value: DDN.System.Xml.DNCodeGenerationOptions);
    function get_CodeGenerator: DDN.System.DNCodeDomProvider;
    procedure set_CodeGenerator(value: DDN.System.DNCodeDomProvider);
    function get_ProtocolName: string;
    procedure set_ProtocolName(value: string);

  { methods } 

    procedure AddServiceDescription(serviceDescription: DNServiceDescription; appSettingUrlKey: string; appSettingBaseUrl: string);
    function Import(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNServiceDescriptionImportWarnings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
    property Style: DNServiceDescriptionImportStyle read get_Style write set_Style;
    property CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions read get_CodeGenerationOptions write set_CodeGenerationOptions;
    property CodeGenerator: DDN.System.DNCodeDomProvider read get_CodeGenerator write set_CodeGenerator;
    property ProtocolName: string read get_ProtocolName write set_ProtocolName;
  end;

  TDNServiceDescriptionImporter = class(TDNGenericImport<DNServiceDescriptionImporterClass, DNServiceDescriptionImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNServiceDescriptionReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{897BD507-381A-5F27-A6F5-0B755DE48C0A}']
  { constructors } 

    {class} function init: DNServiceDescriptionReflector;

  end;

  [DNTypeName('System.Web.Services.Description.ServiceDescriptionReflector')]
  DNServiceDescriptionReflector = interface(DDN.mscorlib.DNObject)
  ['{6DEC1030-B63B-3E06-8D81-0B96ABF1922A}']
  { getters & setters } 

    function get_ServiceDescriptions: DNServiceDescriptionCollection;
    function get_Schemas: DDN.System.Xml.DNXmlSchemas;

  { methods } 

    procedure Reflect(&type: DDN.mscorlib.DNType; url: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServiceDescriptions: DNServiceDescriptionCollection read get_ServiceDescriptions;
    property Schemas: DDN.System.Xml.DNXmlSchemas read get_Schemas;
  end;

  TDNServiceDescriptionReflector = class(TDNGenericImport<DNServiceDescriptionReflectorClass, DNServiceDescriptionReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapExtensionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A956D768-0252-5EA5-B926-E99ED73E1194}']
  end;

  [DNTypeName('System.Web.Services.Description.SoapExtensionImporter')]
  DNSoapExtensionImporter = interface(DDN.mscorlib.DNObject)
  ['{CE806377-A53C-3B54-A005-80076BF6D263}']
  { getters & setters } 

    function get_ImportContext: DNSoapProtocolImporter;
    procedure set_ImportContext(value: DNSoapProtocolImporter);

  { methods } 

    procedure ImportMethod(metadata: DDN.System.DNCodeAttributeDeclarationCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImportContext: DNSoapProtocolImporter read get_ImportContext write set_ImportContext;
  end;

  TDNSoapExtensionImporter = class(TDNGenericImport<DNSoapExtensionImporterClass, DNSoapExtensionImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapExtensionReflectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9734253B-E9D0-587E-B208-CBB057B6A3B2}']
  end;

  [DNTypeName('System.Web.Services.Description.SoapExtensionReflector')]
  DNSoapExtensionReflector = interface(DDN.mscorlib.DNObject)
  ['{0AA575E2-082A-3A24-B439-11435D0EA1F8}']
  { getters & setters } 

    function get_ReflectionContext: DNProtocolReflector;
    procedure set_ReflectionContext(value: DNProtocolReflector);

  { methods } 

    procedure ReflectDescription;
    procedure ReflectMethod;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReflectionContext: DNProtocolReflector read get_ReflectionContext write set_ReflectionContext;
  end;

  TDNSoapExtensionReflector = class(TDNGenericImport<DNSoapExtensionReflectorClass, DNSoapExtensionReflector>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNSoapTransportImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC1347AB-1794-58E2-BB5E-10F1D3AE05B3}']
  end;

  [DNTypeName('System.Web.Services.Description.SoapTransportImporter')]
  DNSoapTransportImporter = interface(DDN.mscorlib.DNObject)
  ['{710E0CB5-0A54-3A94-990E-12DB08E391C2}']
  { getters & setters } 

    function get_ImportContext: DNSoapProtocolImporter;
    procedure set_ImportContext(value: DNSoapProtocolImporter);

  { methods } 

    function IsSupportedTransport(transport: string): Boolean;
    procedure ImportClass;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImportContext: DNSoapProtocolImporter read get_ImportContext write set_ImportContext;
  end;

  TDNSoapTransportImporter = class(TDNGenericImport<DNSoapTransportImporterClass, DNSoapTransportImporter>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0EE847A3-B426-5B19-B1DE-7A9FEA958424}']
  { constructors } 

    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace; protocolName: string; appSettingUrlKey: string; appSettingBaseUrl: string): DNWebReference; overload;
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace): DNWebReference; overload;
    {class} function init(documents: DNDiscoveryClientDocumentCollection; proxyCode: DDN.System.DNCodeNamespace; appSettingUrlKey: string; appSettingBaseUrl: string): DNWebReference; overload;

  end;

  [DNTypeName('System.Web.Services.Description.WebReference')]
  DNWebReference = interface(DDN.mscorlib.DNObject)
  ['{299634D7-C075-335A-9215-BBDCC86D09DA}']
  { getters & setters } 

    function get_AppSettingBaseUrl: string;
    function get_AppSettingUrlKey: string;
    function get_Documents: DNDiscoveryClientDocumentCollection;
    function get_ProxyCode: DDN.System.DNCodeNamespace;
    function get_ValidationWarnings: DDN.System.DNStringCollection;
    function get_Warnings: DNServiceDescriptionImportWarnings;
    procedure set_Warnings(value: DNServiceDescriptionImportWarnings);
    function get_ProtocolName: string;
    procedure set_ProtocolName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppSettingBaseUrl: string read get_AppSettingBaseUrl;
    property AppSettingUrlKey: string read get_AppSettingUrlKey;
    property Documents: DNDiscoveryClientDocumentCollection read get_Documents;
    property ProxyCode: DDN.System.DNCodeNamespace read get_ProxyCode;
    property ValidationWarnings: DDN.System.DNStringCollection read get_ValidationWarnings;
    property Warnings: DNServiceDescriptionImportWarnings read get_Warnings write set_Warnings;
    property ProtocolName: string read get_ProtocolName write set_ProtocolName;
  end;

  TDNWebReference = class(TDNGenericImport<DNWebReferenceClass, DNWebReference>) end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebReferenceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{399CCCBF-0F38-5841-BFDF-3E3DD860445E}']
  { static getter & setter } 

    {class} function get_Schema: DDN.System.Xml.DNXmlSchema;

  { constructors } 

    {class} function init: DNWebReferenceOptions;

  { static methods } 

    {class} function Read(reader: DDN.mscorlib.DNTextReader; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;
    {class} function Read(stream: DDN.mscorlib.DNStream; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;
    {class} function Read(xmlReader: DDN.System.Xml.DNXmlReader; validationEventHandler: DDN.System.Xml.DNValidationEventHandler): DNWebReferenceOptions; overload;

  { static propertys } 

    {class} property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
  end;

  [DNTypeName('System.Web.Services.Description.WebReferenceOptions')]
  DNWebReferenceOptions = interface(DDN.mscorlib.DNObject)
  ['{3302EADB-2127-3F1A-AD04-C5A48295E7C1}']
  { getters & setters } 

    function get_CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions;
    procedure set_CodeGenerationOptions(value: DDN.System.Xml.DNCodeGenerationOptions);
    function get_SchemaImporterExtensions: DDN.System.DNStringCollection;
    function get_Style: DNServiceDescriptionImportStyle;
    procedure set_Style(value: DNServiceDescriptionImportStyle);
    function get_Verbose: Boolean;
    procedure set_Verbose(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeGenerationOptions: DDN.System.Xml.DNCodeGenerationOptions read get_CodeGenerationOptions write set_CodeGenerationOptions;
    property SchemaImporterExtensions: DDN.System.DNStringCollection read get_SchemaImporterExtensions;
    property Style: DNServiceDescriptionImportStyle read get_Style write set_Style;
    property Verbose: Boolean read get_Verbose write set_Verbose;
  end;

  TDNWebReferenceOptions = class(TDNGenericImport<DNWebReferenceOptionsClass, DNWebReferenceOptions>)
  public const
   TargetNamespace = 'http://microsoft.com/webReference/';
  end;

  //-------------namespace: System.Web.Services.Description----------------
  DNWebServicesInteroperabilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7542D5AC-75B3-50E5-BE65-21CA437D1771}']
  { static methods } 

    {class} function CheckConformance(claims: DNWsiProfiles; description: DNServiceDescription; violations: DNBasicProfileViolationCollection): Boolean; overload;
    {class} function CheckConformance(claims: DNWsiProfiles; descriptions: DNServiceDescriptionCollection; violations: DNBasicProfileViolationCollection): Boolean; overload;
    {class} function CheckConformance(claims: DNWsiProfiles; webReference: DNWebReference; violations: DNBasicProfileViolationCollection): Boolean; overload;

  end;

  [DNTypeName('System.Web.Services.Description.WebServicesInteroperability')]
  DNWebServicesInteroperability = interface(DDN.mscorlib.DNObject)
  ['{46564511-E6C3-3536-AE9E-DDE549E3BB7C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServicesInteroperability = class(TDNGenericImport<DNWebServicesInteroperabilityClass, DNWebServicesInteroperability>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientProtocol_DiscoveryClientResultsFileClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66F1E0DA-F05A-5FDC-8769-6611A9F05BBF}']
  { constructors } 

    {class} function init: DNDiscoveryClientProtocol_DiscoveryClientResultsFile;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientProtocol+DiscoveryClientResultsFile')]
  DNDiscoveryClientProtocol_DiscoveryClientResultsFile = interface(DDN.mscorlib.DNObject)
  ['{D5F055DF-ADA6-3386-A4E5-5482E48FB580}']
  { getters & setters } 

    function get_Results: DNDiscoveryClientResultCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Results: DNDiscoveryClientResultCollection read get_Results;
  end;

  TDNDiscoveryClientProtocol_DiscoveryClientResultsFile = class(TDNGenericImport<DNDiscoveryClientProtocol_DiscoveryClientResultsFileClass, DNDiscoveryClientProtocol_DiscoveryClientResultsFile>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryClientResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43FB6836-EF92-5E30-B4EE-D8DC704585A1}']
  { constructors } 

    {class} function init: DNDiscoveryClientResult; overload;
    {class} function init(referenceType: DDN.mscorlib.DNType; url: string; filename: string): DNDiscoveryClientResult; overload;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryClientResult')]
  DNDiscoveryClientResult = interface(DDN.mscorlib.DNObject)
  ['{41F364AF-DC21-3011-B955-3E3AD937E270}']
  { getters & setters } 

    function get_ReferenceTypeName: string;
    procedure set_ReferenceTypeName(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Filename: string;
    procedure set_Filename(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReferenceTypeName: string read get_ReferenceTypeName write set_ReferenceTypeName;
    property Url: string read get_Url write set_Url;
    property Filename: string read get_Filename write set_Filename;
  end;

  TDNDiscoveryClientResult = class(TDNGenericImport<DNDiscoveryClientResultClass, DNDiscoveryClientResult>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E737A20B-28A2-5BEE-905F-E00D5EF072C9}']
  { constructors } 

    {class} function init: DNDiscoveryDocument;

  { static methods } 

    {class} function Read(stream: DDN.mscorlib.DNStream): DNDiscoveryDocument; overload;
    {class} function Read(reader: DDN.mscorlib.DNTextReader): DNDiscoveryDocument; overload;
    {class} function Read(xmlReader: DDN.System.Xml.DNXmlReader): DNDiscoveryDocument; overload;
    {class} function CanRead(xmlReader: DDN.System.Xml.DNXmlReader): Boolean;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocument')]
  DNDiscoveryDocument = interface(DDN.mscorlib.DNObject)
  ['{5E28BEB4-6A98-3974-985D-E5B6F6D9E558}']
  { getters & setters } 

    function get_References: DDN.mscorlib.DNIList;

  { methods } 

    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Write(writer: DDN.System.Xml.DNXmlWriter); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property References: DDN.mscorlib.DNIList read get_References;
  end;

  TDNDiscoveryDocument = class(TDNGenericImport<DNDiscoveryDocumentClass, DNDiscoveryDocument>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/disco/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3F2E33F-FDEB-5DA2-9205-394B5801F725}']
  { static methods } 

    {class} function FilenameFromUrl(url: string): string;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryReference')]
  DNDiscoveryReference = interface(DDN.mscorlib.DNObject)
  ['{90F3DA69-A16C-38AD-94EE-F23F3B9C73C5}']
  { getters & setters } 

    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);
    function get_DefaultFilename: string;
    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    procedure Resolve;
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
    property DefaultFilename: string read get_DefaultFilename;
    property Url: string read get_Url write set_Url;
  end;

  TDNDiscoveryReference = class(TDNGenericImport<DNDiscoveryReferenceClass, DNDiscoveryReference>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNContractReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{77770136-A368-5ECC-A2DF-55A7AAC0B018}']
  { constructors } 

    {class} function init: DNContractReference; overload;
    {class} function init(href: string): DNContractReference; overload;
    {class} function init(href: string; docRef: string): DNContractReference; overload;

  end;

  [DNTypeName('System.Web.Services.Discovery.ContractReference')]
  DNContractReference = interface(DNDiscoveryReference)
  ['{01089313-9BB8-3EDD-9D52-944D2FBC10BA}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_DocRef: string;
    procedure set_DocRef(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Contract: DNServiceDescription;
    function get_DefaultFilename: string;
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Ref: string read get_Ref write set_Ref;
    property DocRef: string read get_DocRef write set_DocRef;
    property Url: string read get_Url write set_Url;
    property Contract: DNServiceDescription read get_Contract;
    property DefaultFilename: string read get_DefaultFilename;
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNContractReference = class(TDNGenericImport<DNContractReferenceClass, DNContractReference>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/disco/scl/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{6042B283-1FA3-5850-9326-F7BBC3ECE3DC}']
  { constructors } 

    {class} function init: DNDiscoveryDocumentReference; overload;
    {class} function init(href: string): DNDiscoveryDocumentReference; overload;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentReference')]
  DNDiscoveryDocumentReference = interface(DNDiscoveryReference)
  ['{523E0D39-B0E1-3EBF-A2AE-40352826C739}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_DefaultFilename: string;
    function get_Document: DNDiscoveryDocument;
    function get_Url: string;
    procedure set_Url(value: string);
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    procedure ResolveAll;
    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Ref: string read get_Ref write set_Ref;
    property DefaultFilename: string read get_DefaultFilename;
    property Document: DNDiscoveryDocument read get_Document;
    property Url: string read get_Url write set_Url;
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNDiscoveryDocumentReference = class(TDNGenericImport<DNDiscoveryDocumentReferenceClass, DNDiscoveryDocumentReference>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNSchemaReferenceClass = interface(DNDiscoveryReferenceClass)
  ['{6CC92EDB-83B4-57FC-A5C3-1EE08168601E}']
  { constructors } 

    {class} function init: DNSchemaReference; overload;
    {class} function init(url: string): DNSchemaReference; overload;

  end;

  [DNTypeName('System.Web.Services.Discovery.SchemaReference')]
  DNSchemaReference = interface(DNDiscoveryReference)
  ['{F0C3D543-85B7-3A1A-9038-D146C8FA9B05}']
  { getters & setters } 

    function get_Ref: string;
    procedure set_Ref(value: string);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_DefaultFilename: string;
    function get_Schema: DDN.System.Xml.DNXmlSchema;
    function get_ClientProtocol: DNDiscoveryClientProtocol;
    procedure set_ClientProtocol(value: DNDiscoveryClientProtocol);

  { methods } 

    procedure WriteDocument(document: DDN.mscorlib.DNObject; stream: DDN.mscorlib.DNStream);
    function ReadDocument(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    procedure Resolve;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Ref: string read get_Ref write set_Ref;
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    property Url: string read get_Url write set_Url;
    property DefaultFilename: string read get_DefaultFilename;
    property Schema: DDN.System.Xml.DNXmlSchema read get_Schema;
    property ClientProtocol: DNDiscoveryClientProtocol read get_ClientProtocol write set_ClientProtocol;
  end;

  TDNSchemaReference = class(TDNGenericImport<DNSchemaReferenceClass, DNSchemaReference>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/disco/schema/';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryRequestHandlerClass = interface(DNObjectClass)
  ['{71B31E13-D4AA-5537-B179-EEB4788B6F34}']
  { constructors } 

    {class} function init: DNDiscoveryRequestHandler;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryRequestHandler')]
  DNDiscoveryRequestHandler = interface(DDN.System.Web.DNIHttpHandler)
  ['{E474F4B4-3CE1-308C-9A95-9BC212EA19E6}']
  { getters & setters } 

    function get_IsReusable: Boolean;

  { methods } 

    procedure ProcessRequest(context: DDN.System.Web.DNHttpContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReusable: Boolean read get_IsReusable;
  end;

  TDNDiscoveryRequestHandler = class(TDNGenericImport<DNDiscoveryRequestHandlerClass, DNDiscoveryRequestHandler>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoverySearchPatternClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70FFB100-4E57-5FD6-BF9C-F82A76B44867}']
  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoverySearchPattern')]
  DNDiscoverySearchPattern = interface(DDN.mscorlib.DNObject)
  ['{E8EBF995-6092-3F91-AEF1-C9664C65E01D}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern;
  end;

  TDNDiscoverySearchPattern = class(TDNGenericImport<DNDiscoverySearchPatternClass, DNDiscoverySearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNContractSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{EC1B7EEF-0008-5EF0-A235-B4E64C48C379}']
  { constructors } 

    {class} function init: DNContractSearchPattern;

  end;

  [DNTypeName('System.Web.Services.Discovery.ContractSearchPattern')]
  DNContractSearchPattern = interface(DNDiscoverySearchPattern)
  ['{EF0788F1-EDE3-3193-9ABD-5E686D2DEE1D}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern;
  end;

  TDNContractSearchPattern = class(TDNGenericImport<DNContractSearchPatternClass, DNContractSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentLinksPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{D8AFA33F-7606-5F28-AF86-B583BFF034B6}']
  { constructors } 

    {class} function init: DNDiscoveryDocumentLinksPattern;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentLinksPattern')]
  DNDiscoveryDocumentLinksPattern = interface(DNDiscoverySearchPattern)
  ['{A00BEED2-2CFB-3BA8-B2C8-9D5501154CB8}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern;
  end;

  TDNDiscoveryDocumentLinksPattern = class(TDNGenericImport<DNDiscoveryDocumentLinksPatternClass, DNDiscoveryDocumentLinksPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscoveryDocumentSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{4E2C0BCB-5130-576C-A20B-2D6E10CAB147}']
  { constructors } 

    {class} function init: DNDiscoveryDocumentSearchPattern;

  end;

  [DNTypeName('System.Web.Services.Discovery.DiscoveryDocumentSearchPattern')]
  DNDiscoveryDocumentSearchPattern = interface(DNDiscoverySearchPattern)
  ['{7586A445-02FC-33C5-B321-EABD06695DFE}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern;
  end;

  TDNDiscoveryDocumentSearchPattern = class(TDNGenericImport<DNDiscoveryDocumentSearchPatternClass, DNDiscoveryDocumentSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNXmlSchemaSearchPatternClass = interface(DNDiscoverySearchPatternClass)
  ['{0B5F096A-CE67-59D4-991A-B938639C52BE}']
  { constructors } 

    {class} function init: DNXmlSchemaSearchPattern;

  end;

  [DNTypeName('System.Web.Services.Discovery.XmlSchemaSearchPattern')]
  DNXmlSchemaSearchPattern = interface(DNDiscoverySearchPattern)
  ['{2CBB8153-9935-31B8-8045-769B8BAE1966}']
  { getters & setters } 

    function get_Pattern: string;

  { methods } 

    function GetDiscoveryReference(filename: string): DNDiscoveryReference;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern;
  end;

  TDNXmlSchemaSearchPattern = class(TDNGenericImport<DNXmlSchemaSearchPatternClass, DNXmlSchemaSearchPattern>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDynamicDiscoveryDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4755B04-9186-5755-AFB0-2BA15BDA53C8}']
  { constructors } 

    {class} function init: DNDynamicDiscoveryDocument;

  { static methods } 

    {class} function Load(stream: DDN.mscorlib.DNStream): DNDynamicDiscoveryDocument;

  end;

  [DNTypeName('System.Web.Services.Discovery.DynamicDiscoveryDocument')]
  DNDynamicDiscoveryDocument = interface(DDN.mscorlib.DNObject)
  ['{B19F428A-459D-37F9-8377-FC1E8420AC93}']
  { getters & setters } 

    function get_ExcludePaths: TArray<DNExcludePathInfo>;
    procedure set_ExcludePaths(value: TArray<DNExcludePathInfo>);

  { methods } 

    procedure Write(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExcludePaths: TArray<DNExcludePathInfo> read get_ExcludePaths write set_ExcludePaths;
  end;

  TDNDynamicDiscoveryDocument = class(TDNGenericImport<DNDynamicDiscoveryDocumentClass, DNDynamicDiscoveryDocument>)
  public const
   Namespace = 'urn:schemas-dynamicdiscovery:disco.2000-03-17';
  end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNExcludePathInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC419DBB-B529-5BF6-A5FD-7B9DF06C9706}']
  { constructors } 

    {class} function init: DNExcludePathInfo; overload;
    {class} function init(path: string): DNExcludePathInfo; overload;

  end;

  [DNTypeName('System.Web.Services.Discovery.ExcludePathInfo')]
  DNExcludePathInfo = interface(DDN.mscorlib.DNObject)
  ['{885281C6-1D9E-3CFE-8AC4-5F4BCE453653}']
  { getters & setters } 

    function get_Path: string;
    procedure set_Path(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Path: string read get_Path write set_Path;
  end;

  TDNExcludePathInfo = class(TDNGenericImport<DNExcludePathInfoClass, DNExcludePathInfo>) end;

  //-------------namespace: System.Web.Services.Discovery----------------
  DNDiscovery_SoapBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{23A56EDF-D428-54C2-9C3A-AD60B2D2E6CD}']
  { constructors } 

    {class} function init: DNDiscovery_SoapBinding;

  end;

  [DNTypeName('System.Web.Services.Discovery.SoapBinding')]
  DNDiscovery_SoapBinding = interface(DDN.mscorlib.DNObject)
  ['{24E235B1-486C-319F-BA46-5CE77DDE6828}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_Binding: DDN.System.Xml.DNXmlQualifiedName;
    procedure set_Binding(value: DDN.System.Xml.DNXmlQualifiedName);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Address: string read get_Address write set_Address;
    property Binding: DDN.System.Xml.DNXmlQualifiedName read get_Binding write set_Binding;
  end;

  TDNDiscovery_SoapBinding = class(TDNGenericImport<DNDiscovery_SoapBindingClass, DNDiscovery_SoapBinding>)
  public const
   Namespace = 'http://schemas.xmlsoap.org/disco/soap/';
  end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNLogicalMethodInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6697680C-9086-5CEE-8A60-A481DEE3F45C}']
  { constructors } 

    {class} function init(methodInfo: DDN.mscorlib.DNMethodInfo): DNLogicalMethodInfo;

  { static methods } 

    {class} function Create(methodInfos: TArray<DDN.mscorlib.DNMethodInfo>): TArray<DNLogicalMethodInfo>; overload;
    {class} function Create(methodInfos: TArray<DDN.mscorlib.DNMethodInfo>; types: DNLogicalMethodTypes): TArray<DNLogicalMethodInfo>; overload;
    {class} function IsBeginMethod(methodInfo: DDN.mscorlib.DNMethodInfo): Boolean;
    {class} function IsEndMethod(methodInfo: DDN.mscorlib.DNMethodInfo): Boolean;

  end;

  [DNTypeName('System.Web.Services.Protocols.LogicalMethodInfo')]
  DNLogicalMethodInfo = interface(DDN.mscorlib.DNObject)
  ['{4DA24A3C-2F47-3D15-B269-2E8CF4194796}']
  { getters & setters } 

    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_AsyncResultParameter: DDN.mscorlib.DNParameterInfo;
    function get_AsyncCallbackParameter: DDN.mscorlib.DNParameterInfo;
    function get_AsyncStateParameter: DDN.mscorlib.DNParameterInfo;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_IsVoid: Boolean;
    function get_IsAsync: Boolean;
    function get_InParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_OutParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_Parameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function get_CustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnTypeCustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider;
    function get_MethodInfo: DDN.mscorlib.DNMethodInfo;
    function get_BeginMethodInfo: DDN.mscorlib.DNMethodInfo;
    function get_EndMethodInfo: DDN.mscorlib.DNMethodInfo;

  { methods } 

    function ToString: string;
    function GetCustomAttribute(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Invoke(target: DDN.mscorlib.DNObject; values: TArray<DDN.mscorlib.DNObject>): TArray<DDN.mscorlib.DNObject>;
    function BeginInvoke(target: DDN.mscorlib.DNObject; values: TArray<DDN.mscorlib.DNObject>; callback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndInvoke(target: DDN.mscorlib.DNObject; asyncResult: DDN.mscorlib.DNIAsyncResult): TArray<DDN.mscorlib.DNObject>;
    function GetCustomAttributes(&type: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property Name: string read get_Name;
    property AsyncResultParameter: DDN.mscorlib.DNParameterInfo read get_AsyncResultParameter;
    property AsyncCallbackParameter: DDN.mscorlib.DNParameterInfo read get_AsyncCallbackParameter;
    property AsyncStateParameter: DDN.mscorlib.DNParameterInfo read get_AsyncStateParameter;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property IsVoid: Boolean read get_IsVoid;
    property IsAsync: Boolean read get_IsAsync;
    property InParameters: TArray<DDN.mscorlib.DNParameterInfo> read get_InParameters;
    property OutParameters: TArray<DDN.mscorlib.DNParameterInfo> read get_OutParameters;
    property Parameters: TArray<DDN.mscorlib.DNParameterInfo> read get_Parameters;
    property CustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider read get_CustomAttributeProvider;
    property ReturnTypeCustomAttributeProvider: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributeProvider;
    property MethodInfo: DDN.mscorlib.DNMethodInfo read get_MethodInfo;
    property BeginMethodInfo: DDN.mscorlib.DNMethodInfo read get_BeginMethodInfo;
    property EndMethodInfo: DDN.mscorlib.DNMethodInfo read get_EndMethodInfo;
  end;

  TDNLogicalMethodInfo = class(TDNGenericImport<DNLogicalMethodInfoClass, DNLogicalMethodInfo>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F62E823-8C56-5DC2-B774-67E0B97696D1}']
  { static methods } 

    {class} function GetInitializer(&type: DDN.mscorlib.DNType; methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject; overload;
    {class} function GetInitializers(&type: DDN.mscorlib.DNType; methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>; overload;
    {class} function CreateInstance(&type: DDN.mscorlib.DNType; initializer: DDN.mscorlib.DNObject): DNMimeFormatter;

  end;

  [DNTypeName('System.Web.Services.Protocols.MimeFormatter')]
  DNMimeFormatter = interface(DDN.mscorlib.DNObject)
  ['{284D5254-6A9F-3E69-AC8C-A85AD71E2256}']
  { methods } 

    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject; overload;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeFormatter = class(TDNGenericImport<DNMimeFormatterClass, DNMimeFormatter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeParameterReaderClass = interface(DNMimeFormatterClass)
  ['{46F06763-887E-5DC1-9919-1311E61603D1}']
  end;

  [DNTypeName('System.Web.Services.Protocols.MimeParameterReader')]
  DNMimeParameterReader = interface(DNMimeFormatter)
  ['{80787D1F-6A15-38FF-A164-F73A920F7687}']
  { methods } 

    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeParameterReader = class(TDNGenericImport<DNMimeParameterReaderClass, DNMimeParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNValueCollectionParameterReaderClass = interface(DNMimeParameterReaderClass)
  ['{3A5E5934-CB3B-5262-BC22-794D576173C6}']
  { static methods } 

    {class} function IsSupported(methodInfo: DNLogicalMethodInfo): Boolean; overload;
    {class} function IsSupported(paramInfo: DDN.mscorlib.DNParameterInfo): Boolean; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.ValueCollectionParameterReader')]
  DNValueCollectionParameterReader = interface(DNMimeParameterReader)
  ['{87200DE8-D4C2-3885-99E0-FFCB1DF3DB65}']
  { methods } 

    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValueCollectionParameterReader = class(TDNGenericImport<DNValueCollectionParameterReaderClass, DNValueCollectionParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHtmlFormParameterReaderClass = interface(DNValueCollectionParameterReaderClass)
  ['{2C51CF19-6C19-5F0A-9778-EDEA0395332D}']
  { constructors } 

    {class} function init: DNHtmlFormParameterReader;

  end;

  [DNTypeName('System.Web.Services.Protocols.HtmlFormParameterReader')]
  DNHtmlFormParameterReader = interface(DNValueCollectionParameterReader)
  ['{256D6606-712B-3DFE-9177-AC34F15E59FD}']
  { methods } 

    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlFormParameterReader = class(TDNGenericImport<DNHtmlFormParameterReaderClass, DNHtmlFormParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlParameterReaderClass = interface(DNValueCollectionParameterReaderClass)
  ['{0B3401D9-C9B0-5BE7-9EA6-DD0F7A93D7A7}']
  { constructors } 

    {class} function init: DNUrlParameterReader;

  end;

  [DNTypeName('System.Web.Services.Protocols.UrlParameterReader')]
  DNUrlParameterReader = interface(DNValueCollectionParameterReader)
  ['{FC6BB276-DA0C-36AA-9512-F376BAD96097}']
  { methods } 

    function Read(request: DDN.System.Web.DNHttpRequest): TArray<DDN.mscorlib.DNObject>;
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUrlParameterReader = class(TDNGenericImport<DNUrlParameterReaderClass, DNUrlParameterReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeParameterWriterClass = interface(DNMimeFormatterClass)
  ['{3124C45A-3F1F-5A60-AC5D-AE0DB23A1EE2}']
  end;

  [DNTypeName('System.Web.Services.Protocols.MimeParameterWriter')]
  DNMimeParameterWriter = interface(DNMimeFormatter)
  ['{E46DD746-C6AB-3310-9D98-2A059777B025}']
  { getters & setters } 

    function get_UsesWriteRequest: Boolean;
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
  end;

  TDNMimeParameterWriter = class(TDNGenericImport<DNMimeParameterWriterClass, DNMimeParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlEncodedParameterWriterClass = interface(DNMimeParameterWriterClass)
  ['{76340785-26B0-5E0A-8132-C99D869C54D7}']
  end;

  [DNTypeName('System.Web.Services.Protocols.UrlEncodedParameterWriter')]
  DNUrlEncodedParameterWriter = interface(DNMimeParameterWriter)
  ['{03DCFB9A-1903-314F-B141-F856A427BF70}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UsesWriteRequest: Boolean;

  { methods } 

    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
  end;

  TDNUrlEncodedParameterWriter = class(TDNGenericImport<DNUrlEncodedParameterWriterClass, DNUrlEncodedParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNHtmlFormParameterWriterClass = interface(DNUrlEncodedParameterWriterClass)
  ['{48AA461E-801D-5DA2-822B-51FE8178E48A}']
  { constructors } 

    {class} function init: DNHtmlFormParameterWriter;

  end;

  [DNTypeName('System.Web.Services.Protocols.HtmlFormParameterWriter')]
  DNHtmlFormParameterWriter = interface(DNUrlEncodedParameterWriter)
  ['{D1AEDAAC-FBC4-3DFF-A672-E2002E2CCF56}']
  { getters & setters } 

    function get_UsesWriteRequest: Boolean;
    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
  end;

  TDNHtmlFormParameterWriter = class(TDNGenericImport<DNHtmlFormParameterWriterClass, DNHtmlFormParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNUrlParameterWriterClass = interface(DNUrlEncodedParameterWriterClass)
  ['{B05F3615-F23B-591E-87E3-F562E2D19DF2}']
  { constructors } 

    {class} function init: DNUrlParameterWriter;

  end;

  [DNTypeName('System.Web.Services.Protocols.UrlParameterWriter')]
  DNUrlParameterWriter = interface(DNUrlEncodedParameterWriter)
  ['{FA412673-0615-315F-A795-7FE17A11DCE2}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UsesWriteRequest: Boolean;

  { methods } 

    function GetRequestUrl(url: string; parameters: TArray<DDN.mscorlib.DNObject>): string;
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    procedure InitializeRequest(request: DDN.System.DNWebRequest; values: TArray<DDN.mscorlib.DNObject>);
    procedure WriteRequest(requestStream: DDN.mscorlib.DNStream; values: TArray<DDN.mscorlib.DNObject>);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property UsesWriteRequest: Boolean read get_UsesWriteRequest;
  end;

  TDNUrlParameterWriter = class(TDNGenericImport<DNUrlParameterWriterClass, DNUrlParameterWriter>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNMimeReturnReaderClass = interface(DNMimeFormatterClass)
  ['{B324ABCD-6677-5F9C-9878-CA7BBA341037}']
  end;

  [DNTypeName('System.Web.Services.Protocols.MimeReturnReader')]
  DNMimeReturnReader = interface(DNMimeFormatter)
  ['{E88BB6D4-A595-3BFA-A2F1-359DFB50A96F}']
  { methods } 

    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeReturnReader = class(TDNGenericImport<DNMimeReturnReaderClass, DNMimeReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNAnyReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{A77D50DB-AE0D-5FB4-9181-E6596DD60EB2}']
  { constructors } 

    {class} function init: DNAnyReturnReader;

  end;

  [DNTypeName('System.Web.Services.Protocols.AnyReturnReader')]
  DNAnyReturnReader = interface(DNMimeReturnReader)
  ['{002AFC50-3974-36A8-B720-411DEEBB7896}']
  { methods } 

    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAnyReturnReader = class(TDNGenericImport<DNAnyReturnReaderClass, DNAnyReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNNopReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{B503C687-89A0-5017-89B8-4CBC9F3E1104}']
  { constructors } 

    {class} function init: DNNopReturnReader;

  end;

  [DNTypeName('System.Web.Services.Protocols.NopReturnReader')]
  DNNopReturnReader = interface(DNMimeReturnReader)
  ['{40607C71-AC71-37B7-BDE9-5EFAFC6AADD9}']
  { methods } 

    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNopReturnReader = class(TDNGenericImport<DNNopReturnReaderClass, DNNopReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNTextReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{4C3083F6-8F2D-5655-B5A0-7BCAEEBFC0BB}']
  { constructors } 

    {class} function init: DNTextReturnReader;

  end;

  [DNTypeName('System.Web.Services.Protocols.TextReturnReader')]
  DNTextReturnReader = interface(DNMimeReturnReader)
  ['{6ED79D6B-C9E5-3194-9A05-D5E9EB9D039B}']
  { methods } 

    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextReturnReader = class(TDNGenericImport<DNTextReturnReaderClass, DNTextReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNXmlReturnReaderClass = interface(DNMimeReturnReaderClass)
  ['{9DEC7BBB-57A2-555E-A993-09280FA69043}']
  { constructors } 

    {class} function init: DNXmlReturnReader;

  end;

  [DNTypeName('System.Web.Services.Protocols.XmlReturnReader')]
  DNXmlReturnReader = interface(DNMimeReturnReader)
  ['{03A9DC5C-2178-3937-BA29-99777C9BBB8B}']
  { methods } 

    function GetInitializers(methodInfos: TArray<DNLogicalMethodInfo>): TArray<DDN.mscorlib.DNObject>;
    procedure Initialize(o: DDN.mscorlib.DNObject);
    function GetInitializer(methodInfo: DNLogicalMethodInfo): DDN.mscorlib.DNObject;
    function Read(response: DDN.System.DNWebResponse; responseStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlReturnReader = class(TDNGenericImport<DNXmlReturnReaderClass, DNXmlReturnReader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNPatternMatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A22DCBB-41E5-5EB2-B18D-62DDFB5D9CFB}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNPatternMatcher;

  end;

  [DNTypeName('System.Web.Services.Protocols.PatternMatcher')]
  DNPatternMatcher = interface(DDN.mscorlib.DNObject)
  ['{CA3D0A00-420E-3691-AD3A-BCF0FAD4A23B}']
  { methods } 

    function Match(text: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPatternMatcher = class(TDNGenericImport<DNPatternMatcherClass, DNPatternMatcher>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerProtocolClass = interface(DDN.mscorlib.DNObjectClass)
  ['{913CCBD7-5C79-59B9-AE0C-A08C064B1E93}']
  end;

  [DNTypeName('System.Web.Services.Protocols.ServerProtocol')]
  DNServerProtocol = interface(DDN.mscorlib.DNObject)
  ['{CC7803E5-1458-378B-890B-3F58B094C1F0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerProtocol = class(TDNGenericImport<DNServerProtocolClass, DNServerProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerProtocolClass = interface(DNServerProtocolClass)
  ['{EA846EA3-425E-5093-B85A-1BDF73873A50}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapServerProtocol')]
  DNSoapServerProtocol = interface(DNServerProtocol)
  ['{B1994DE6-F115-332B-8C69-53742C002F1B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerProtocol = class(TDNGenericImport<DNSoapServerProtocolClass, DNSoapServerProtocol>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerProtocolFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54FF517C-B605-5D38-91AF-F542CF662DAF}']
  end;

  [DNTypeName('System.Web.Services.Protocols.ServerProtocolFactory')]
  DNServerProtocolFactory = interface(DDN.mscorlib.DNObject)
  ['{6C6E52FC-5999-3C7A-85C9-3E799FF8DAE4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerProtocolFactory = class(TDNGenericImport<DNServerProtocolFactoryClass, DNServerProtocolFactory>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerProtocolFactoryClass = interface(DNServerProtocolFactoryClass)
  ['{B08F4FC3-91FE-5C37-B622-BECC7F9096F0}']
  { constructors } 

    {class} function init: DNSoapServerProtocolFactory;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapServerProtocolFactory')]
  DNSoapServerProtocolFactory = interface(DNServerProtocolFactory)
  ['{E6BAE3D2-681A-390B-9EC2-507A5BD7D5FE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerProtocolFactory = class(TDNGenericImport<DNSoapServerProtocolFactoryClass, DNSoapServerProtocolFactory>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNServerTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F044A3B-0A87-58E1-BF23-33D380E85709}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNServerType;

  end;

  [DNTypeName('System.Web.Services.Protocols.ServerType')]
  DNServerType = interface(DDN.mscorlib.DNObject)
  ['{AAE43349-2E66-3D4C-A1F2-D1EEF093D513}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerType = class(TDNGenericImport<DNServerTypeClass, DNServerType>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerTypeClass = interface(DNServerTypeClass)
  ['{A2C3CA33-D768-5592-A9C1-00E3690716CA}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; protocolsSupported: DNWebServiceProtocols): DNSoapServerType;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapServerType')]
  DNSoapServerType = interface(DNServerType)
  ['{63B909EE-EA6C-31F0-ABA0-2A69FC094189}']
  { getters & setters } 

    function get_ServiceNamespace: string;
    function get_ServiceDefaultIsEncoded: Boolean;
    function get_ServiceRoutingOnSoapAction: Boolean;

  { methods } 

    function GetMethod(key: DDN.mscorlib.DNObject): DNSoapServerMethod;
    function GetDuplicateMethod(key: DDN.mscorlib.DNObject): DNSoapServerMethod;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServiceNamespace: string read get_ServiceNamespace;
    property ServiceDefaultIsEncoded: Boolean read get_ServiceDefaultIsEncoded;
    property ServiceRoutingOnSoapAction: Boolean read get_ServiceRoutingOnSoapAction;
  end;

  TDNSoapServerType = class(TDNGenericImport<DNSoapServerTypeClass, DNSoapServerType>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoap12FaultCodesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7184267-0167-5DBC-A49C-124DC0455072}']
  { static fields getter & setter } 

   function __fakeFieldGet_ReceiverFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_SenderFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_DataEncodingUnknownFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_RpcProcedureNotPresentFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_RpcBadArgumentsFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_EncodingMissingIdFaultCode: DDN.System.Xml.DNXmlQualifiedName;
   function __fakeFieldGet_EncodingUntypedValueFaultCode: DDN.System.Xml.DNXmlQualifiedName;

  { static fields } 

    {class} property ReceiverFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_ReceiverFaultCode;
    {class} property SenderFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_SenderFaultCode;
    {class} property VersionMismatchFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_VersionMismatchFaultCode;
    {class} property MustUnderstandFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_MustUnderstandFaultCode;
    {class} property DataEncodingUnknownFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_DataEncodingUnknownFaultCode;
    {class} property RpcProcedureNotPresentFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_RpcProcedureNotPresentFaultCode;
    {class} property RpcBadArgumentsFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_RpcBadArgumentsFaultCode;
    {class} property EncodingMissingIdFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_EncodingMissingIdFaultCode;
    {class} property EncodingUntypedValueFaultCode: DDN.System.Xml.DNXmlQualifiedName read __fakeFieldGet_EncodingUntypedValueFaultCode;

  end;

  [DNTypeName('System.Web.Services.Protocols.Soap12FaultCodes')]
  DNSoap12FaultCodes = interface(DDN.mscorlib.DNObject)
  ['{C8DA73E1-6ABD-324D-92BE-A62A82CD6B3B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoap12FaultCodes = class(TDNGenericImport<DNSoap12FaultCodesClass, DNSoap12FaultCodes>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3575D082-F365-589E-946B-0D765142C114}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapExtension')]
  DNSoapExtension = interface(DDN.mscorlib.DNObject)
  ['{C81B0412-FAE7-3FF1-8FE2-7E2BFD12C744}']
  { methods } 

    function ChainStream(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNStream;
    function GetInitializer(methodInfo: DNLogicalMethodInfo; attribute: DNSoapExtensionAttribute): DDN.mscorlib.DNObject; overload;
    function GetInitializer(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    procedure Initialize(initializer: DDN.mscorlib.DNObject);
    procedure ProcessMessage(message: DNSoapMessage);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapExtension = class(TDNGenericImport<DNSoapExtensionClass, DNSoapExtension>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapFaultSubCodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{223389A4-D159-5DB5-A83A-02B9703B22B3}']
  { constructors } 

    {class} function init(code: DDN.System.Xml.DNXmlQualifiedName): DNSoapFaultSubCode; overload;
    {class} function init(code: DDN.System.Xml.DNXmlQualifiedName; subCode: DNSoapFaultSubCode): DNSoapFaultSubCode; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapFaultSubCode')]
  DNSoapFaultSubCode = interface(DDN.mscorlib.DNObject)
  ['{F645307A-8394-38E4-BBD0-2D9C71EA3190}']
  { getters & setters } 

    function get_Code: DDN.System.Xml.DNXmlQualifiedName;
    function get_SubCode: DNSoapFaultSubCode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Code: DDN.System.Xml.DNXmlQualifiedName read get_Code;
    property SubCode: DNSoapFaultSubCode read get_SubCode;
  end;

  TDNSoapFaultSubCode = class(TDNGenericImport<DNSoapFaultSubCodeClass, DNSoapFaultSubCode>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{758D8773-CA73-5A6F-B170-07D21332F56A}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHeader')]
  DNSoapHeader = interface(DDN.mscorlib.DNObject)
  ['{4210CD23-EEEA-3069-AC29-65142F4779A4}']
  { getters & setters } 

    function get_EncodedMustUnderstand: string;
    procedure set_EncodedMustUnderstand(value: string);
    function get_EncodedMustUnderstand12: string;
    procedure set_EncodedMustUnderstand12(value: string);
    function get_MustUnderstand: Boolean;
    procedure set_MustUnderstand(value: Boolean);
    function get_Actor: string;
    procedure set_Actor(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_DidUnderstand: Boolean;
    procedure set_DidUnderstand(value: Boolean);
    function get_EncodedRelay: string;
    procedure set_EncodedRelay(value: string);
    function get_Relay: Boolean;
    procedure set_Relay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EncodedMustUnderstand: string read get_EncodedMustUnderstand write set_EncodedMustUnderstand;
    property EncodedMustUnderstand12: string read get_EncodedMustUnderstand12 write set_EncodedMustUnderstand12;
    property MustUnderstand: Boolean read get_MustUnderstand write set_MustUnderstand;
    property Actor: string read get_Actor write set_Actor;
    property Role: string read get_Role write set_Role;
    property DidUnderstand: Boolean read get_DidUnderstand write set_DidUnderstand;
    property EncodedRelay: string read get_EncodedRelay write set_EncodedRelay;
    property Relay: Boolean read get_Relay write set_Relay;
  end;

  TDNSoapHeader = class(TDNGenericImport<DNSoapHeaderClass, DNSoapHeader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapUnknownHeaderClass = interface(DNSoapHeaderClass)
  ['{937A2935-1A5F-5E29-82E9-04CCAF97F771}']
  { constructors } 

    {class} function init: DNSoapUnknownHeader;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapUnknownHeader')]
  DNSoapUnknownHeader = interface(DNSoapHeader)
  ['{AB9471A2-168F-3D8C-B1E3-442AB8AA9A86}']
  { getters & setters } 

    function get_Element: DDN.System.Xml.DNXmlElement;
    procedure set_Element(value: DDN.System.Xml.DNXmlElement);
    function get_EncodedMustUnderstand: string;
    procedure set_EncodedMustUnderstand(value: string);
    function get_EncodedMustUnderstand12: string;
    procedure set_EncodedMustUnderstand12(value: string);
    function get_MustUnderstand: Boolean;
    procedure set_MustUnderstand(value: Boolean);
    function get_Actor: string;
    procedure set_Actor(value: string);
    function get_Role: string;
    procedure set_Role(value: string);
    function get_DidUnderstand: Boolean;
    procedure set_DidUnderstand(value: Boolean);
    function get_EncodedRelay: string;
    procedure set_EncodedRelay(value: string);
    function get_Relay: Boolean;
    procedure set_Relay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Element: DDN.System.Xml.DNXmlElement read get_Element write set_Element;
    property EncodedMustUnderstand: string read get_EncodedMustUnderstand write set_EncodedMustUnderstand;
    property EncodedMustUnderstand12: string read get_EncodedMustUnderstand12 write set_EncodedMustUnderstand12;
    property MustUnderstand: Boolean read get_MustUnderstand write set_MustUnderstand;
    property Actor: string read get_Actor write set_Actor;
    property Role: string read get_Role write set_Role;
    property DidUnderstand: Boolean read get_DidUnderstand write set_DidUnderstand;
    property EncodedRelay: string read get_EncodedRelay write set_EncodedRelay;
    property Relay: Boolean read get_Relay write set_Relay;
  end;

  TDNSoapUnknownHeader = class(TDNGenericImport<DNSoapUnknownHeaderClass, DNSoapUnknownHeader>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderHandlingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DFEEC10D-1F96-532B-9F27-10C8D36BD47E}']
  { constructors } 

    {class} function init: DNSoapHeaderHandling;

  { static methods } 

    {class} procedure WriteHeaders(writer: DDN.System.Xml.DNXmlWriter; serializer: DDN.System.Xml.DNXmlSerializer; headers: DNSoapHeaderCollection; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; isEncoded: Boolean; defaultNS: string; serviceDefaultIsEncoded: Boolean; envelopeNS: string);
    {class} procedure WriteUnknownHeaders(writer: DDN.System.Xml.DNXmlWriter; headers: DNSoapHeaderCollection; envelopeNS: string);
    {class} procedure SetHeaderMembers(headers: DNSoapHeaderCollection; target: DDN.mscorlib.DNObject; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; client: Boolean);
    {class} procedure GetHeaderMembers(headers: DNSoapHeaderCollection; target: DDN.mscorlib.DNObject; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; client: Boolean);
    {class} procedure EnsureHeadersUnderstood(headers: DNSoapHeaderCollection);

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHeaderHandling')]
  DNSoapHeaderHandling = interface(DDN.mscorlib.DNObject)
  ['{B275EBAF-7107-3FEC-9836-0135F4678B98}']
  { methods } 

    function ReadHeaders(reader: DDN.System.Xml.DNXmlReader; serializer: DDN.System.Xml.DNXmlSerializer; headers: DNSoapHeaderCollection; mappings: TArray<DNSoapHeaderMapping>; direction: DNSoapHeaderDirection; envelopeNS: string; encodingStyle: string; checkRequiredHeaders: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapHeaderHandling = class(TDNGenericImport<DNSoapHeaderHandlingClass, DNSoapHeaderHandling>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapHeaderMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7A529E6-B51D-5701-A8CE-BEC1E7BD01AF}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapHeaderMapping')]
  DNSoapHeaderMapping = interface(DDN.mscorlib.DNObject)
  ['{5D7D8EF6-E5B4-3C57-BFF7-7EBF4589B414}']
  { getters & setters } 

    function get_HeaderType: DDN.mscorlib.DNType;
    function get_Repeats: Boolean;
    function get_Custom: Boolean;
    function get_Direction: DNSoapHeaderDirection;
    function get_MemberInfo: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeaderType: DDN.mscorlib.DNType read get_HeaderType;
    property Repeats: Boolean read get_Repeats;
    property Custom: Boolean read get_Custom;
    property Direction: DNSoapHeaderDirection read get_Direction;
    property MemberInfo: DDN.mscorlib.DNMemberInfo read get_MemberInfo;
  end;

  TDNSoapHeaderMapping = class(TDNGenericImport<DNSoapHeaderMappingClass, DNSoapHeaderMapping>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapMessageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4881606C-0DE9-5FDF-83E3-A249BFD8D695}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapMessage')]
  DNSoapMessage = interface(DDN.mscorlib.DNObject)
  ['{CB2AAFE1-CE77-3E28-9F44-C3A1CBCAFE4F}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;

  { methods } 

    function GetReturnValue: DDN.mscorlib.DNObject;
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OneWay: Boolean read get_OneWay;
    property Exception: DNSoapException read get_Exception write set_Exception;
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    property Headers: DNSoapHeaderCollection read get_Headers;
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    property ContentType: string read get_ContentType write set_ContentType;
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    property Stage: DNSoapMessageStage read get_Stage;
    property Url: string read get_Url;
    property Action: string read get_Action;
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
  end;

  TDNSoapMessage = class(TDNGenericImport<DNSoapMessageClass, DNSoapMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapClientMessageClass = interface(DNSoapMessageClass)
  ['{497F0C9E-60CF-5DFE-B16C-0F4DF1C31FF7}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapClientMessage')]
  DNSoapClientMessage = interface(DNSoapMessage)
  ['{FEAB897A-5917-3354-B972-44B0A597EC37}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Client: DNSoapHttpClientProtocol;
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;

  { methods } 

    function GetReturnValue: DDN.mscorlib.DNObject;
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OneWay: Boolean read get_OneWay;
    property Client: DNSoapHttpClientProtocol read get_Client;
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    property Url: string read get_Url;
    property Action: string read get_Action;
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    property Exception: DNSoapException read get_Exception write set_Exception;
    property Headers: DNSoapHeaderCollection read get_Headers;
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    property ContentType: string read get_ContentType write set_ContentType;
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    property Stage: DNSoapMessageStage read get_Stage;
  end;

  TDNSoapClientMessage = class(TDNGenericImport<DNSoapClientMessageClass, DNSoapClientMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerMessageClass = interface(DNSoapMessageClass)
  ['{51478656-4A84-5ACD-AF6F-2A21ABB89572}']
  end;

  [DNTypeName('System.Web.Services.Protocols.SoapServerMessage')]
  DNSoapServerMessage = interface(DNSoapMessage)
  ['{DFAC0AC2-0D55-34C0-A619-DDA7C0E14D3A}']
  { getters & setters } 

    function get_OneWay: Boolean;
    function get_Url: string;
    function get_Action: string;
    function get_SoapVersion: DNSoapProtocolVersion;
    function get_Server: DDN.mscorlib.DNObject;
    function get_MethodInfo: DNLogicalMethodInfo;
    function get_Exception: DNSoapException;
    procedure set_Exception(value: DNSoapException);
    function get_Headers: DNSoapHeaderCollection;
    function get_Stream: DDN.mscorlib.DNStream;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentEncoding: string;
    procedure set_ContentEncoding(value: string);
    function get_Stage: DNSoapMessageStage;

  { methods } 

    function GetReturnValue: DDN.mscorlib.DNObject;
    function GetInParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function GetOutParameterValue(index: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OneWay: Boolean read get_OneWay;
    property Url: string read get_Url;
    property Action: string read get_Action;
    property SoapVersion: DNSoapProtocolVersion read get_SoapVersion;
    property Server: DDN.mscorlib.DNObject read get_Server;
    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    property Exception: DNSoapException read get_Exception write set_Exception;
    property Headers: DNSoapHeaderCollection read get_Headers;
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    property ContentType: string read get_ContentType write set_ContentType;
    property ContentEncoding: string read get_ContentEncoding write set_ContentEncoding;
    property Stage: DNSoapMessageStage read get_Stage;
  end;

  TDNSoapServerMessage = class(TDNGenericImport<DNSoapServerMessageClass, DNSoapServerMessage>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNSoapServerMethodClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D48E5C24-2B08-57E3-9542-7A24DAF6FA46}']
  { constructors } 

    {class} function init: DNSoapServerMethod; overload;
    {class} function init(serverType: DDN.mscorlib.DNType; methodInfo: DNLogicalMethodInfo): DNSoapServerMethod; overload;

  end;

  [DNTypeName('System.Web.Services.Protocols.SoapServerMethod')]
  DNSoapServerMethod = interface(DDN.mscorlib.DNObject)
  ['{6626E454-1EA0-3187-A5C2-F6AF5EA57F1C}']
  { getters & setters } 

    function get_MethodInfo: DNLogicalMethodInfo;
    function get_ReturnSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_ParameterSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_InHeaderSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_OutHeaderSerializer: DDN.System.Xml.DNXmlSerializer;
    function get_InHeaderMappings: TArray<DNSoapHeaderMapping>;
    function get_OutHeaderMappings: TArray<DNSoapHeaderMapping>;
    function get_Action: string;
    function get_OneWay: Boolean;
    function get_Rpc: Boolean;
    function get_BindingUse: DNSoapBindingUse;
    function get_ParameterStyle: DNSoapParameterStyle;
    function get_WsiClaims: DNWsiProfiles;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MethodInfo: DNLogicalMethodInfo read get_MethodInfo;
    property ReturnSerializer: DDN.System.Xml.DNXmlSerializer read get_ReturnSerializer;
    property ParameterSerializer: DDN.System.Xml.DNXmlSerializer read get_ParameterSerializer;
    property InHeaderSerializer: DDN.System.Xml.DNXmlSerializer read get_InHeaderSerializer;
    property OutHeaderSerializer: DDN.System.Xml.DNXmlSerializer read get_OutHeaderSerializer;
    property InHeaderMappings: TArray<DNSoapHeaderMapping> read get_InHeaderMappings;
    property OutHeaderMappings: TArray<DNSoapHeaderMapping> read get_OutHeaderMappings;
    property Action: string read get_Action;
    property OneWay: Boolean read get_OneWay;
    property Rpc: Boolean read get_Rpc;
    property BindingUse: DNSoapBindingUse read get_BindingUse;
    property ParameterStyle: DNSoapParameterStyle read get_ParameterStyle;
    property WsiClaims: DNWsiProfiles read get_WsiClaims;
  end;

  TDNSoapServerMethod = class(TDNGenericImport<DNSoapServerMethodClass, DNSoapServerMethod>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebClientAsyncResultClass = interface(DNObjectClass)
  ['{63988241-EDFE-5356-AC0E-9FF0E370EA34}']
  end;

  [DNTypeName('System.Web.Services.Protocols.WebClientAsyncResult')]
  DNWebClientAsyncResult = interface(DDN.mscorlib.DNIAsyncResult)
  ['{AC44DAAA-AB35-31BF-BACB-313A93716ADC}']
  { getters & setters } 

    function get_AsyncState: DDN.mscorlib.DNObject;
    function get_AsyncWaitHandle: DDN.mscorlib.DNWaitHandle;
    function get_CompletedSynchronously: Boolean;
    function get_IsCompleted: Boolean;

  { methods } 

    procedure &Abort;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AsyncState: DDN.mscorlib.DNObject read get_AsyncState;
    property AsyncWaitHandle: DDN.mscorlib.DNWaitHandle read get_AsyncWaitHandle;
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNWebClientAsyncResult = class(TDNGenericImport<DNWebClientAsyncResultClass, DNWebClientAsyncResult>) end;

  //-------------namespace: System.Web.Services.Protocols----------------
  DNWebServiceHandlerFactoryClass = interface(DNObjectClass)
  ['{58CADD48-A1D7-58B8-86D8-E0F1493E7CA3}']
  { constructors } 

    {class} function init: DNWebServiceHandlerFactory;

  end;

  [DNTypeName('System.Web.Services.Protocols.WebServiceHandlerFactory')]
  DNWebServiceHandlerFactory = interface(DDN.System.Web.DNIHttpHandlerFactory)
  ['{255F1769-1D32-31BA-8D77-5C21467D59CB}']
  { methods } 

    function GetHandler(context: DDN.System.Web.DNHttpContext; verb: string; url: string; filePath: string): DDN.System.Web.DNIHttpHandler;
    procedure ReleaseHandler(handler: DDN.System.Web.DNIHttpHandler);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServiceHandlerFactory = class(TDNGenericImport<DNWebServiceHandlerFactoryClass, DNWebServiceHandlerFactory>) end;


implementation


initialization
  LoadAssemblyModule('System.Web.Services.dll', True);

finalization

end.
