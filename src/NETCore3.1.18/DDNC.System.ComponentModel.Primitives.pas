//----------------------------------------------------------------------------
//  System.ComponentModel.Primitives.dll: System.ComponentModel.Primitives, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.ComponentModel.Primitives
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOMPONENTMODELPRIMITIVES}
unit DDNC.System.ComponentModel.Primitives;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel,
  DDNC.System.Collections.NonGeneric;

type

{ enums }

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.DesignerSerializationVisibility')]
  DNDesignerSerializationVisibility = type Integer;
  DNDesignerSerializationVisibilityHelper = record helper for DNDesignerSerializationVisibility
  public const
    Hidden = 0;
    Visible = 1;
    Content = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.RefreshProperties')]
  DNRefreshProperties = type Integer;
  DNRefreshPropertiesHelper = record helper for DNRefreshProperties
  public const
    None = 0;
    All = 1;
    Repaint = 2;
  end;




type


{ declares }

  DNISupportInitialize = interface; // type: System.ComponentModel.ISupportInitialize, namespace: System.ComponentModel
  DNISynchronizeInvoke = interface; // type: System.ComponentModel.ISynchronizeInvoke, namespace: System.ComponentModel
  DNIComponent = interface; // type: System.ComponentModel.IComponent, namespace: System.ComponentModel
  DNIContainer = interface; // type: System.ComponentModel.IContainer, namespace: System.ComponentModel
  DNISite = interface; // type: System.ComponentModel.ISite, namespace: System.ComponentModel
  DNBrowsableAttribute = interface; // type: System.ComponentModel.BrowsableAttribute, namespace: System.ComponentModel
  DNCategoryAttribute = interface; // type: System.ComponentModel.CategoryAttribute, namespace: System.ComponentModel
  DNDescriptionAttribute = interface; // type: System.ComponentModel.DescriptionAttribute, namespace: System.ComponentModel
  DNDesignerCategoryAttribute = interface; // type: System.ComponentModel.DesignerCategoryAttribute, namespace: System.ComponentModel
  DNDesignerSerializationVisibilityAttribute = interface; // type: System.ComponentModel.DesignerSerializationVisibilityAttribute, namespace: System.ComponentModel
  DNDesignOnlyAttribute = interface; // type: System.ComponentModel.DesignOnlyAttribute, namespace: System.ComponentModel
  DNDisplayNameAttribute = interface; // type: System.ComponentModel.DisplayNameAttribute, namespace: System.ComponentModel
  DNImmutableObjectAttribute = interface; // type: System.ComponentModel.ImmutableObjectAttribute, namespace: System.ComponentModel
  DNInitializationEventAttribute = interface; // type: System.ComponentModel.InitializationEventAttribute, namespace: System.ComponentModel
  DNLocalizableAttribute = interface; // type: System.ComponentModel.LocalizableAttribute, namespace: System.ComponentModel
  DNMergablePropertyAttribute = interface; // type: System.ComponentModel.MergablePropertyAttribute, namespace: System.ComponentModel
  DNNotifyParentPropertyAttribute = interface; // type: System.ComponentModel.NotifyParentPropertyAttribute, namespace: System.ComponentModel
  DNParenthesizePropertyNameAttribute = interface; // type: System.ComponentModel.ParenthesizePropertyNameAttribute, namespace: System.ComponentModel
  DNReadOnlyAttribute = interface; // type: System.ComponentModel.ReadOnlyAttribute, namespace: System.ComponentModel
  DNRefreshPropertiesAttribute = interface; // type: System.ComponentModel.RefreshPropertiesAttribute, namespace: System.ComponentModel
  DNComponentCollection = interface; // type: System.ComponentModel.ComponentCollection, namespace: System.ComponentModel
  DNEventHandlerList = interface; // type: System.ComponentModel.EventHandlerList, namespace: System.ComponentModel
  DNInvalidAsynchronousStateException = interface; // type: System.ComponentModel.InvalidAsynchronousStateException, namespace: System.ComponentModel
  DNInvalidEnumArgumentException = interface; // type: System.ComponentModel.InvalidEnumArgumentException, namespace: System.ComponentModel
  DNComponent = interface; // type: System.ComponentModel.Component, namespace: System.ComponentModel


{ objects }

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISupportInitialize')]
  DNISupportInitialize = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CF793A55-B9DD-30C2-A484-360AF143C228}']
  { methods } 

    procedure BeginInit;
    procedure EndInit;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISynchronizeInvoke')]
  DNISynchronizeInvoke = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1CC69C3D-AFDD-3ABA-9AF1-87C5681BA5ED}']
  { getters & setters } 

    function get_InvokeRequired: Boolean;

  { methods } 

    function BeginInvoke(method: DDNC.System.Private.CoreLib.DNDelegate; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNIAsyncResult;
    function EndInvoke(result: DDNC.System.Private.CoreLib.DNIAsyncResult): DDNC.System.Private.CoreLib.DNObject;
    function Invoke(method: DDNC.System.Private.CoreLib.DNDelegate; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property InvokeRequired: Boolean read get_InvokeRequired;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IComponent')]
  DNIComponent = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{B86E59F2-F1E2-389D-B5F1-C55307C8106E}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);

  { events } 

    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IContainer')]
  DNIContainer = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{61D9C50C-4AAD-3539-AF82-4F36C19D77C8}']
  { getters & setters } 

    function get_Components: DNComponentCollection;

  { methods } 

    procedure Add(component: DNIComponent); overload;
    procedure Add(component: DNIComponent; name: string); overload;
    procedure Remove(component: DNIComponent);

  { propertys } 

    property Components: DNComponentCollection read get_Components;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISite')]
  DNISite = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{C4E1006A-9D98-3E96-A07E-921725135C28}']
  { getters & setters } 

    function get_Component: DNIComponent;
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;
    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    property Component: DNIComponent read get_Component;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: System.ComponentModel----------------
  DNBrowsableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2466AE78-E870-5DAD-95FF-663D37F9A162}']
  { constructors } 

    {class} function init(browsable: Boolean): DNBrowsableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNBrowsableAttribute;
   function __fakeFieldGet_No: DNBrowsableAttribute;
   function __fakeFieldGet_Default: DNBrowsableAttribute;

  { static fields } 

    {class} property Yes: DNBrowsableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNBrowsableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNBrowsableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.BrowsableAttribute')]
  DNBrowsableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{0AD6524E-9FD3-36E0-8D7A-A0EB471280FB}']
  { getters & setters } 

    function get_Browsable: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Browsable: Boolean read get_Browsable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNBrowsableAttribute = class(TDNGenericImport<DNBrowsableAttributeClass, DNBrowsableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCategoryAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{BB28D6A4-4F22-5471-8138-3E8C7FF6E016}']
  { static getter & setter } 

    {class} function get_Action: DNCategoryAttribute;
    {class} function get_Appearance: DNCategoryAttribute;
    {class} function get_Asynchronous: DNCategoryAttribute;
    {class} function get_Behavior: DNCategoryAttribute;
    {class} function get_Data: DNCategoryAttribute;
    {class} function get_Default: DNCategoryAttribute;
    {class} function get_Design: DNCategoryAttribute;
    {class} function get_DragDrop: DNCategoryAttribute;
    {class} function get_Focus: DNCategoryAttribute;
    {class} function get_Format: DNCategoryAttribute;
    {class} function get_Key: DNCategoryAttribute;
    {class} function get_Layout: DNCategoryAttribute;
    {class} function get_Mouse: DNCategoryAttribute;
    {class} function get_WindowStyle: DNCategoryAttribute;

  { constructors } 

    {class} function init: DNCategoryAttribute; overload;
    {class} function init(category: string): DNCategoryAttribute; overload;

  { static propertys } 

    {class} property Action: DNCategoryAttribute read get_Action;
    {class} property Appearance: DNCategoryAttribute read get_Appearance;
    {class} property Asynchronous: DNCategoryAttribute read get_Asynchronous;
    {class} property Behavior: DNCategoryAttribute read get_Behavior;
    {class} property Data: DNCategoryAttribute read get_Data;
    {class} property &Default: DNCategoryAttribute read get_Default;
    {class} property Design: DNCategoryAttribute read get_Design;
    {class} property DragDrop: DNCategoryAttribute read get_DragDrop;
    {class} property Focus: DNCategoryAttribute read get_Focus;
    {class} property Format: DNCategoryAttribute read get_Format;
    {class} property Key: DNCategoryAttribute read get_Key;
    {class} property Layout: DNCategoryAttribute read get_Layout;
    {class} property Mouse: DNCategoryAttribute read get_Mouse;
    {class} property WindowStyle: DNCategoryAttribute read get_WindowStyle;
  end;

  [DNTypeName('System.ComponentModel.CategoryAttribute')]
  DNCategoryAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{1477A458-3CE8-348A-B239-0C909250D11B}']
  { getters & setters } 

    function get_Category: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCategoryAttribute = class(TDNGenericImport<DNCategoryAttributeClass, DNCategoryAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDescriptionAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{978458C3-29D9-5497-8D5A-24321F0F2B0E}']
  { constructors } 

    {class} function init: DNDescriptionAttribute; overload;
    {class} function init(description: string): DNDescriptionAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDescriptionAttribute;

  { static fields } 

    {class} property &Default: DNDescriptionAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DescriptionAttribute')]
  DNDescriptionAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{761A98A7-3688-3D96-A77E-F76A130F1C7D}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDescriptionAttribute = class(TDNGenericImport<DNDescriptionAttributeClass, DNDescriptionAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignerCategoryAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C0E8F3D1-DDAC-5157-8863-D699A72C9CC1}']
  { constructors } 

    {class} function init: DNDesignerCategoryAttribute; overload;
    {class} function init(category: string): DNDesignerCategoryAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Component: DNDesignerCategoryAttribute;
   function __fakeFieldGet_Default: DNDesignerCategoryAttribute;
   function __fakeFieldGet_Form: DNDesignerCategoryAttribute;
   function __fakeFieldGet_Generic: DNDesignerCategoryAttribute;

  { static fields } 

    {class} property Component: DNDesignerCategoryAttribute read __fakeFieldGet_Component;
    {class} property &Default: DNDesignerCategoryAttribute read __fakeFieldGet_Default;
    {class} property Form: DNDesignerCategoryAttribute read __fakeFieldGet_Form;
    {class} property Generic: DNDesignerCategoryAttribute read __fakeFieldGet_Generic;

  end;

  [DNTypeName('System.ComponentModel.DesignerCategoryAttribute')]
  DNDesignerCategoryAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{EDC326A3-F071-3762-9AF1-64CAB790E901}']
  { getters & setters } 

    function get_Category: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDesignerCategoryAttribute = class(TDNGenericImport<DNDesignerCategoryAttributeClass, DNDesignerCategoryAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignerSerializationVisibilityAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C27604D1-4404-5537-A014-E8DCB6B76122}']
  { constructors } 

    {class} function init(visibility: DNDesignerSerializationVisibility): DNDesignerSerializationVisibilityAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Content: DNDesignerSerializationVisibilityAttribute;
   function __fakeFieldGet_Hidden: DNDesignerSerializationVisibilityAttribute;
   function __fakeFieldGet_Visible: DNDesignerSerializationVisibilityAttribute;
   function __fakeFieldGet_Default: DNDesignerSerializationVisibilityAttribute;

  { static fields } 

    {class} property Content: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Content;
    {class} property Hidden: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Hidden;
    {class} property Visible: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Visible;
    {class} property &Default: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DesignerSerializationVisibilityAttribute')]
  DNDesignerSerializationVisibilityAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{BA7EB729-C76B-3999-883C-5FFBDB91542B}']
  { getters & setters } 

    function get_Visibility: DNDesignerSerializationVisibility;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Visibility: DNDesignerSerializationVisibility read get_Visibility;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDesignerSerializationVisibilityAttribute = class(TDNGenericImport<DNDesignerSerializationVisibilityAttributeClass, DNDesignerSerializationVisibilityAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignOnlyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{3FAEEE3A-F1C3-576E-B50F-AB2652C36AEF}']
  { constructors } 

    {class} function init(isDesignOnly: Boolean): DNDesignOnlyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNDesignOnlyAttribute;
   function __fakeFieldGet_No: DNDesignOnlyAttribute;
   function __fakeFieldGet_Default: DNDesignOnlyAttribute;

  { static fields } 

    {class} property Yes: DNDesignOnlyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNDesignOnlyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNDesignOnlyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DesignOnlyAttribute')]
  DNDesignOnlyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F3606D64-A6D2-3C02-BC89-2705EF72BA6F}']
  { getters & setters } 

    function get_IsDesignOnly: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsDesignOnly: Boolean read get_IsDesignOnly;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDesignOnlyAttribute = class(TDNGenericImport<DNDesignOnlyAttributeClass, DNDesignOnlyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDisplayNameAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{91B71B5B-0661-5777-913B-E54104EC6B78}']
  { constructors } 

    {class} function init: DNDisplayNameAttribute; overload;
    {class} function init(displayName: string): DNDisplayNameAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDisplayNameAttribute;

  { static fields } 

    {class} property &Default: DNDisplayNameAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DisplayNameAttribute')]
  DNDisplayNameAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{EB5191D3-4D21-3CFB-914C-7420E48C593B}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayName: string read get_DisplayName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayNameAttribute = class(TDNGenericImport<DNDisplayNameAttributeClass, DNDisplayNameAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNImmutableObjectAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{6DD6351F-0768-541B-815F-79D1DE7E8DCE}']
  { constructors } 

    {class} function init(immutable: Boolean): DNImmutableObjectAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNImmutableObjectAttribute;
   function __fakeFieldGet_No: DNImmutableObjectAttribute;
   function __fakeFieldGet_Default: DNImmutableObjectAttribute;

  { static fields } 

    {class} property Yes: DNImmutableObjectAttribute read __fakeFieldGet_Yes;
    {class} property No: DNImmutableObjectAttribute read __fakeFieldGet_No;
    {class} property &Default: DNImmutableObjectAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ImmutableObjectAttribute')]
  DNImmutableObjectAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B70E51CC-F3C9-3D9E-8CD2-EEABD2377DB7}']
  { getters & setters } 

    function get_Immutable: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Immutable: Boolean read get_Immutable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNImmutableObjectAttribute = class(TDNGenericImport<DNImmutableObjectAttributeClass, DNImmutableObjectAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInitializationEventAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{0CF87FBA-B003-536D-8D1A-6A903D2F5AB5}']
  { constructors } 

    {class} function init(eventName: string): DNInitializationEventAttribute;

  end;

  [DNTypeName('System.ComponentModel.InitializationEventAttribute')]
  DNInitializationEventAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A4F8E7B3-AFC5-3035-9972-321BD9216315}']
  { getters & setters } 

    function get_EventName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property EventName: string read get_EventName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNInitializationEventAttribute = class(TDNGenericImport<DNInitializationEventAttributeClass, DNInitializationEventAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLocalizableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{CF8F148C-603F-5E02-ADEB-0CF25C04A6D2}']
  { constructors } 

    {class} function init(isLocalizable: Boolean): DNLocalizableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNLocalizableAttribute;
   function __fakeFieldGet_No: DNLocalizableAttribute;
   function __fakeFieldGet_Default: DNLocalizableAttribute;

  { static fields } 

    {class} property Yes: DNLocalizableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNLocalizableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNLocalizableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.LocalizableAttribute')]
  DNLocalizableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{583AC15A-EB63-37E4-B03C-7B61EAE3202F}']
  { getters & setters } 

    function get_IsLocalizable: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsLocalizable: Boolean read get_IsLocalizable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNLocalizableAttribute = class(TDNGenericImport<DNLocalizableAttributeClass, DNLocalizableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMergablePropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{5D0977BD-3656-52A3-B807-4EBA5AA8AFBD}']
  { constructors } 

    {class} function init(allowMerge: Boolean): DNMergablePropertyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNMergablePropertyAttribute;
   function __fakeFieldGet_No: DNMergablePropertyAttribute;
   function __fakeFieldGet_Default: DNMergablePropertyAttribute;

  { static fields } 

    {class} property Yes: DNMergablePropertyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNMergablePropertyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNMergablePropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.MergablePropertyAttribute')]
  DNMergablePropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{03F4EA87-1087-3FB0-9145-868608F31A32}']
  { getters & setters } 

    function get_AllowMerge: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AllowMerge: Boolean read get_AllowMerge;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMergablePropertyAttribute = class(TDNGenericImport<DNMergablePropertyAttributeClass, DNMergablePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNotifyParentPropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7DEEF5AB-46DF-5199-9535-7938D523B0DD}']
  { constructors } 

    {class} function init(notifyParent: Boolean): DNNotifyParentPropertyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNNotifyParentPropertyAttribute;
   function __fakeFieldGet_No: DNNotifyParentPropertyAttribute;
   function __fakeFieldGet_Default: DNNotifyParentPropertyAttribute;

  { static fields } 

    {class} property Yes: DNNotifyParentPropertyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNNotifyParentPropertyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNNotifyParentPropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.NotifyParentPropertyAttribute')]
  DNNotifyParentPropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{2F450ED5-72ED-39AC-9C16-196D9B800687}']
  { getters & setters } 

    function get_NotifyParent: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property NotifyParent: Boolean read get_NotifyParent;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNNotifyParentPropertyAttribute = class(TDNGenericImport<DNNotifyParentPropertyAttributeClass, DNNotifyParentPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNParenthesizePropertyNameAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F0ED27C6-28B0-5704-BA07-D09D2EE8659E}']
  { constructors } 

    {class} function init: DNParenthesizePropertyNameAttribute; overload;
    {class} function init(needParenthesis: Boolean): DNParenthesizePropertyNameAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNParenthesizePropertyNameAttribute;

  { static fields } 

    {class} property &Default: DNParenthesizePropertyNameAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ParenthesizePropertyNameAttribute')]
  DNParenthesizePropertyNameAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A4FE2A2C-9158-37AE-A12F-58AF53A6488A}']
  { getters & setters } 

    function get_NeedParenthesis: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property NeedParenthesis: Boolean read get_NeedParenthesis;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNParenthesizePropertyNameAttribute = class(TDNGenericImport<DNParenthesizePropertyNameAttributeClass, DNParenthesizePropertyNameAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNReadOnlyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{AC903B16-2F10-56BE-83FE-AE3319509603}']
  { constructors } 

    {class} function init(isReadOnly: Boolean): DNReadOnlyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNReadOnlyAttribute;
   function __fakeFieldGet_No: DNReadOnlyAttribute;
   function __fakeFieldGet_Default: DNReadOnlyAttribute;

  { static fields } 

    {class} property Yes: DNReadOnlyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNReadOnlyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNReadOnlyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ReadOnlyAttribute')]
  DNReadOnlyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{691EB79C-DA5B-3570-AC68-B918715A99D1}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNReadOnlyAttribute = class(TDNGenericImport<DNReadOnlyAttributeClass, DNReadOnlyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRefreshPropertiesAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{97F0D637-7376-5072-A211-82F8A1ECDEC4}']
  { constructors } 

    {class} function init(refresh: DNRefreshProperties): DNRefreshPropertiesAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_All: DNRefreshPropertiesAttribute;
   function __fakeFieldGet_Repaint: DNRefreshPropertiesAttribute;
   function __fakeFieldGet_Default: DNRefreshPropertiesAttribute;

  { static fields } 

    {class} property All: DNRefreshPropertiesAttribute read __fakeFieldGet_All;
    {class} property Repaint: DNRefreshPropertiesAttribute read __fakeFieldGet_Repaint;
    {class} property &Default: DNRefreshPropertiesAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.RefreshPropertiesAttribute')]
  DNRefreshPropertiesAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B750CF14-C34A-32E0-ACD3-356F60D962F5}']
  { getters & setters } 

    function get_RefreshProperties: DNRefreshProperties;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property RefreshProperties: DNRefreshProperties read get_RefreshProperties;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRefreshPropertiesAttribute = class(TDNGenericImport<DNRefreshPropertiesAttributeClass, DNRefreshPropertiesAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentCollectionClass = interface(DNObjectClass)
  ['{EA0D1934-FD3E-5936-B655-44BF6ECB785B}']
  { constructors } 

    {class} function init(components: TArray<DNIComponent>): DNComponentCollection;

  end;

  [DNTypeName('System.ComponentModel.ComponentCollection')]
  DNComponentCollection = interface(DNObject)
  ['{55FD5344-016F-3041-BB48-4716B22B45E3}']
  { getters & setters } 

    function get_Item(name: string): DNIComponent; overload;
    function get_Item(index: Int32): DNIComponent; overload;
    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNIComponent>; index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[name: string]: DNIComponent read get_Item; default;
    property Item[index: Int32]: DNIComponent read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNComponentCollection = class(TDNGenericImport<DNComponentCollectionClass, DNComponentCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEventHandlerListClass = interface(DNObjectClass)
  ['{E6FB8FCD-C9ED-5EEB-A4C4-4D5B7D35D9AB}']
  { constructors } 

    {class} function init: DNEventHandlerList;

  end;

  [DNTypeName('System.ComponentModel.EventHandlerList')]
  DNEventHandlerList = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{CBE46EEF-6C12-3752-A5BC-712B83E42DE7}']
  { getters & setters } 

    function get_Item(key: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNDelegate;
    procedure set_Item(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNDelegate);

  { methods } 

    procedure AddHandler(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNDelegate);
    procedure AddHandlers(listToAddFrom: DNEventHandlerList);
    procedure Dispose;
    procedure RemoveHandler(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNDelegate);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[key: DDNC.System.Private.CoreLib.DNObject]: DDNC.System.Private.CoreLib.DNDelegate read get_Item write set_Item; default;
  end;

  TDNEventHandlerList = class(TDNGenericImport<DNEventHandlerListClass, DNEventHandlerList>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInvalidAsynchronousStateExceptionClass = interface(DDNC.System.Private.CoreLib.DNArgumentExceptionClass)
  ['{DCEA2A79-EBFC-5587-876B-59FB50173C99}']
  { constructors } 

    {class} function init: DNInvalidAsynchronousStateException; overload;
    {class} function init(message: string): DNInvalidAsynchronousStateException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInvalidAsynchronousStateException; overload;

  end;

  [DNTypeName('System.ComponentModel.InvalidAsynchronousStateException')]
  DNInvalidAsynchronousStateException = interface(DDNC.System.Private.CoreLib.DNArgumentException)
  ['{D23A548B-20FD-349B-A7DD-C7822D76E90D}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidAsynchronousStateException = class(TDNGenericImport<DNInvalidAsynchronousStateExceptionClass, DNInvalidAsynchronousStateException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInvalidEnumArgumentExceptionClass = interface(DDNC.System.Private.CoreLib.DNArgumentExceptionClass)
  ['{D6541542-F29A-57D6-AB95-7F14A6D8C3FD}']
  { constructors } 

    {class} function init: DNInvalidEnumArgumentException; overload;
    {class} function init(message: string): DNInvalidEnumArgumentException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInvalidEnumArgumentException; overload;
    {class} function init(argumentName: string; invalidValue: Int32; enumClass: DDNC.System.Private.CoreLib.DNType): DNInvalidEnumArgumentException; overload;

  end;

  [DNTypeName('System.ComponentModel.InvalidEnumArgumentException')]
  DNInvalidEnumArgumentException = interface(DDNC.System.Private.CoreLib.DNArgumentException)
  ['{676C67B0-A179-33D9-BFF5-B91BAD4C447B}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidEnumArgumentException = class(TDNGenericImport<DNInvalidEnumArgumentExceptionClass, DNInvalidEnumArgumentException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{F61F3560-164B-5813-A688-EE6296761CB0}']
  { constructors } 

    {class} function init: DNComponent;

  end;

  [DNTypeName('System.ComponentModel.Component')]
  DNComponent = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{99A63A36-5214-3F7C-A1E3-2DB3904EC4D7}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNComponent = class(TDNGenericImport<DNComponentClass, DNComponent>) end;


implementation


initialization
  LoadAssemblyModule('System.ComponentModel.Primitives.dll', True);

finalization

end.
