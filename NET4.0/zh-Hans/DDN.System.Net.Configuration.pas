//----------------------------------------------------------------------------
//  System.dll: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Net.Configuration
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Net.Configuration;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Net.Configuration----------------
  ///<summary>
  ///  指定是否自动检测代理。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement+AutoDetectValues')]
  DNProxyElement_AutoDetectValues = type Integer;
  DNProxyElement_AutoDetectValuesHelper = record helper for DNProxyElement_AutoDetectValues
  public const
    ///<summary>
    ///  不会自动检测代理服务器。
    ///</summary>
    False = 0;
    ///<summary>
    ///  自动检测代理。
    ///</summary>
    True = 1;
    ///<summary>
    ///  指定此字符集。
    ///</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>
  ///  指定是否对本地资源不使用代理。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement+BypassOnLocalValues')]
  DNProxyElement_BypassOnLocalValues = type Integer;
  DNProxyElement_BypassOnLocalValuesHelper = record helper for DNProxyElement_BypassOnLocalValues
  public const
    ///<summary>
    ///  对于本地资源的所有请求应都经过代理
    ///</summary>
    False = 0;
    ///<summary>
    ///  直接访问本地资源。
    ///</summary>
    True = 1;
    ///<summary>
    ///  指定此字符集。
    ///</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>
  ///  指定是否使用本地系统代理设置来确定是否对本地资源不使用代理。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement+UseSystemDefaultValues')]
  DNProxyElement_UseSystemDefaultValues = type Integer;
  DNProxyElement_UseSystemDefaultValuesHelper = record helper for DNProxyElement_UseSystemDefaultValues
  public const
    ///<summary>
    ///  不使用系统默认代理设置值
    ///</summary>
    False = 0;
    ///<summary>
    ///  使用系统默认代理设置值。
    ///</summary>
    True = 1;
    ///<summary>
    ///  系统默认代理设置不指定。
    ///</summary>
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>
  ///  控制如何将 Unicode 字符解释通过 <see cref="Overload:System.Net.WebUtility.HtmlDecode" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Net.Configuration.UnicodeDecodingConformance')]
  DNUnicodeDecodingConformance = type Integer;
  DNUnicodeDecodingConformanceHelper = record helper for DNUnicodeDecodingConformance
  public const
    ///<summary>
    ///  使用自动行为。
    ///  解码的行为是由当前应用程序的目标框架确定的。
    ///  有关 .NET Framework 4.5 和更高版本，Unicode 编码解码严格。
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  使用严格的行为。
    ///  指定传入编码的数据将被解码之前检查的有效性。
    ///  例如，输入的字符串的"&amp; #144308;"将解码为 U + 233B4，但使用输入的字符串"&amp;#xD84C; &amp;#xDFB4;"将无法正确解码。
    ///  已解码字符串中的数据未检查的有效性。
    ///  例如，"\ud800"的输入的字符串将导致"\ud800"的输出字符串，因为已解码代理期间会跳过解码，即使它是不成对。
    ///</summary>
    Strict_ = 1;
    ///<summary>
    ///  使用兼容的行为。
    ///  指定传入的数据被解码之前不检查的有效性。
    ///  例如，输入的字符串的"&amp;amp; #xD84C;"将解码为 U + D84C，这是一个不成对的代理项。
    ///  此外，解码器不能理解代码数据点处于 SMP 它们被表示为 HTML 编码的代理项，因此除非 inputstring"&amp; #144308;"将导致输出字符串"&amp; #144308;"。
    ///</summary>
    Compat = 2;
    ///<summary>
    ///  使用松散的行为。
    ///  类似于 <see cref="F:System.Net.Configuration.UnicodeDecodingConformance.Compat" />
    ///  在于，不会有效性检查，但解码器还能理解的代码数据点。
    ///  输入的字符串"&amp; #144308;"会将解码为字符 U + 233B4 正确。
    ///  此开关旨在提供最大互操作性，如果解码器不知道哪种格式提供程序使用来生成编码的字符串。
    ///</summary>
    Loose = 3;
  end;


  //-------------namespace: System.Net.Configuration----------------
  ///<summary>
  ///  控制如何将 Unicode 字符输出的 <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Net.Configuration.UnicodeEncodingConformance')]
  DNUnicodeEncodingConformance = type Integer;
  DNUnicodeEncodingConformanceHelper = record helper for DNUnicodeEncodingConformance
  public const
    ///<summary>
    ///  使用自动行为。
    ///  Unicode 编码行为由当前应用程序的目标框架。
    ///  有关 .NET Framework 4.5 和更高版本，Unicode 编码行为严格。        </summary>
    Auto = 0;
    ///<summary>
    ///  使用严格的行为。
    ///  指定单个 utf-16 代理项码位将合并为一个单独的码位的 <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  调用方法。
    ///  例如，给定的输入的字符串"\uD84C\uDFB4"（或"\U000233B4"），输出的 <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  方法为"&amp; #144308;"。
    ///  如果输入是一个格式不正确的 utf-16 字符串 （它包含不成对的代理项，例如），坏码位将被替换为 U + FFFD （Unicode 替换字符） 之前进行 HTML 编码。
    ///</summary>
    Strict_ = 1;
    ///<summary>
    ///  使用兼容的行为。
    ///  指定单个 utf-16 代理项码位的输出作为-当之一 <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  调用方法。
    ///  例如，给定字符串"\uD84C\uDFB4"（或"\U000233B4"） 的输出 <see cref="Overload:System.Net.WebUtility.HtmlEncode" />
    ///  是"\uD84C\uDFB4"（未编码输入）。
    ///</summary>
    Compat = 2;
  end;




type


{ declares }

  DNAuthenticationModuleElementCollection = interface; // type: System.Net.Configuration.AuthenticationModuleElementCollection, namespace: System.Net.Configuration
  DNBypassElementCollection = interface; // type: System.Net.Configuration.BypassElementCollection, namespace: System.Net.Configuration
  DNConnectionManagementElementCollection = interface; // type: System.Net.Configuration.ConnectionManagementElementCollection, namespace: System.Net.Configuration
  DNWebRequestModuleElementCollection = interface; // type: System.Net.Configuration.WebRequestModuleElementCollection, namespace: System.Net.Configuration
  DNAuthenticationModulesSection = interface; // type: System.Net.Configuration.AuthenticationModulesSection, namespace: System.Net.Configuration
  DNConnectionManagementSection = interface; // type: System.Net.Configuration.ConnectionManagementSection, namespace: System.Net.Configuration
  DNDefaultProxySection = interface; // type: System.Net.Configuration.DefaultProxySection, namespace: System.Net.Configuration
  DNRequestCachingSection = interface; // type: System.Net.Configuration.RequestCachingSection, namespace: System.Net.Configuration
  DNSettingsSection = interface; // type: System.Net.Configuration.SettingsSection, namespace: System.Net.Configuration
  DNSmtpSection = interface; // type: System.Net.Configuration.SmtpSection, namespace: System.Net.Configuration
  DNWebRequestModulesSection = interface; // type: System.Net.Configuration.WebRequestModulesSection, namespace: System.Net.Configuration
  DNAuthenticationModuleElement = interface; // type: System.Net.Configuration.AuthenticationModuleElement, namespace: System.Net.Configuration
  DNBypassElement = interface; // type: System.Net.Configuration.BypassElement, namespace: System.Net.Configuration
  DNConnectionManagementElement = interface; // type: System.Net.Configuration.ConnectionManagementElement, namespace: System.Net.Configuration
  DNFtpCachePolicyElement = interface; // type: System.Net.Configuration.FtpCachePolicyElement, namespace: System.Net.Configuration
  DNHttpCachePolicyElement = interface; // type: System.Net.Configuration.HttpCachePolicyElement, namespace: System.Net.Configuration
  DNHttpListenerElement = interface; // type: System.Net.Configuration.HttpListenerElement, namespace: System.Net.Configuration
  DNHttpListenerTimeoutsElement = interface; // type: System.Net.Configuration.HttpListenerTimeoutsElement, namespace: System.Net.Configuration
  DNHttpWebRequestElement = interface; // type: System.Net.Configuration.HttpWebRequestElement, namespace: System.Net.Configuration
  DNIpv6Element = interface; // type: System.Net.Configuration.Ipv6Element, namespace: System.Net.Configuration
  DNModuleElement = interface; // type: System.Net.Configuration.ModuleElement, namespace: System.Net.Configuration
  DNPerformanceCountersElement = interface; // type: System.Net.Configuration.PerformanceCountersElement, namespace: System.Net.Configuration
  DNProxyElement = interface; // type: System.Net.Configuration.ProxyElement, namespace: System.Net.Configuration
  DNServicePointManagerElement = interface; // type: System.Net.Configuration.ServicePointManagerElement, namespace: System.Net.Configuration
  DNSmtpNetworkElement = interface; // type: System.Net.Configuration.SmtpNetworkElement, namespace: System.Net.Configuration
  DNSmtpSpecifiedPickupDirectoryElement = interface; // type: System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement, namespace: System.Net.Configuration
  DNSocketElement = interface; // type: System.Net.Configuration.SocketElement, namespace: System.Net.Configuration
  DNWebProxyScriptElement = interface; // type: System.Net.Configuration.WebProxyScriptElement, namespace: System.Net.Configuration
  DNWebRequestModuleElement = interface; // type: System.Net.Configuration.WebRequestModuleElement, namespace: System.Net.Configuration
  DNWebUtilityElement = interface; // type: System.Net.Configuration.WebUtilityElement, namespace: System.Net.Configuration
  DNWindowsAuthenticationElement = interface; // type: System.Net.Configuration.WindowsAuthenticationElement, namespace: System.Net.Configuration
  DNMailSettingsSectionGroup = interface; // type: System.Net.Configuration.MailSettingsSectionGroup, namespace: System.Net.Configuration
  DNNetSectionGroup = interface; // type: System.Net.Configuration.NetSectionGroup, namespace: System.Net.Configuration


{ objects }

  //-------------namespace: System.Net.Configuration----------------
  DNAuthenticationModuleElementCollectionClass = interface(DNObjectClass)
  ['{3E5B622A-A1F2-547C-85DC-63A8F0894430}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAuthenticationModuleElementCollection;

  end;

  ///<summary>
  ///  表示身份验证模块配置元素的容器。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.AuthenticationModuleElementCollection')]
  DNAuthenticationModuleElementCollection = interface(DNObject)
  ['{30BE1B0F-EDAA-3ABF-81AC-71743BC642DD}']
  { getters & setters } 

    function get_Item(index: Int32): DNAuthenticationModuleElement; overload;
    procedure set_Item(index: Int32; value: DNAuthenticationModuleElement); overload;
    function get_Item(name: string): DNAuthenticationModuleElement; overload;
    procedure set_Item(name: string; value: DNAuthenticationModuleElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将一个元素添加到集合中。
    ///</summary>
    ///  <param name="element">
    ///  要添加到集合中的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  。
    ///</param>
    procedure Add(element: DNAuthenticationModuleElement);
    ///<summary>
    ///  移除集合中的所有元素。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回指定的配置元素的索引。
    ///</summary>
    ///  <param name="element"><see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <paramref name="element" />
    ///  。
    ///</returns>
    function IndexOf(element: DNAuthenticationModuleElement): Int32;
    ///<summary>
    ///  移除集合中的指定配置元素。
    ///</summary>
    ///  <param name="element">
    ///  要移除的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNAuthenticationModuleElement); overload;
    ///<summary>
    ///  移除具有指定键的元素。
    ///</summary>
    ///  <param name="name">
    ///  要移除的元素的键。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  要移除的元素的从零开始的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAuthenticationModuleElement read get_Item write set_Item; default;
    property Item[name: string]: DNAuthenticationModuleElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationModuleElementCollection = class(TDNGenericImport<DNAuthenticationModuleElementCollectionClass, DNAuthenticationModuleElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNBypassElementCollectionClass = interface(DNObjectClass)
  ['{08E16BAF-8716-5CAC-B42D-4893D6BA3C58}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.BypassElementCollection" />
    ///  类的空实例。
    ///</summary>
    {class} function init: DNBypassElementCollection;

  end;

  ///<summary>
  ///  表示不使用代理服务器的资源的地址的容器。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.BypassElementCollection')]
  DNBypassElementCollection = interface(DNObject)
  ['{44D5F88E-76B3-3B0F-9977-7DB90B662F35}']
  { getters & setters } 

    function get_Item(index: Int32): DNBypassElement; overload;
    procedure set_Item(index: Int32; value: DNBypassElement); overload;
    function get_Item(name: string): DNBypassElement; overload;
    procedure set_Item(name: string; value: DNBypassElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将一个元素添加到集合中。
    ///</summary>
    ///  <param name="element">
    ///  要添加到集合中的 <see cref="T:System.Net.Configuration.BypassElement" />
    ///  。
    ///</param>
    procedure Add(element: DNBypassElement);
    ///<summary>
    ///  移除集合中的所有元素。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回指定的配置元素的索引。
    ///</summary>
    ///  <param name="element"><see cref="T:System.Net.Configuration.BypassElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <paramref name="element" />
    ///  。
    ///</returns>
    function IndexOf(element: DNBypassElement): Int32;
    ///<summary>
    ///  移除集合中的指定配置元素。
    ///</summary>
    ///  <param name="element">
    ///  要移除的 <see cref="T:System.Net.Configuration.BypassElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNBypassElement); overload;
    ///<summary>
    ///  移除具有指定键的元素。
    ///</summary>
    ///  <param name="name">
    ///  要移除的元素的键。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  要移除的元素的从零开始的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBypassElement read get_Item write set_Item; default;
    property Item[name: string]: DNBypassElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBypassElementCollection = class(TDNGenericImport<DNBypassElementCollectionClass, DNBypassElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNConnectionManagementElementCollectionClass = interface(DNObjectClass)
  ['{0A55556C-7FDD-568E-AF71-C98DAA052891}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNConnectionManagementElementCollection;

  end;

  ///<summary>
  ///  表示连接管理配置元素的容器。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ConnectionManagementElementCollection')]
  DNConnectionManagementElementCollection = interface(DNObject)
  ['{DAE5D242-84A2-3E36-9F79-4A9775B071A8}']
  { getters & setters } 

    function get_Item(index: Int32): DNConnectionManagementElement; overload;
    procedure set_Item(index: Int32; value: DNConnectionManagementElement); overload;
    function get_Item(name: string): DNConnectionManagementElement; overload;
    procedure set_Item(name: string; value: DNConnectionManagementElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将一个元素添加到集合中。
    ///</summary>
    ///  <param name="element">
    ///  要添加到集合中的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  。
    ///</param>
    procedure Add(element: DNConnectionManagementElement);
    ///<summary>
    ///  移除集合中的所有元素。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回指定的配置元素的索引。
    ///</summary>
    ///  <param name="element"><see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <paramref name="element" />
    ///  。
    ///</returns>
    function IndexOf(element: DNConnectionManagementElement): Int32;
    ///<summary>
    ///  移除集合中的指定配置元素。
    ///</summary>
    ///  <param name="element">
    ///  要移除的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNConnectionManagementElement); overload;
    ///<summary>
    ///  移除具有指定键的元素。
    ///</summary>
    ///  <param name="name">
    ///  要移除的元素的键。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  要移除的元素的从零开始的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConnectionManagementElement read get_Item write set_Item; default;
    property Item[name: string]: DNConnectionManagementElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionManagementElementCollection = class(TDNGenericImport<DNConnectionManagementElementCollectionClass, DNConnectionManagementElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebRequestModuleElementCollectionClass = interface(DNObjectClass)
  ['{FD7506E6-106C-56B2-A299-BB99C57424FD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebRequestModuleElementCollection;

  end;

  ///<summary>
  ///  表示用于 Web 请求模块配置元素的容器。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.WebRequestModuleElementCollection')]
  DNWebRequestModuleElementCollection = interface(DNObject)
  ['{146D1F14-5F97-3C11-9929-725BC4CCA898}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebRequestModuleElement; overload;
    procedure set_Item(index: Int32; value: DNWebRequestModuleElement); overload;
    function get_Item(name: string): DNWebRequestModuleElement; overload;
    procedure set_Item(name: string; value: DNWebRequestModuleElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>
    ///  将一个元素添加到集合中。
    ///</summary>
    ///  <param name="element">
    ///  要添加到集合中的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  。
    ///</param>
    procedure Add(element: DNWebRequestModuleElement);
    ///<summary>
    ///  移除集合中的所有元素。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  返回指定的配置元素的索引。
    ///</summary>
    ///  <param name="element"><see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <paramref name="element" />
    ///  。
    ///</returns>
    function IndexOf(element: DNWebRequestModuleElement): Int32;
    ///<summary>
    ///  移除集合中的指定配置元素。
    ///</summary>
    ///  <param name="element">
    ///  要移除的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  。
    ///</param>
    procedure Remove(element: DNWebRequestModuleElement); overload;
    ///<summary>
    ///  移除具有指定键的元素。
    ///</summary>
    ///  <param name="name">
    ///  要移除的元素的键。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  移除指定索引处的元素。
    ///</summary>
    ///  <param name="index">
    ///  要移除的元素的从零开始的索引。
    ///</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebRequestModuleElement read get_Item write set_Item; default;
    property Item[name: string]: DNWebRequestModuleElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebRequestModuleElementCollection = class(TDNGenericImport<DNWebRequestModuleElementCollectionClass, DNWebRequestModuleElementCollection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNAuthenticationModulesSectionClass = interface(DNObjectClass)
  ['{31876F49-1085-5B14-90CF-A2E55C153359}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.AuthenticationModulesSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAuthenticationModulesSection;

  end;

  ///<summary>
  ///  表示身份验证模块的配置节。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.AuthenticationModulesSection')]
  DNAuthenticationModulesSection = interface(DNObject)
  ['{DF18CD21-DB70-3E3E-B069-EDE6A56F4B72}']
  { getters & setters } 

    function get_AuthenticationModules: DNAuthenticationModuleElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取该节中的身份验证模块的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" />
    ///  ，其中包含已注册的身份验证模块。
    ///</returns>
    property AuthenticationModules: DNAuthenticationModuleElementCollection read get_AuthenticationModules;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationModulesSection = class(TDNGenericImport<DNAuthenticationModulesSectionClass, DNAuthenticationModulesSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNConnectionManagementSectionClass = interface(DNObjectClass)
  ['{3EBEBEB1-2938-5102-BB77-DA5E9FB90057}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ConnectionManagementSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNConnectionManagementSection;

  end;

  ///<summary>
  ///  表示连接管理的配置节。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ConnectionManagementSection')]
  DNConnectionManagementSection = interface(DNObject)
  ['{D536B35C-EEB7-3304-9622-82A8394804E5}']
  { getters & setters } 

    function get_ConnectionManagement: DNConnectionManagementElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取该节中管理对象的连接的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" />
    ///  包含本地计算机的连接管理信息。
    ///</returns>
    property ConnectionManagement: DNConnectionManagementElementCollection read get_ConnectionManagement;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionManagementSection = class(TDNGenericImport<DNConnectionManagementSectionClass, DNConnectionManagementSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNDefaultProxySectionClass = interface(DNObjectClass)
  ['{0E38D258-5ADE-5D04-8F8A-A0CD1250FA6E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.DefaultProxySection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDefaultProxySection;

  end;

  ///<summary>
  ///  表示 Web 代理服务器使用情况的配置节。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.DefaultProxySection')]
  DNDefaultProxySection = interface(DNObject)
  ['{086ED210-223A-3564-A9B9-6663C4280C8D}']
  { getters & setters } 

    function get_BypassList: DNBypassElementCollection;
    function get_Module: DNModuleElement;
    function get_Proxy: DNProxyElement;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取不使用 Web 代理服务器获取的资源的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.BypassElementCollection" />
    ///  ，其中包含的资源不使用 Web 代理服务器的地址。
    ///</returns>
    property BypassList: DNBypassElementCollection read get_BypassList;
    ///<summary>
    ///  获取自定义的 Web 代理实现的类型信息。
    ///</summary>
    ///<returns><see cref="T:System.Net.Configuration.ModuleElement" />
    ///  。
    ///  有关自定义的 Web 代理实现的类型信息。
    ///</returns>
    property Module: DNModuleElement read get_Module;
    ///<summary>
    ///  获取用于标识要使用的 Web 代理服务器的 URI。
    ///</summary>
    ///<returns><see cref="T:System.Net.Configuration.ProxyElement" />
    ///  。
    ///  用于标识 Web 代理服务器的 URI。
    ///</returns>
    property Proxy: DNProxyElement read get_Proxy;
    ///<summary>
    ///  获取或设置是否使用 Web 代理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果将使用 Web 代理;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置默认凭据是否可用于访问 Web 代理服务器。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果使用，则默认凭据否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDefaultProxySection = class(TDNGenericImport<DNDefaultProxySectionClass, DNDefaultProxySection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNRequestCachingSectionClass = interface(DNObjectClass)
  ['{D3C87A38-082F-587F-B2C4-BEF8D28251D4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.RequestCachingSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRequestCachingSection;

  end;

  ///<summary>
  ///  表示缓存行为的配置节。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.RequestCachingSection')]
  DNRequestCachingSection = interface(DNObject)
  ['{A8466872-24FD-3A18-A365-E06327DB91F5}']
  { getters & setters } 

    function get_DefaultHttpCachePolicy: DNHttpCachePolicyElement;
    function get_DefaultFtpCachePolicy: DNFtpCachePolicyElement;
    function get_DefaultPolicyLevel: DNRequestCacheLevel;
    procedure set_DefaultPolicyLevel(value: DNRequestCacheLevel);
    function get_DisableAllCaching: Boolean;
    procedure set_DisableAllCaching(value: Boolean);
    function get_IsPrivateCache: Boolean;
    procedure set_IsPrivateCache(value: Boolean);
    function get_UnspecifiedMaximumAge: DDN.mscorlib.DNTimeSpan;
    procedure set_UnspecifiedMaximumAge(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取默认值缓存在本地计算机的行为。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.HttpCachePolicyElement" />
    ///  ，定义默认缓存策略。
    ///</returns>
    property DefaultHttpCachePolicy: DNHttpCachePolicyElement read get_DefaultHttpCachePolicy;
    ///<summary>
    ///  获取默认 FTP 缓存为本地计算机的行为。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.FtpCachePolicyElement" />
    ///  ，定义默认缓存策略。
    ///</returns>
    property DefaultFtpCachePolicy: DNFtpCachePolicyElement read get_DefaultFtpCachePolicy;
    ///<summary>
    ///  获取或设置默认缓存策略级别。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Cache.RequestCacheLevel" />
    ///  枚举值。
    ///</returns>
    property DefaultPolicyLevel: DNRequestCacheLevel read get_DefaultPolicyLevel write set_DefaultPolicyLevel;
    ///<summary>
    ///  获取或设置一个布尔值，启用缓存在本地计算机上。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在本地计算机，则禁用缓存否则为 <see langword="false" />
    ///  。
    ///</returns>
    property DisableAllCaching: Boolean read get_DisableAllCaching write set_DisableAllCaching;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示本地计算机缓存为私有。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果缓存提供用户隔离;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPrivateCache: Boolean read get_IsPrivateCache write set_IsPrivateCache;
    ///<summary>
    ///  获取或设置一个值，该值用作缓存有过期信息的资源的最长期限。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  ，它提供缓存的资源的默认最大期限。
    ///</returns>
    property UnspecifiedMaximumAge: DDN.mscorlib.DNTimeSpan read get_UnspecifiedMaximumAge write set_UnspecifiedMaximumAge;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNRequestCachingSection = class(TDNGenericImport<DNRequestCachingSectionClass, DNRequestCachingSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSettingsSectionClass = interface(DNObjectClass)
  ['{BF735F2C-DAFF-5D63-B1B0-2FA322B7F18F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ConnectionManagementSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSettingsSection;

  end;

  ///<summary>
  ///  表示套接字、 IPv6、 响应标头和服务点的配置节。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.SettingsSection')]
  DNSettingsSection = interface(DNObject)
  ['{0C7B9893-B74A-344E-AE79-B3A7C4FE8828}']
  { getters & setters } 

    function get_HttpWebRequest: DNHttpWebRequestElement;
    function get_Ipv6: DNIpv6Element;
    function get_ServicePointManager: DNServicePointManagerElement;
    function get_Socket: DNSocketElement;
    function get_WebProxyScript: DNWebProxyScriptElement;
    function get_PerformanceCounters: DNPerformanceCountersElement;
    function get_HttpListener: DNHttpListenerElement;
    function get_WebUtility: DNWebUtilityElement;
    function get_WindowsAuthentication: DNWindowsAuthenticationElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取控件使用的设置的配置元素 <see cref="T:System.Net.HttpWebRequest" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.HttpWebRequestElement" />
    ///  对象。
    ///  控制最大响应标头长度，以及使用其他设置的配置元素 <see cref="T:System.Net.HttpWebRequest" />
    ///  对象。
    ///</returns>
    property HttpWebRequest: DNHttpWebRequestElement read get_HttpWebRequest;
    ///<summary>
    ///  获取使 Internet 协议版本 6 (IPv6) 的配置元素。
    ///</summary>
    ///<returns><see cref="T:System.Net.Configuration.Ipv6Element" />
    ///  。
    ///  控制使用的 IPv6 设置的配置元素。
    ///</returns>
    property Ipv6: DNIpv6Element read get_Ipv6;
    ///<summary>
    ///  获取控制与远程主机计算机的连接设置的配置元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.ServicePointManagerElement" />
    ///  对象。
    ///  它控制设置的配置元素用于连接到远程主机的计算机的网络性能计数器。
    ///</returns>
    property ServicePointManager: DNServicePointManagerElement read get_ServicePointManager;
    ///<summary>
    ///  获取控制套接字设置的配置元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.SocketElement" />
    ///  对象。
    ///  该配置元素可控制套接字设置。
    ///</returns>
    property Socket: DNSocketElement read get_Socket;
    ///<summary>
    ///  获取控件的执行超时值和下载超时的 Web 代理脚本的配置元素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.WebProxyScriptElement" />
    ///  对象。
    ///  控制执行超时值和使用 Web 代理脚本下载超时设置的配置元素。
    ///</returns>
    property WebProxyScript: DNWebProxyScriptElement read get_WebProxyScript;
    ///<summary>
    ///  获取控制是否启用网络性能计数器的配置元素。
    ///</summary>
    ///<returns><see cref="T:System.Net.Configuration.PerformanceCountersElement" />
    ///  。
    ///  控制设置的配置元素用于网络性能计数器。
    ///</returns>
    property PerformanceCounters: DNPerformanceCountersElement read get_PerformanceCounters;
    ///<summary>
    ///  获取控件使用的设置的配置元素 <see cref="T:System.Net.HttpListener" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.HttpListenerElement" />
    ///  对象。
    ///  控制使用的设置的配置元素 <see cref="T:System.Net.HttpListener" />
    ///  对象。
    ///</returns>
    property HttpListener: DNHttpListenerElement read get_HttpListener;
    ///<summary>
    ///  获取控件使用的设置的配置元素 <see cref="T:System.Net.WebUtility" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Net.Configuration.WebUtilityElement" />
    ///  。
    ///  控制使用的设置的配置元素 <see cref="T:System.Net.WebUtility" />
    ///  对象。
    ///</returns>
    property WebUtility: DNWebUtilityElement read get_WebUtility;
    property WindowsAuthentication: DNWindowsAuthenticationElement read get_WindowsAuthentication;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSettingsSection = class(TDNGenericImport<DNSettingsSectionClass, DNSettingsSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSmtpSectionClass = interface(DNObjectClass)
  ['{A07B97D0-32B6-548A-9355-81AEF631478E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.SmtpSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSmtpSection;

  end;

  ///<summary>
  ///  表示的 SMTP 节 <see langword="System.Net" />
  ///  配置文件。
  ///</summary>
  [DNTypeName('System.Net.Configuration.SmtpSection')]
  DNSmtpSection = interface(DNObject)
  ['{2B03FD71-9C48-3F6D-B05B-F3B7E4430B34}']
  { getters & setters } 

    function get_DeliveryMethod: DNSmtpDeliveryMethod;
    procedure set_DeliveryMethod(value: DNSmtpDeliveryMethod);
    function get_DeliveryFormat: DNSmtpDeliveryFormat;
    procedure set_DeliveryFormat(value: DNSmtpDeliveryFormat);
    function get_From: string;
    procedure set_From(value: string);
    function get_Network: DNSmtpNetworkElement;
    function get_SpecifiedPickupDirectory: DNSmtpSpecifiedPickupDirectoryElement;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置简单邮件传输协议 (SMTP) 传递方法。
    ///  默认的传递方法是 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示 SMTP 传递方法的字符串。
    ///</returns>
    property DeliveryMethod: DNSmtpDeliveryMethod read get_DeliveryMethod write set_DeliveryMethod;
    ///<summary>
    ///  获取或设置要用于发送传出电子邮件使用简单邮件传输协议 (SMTP) 的交付格式。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Net.Mail.SmtpDeliveryFormat" />
    ///  。
    ///  传递格式用于发送传出电子邮件使用 SMTP。
    ///</returns>
    property DeliveryFormat: DNSmtpDeliveryFormat read get_DeliveryFormat write set_DeliveryFormat;
    ///<summary>
    ///  获取或设置默认值，该值指示电子邮件的发件人。
    ///</summary>
    ///<returns>
    ///  一个表示默认值，该值指示一封电子邮件的发件人的字符串。
    ///</returns>
    property From: string read get_From write set_From;
    ///<summary>
    ///  获取控件使用的简单邮件传输协议 (SMTP) 的网络设置的配置元素。
    ///  文件。<see cref="T:System.Net.Configuration.SmtpNetworkElement" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.SmtpNetworkElement" />
    ///  对象。
    ///  控制使用 SMTP 的网络设置的配置元素。
    ///</returns>
    property Network: DNSmtpNetworkElement read get_Network;
    ///<summary>
    ///  获取 SMPT 客户端将使用的拾取目录。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" />
    ///  对象，它指定拾取目录文件夹。
    ///</returns>
    property SpecifiedPickupDirectory: DNSmtpSpecifiedPickupDirectoryElement read get_SpecifiedPickupDirectory;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSmtpSection = class(TDNGenericImport<DNSmtpSectionClass, DNSmtpSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebRequestModulesSectionClass = interface(DNObjectClass)
  ['{AEBD7F61-8629-5BA5-A583-51CAD27AE3F4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.WebRequestModulesSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebRequestModulesSection;

  end;

  ///<summary>
  ///  表示 Web 请求模块的配置节。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.WebRequestModulesSection')]
  DNWebRequestModulesSection = interface(DNObject)
  ['{9B213E9F-B6AE-38F8-8561-D80710F0B261}']
  { getters & setters } 

    function get_WebRequestModules: DNWebRequestModuleElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取该节中的 Web 请求模块的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" />
    ///  包含已注册的 Web 请求模块。
    ///</returns>
    property WebRequestModules: DNWebRequestModuleElementCollection read get_WebRequestModules;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebRequestModulesSection = class(TDNGenericImport<DNWebRequestModulesSectionClass, DNWebRequestModulesSection>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNAuthenticationModuleElementClass = interface(DNObjectClass)
  ['{179B8082-1827-582F-9393-33741A42FB13}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAuthenticationModuleElement; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />
    ///  类，具有指定的类型信息。
    ///</summary>
    ///  <param name="typeName">
    ///  一个字符串，标识的类型和包含它的程序集。
    ///</param>
    {class} function init(typeName: string): DNAuthenticationModuleElement; overload;

  end;

  ///<summary>
  ///  表示一个身份验证模块的类型信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.AuthenticationModuleElement')]
  DNAuthenticationModuleElement = interface(DNObject)
  ['{D04C9593-F364-3E07-8EB7-87E292CE8A55}']
  { getters & setters } 

    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置当前实例的类型和程序集信息。
    ///</summary>
    ///<returns>
    ///  一个字符串，标识实现身份验证模块的类型或 <see langword="null" />
    ///  如果不指定任何值。
    ///</returns>
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationModuleElement = class(TDNGenericImport<DNAuthenticationModuleElementClass, DNAuthenticationModuleElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNBypassElementClass = interface(DNObjectClass)
  ['{3185DE0F-8F56-542E-AF62-57C5BC29A840}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.BypassElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBypassElement; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.Configuration.BypassElement" />
    ///  类，具有指定的类型信息。
    ///</summary>
    ///  <param name="address">
    ///  一个字符串，标识资源的地址。
    ///</param>
    {class} function init(address: string): DNBypassElement; overload;

  end;

  ///<summary>
  ///  表示不使用代理服务器检索的资源的地址信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.BypassElement')]
  DNBypassElement = interface(DNObject)
  ['{2296AA7C-1E61-38EA-B2C5-06FF1C226965}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的资源不使用代理服务器的地址。
    ///</summary>
    ///<returns>
    ///  一个字符串，标识的资源。
    ///</returns>
    property Address: string read get_Address write set_Address;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBypassElement = class(TDNGenericImport<DNBypassElementClass, DNBypassElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNConnectionManagementElementClass = interface(DNObjectClass)
  ['{D2564865-7819-5E6A-A18F-CB0F5F749BC8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNConnectionManagementElement; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />
    ///  带有指定的地址和连接限制信息的类。
    ///</summary>
    ///  <param name="address">
    ///  一个字符串，标识的远程计算机的地址。
    ///</param>
    ///  <param name="maxConnection">
    ///  标识允许连接到的最大数目的整数 <paramref name="address" />
    ///  从本地计算机。
    ///</param>
    {class} function init(address: string; maxConnection: Int32): DNConnectionManagementElement; overload;

  end;

  ///<summary>
  ///  表示连接到远程计算机的最大数量。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ConnectionManagementElement')]
  DNConnectionManagementElement = interface(DNObject)
  ['{5589BB66-821D-37DB-B91F-9334C4C10B50}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_MaxConnection: Int32;
    procedure set_MaxConnection(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置远程计算机的地址。
    ///</summary>
    ///<returns>
    ///  包含正则表达式描述的 IP 地址或 DNS 名称的字符串。
    ///</returns>
    property Address: string read get_Address write set_Address;
    ///<summary>
    ///  获取或设置最大可为远程计算机的连接数。
    ///</summary>
    ///<returns>
    ///  一个整数，指定最大连接数。
    ///</returns>
    property MaxConnection: Int32 read get_MaxConnection write set_MaxConnection;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionManagementElement = class(TDNGenericImport<DNConnectionManagementElementClass, DNConnectionManagementElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNFtpCachePolicyElementClass = interface(DNObjectClass)
  ['{7878EFB8-45F9-58FA-AC02-FB4F00CA483A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.FtpCachePolicyElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNFtpCachePolicyElement;

  end;

  ///<summary>
  ///  表示网络资源的默认 FTP 缓存策略。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.FtpCachePolicyElement')]
  DNFtpCachePolicyElement = interface(DNObject)
  ['{9FA957E7-E3F1-3462-8A47-036698C5FD68}']
  { getters & setters } 

    function get_PolicyLevel: DNRequestCacheLevel;
    procedure set_PolicyLevel(value: DNRequestCacheLevel);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 FTP 缓存在本地计算机的行为。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Cache.RequestCacheLevel" />
    ///  值，该值指定缓存行为。
    ///</returns>
    property PolicyLevel: DNRequestCacheLevel read get_PolicyLevel write set_PolicyLevel;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFtpCachePolicyElement = class(TDNGenericImport<DNFtpCachePolicyElementClass, DNFtpCachePolicyElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpCachePolicyElementClass = interface(DNObjectClass)
  ['{70CB3E7D-0455-53F7-8D4C-E286F0B202C6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.HttpCachePolicyElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpCachePolicyElement;

  end;

  ///<summary>
  ///  表示网络资源的默认 HTTP 缓存策略。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.HttpCachePolicyElement')]
  DNHttpCachePolicyElement = interface(DNObject)
  ['{9DAD3938-EB30-3044-9E10-04BE6F9DE894}']
  { getters & setters } 

    function get_MaximumAge: DDN.mscorlib.DNTimeSpan;
    procedure set_MaximumAge(value: DDN.mscorlib.DNTimeSpan);
    function get_MaximumStale: DDN.mscorlib.DNTimeSpan;
    procedure set_MaximumStale(value: DDN.mscorlib.DNTimeSpan);
    function get_MinimumFresh: DDN.mscorlib.DNTimeSpan;
    procedure set_MinimumFresh(value: DDN.mscorlib.DNTimeSpan);
    function get_PolicyLevel: DNHttpRequestCacheLevel;
    procedure set_PolicyLevel(value: DNHttpRequestCacheLevel);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置从缓存返回资源所允许的最大生存期。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  值，该值指定的最长期限缓存配置文件中指定的资源。
    ///</returns>
    property MaximumAge: DDN.mscorlib.DNTimeSpan read get_MaximumAge write set_MaximumAge;
    ///<summary>
    ///  获取或设置从缓存返回资源所允许的最大过期值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  设置为配置文件中指定的最大过期值的值。
    ///</returns>
    property MaximumStale: DDN.mscorlib.DNTimeSpan read get_MaximumStale write set_MaximumStale;
    ///<summary>
    ///  获取或设置从缓存返回资源所允许的最小新鲜值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  值，该值指定配置文件中指定的最小新鲜。
    ///</returns>
    property MinimumFresh: DDN.mscorlib.DNTimeSpan read get_MinimumFresh write set_MinimumFresh;
    ///<summary>
    ///  获取或设置 HTTP 缓存在本地计算机的行为。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" />
    ///  值，该值指定缓存行为。
    ///</returns>
    property PolicyLevel: DNHttpRequestCacheLevel read get_PolicyLevel write set_PolicyLevel;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpCachePolicyElement = class(TDNGenericImport<DNHttpCachePolicyElementClass, DNHttpCachePolicyElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpListenerElementClass = interface(DNObjectClass)
  ['{C2EB79F8-704D-512E-AADC-1F815DF21390}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.HttpListenerElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpListenerElement;

  end;

  ///<summary>
  ///  表示配置文件中的 HttpListener 元素。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.HttpListenerElement')]
  DNHttpListenerElement = interface(DNObject)
  ['{EDFF484B-6E6E-3625-964B-912A4AD7EFE7}']
  { getters & setters } 

    function get_UnescapeRequestUrl: Boolean;
    function get_Timeouts: DNHttpListenerTimeoutsElement;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示如果 <see cref="T:System.Net.HttpListener" />
    ///  使用原始的未转义的 URI，而不是经过转换的 URI。
    ///</summary>
    ///<returns>
    ///  一个布尔值，该值指示如果 <see cref="T:System.Net.HttpListener" />
    ///  使用原始的未转义的 URI，而不是经过转换的 URI。
    ///</returns>
    property UnescapeRequestUrl: Boolean read get_UnescapeRequestUrl;
    ///<summary>
    ///  获取用于超时元素的默认值 <see cref="T:System.Net.HttpListener" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
    ///  。
    ///  用于的超时元素 <see cref="T:System.Net.HttpListener" />
    ///  对象。
    ///</returns>
    property Timeouts: DNHttpListenerTimeoutsElement read get_Timeouts;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpListenerElement = class(TDNGenericImport<DNHttpListenerElementClass, DNHttpListenerElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpListenerTimeoutsElementClass = interface(DNObjectClass)
  ['{79AB40F8-94B6-5700-89E8-FC84ABD1066B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpListenerTimeoutsElement;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Net.HttpListener" />
  ///  配置文件中的超时元素。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.HttpListenerTimeoutsElement')]
  DNHttpListenerTimeoutsElement = interface(DNObject)
  ['{564B8B86-7104-3DA2-BB0A-4096123195D1}']
  { getters & setters } 

    function get_EntityBody: DDN.mscorlib.DNTimeSpan;
    function get_DrainEntityBody: DDN.mscorlib.DNTimeSpan;
    function get_RequestQueue: DDN.mscorlib.DNTimeSpan;
    function get_IdleConnection: DDN.mscorlib.DNTimeSpan;
    function get_HeaderWait: DDN.mscorlib.DNTimeSpan;
    function get_MinSendBytesPerSecond: Int64;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取有关请求实体正文到达允许的时间，以秒为单位。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.TimeSpan" />
    ///  。
    ///  以秒为单位，允许请求实体主体，若要到达的时间。
    ///</returns>
    property EntityBody: DDN.mscorlib.DNTimeSpan read get_EntityBody;
    ///<summary>
    ///  获取的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" />
    ///  电量保持活动状态的连接上的实体正文。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.TimeSpan" />
    ///  。
    ///  允许的时间，以秒为单位， <see cref="T:System.Net.HttpListener" />
    ///  电量保持活动状态的连接上的实体正文。
    ///</returns>
    property DrainEntityBody: DDN.mscorlib.DNTimeSpan read get_DrainEntityBody;
    ///<summary>
    ///  获取允许请求在之前的请求队列中保留的时间，以秒为单位， <see cref="T:System.Net.HttpListener" />
    ///  提取它。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.TimeSpan" />
    ///  。
    ///  请求在之前的请求队列中保留的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" />
    ///  提取它。
    ///</returns>
    property RequestQueue: DDN.mscorlib.DNTimeSpan read get_RequestQueue;
    ///<summary>
    ///  获取的时间，以秒为单位，允许的空闲连接。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.TimeSpan" />
    ///  。
    ///  以秒为单位，允许的空闲连接时间。
    ///</returns>
    property IdleConnection: DDN.mscorlib.DNTimeSpan read get_IdleConnection;
    ///<summary>
    ///  获取的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" />
    ///  来分析请求标头。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.TimeSpan" />
    ///  。
    ///  允许的时间，以秒为单位， <see cref="T:System.Net.HttpListener" />
    ///  来分析请求标头。
    ///</returns>
    property HeaderWait: DDN.mscorlib.DNTimeSpan read get_HeaderWait;
    ///<summary>
    ///  获取响应中字节每秒的最小发送速率。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Int64" />
    ///  。
    ///  最小发送速率，单位为字节数 / 秒，响应。
    ///</returns>
    property MinSendBytesPerSecond: Int64 read get_MinSendBytesPerSecond;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpListenerTimeoutsElement = class(TDNGenericImport<DNHttpListenerTimeoutsElementClass, DNHttpListenerTimeoutsElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNHttpWebRequestElementClass = interface(DNObjectClass)
  ['{0A4F9C3B-4CAE-56A8-8EF6-C113D3D18666}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.HttpWebRequestElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNHttpWebRequestElement;

  end;

  ///<summary>
  ///  表示响应标头的最大长度。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.HttpWebRequestElement')]
  DNHttpWebRequestElement = interface(DNObject)
  ['{B76D34F2-2C99-350F-AABF-8B0E1D1496CA}']
  { getters & setters } 

    function get_MaximumUnauthorizedUploadLength: Int32;
    procedure set_MaximumUnauthorizedUploadLength(value: Int32);
    function get_MaximumErrorResponseLength: Int32;
    procedure set_MaximumErrorResponseLength(value: Int32);
    function get_MaximumResponseHeadersLength: Int32;
    procedure set_MaximumResponseHeadersLength(value: Int32);
    function get_UseUnsafeHeaderParsing: Boolean;
    procedure set_UseUnsafeHeaderParsing(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置响应未经授权的错误代码的上载的最大长度。
    ///</summary>
    ///<returns>
    ///  包含响应未经授权的错误代码的上载最大长度 （以 1024 字节为单位的倍数） 的 32 位有符号的整数。
    ///  值为-1 指示没有大小限制将施加上载。
    ///  设置 <see cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
    ///  属性设置为任何其他值就只会发送请求正文，如果小于指定的字节数。
    ///  因此如果值为 1 将指示仅发送了请求正文，如果小于 1024 字节。
    ///  此属性的默认值为-1。
    ///</returns>
    property MaximumUnauthorizedUploadLength: Int32 read get_MaximumUnauthorizedUploadLength write set_MaximumUnauthorizedUploadLength;
    ///<summary>
    ///  获取或设置错误响应的最大允许的长度。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数，它包含错误响应的最大长度以千字节为单位 （1024 字节为单位）。
    ///  默认值为 64。
    ///</returns>
    property MaximumErrorResponseLength: Int32 read get_MaximumErrorResponseLength write set_MaximumErrorResponseLength;
    ///<summary>
    ///  获取或设置响应标头允许的最大长度。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数，它包含响应标头的最大长度以千字节为单位 （1024 字节）。
    ///  默认值为 64。
    ///</returns>
    property MaximumResponseHeadersLength: Int32 read get_MaximumResponseHeadersLength write set_MaximumResponseHeadersLength;
    ///<summary>
    ///  将此属性设置将忽略在 HTTP 分析过程中发生的验证错误。
    ///</summary>
    ///<returns>
    ///  一个布尔值，该值指示是否已设置此属性。
    ///</returns>
    property UseUnsafeHeaderParsing: Boolean read get_UseUnsafeHeaderParsing write set_UseUnsafeHeaderParsing;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpWebRequestElement = class(TDNGenericImport<DNHttpWebRequestElementClass, DNHttpWebRequestElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNIpv6ElementClass = interface(DNObjectClass)
  ['{2FBCDBF5-247A-5C52-911B-76ABF86CFB95}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.Ipv6Element" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNIpv6Element;

  end;

  ///<summary>
  ///  确定是否在本地计算机上启用 Internet 协议版本 6。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.Ipv6Element')]
  DNIpv6Element = interface(DNObject)
  ['{55E84D89-EAFF-3582-BFFC-44655AF15BA9}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否在本地计算机上启用 Internet 协议版本 6。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了 IPv6;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIpv6Element = class(TDNGenericImport<DNIpv6ElementClass, DNIpv6Element>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNModuleElementClass = interface(DNObjectClass)
  ['{F6881870-A63E-5018-A2F3-921228DE149A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ModuleElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNModuleElement;

  end;

  ///<summary>
  ///  表示一个自定义的类型信息 <see cref="T:System.Net.IWebProxy" />
  ///  模块。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ModuleElement')]
  DNModuleElement = interface(DNObject)
  ['{CE566ABE-EC05-39DC-A4DB-F0437BBF7B97}']
  { getters & setters } 

    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置当前实例的类型和程序集信息。
    ///</summary>
    ///<returns>
    ///  一个字符串，标识的类型实现 <see cref="T:System.Net.IWebProxy" />
    ///  接口或 <see langword="null" />
    ///  如果不指定任何值。
    ///</returns>
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNModuleElement = class(TDNGenericImport<DNModuleElementClass, DNModuleElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNPerformanceCountersElementClass = interface(DNObjectClass)
  ['{D4EF93C9-5CE3-53A4-874E-77DE759240CC}']
  { constructors } 

    ///<summary>
    ///  实例化 <see cref="T:System.Net.Configuration.PerformanceCountersElement" />
    ///  对象。
    ///</summary>
    {class} function init: DNPerformanceCountersElement;

  end;

  ///<summary>
  ///  表示 <see langword="System.Net" />
  ///  配置文件中的性能计数器元素，该元素确定是否启用网络性能计数器。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.PerformanceCountersElement')]
  DNPerformanceCountersElement = interface(DNObject)
  ['{6F07726D-E3BB-3941-B17E-F2B18764DD48}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置是否启用性能计数器。
    ///</summary>
    ///<returns>
    ///  如果启用性能计数器，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPerformanceCountersElement = class(TDNGenericImport<DNPerformanceCountersElementClass, DNPerformanceCountersElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNProxyElementClass = interface(DNObjectClass)
  ['{B703D76A-F1FF-5BB2-A74C-765C4D608738}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ProxyElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNProxyElement;

  end;

  ///<summary>
  ///  标识 Web 代理服务器的配置设置。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ProxyElement')]
  DNProxyElement = interface(DNObject)
  ['{60CD2A81-F59A-3913-9ABE-9F2C9552AB7E}']
  { getters & setters } 

    function get_AutoDetect: DNProxyElement_AutoDetectValues;
    procedure set_AutoDetect(value: DNProxyElement_AutoDetectValues);
    function get_ScriptLocation: DNUri;
    procedure set_ScriptLocation(value: DNUri);
    function get_BypassOnLocal: DNProxyElement_BypassOnLocalValues;
    procedure set_BypassOnLocal(value: DNProxyElement_BypassOnLocalValues);
    function get_ProxyAddress: DNUri;
    procedure set_ProxyAddress(value: DNUri);
    function get_UseSystemDefault: DNProxyElement_UseSystemDefaultValues;
    procedure set_UseSystemDefault(value: DNProxyElement_UseSystemDefaultValues);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Net.Configuration.ProxyElement.AutoDetectValues" />
    ///  值，该值控制是否自动检测 Web 代理。
    ///</summary>
    ///<returns><see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.True" />
    ///  如果 <see cref="T:System.Net.WebProxy" />
    ///  自动检测到; <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.False" />
    ///  如果 <see cref="T:System.Net.WebProxy" />
    ///  未自动检测; 或 <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.Unspecified" />
    ///  。
    ///</returns>
    property AutoDetect: DNProxyElement_AutoDetectValues read get_AutoDetect write set_AutoDetect;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Uri" />
    ///  值，该值指定自动代理检测脚本的位置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Uri" />
    ///  指定自动代理检测脚本的位置。
    ///</returns>
    property ScriptLocation: DNUri read get_ScriptLocation write set_ScriptLocation;
    ///<summary>
    ///  获取或设置一个值，该值指示是否通过使用 Web 代理服务器来检索本地资源。
    ///</summary>
    ///<returns><see cref="T:System.Net.Configuration.ProxyElement.BypassOnLocalValues" />
    ///  。
    ///  Avalue，该值指示是否通过使用 Web 代理服务器来检索本地资源。
    ///</returns>
    property BypassOnLocal: DNProxyElement_BypassOnLocalValues read get_BypassOnLocal write set_BypassOnLocal;
    ///<summary>
    ///  获取或设置用于标识要使用的 Web 代理服务器的 URI。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含一个 URI。
    ///</returns>
    property ProxyAddress: DNUri read get_ProxyAddress write set_ProxyAddress;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Boolean" />
    ///  值，该值控制是否将使用的 Internet Explorer Web 代理服务器设置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 Internet 资源管理器 LAN 设置用于检测和配置默认 <see cref="T:System.Net.WebProxy" />
    ///  用于请求; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property UseSystemDefault: DNProxyElement_UseSystemDefaultValues read get_UseSystemDefault write set_UseSystemDefault;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProxyElement = class(TDNGenericImport<DNProxyElementClass, DNProxyElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNServicePointManagerElementClass = interface(DNObjectClass)
  ['{AB217019-D966-513E-9104-95621A941A0E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.ServicePointManagerElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServicePointManagerElement;

  end;

  ///<summary>
  ///  表示用来创建连接到远程计算机的默认设置。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.ServicePointManagerElement')]
  DNServicePointManagerElement = interface(DNObject)
  ['{911E4C94-0A48-3E3D-A142-0D41BCAEA9AF}']
  { getters & setters } 

    function get_CheckCertificateName: Boolean;
    procedure set_CheckCertificateName(value: Boolean);
    function get_CheckCertificateRevocationList: Boolean;
    procedure set_CheckCertificateRevocationList(value: Boolean);
    function get_DnsRefreshTimeout: Int32;
    procedure set_DnsRefreshTimeout(value: Int32);
    function get_EnableDnsRoundRobin: Boolean;
    procedure set_EnableDnsRoundRobin(value: Boolean);
    function get_EncryptionPolicy: DNEncryptionPolicy;
    procedure set_EncryptionPolicy(value: DNEncryptionPolicy);
    function get_Expect100Continue: Boolean;
    procedure set_Expect100Continue(value: Boolean);
    function get_UseNagleAlgorithm: Boolean;
    procedure set_UseNagleAlgorithm(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个布尔值，控制检查主机名信息在 X509 证书。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要指定主机名称检查;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CheckCertificateName: Boolean read get_CheckCertificateName write set_CheckCertificateName;
    ///<summary>
    ///  获取或设置一个布尔值，该值指示是否根据证书颁发机构的吊销列表检查证书。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果检查证书吊销列表;否则为 <see langword="false" />
    ///  。默认值是 <see langword="false" />
    ///  。
    ///</returns>
    property CheckCertificateRevocationList: Boolean read get_CheckCertificateRevocationList write set_CheckCertificateRevocationList;
    ///<summary>
    ///  获取或设置刷新地址信息的时间量。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  ，它指定当使用 DNS 解析地址。
    ///</returns>
    property DnsRefreshTimeout: Int32 read get_DnsRefreshTimeout write set_DnsRefreshTimeout;
    ///<summary>
    ///  获取或设置一个布尔值，用于控制连接到同一服务器上使用不同的 IP 地址。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要启用 DNS 轮循机制行为;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableDnsRoundRobin: Boolean read get_EnableDnsRoundRobin write set_EnableDnsRoundRobin;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Net.Security.EncryptionPolicy" />
    ///  使用。
    ///</summary>
    ///<returns>
    ///  要用于加密策略 <see cref="T:System.Net.ServicePointManager" />
    ///  实例。
    ///</returns>
    property EncryptionPolicy: DNEncryptionPolicy read get_EncryptionPolicy write set_EncryptionPolicy;
    ///<summary>
    ///  获取或设置一个布尔值，确定是否 100-使用 100-continue 行为。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="POST" />
    ///  请求需要 100-Continue 响应，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Expect100Continue: Boolean read get_Expect100Continue write set_Expect100Continue;
    ///<summary>
    ///  获取或设置一个布尔值，确定是否使用 Nagle 算法。
    ///</summary>
    ///<returns>
    ///  如果使用 Nagle 算法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property UseNagleAlgorithm: Boolean read get_UseNagleAlgorithm write set_UseNagleAlgorithm;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNServicePointManagerElement = class(TDNGenericImport<DNServicePointManagerElementClass, DNServicePointManagerElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSmtpNetworkElementClass = interface(DNObjectClass)
  ['{0807B926-2135-57BB-A642-8B7364942BFC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.SmtpNetworkElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSmtpNetworkElement;

  end;

  ///<summary>
  ///  表示在 SMTP 配置文件中的网络元素。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.SmtpNetworkElement')]
  DNSmtpNetworkElement = interface(DNObject)
  ['{59BC81E4-67F2-34DC-BC83-B1A3D657C1A7}']
  { getters & setters } 

    function get_DefaultCredentials: Boolean;
    procedure set_DefaultCredentials(value: Boolean);
    function get_Host: string;
    procedure set_Host(value: string);
    function get_TargetName: string;
    procedure set_TargetName(value: string);
    function get_ClientDomain: string;
    procedure set_ClientDomain(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Port: Int32;
    procedure set_Port(value: Int32);
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_EnableSsl: Boolean;
    procedure set_EnableSsl(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  确定使用默认用户凭据来访问 SMTP 服务器。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示该默认用户凭据将用于访问 SMTP 服务器;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property DefaultCredentials: Boolean read get_DefaultCredentials write set_DefaultCredentials;
    ///<summary>
    ///  获取或设置 SMTP 服务器的名称。
    ///</summary>
    ///<returns>
    ///  一个表示要连接到 SMTP 服务器的名称的字符串。
    ///</returns>
    property Host: string read get_Host write set_Host;
    ///<summary>
    ///  获取或设置服务提供程序名称 (SPN) 时要使用的身份验证扩展的保护用于连接到 SMTP 邮件服务器。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示要用于身份验证时使用扩展的保护连接到 SMTP 邮件服务器的 SPN。
    ///</returns>
    property TargetName: string read get_TargetName write set_TargetName;
    ///<summary>
    ///  获取或设置初始 SMTP 协议请求中用于连接到 SMTP 邮件服务器的客户端域名。
    ///</summary>
    ///<returns>
    ///  一个表示初始 SMTP 协议请求中用于连接到 SMTP 邮件服务器的客户端域名的字符串。
    ///</returns>
    property ClientDomain: string read get_ClientDomain write set_ClientDomain;
    ///<summary>
    ///  获取或设置要用于连接到 SMTP 邮件服务器的用户密码。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示要用于连接到 SMTP 邮件服务器的密码。
    ///</returns>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  获取或设置 SMTP 客户端用于连接到 SMTP 邮件服务器的端口。
    ///  默认值为 25。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示要连接到 SMTP 邮件服务器的端口。
    ///</returns>
    property Port: Int32 read get_Port write set_Port;
    ///<summary>
    ///  获取或设置要连接到 SMTP 邮件服务器的用户名。
    ///</summary>
    ///<returns>
    ///  表示要连接到 SMTP 邮件服务器的用户名的字符串。
    ///</returns>
    property UserName: string read get_UserName write set_UserName;
    ///<summary>
    ///  获取或设置是否使用 SSL 来访问 SMTP 邮件服务器。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  指示将使用 SSL 来访问 SMTP 邮件服务器;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableSsl: Boolean read get_EnableSsl write set_EnableSsl;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSmtpNetworkElement = class(TDNGenericImport<DNSmtpNetworkElementClass, DNSmtpNetworkElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSmtpSpecifiedPickupDirectoryElementClass = interface(DNObjectClass)
  ['{B55E1ECF-529F-54F9-87D2-F68EC5789CFC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSmtpSpecifiedPickupDirectoryElement;

  end;

  ///<summary>
  ///  表示 SMTP 拾取目录配置元素。
  ///</summary>
  [DNTypeName('System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement')]
  DNSmtpSpecifiedPickupDirectoryElement = interface(DNObject)
  ['{C667E362-A200-362F-8FD6-E313B9693277}']
  { getters & setters } 

    function get_PickupDirectoryLocation: string;
    procedure set_PickupDirectoryLocation(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置应用程序在其中保存邮件以供 SMTP 服务器处理的文件夹。
    ///</summary>
    ///<returns>
    ///  一个字符串，指定为电子邮件的拾取目录。
    ///</returns>
    property PickupDirectoryLocation: string read get_PickupDirectoryLocation write set_PickupDirectoryLocation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSmtpSpecifiedPickupDirectoryElement = class(TDNGenericImport<DNSmtpSpecifiedPickupDirectoryElementClass, DNSmtpSpecifiedPickupDirectoryElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNSocketElementClass = interface(DNObjectClass)
  ['{7FD51C9A-2691-5602-92F8-EB41959DC853}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.SocketElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSocketElement;

  end;

  ///<summary>
  ///  表示用于配置信息 <see cref="T:System.Net.Sockets.Socket" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.SocketElement')]
  DNSocketElement = interface(DNObject)
  ['{ABBF8192-167B-3ADD-B48D-5367283B76FE}']
  { getters & setters } 

    function get_AlwaysUseCompletionPortsForAccept: Boolean;
    procedure set_AlwaysUseCompletionPortsForAccept(value: Boolean);
    function get_AlwaysUseCompletionPortsForConnect: Boolean;
    procedure set_AlwaysUseCompletionPortsForConnect(value: Boolean);
    function get_IPProtectionLevel: DNIPProtectionLevel;
    procedure set_IPProtectionLevel(value: DNIPProtectionLevel);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个布尔值，指定在接受连接时是否使用完成端口。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要使用自动补全端口;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AlwaysUseCompletionPortsForAccept: Boolean read get_AlwaysUseCompletionPortsForAccept write set_AlwaysUseCompletionPortsForAccept;
    ///<summary>
    ///  获取或设置一个布尔值，指定在建立连接时是否使用完成端口。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要使用自动补全端口;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AlwaysUseCompletionPortsForConnect: Boolean read get_AlwaysUseCompletionPortsForConnect write set_AlwaysUseCompletionPortsForConnect;
    ///<summary>
    ///  获取或设置一个值，指定的默认 <see cref="T:System.Net.Sockets.IPProtectionLevel" />
    ///  用于套接字。
    ///</summary>
    ///<returns>
    ///  值 <see cref="T:System.Net.Sockets.IPProtectionLevel" />
    ///  的当前实例。
    ///</returns>
    property IPProtectionLevel: DNIPProtectionLevel read get_IPProtectionLevel write set_IPProtectionLevel;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSocketElement = class(TDNGenericImport<DNSocketElementClass, DNSocketElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebProxyScriptElementClass = interface(DNObjectClass)
  ['{BF22DBF0-B21C-51B1-890E-B007D10B9859}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.WebProxyScriptElement" />
    ///  类的实例。
    ///</summary>
    {class} function init: DNWebProxyScriptElement;

  end;

  ///<summary>
  ///  表示用于配置 Web 代理脚本的信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.WebProxyScriptElement')]
  DNWebProxyScriptElement = interface(DNObject)
  ['{4B0C914B-BA8B-34EE-9F99-C7AD97E4D65C}']
  { getters & setters } 

    function get_AutoConfigUrlRetryInterval: Int32;
    procedure set_AutoConfigUrlRetryInterval(value: Int32);
    function get_DownloadTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_DownloadTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoConfigUrlRetryInterval: Int32 read get_AutoConfigUrlRetryInterval write set_AutoConfigUrlRetryInterval;
    ///<summary>
    ///  获取或设置 Web 代理使用格式小时︰ 分钟︰ 秒的脚本下载超时。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  对象，其中包含的超时值。
    ///  默认的下载超时为一分钟。
    ///</returns>
    property DownloadTimeout: DDN.mscorlib.DNTimeSpan read get_DownloadTimeout write set_DownloadTimeout;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebProxyScriptElement = class(TDNGenericImport<DNWebProxyScriptElementClass, DNWebProxyScriptElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebRequestModuleElementClass = interface(DNObjectClass)
  ['{BDB1519E-A21B-5BE9-83CD-6CEC2FFBFBDB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebRequestModuleElement; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  类使用指定的 URI 前缀和类型信息。
    ///</summary>
    ///  <param name="prefix">
    ///  包含的 URI 前缀的字符串。
    ///</param>
    ///  <param name="type">
    ///  用于处理创建的类使用的资源的请求包含的类型和程序集信息的字符串 <paramref name="prefix" />
    ///  URI 前缀。
    ///  有关详细信息，请参阅“备注”部分。
    ///</param>
    {class} function init(prefix: string; &type: string): DNWebRequestModuleElement; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />
    ///  类使用指定的 URI 前缀和类型标识符。
    ///</summary>
    ///  <param name="prefix">
    ///  包含的 URI 前缀的字符串。
    ///</param>
    ///  <param name="type">
    ///  一个 <see cref="T:System.Type" />
    ///  ，它标识处理对资源的创建请求的类使用 <paramref name="prefix" />
    ///  URI 前缀。
    ///</param>
    {class} function init(prefix: string; &type: DDN.mscorlib.DNType): DNWebRequestModuleElement; overload;

  end;

  ///<summary>
  ///  表示 URI 前缀和关联的类用于处理创建 Web 请求的前缀。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.WebRequestModuleElement')]
  DNWebRequestModuleElement = interface(DNObject)
  ['{4640AA20-9DD7-3EE1-A78A-8E1EBED6AFFF}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置当前的 Web 请求模块的 URI 前缀。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的 URI 前缀。
    ///</returns>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置创建 Web 请求的类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  标识 Web 请求模块的实例。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebRequestModuleElement = class(TDNGenericImport<DNWebRequestModuleElementClass, DNWebRequestModuleElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWebUtilityElementClass = interface(DNObjectClass)
  ['{B17EA15C-E192-5701-AB47-8DF36D0F6409}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.WebUtilityElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebUtilityElement;

  end;

  ///<summary>
  ///  表示配置文件中的 WebUtility 元素。
  ///</summary>
  [DNTypeName('System.Net.Configuration.WebUtilityElement')]
  DNWebUtilityElement = interface(DNObject)
  ['{304AEA87-1B21-3EC5-A477-7CDF6639CA49}']
  { getters & setters } 

    function get_UnicodeDecodingConformance: DNUnicodeDecodingConformance;
    procedure set_UnicodeDecodingConformance(value: DNUnicodeDecodingConformance);
    function get_UnicodeEncodingConformance: DNUnicodeEncodingConformance;
    procedure set_UnicodeEncodingConformance(value: DNUnicodeEncodingConformance);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取默认 Unicode 解码一致性行为用于 <see cref="T:System.Net.WebUtility" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Net.Configuration.UnicodeDecodingConformance" />
    ///  。
    ///  默认的 Unicode 解码行为。
    ///</returns>
    property UnicodeDecodingConformance: DNUnicodeDecodingConformance read get_UnicodeDecodingConformance write set_UnicodeDecodingConformance;
    ///<summary>
    ///  获取默认 Unicode 编码一致性行为用于 <see cref="T:System.Net.WebUtility" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Net.Configuration.UnicodeEncodingConformance" />
    ///  。
    ///  默认的 Unicode 编码行为。
    ///</returns>
    property UnicodeEncodingConformance: DNUnicodeEncodingConformance read get_UnicodeEncodingConformance write set_UnicodeEncodingConformance;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebUtilityElement = class(TDNGenericImport<DNWebUtilityElementClass, DNWebUtilityElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNWindowsAuthenticationElementClass = interface(DNObjectClass)
  ['{05DAC69E-3CD7-521E-A2C2-D55E1C0EEB2F}']
  { constructors } 

    {class} function init: DNWindowsAuthenticationElement;

  end;

  [DNTypeName('System.Net.Configuration.WindowsAuthenticationElement')]
  DNWindowsAuthenticationElement = interface(DNObject)
  ['{F6155DD5-9EA5-361F-9C44-51C694A7F38A}']
  { getters & setters } 

    function get_DefaultCredentialsHandleCacheSize: Int32;
    procedure set_DefaultCredentialsHandleCacheSize(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultCredentialsHandleCacheSize: Int32 read get_DefaultCredentialsHandleCacheSize write set_DefaultCredentialsHandleCacheSize;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWindowsAuthenticationElement = class(TDNGenericImport<DNWindowsAuthenticationElementClass, DNWindowsAuthenticationElement>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNMailSettingsSectionGroupClass = interface(DNObjectClass)
  ['{287FD533-204E-5E25-A4B6-5DE60C3E1D98}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMailSettingsSectionGroup;

  end;

  ///<summary>
  ///  初始化 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" />
  ///  类的新实例。
  ///</summary>
  [DNTypeName('System.Net.Configuration.MailSettingsSectionGroup')]
  DNMailSettingsSectionGroup = interface(DNObject)
  ['{1B183768-EEB4-3060-8BFE-E0FFDBFD8FE9}']
  { getters & setters } 

    function get_Smtp: DNSmtpSection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取本地计算机的 SMTP 设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.SmtpSection" />
    ///  对象，其中包含本地计算机的配置信息。
    ///</returns>
    property Smtp: DNSmtpSection read get_Smtp;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNMailSettingsSectionGroup = class(TDNGenericImport<DNMailSettingsSectionGroupClass, DNMailSettingsSectionGroup>) end;

  //-------------namespace: System.Net.Configuration----------------
  DNNetSectionGroupClass = interface(DNObjectClass)
  ['{FBB9DBF5-CA3A-5041-A444-3941EADFFD2E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Net.Configuration.NetSectionGroup" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNetSectionGroup;

  { static methods } 

    ///<summary>
    ///  从指定的配置文件中获取 <see langword="System.Net" />
    ///  配置节组。
    ///</summary>
    ///  <param name="config">
    ///  一个表示配置文件的 <see cref="T:System.Configuration.Configuration" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.NetSectionGroup" />
    ///  表示 <see langword="System.Net" />
    ///  中的设置 <paramref name="config" />
    ///  。
    ///</returns>
    {class} function GetSectionGroup(config: DDN.System.Configuration.DNConfiguration): DNNetSectionGroup;

  end;

  ///<summary>
  ///  获取网络的命名空间的节组信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Net.Configuration.NetSectionGroup')]
  DNNetSectionGroup = interface(DNObject)
  ['{494C85DF-5186-3ADB-986B-0C722FF3C77E}']
  { getters & setters } 

    function get_AuthenticationModules: DNAuthenticationModulesSection;
    function get_ConnectionManagement: DNConnectionManagementSection;
    function get_DefaultProxy: DNDefaultProxySection;
    function get_MailSettings: DNMailSettingsSectionGroup;
    function get_RequestCaching: DNRequestCachingSection;
    function get_Settings: DNSettingsSection;
    function get_WebRequestModules: DNWebRequestModulesSection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取包含为本地计算机注册的身份验证模块的配置节。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.AuthenticationModulesSection" />
    ///  对象。
    ///</returns>
    property AuthenticationModules: DNAuthenticationModulesSection read get_AuthenticationModules;
    ///<summary>
    ///  获取包含在本地计算机的连接管理设置的配置节。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.ConnectionManagementSection" />
    ///  对象。
    ///</returns>
    property ConnectionManagement: DNConnectionManagementSection read get_ConnectionManagement;
    ///<summary>
    ///  获取包含在本地计算机的默认 Web 代理服务器设置的配置节。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.DefaultProxySection" />
    ///  对象。
    ///</returns>
    property DefaultProxy: DNDefaultProxySection read get_DefaultProxy;
    ///<summary>
    ///  获取包含 SMTP 客户端在本地计算机上的电子邮件设置的配置节。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" />
    ///  对象。
    ///</returns>
    property MailSettings: DNMailSettingsSectionGroup read get_MailSettings;
    ///<summary>
    ///  获取包含在本地计算机的缓存配置设置的配置节。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.RequestCachingSection" />
    ///  对象。
    ///</returns>
    property RequestCaching: DNRequestCachingSection read get_RequestCaching;
    ///<summary>
    ///  获取包含在本地计算机的网络设置的配置节。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.SettingsSection" />
    ///  对象。
    ///</returns>
    property Settings: DNSettingsSection read get_Settings;
    ///<summary>
    ///  获取包含注册为与使用的模块的配置节 <see cref="T:System.Net.WebRequest" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Net.Configuration.WebRequestModulesSection" />
    ///  对象。
    ///</returns>
    property WebRequestModules: DNWebRequestModulesSection read get_WebRequestModules;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNNetSectionGroup = class(TDNGenericImport<DNNetSectionGroupClass, DNNetSectionGroup>) end;


implementation

end.
